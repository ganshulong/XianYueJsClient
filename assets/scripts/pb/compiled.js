/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/
"use strict";

var $protobuf = require("protobufjs");

// Common aliases
var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;

// Exported root namespace
var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

$root.messages = (function() {

    /**
     * Namespace messages.
     * @exports messages
     * @namespace
     */
    var messages = {};

    /**
     * DeviceType enum.
     * @name messages.DeviceType
     * @enum {string}
     * @property {number} DEVICE_IPHONE=1 DEVICE_IPHONE value
     * @property {number} DEVICE_IPAD=2 DEVICE_IPAD value
     * @property {number} DEVICE_ANDROID_PHONE=3 DEVICE_ANDROID_PHONE value
     * @property {number} DEVICE_ANDROID_PAD=4 DEVICE_ANDROID_PAD value
     * @property {number} DEVICE_WIN_PHONE=5 DEVICE_WIN_PHONE value
     * @property {number} DEVICE_WIN_PC=6 DEVICE_WIN_PC value
     * @property {number} DEVICE_WIN_PAD=7 DEVICE_WIN_PAD value
     * @property {number} DEVICE_OTHER=99 DEVICE_OTHER value
     */
    messages.DeviceType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "DEVICE_IPHONE"] = 1;
        values[valuesById[2] = "DEVICE_IPAD"] = 2;
        values[valuesById[3] = "DEVICE_ANDROID_PHONE"] = 3;
        values[valuesById[4] = "DEVICE_ANDROID_PAD"] = 4;
        values[valuesById[5] = "DEVICE_WIN_PHONE"] = 5;
        values[valuesById[6] = "DEVICE_WIN_PC"] = 6;
        values[valuesById[7] = "DEVICE_WIN_PAD"] = 7;
        values[valuesById[99] = "DEVICE_OTHER"] = 99;
        return values;
    })();

    /**
     * MarketType enum.
     * @name messages.MarketType
     * @enum {string}
     * @property {number} MARKET_APPLE_STORE=100 MARKET_APPLE_STORE value
     * @property {number} MARKET_APPLE_ENTERPRISE=200 MARKET_APPLE_ENTERPRISE value
     * @property {number} MARKET_ANDROID_PHONE=300 MARKET_ANDROID_PHONE value
     * @property {number} MARKET_ANDROID_PHONE_TENCET=301 MARKET_ANDROID_PHONE_TENCET value
     * @property {number} MARKET_ANDROID_PHONE_360=302 MARKET_ANDROID_PHONE_360 value
     * @property {number} MARKET_ANDROID_PHONE_BAIDU=303 MARKET_ANDROID_PHONE_BAIDU value
     * @property {number} MARKET_ANDROID_PHONE_91=304 MARKET_ANDROID_PHONE_91 value
     * @property {number} MARKET_ANDROID_PAD=400 MARKET_ANDROID_PAD value
     * @property {number} MARKET_WIN_PHONE=500 MARKET_WIN_PHONE value
     * @property {number} MARKET_WIN_PC=600 MARKET_WIN_PC value
     * @property {number} MARKET_WIN_PAD=700 MARKET_WIN_PAD value
     * @property {number} MARKET_OTHER=9900 MARKET_OTHER value
     */
    messages.MarketType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[100] = "MARKET_APPLE_STORE"] = 100;
        values[valuesById[200] = "MARKET_APPLE_ENTERPRISE"] = 200;
        values[valuesById[300] = "MARKET_ANDROID_PHONE"] = 300;
        values[valuesById[301] = "MARKET_ANDROID_PHONE_TENCET"] = 301;
        values[valuesById[302] = "MARKET_ANDROID_PHONE_360"] = 302;
        values[valuesById[303] = "MARKET_ANDROID_PHONE_BAIDU"] = 303;
        values[valuesById[304] = "MARKET_ANDROID_PHONE_91"] = 304;
        values[valuesById[400] = "MARKET_ANDROID_PAD"] = 400;
        values[valuesById[500] = "MARKET_WIN_PHONE"] = 500;
        values[valuesById[600] = "MARKET_WIN_PC"] = 600;
        values[valuesById[700] = "MARKET_WIN_PAD"] = 700;
        values[valuesById[9900] = "MARKET_OTHER"] = 9900;
        return values;
    })();

    /**
     * UserState enum.
     * @name messages.UserState
     * @enum {string}
     * @property {number} USER_NONE=0 USER_NONE value
     * @property {number} USER_IDLE=1 USER_IDLE value
     * @property {number} USER_SEAT_HOLD=2 USER_SEAT_HOLD value
     * @property {number} USER_SIT=3 USER_SIT value
     * @property {number} USER_READY=4 USER_READY value
     * @property {number} USER_WATCH=5 USER_WATCH value
     * @property {number} USER_OFFLINE=20 USER_OFFLINE value
     * @property {number} USER_PLAY=21 USER_PLAY value
     */
    messages.UserState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "USER_NONE"] = 0;
        values[valuesById[1] = "USER_IDLE"] = 1;
        values[valuesById[2] = "USER_SEAT_HOLD"] = 2;
        values[valuesById[3] = "USER_SIT"] = 3;
        values[valuesById[4] = "USER_READY"] = 4;
        values[valuesById[5] = "USER_WATCH"] = 5;
        values[valuesById[20] = "USER_OFFLINE"] = 20;
        values[valuesById[21] = "USER_PLAY"] = 21;
        return values;
    })();

    /**
     * DeskState enum.
     * @name messages.DeskState
     * @enum {string}
     * @property {number} DESK_EMPTY=1 DESK_EMPTY value
     * @property {number} DESK_IDLE=2 DESK_IDLE value
     * @property {number} DESK_FULL=3 DESK_FULL value
     * @property {number} DESK_PALY=4 DESK_PALY value
     */
    messages.DeskState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "DESK_EMPTY"] = 1;
        values[valuesById[2] = "DESK_IDLE"] = 2;
        values[valuesById[3] = "DESK_FULL"] = 3;
        values[valuesById[4] = "DESK_PALY"] = 4;
        return values;
    })();

    messages.SocketContext = (function() {

        /**
         * Properties of a SocketContext.
         * @memberof messages
         * @interface ISocketContext
         * @property {number|null} [connectsrvId] SocketContext connectsrvId
         * @property {Uint8Array|null} [clientIp] SocketContext clientIp
         * @property {Uint8Array|null} [sessionId] SocketContext sessionId
         * @property {number|Long|null} [clientRequestTime] SocketContext clientRequestTime
         * @property {number|Long|null} [serverRequestTime] SocketContext serverRequestTime
         */

        /**
         * Constructs a new SocketContext.
         * @memberof messages
         * @classdesc Represents a SocketContext.
         * @implements ISocketContext
         * @constructor
         * @param {messages.ISocketContext=} [properties] Properties to set
         */
        function SocketContext(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * SocketContext connectsrvId.
         * @member {number} connectsrvId
         * @memberof messages.SocketContext
         * @instance
         */
        SocketContext.prototype.connectsrvId = 0;

        /**
         * SocketContext clientIp.
         * @member {Uint8Array} clientIp
         * @memberof messages.SocketContext
         * @instance
         */
        SocketContext.prototype.clientIp = $util.newBuffer([]);

        /**
         * SocketContext sessionId.
         * @member {Uint8Array} sessionId
         * @memberof messages.SocketContext
         * @instance
         */
        SocketContext.prototype.sessionId = $util.newBuffer([]);

        /**
         * SocketContext clientRequestTime.
         * @member {number|Long} clientRequestTime
         * @memberof messages.SocketContext
         * @instance
         */
        SocketContext.prototype.clientRequestTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * SocketContext serverRequestTime.
         * @member {number|Long} serverRequestTime
         * @memberof messages.SocketContext
         * @instance
         */
        SocketContext.prototype.serverRequestTime = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new SocketContext instance using the specified properties.
         * @function create
         * @memberof messages.SocketContext
         * @static
         * @param {messages.ISocketContext=} [properties] Properties to set
         * @returns {messages.SocketContext} SocketContext instance
         */
        SocketContext.create = function create(properties) {
            return new SocketContext(properties);
        };

        /**
         * Encodes the specified SocketContext message. Does not implicitly {@link messages.SocketContext.verify|verify} messages.
         * @function encode
         * @memberof messages.SocketContext
         * @static
         * @param {messages.ISocketContext} message SocketContext message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SocketContext.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.connectsrvId);
            if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.clientIp);
            if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sessionId);
            if (message.clientRequestTime != null && message.hasOwnProperty("clientRequestTime"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.clientRequestTime);
            if (message.serverRequestTime != null && message.hasOwnProperty("serverRequestTime"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.serverRequestTime);
            return writer;
        };

        /**
         * Encodes the specified SocketContext message, length delimited. Does not implicitly {@link messages.SocketContext.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.SocketContext
         * @static
         * @param {messages.ISocketContext} message SocketContext message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        SocketContext.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a SocketContext message from the specified reader or buffer.
         * @function decode
         * @memberof messages.SocketContext
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.SocketContext} SocketContext
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SocketContext.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.SocketContext();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.connectsrvId = reader.int32();
                    break;
                case 3:
                    message.clientIp = reader.bytes();
                    break;
                case 4:
                    message.sessionId = reader.bytes();
                    break;
                case 5:
                    message.clientRequestTime = reader.int64();
                    break;
                case 6:
                    message.serverRequestTime = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a SocketContext message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.SocketContext
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.SocketContext} SocketContext
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        SocketContext.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a SocketContext message.
         * @function verify
         * @memberof messages.SocketContext
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        SocketContext.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                if (!$util.isInteger(message.connectsrvId))
                    return "connectsrvId: integer expected";
            if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                if (!(message.clientIp && typeof message.clientIp.length === "number" || $util.isString(message.clientIp)))
                    return "clientIp: buffer expected";
            if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                if (!(message.sessionId && typeof message.sessionId.length === "number" || $util.isString(message.sessionId)))
                    return "sessionId: buffer expected";
            if (message.clientRequestTime != null && message.hasOwnProperty("clientRequestTime"))
                if (!$util.isInteger(message.clientRequestTime) && !(message.clientRequestTime && $util.isInteger(message.clientRequestTime.low) && $util.isInteger(message.clientRequestTime.high)))
                    return "clientRequestTime: integer|Long expected";
            if (message.serverRequestTime != null && message.hasOwnProperty("serverRequestTime"))
                if (!$util.isInteger(message.serverRequestTime) && !(message.serverRequestTime && $util.isInteger(message.serverRequestTime.low) && $util.isInteger(message.serverRequestTime.high)))
                    return "serverRequestTime: integer|Long expected";
            return null;
        };

        /**
         * Creates a SocketContext message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.SocketContext
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.SocketContext} SocketContext
         */
        SocketContext.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.SocketContext)
                return object;
            var message = new $root.messages.SocketContext();
            if (object.connectsrvId != null)
                message.connectsrvId = object.connectsrvId | 0;
            if (object.clientIp != null)
                if (typeof object.clientIp === "string")
                    $util.base64.decode(object.clientIp, message.clientIp = $util.newBuffer($util.base64.length(object.clientIp)), 0);
                else if (object.clientIp.length)
                    message.clientIp = object.clientIp;
            if (object.sessionId != null)
                if (typeof object.sessionId === "string")
                    $util.base64.decode(object.sessionId, message.sessionId = $util.newBuffer($util.base64.length(object.sessionId)), 0);
                else if (object.sessionId.length)
                    message.sessionId = object.sessionId;
            if (object.clientRequestTime != null)
                if ($util.Long)
                    (message.clientRequestTime = $util.Long.fromValue(object.clientRequestTime)).unsigned = false;
                else if (typeof object.clientRequestTime === "string")
                    message.clientRequestTime = parseInt(object.clientRequestTime, 10);
                else if (typeof object.clientRequestTime === "number")
                    message.clientRequestTime = object.clientRequestTime;
                else if (typeof object.clientRequestTime === "object")
                    message.clientRequestTime = new $util.LongBits(object.clientRequestTime.low >>> 0, object.clientRequestTime.high >>> 0).toNumber();
            if (object.serverRequestTime != null)
                if ($util.Long)
                    (message.serverRequestTime = $util.Long.fromValue(object.serverRequestTime)).unsigned = false;
                else if (typeof object.serverRequestTime === "string")
                    message.serverRequestTime = parseInt(object.serverRequestTime, 10);
                else if (typeof object.serverRequestTime === "number")
                    message.serverRequestTime = object.serverRequestTime;
                else if (typeof object.serverRequestTime === "object")
                    message.serverRequestTime = new $util.LongBits(object.serverRequestTime.low >>> 0, object.serverRequestTime.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a SocketContext message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.SocketContext
         * @static
         * @param {messages.SocketContext} message SocketContext
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        SocketContext.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.connectsrvId = 0;
                object.clientIp = options.bytes === String ? "" : [];
                object.sessionId = options.bytes === String ? "" : [];
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.clientRequestTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.clientRequestTime = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.serverRequestTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.serverRequestTime = options.longs === String ? "0" : 0;
            }
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                object.connectsrvId = message.connectsrvId;
            if (message.clientIp != null && message.hasOwnProperty("clientIp"))
                object.clientIp = options.bytes === String ? $util.base64.encode(message.clientIp, 0, message.clientIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientIp) : message.clientIp;
            if (message.sessionId != null && message.hasOwnProperty("sessionId"))
                object.sessionId = options.bytes === String ? $util.base64.encode(message.sessionId, 0, message.sessionId.length) : options.bytes === Array ? Array.prototype.slice.call(message.sessionId) : message.sessionId;
            if (message.clientRequestTime != null && message.hasOwnProperty("clientRequestTime"))
                if (typeof message.clientRequestTime === "number")
                    object.clientRequestTime = options.longs === String ? String(message.clientRequestTime) : message.clientRequestTime;
                else
                    object.clientRequestTime = options.longs === String ? $util.Long.prototype.toString.call(message.clientRequestTime) : options.longs === Number ? new $util.LongBits(message.clientRequestTime.low >>> 0, message.clientRequestTime.high >>> 0).toNumber() : message.clientRequestTime;
            if (message.serverRequestTime != null && message.hasOwnProperty("serverRequestTime"))
                if (typeof message.serverRequestTime === "number")
                    object.serverRequestTime = options.longs === String ? String(message.serverRequestTime) : message.serverRequestTime;
                else
                    object.serverRequestTime = options.longs === String ? $util.Long.prototype.toString.call(message.serverRequestTime) : options.longs === Number ? new $util.LongBits(message.serverRequestTime.low >>> 0, message.serverRequestTime.high >>> 0).toNumber() : message.serverRequestTime;
            return object;
        };

        /**
         * Converts this SocketContext to JSON.
         * @function toJSON
         * @memberof messages.SocketContext
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        SocketContext.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return SocketContext;
    })();

    messages.ProHallVersionVerifyRequest = (function() {

        /**
         * Properties of a ProHallVersionVerifyRequest.
         * @memberof messages
         * @interface IProHallVersionVerifyRequest
         * @property {messages.DeviceType|null} [deviceType] ProHallVersionVerifyRequest deviceType
         * @property {messages.MarketType|null} [marketType] ProHallVersionVerifyRequest marketType
         * @property {Uint8Array|null} [clientVersion] ProHallVersionVerifyRequest clientVersion
         */

        /**
         * Constructs a new ProHallVersionVerifyRequest.
         * @memberof messages
         * @classdesc Represents a ProHallVersionVerifyRequest.
         * @implements IProHallVersionVerifyRequest
         * @constructor
         * @param {messages.IProHallVersionVerifyRequest=} [properties] Properties to set
         */
        function ProHallVersionVerifyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProHallVersionVerifyRequest deviceType.
         * @member {messages.DeviceType} deviceType
         * @memberof messages.ProHallVersionVerifyRequest
         * @instance
         */
        ProHallVersionVerifyRequest.prototype.deviceType = 1;

        /**
         * ProHallVersionVerifyRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProHallVersionVerifyRequest
         * @instance
         */
        ProHallVersionVerifyRequest.prototype.marketType = 100;

        /**
         * ProHallVersionVerifyRequest clientVersion.
         * @member {Uint8Array} clientVersion
         * @memberof messages.ProHallVersionVerifyRequest
         * @instance
         */
        ProHallVersionVerifyRequest.prototype.clientVersion = $util.newBuffer([]);

        /**
         * Creates a new ProHallVersionVerifyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {messages.IProHallVersionVerifyRequest=} [properties] Properties to set
         * @returns {messages.ProHallVersionVerifyRequest} ProHallVersionVerifyRequest instance
         */
        ProHallVersionVerifyRequest.create = function create(properties) {
            return new ProHallVersionVerifyRequest(properties);
        };

        /**
         * Encodes the specified ProHallVersionVerifyRequest message. Does not implicitly {@link messages.ProHallVersionVerifyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {messages.IProHallVersionVerifyRequest} message ProHallVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deviceType);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.marketType);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ProHallVersionVerifyRequest message, length delimited. Does not implicitly {@link messages.ProHallVersionVerifyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {messages.IProHallVersionVerifyRequest} message ProHallVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProHallVersionVerifyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProHallVersionVerifyRequest} ProHallVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProHallVersionVerifyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deviceType = reader.int32();
                    break;
                case 3:
                    message.marketType = reader.int32();
                    break;
                case 4:
                    message.clientVersion = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProHallVersionVerifyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProHallVersionVerifyRequest} ProHallVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProHallVersionVerifyRequest message.
         * @function verify
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProHallVersionVerifyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 99:
                    break;
                }
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!(message.clientVersion && typeof message.clientVersion.length === "number" || $util.isString(message.clientVersion)))
                    return "clientVersion: buffer expected";
            return null;
        };

        /**
         * Creates a ProHallVersionVerifyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProHallVersionVerifyRequest} ProHallVersionVerifyRequest
         */
        ProHallVersionVerifyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProHallVersionVerifyRequest)
                return object;
            var message = new $root.messages.ProHallVersionVerifyRequest();
            switch (object.deviceType) {
            case "DEVICE_IPHONE":
            case 1:
                message.deviceType = 1;
                break;
            case "DEVICE_IPAD":
            case 2:
                message.deviceType = 2;
                break;
            case "DEVICE_ANDROID_PHONE":
            case 3:
                message.deviceType = 3;
                break;
            case "DEVICE_ANDROID_PAD":
            case 4:
                message.deviceType = 4;
                break;
            case "DEVICE_WIN_PHONE":
            case 5:
                message.deviceType = 5;
                break;
            case "DEVICE_WIN_PC":
            case 6:
                message.deviceType = 6;
                break;
            case "DEVICE_WIN_PAD":
            case 7:
                message.deviceType = 7;
                break;
            case "DEVICE_OTHER":
            case 99:
                message.deviceType = 99;
                break;
            }
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.clientVersion != null)
                if (typeof object.clientVersion === "string")
                    $util.base64.decode(object.clientVersion, message.clientVersion = $util.newBuffer($util.base64.length(object.clientVersion)), 0);
                else if (object.clientVersion.length)
                    message.clientVersion = object.clientVersion;
            return message;
        };

        /**
         * Creates a plain object from a ProHallVersionVerifyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProHallVersionVerifyRequest
         * @static
         * @param {messages.ProHallVersionVerifyRequest} message ProHallVersionVerifyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProHallVersionVerifyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deviceType = options.enums === String ? "DEVICE_IPHONE" : 1;
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.clientVersion = options.bytes === String ? "" : [];
            }
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.messages.DeviceType[message.deviceType] : message.deviceType;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = options.bytes === String ? $util.base64.encode(message.clientVersion, 0, message.clientVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVersion) : message.clientVersion;
            return object;
        };

        /**
         * Converts this ProHallVersionVerifyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProHallVersionVerifyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProHallVersionVerifyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProHallVersionVerifyRequest.MSGID
         * @enum {string}
         * @property {number} ID=50 ID value
         */
        ProHallVersionVerifyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[50] = "ID"] = 50;
            return values;
        })();

        return ProHallVersionVerifyRequest;
    })();

    messages.ProHallVersionVerifyErrorResponse = (function() {

        /**
         * Properties of a ProHallVersionVerifyErrorResponse.
         * @memberof messages
         * @interface IProHallVersionVerifyErrorResponse
         * @property {messages.ProHallVersionVerifyErrorResponse.ErrorNo|null} [errorNo] ProHallVersionVerifyErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProHallVersionVerifyErrorResponse errorMsg
         */

        /**
         * Constructs a new ProHallVersionVerifyErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProHallVersionVerifyErrorResponse.
         * @implements IProHallVersionVerifyErrorResponse
         * @constructor
         * @param {messages.IProHallVersionVerifyErrorResponse=} [properties] Properties to set
         */
        function ProHallVersionVerifyErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProHallVersionVerifyErrorResponse errorNo.
         * @member {messages.ProHallVersionVerifyErrorResponse.ErrorNo} errorNo
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @instance
         */
        ProHallVersionVerifyErrorResponse.prototype.errorNo = 1;

        /**
         * ProHallVersionVerifyErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @instance
         */
        ProHallVersionVerifyErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProHallVersionVerifyErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {messages.IProHallVersionVerifyErrorResponse=} [properties] Properties to set
         * @returns {messages.ProHallVersionVerifyErrorResponse} ProHallVersionVerifyErrorResponse instance
         */
        ProHallVersionVerifyErrorResponse.create = function create(properties) {
            return new ProHallVersionVerifyErrorResponse(properties);
        };

        /**
         * Encodes the specified ProHallVersionVerifyErrorResponse message. Does not implicitly {@link messages.ProHallVersionVerifyErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {messages.IProHallVersionVerifyErrorResponse} message ProHallVersionVerifyErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProHallVersionVerifyErrorResponse message, length delimited. Does not implicitly {@link messages.ProHallVersionVerifyErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {messages.IProHallVersionVerifyErrorResponse} message ProHallVersionVerifyErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProHallVersionVerifyErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProHallVersionVerifyErrorResponse} ProHallVersionVerifyErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProHallVersionVerifyErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProHallVersionVerifyErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProHallVersionVerifyErrorResponse} ProHallVersionVerifyErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProHallVersionVerifyErrorResponse message.
         * @function verify
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProHallVersionVerifyErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProHallVersionVerifyErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProHallVersionVerifyErrorResponse} ProHallVersionVerifyErrorResponse
         */
        ProHallVersionVerifyErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProHallVersionVerifyErrorResponse)
                return object;
            var message = new $root.messages.ProHallVersionVerifyErrorResponse();
            switch (object.errorNo) {
            case "ERR_CLIENT_PLATFORM_NOTFOUND":
            case 1:
                message.errorNo = 1;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProHallVersionVerifyErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @static
         * @param {messages.ProHallVersionVerifyErrorResponse} message ProHallVersionVerifyErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProHallVersionVerifyErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_CLIENT_PLATFORM_NOTFOUND" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProHallVersionVerifyErrorResponse.ErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProHallVersionVerifyErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProHallVersionVerifyErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProHallVersionVerifyErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProHallVersionVerifyErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=51 ID value
         */
        ProHallVersionVerifyErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[51] = "ID"] = 51;
            return values;
        })();

        /**
         * ErrorNo enum.
         * @name messages.ProHallVersionVerifyErrorResponse.ErrorNo
         * @enum {string}
         * @property {number} ERR_CLIENT_PLATFORM_NOTFOUND=1 ERR_CLIENT_PLATFORM_NOTFOUND value
         */
        ProHallVersionVerifyErrorResponse.ErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_CLIENT_PLATFORM_NOTFOUND"] = 1;
            return values;
        })();

        return ProHallVersionVerifyErrorResponse;
    })();

    messages.ProHallVersionVerifyResponse = (function() {

        /**
         * Properties of a ProHallVersionVerifyResponse.
         * @memberof messages
         * @interface IProHallVersionVerifyResponse
         * @property {Uint8Array|null} [forceUpgradeVersion] ProHallVersionVerifyResponse forceUpgradeVersion
         * @property {Uint8Array|null} [latestVersion] ProHallVersionVerifyResponse latestVersion
         * @property {Uint8Array|null} [latestDownloadUrl] ProHallVersionVerifyResponse latestDownloadUrl
         * @property {Uint8Array|null} [latestDownloadMd5] ProHallVersionVerifyResponse latestDownloadMd5
         * @property {number|Long|null} [latestDownloadSize] ProHallVersionVerifyResponse latestDownloadSize
         * @property {Uint8Array|null} [resourceVersion] ProHallVersionVerifyResponse resourceVersion
         * @property {Uint8Array|null} [resourceDownloadUrl] ProHallVersionVerifyResponse resourceDownloadUrl
         * @property {Uint8Array|null} [resourceDownloadMd5] ProHallVersionVerifyResponse resourceDownloadMd5
         * @property {number|Long|null} [resourceDownloadSize] ProHallVersionVerifyResponse resourceDownloadSize
         */

        /**
         * Constructs a new ProHallVersionVerifyResponse.
         * @memberof messages
         * @classdesc Represents a ProHallVersionVerifyResponse.
         * @implements IProHallVersionVerifyResponse
         * @constructor
         * @param {messages.IProHallVersionVerifyResponse=} [properties] Properties to set
         */
        function ProHallVersionVerifyResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProHallVersionVerifyResponse forceUpgradeVersion.
         * @member {Uint8Array} forceUpgradeVersion
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.forceUpgradeVersion = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse latestVersion.
         * @member {Uint8Array} latestVersion
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.latestVersion = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse latestDownloadUrl.
         * @member {Uint8Array} latestDownloadUrl
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.latestDownloadUrl = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse latestDownloadMd5.
         * @member {Uint8Array} latestDownloadMd5
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.latestDownloadMd5 = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse latestDownloadSize.
         * @member {number|Long} latestDownloadSize
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.latestDownloadSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ProHallVersionVerifyResponse resourceVersion.
         * @member {Uint8Array} resourceVersion
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.resourceVersion = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse resourceDownloadUrl.
         * @member {Uint8Array} resourceDownloadUrl
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.resourceDownloadUrl = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse resourceDownloadMd5.
         * @member {Uint8Array} resourceDownloadMd5
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.resourceDownloadMd5 = $util.newBuffer([]);

        /**
         * ProHallVersionVerifyResponse resourceDownloadSize.
         * @member {number|Long} resourceDownloadSize
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         */
        ProHallVersionVerifyResponse.prototype.resourceDownloadSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new ProHallVersionVerifyResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {messages.IProHallVersionVerifyResponse=} [properties] Properties to set
         * @returns {messages.ProHallVersionVerifyResponse} ProHallVersionVerifyResponse instance
         */
        ProHallVersionVerifyResponse.create = function create(properties) {
            return new ProHallVersionVerifyResponse(properties);
        };

        /**
         * Encodes the specified ProHallVersionVerifyResponse message. Does not implicitly {@link messages.ProHallVersionVerifyResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {messages.IProHallVersionVerifyResponse} message ProHallVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.forceUpgradeVersion);
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.latestVersion);
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.latestDownloadUrl);
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.latestDownloadMd5);
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                writer.uint32(/* id 6, wireType 0 =*/48).int64(message.latestDownloadSize);
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.resourceVersion);
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.resourceDownloadUrl);
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.resourceDownloadMd5);
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.resourceDownloadSize);
            return writer;
        };

        /**
         * Encodes the specified ProHallVersionVerifyResponse message, length delimited. Does not implicitly {@link messages.ProHallVersionVerifyResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {messages.IProHallVersionVerifyResponse} message ProHallVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHallVersionVerifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProHallVersionVerifyResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProHallVersionVerifyResponse} ProHallVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProHallVersionVerifyResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.forceUpgradeVersion = reader.bytes();
                    break;
                case 3:
                    message.latestVersion = reader.bytes();
                    break;
                case 4:
                    message.latestDownloadUrl = reader.bytes();
                    break;
                case 5:
                    message.latestDownloadMd5 = reader.bytes();
                    break;
                case 6:
                    message.latestDownloadSize = reader.int64();
                    break;
                case 7:
                    message.resourceVersion = reader.bytes();
                    break;
                case 8:
                    message.resourceDownloadUrl = reader.bytes();
                    break;
                case 9:
                    message.resourceDownloadMd5 = reader.bytes();
                    break;
                case 10:
                    message.resourceDownloadSize = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProHallVersionVerifyResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProHallVersionVerifyResponse} ProHallVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHallVersionVerifyResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProHallVersionVerifyResponse message.
         * @function verify
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProHallVersionVerifyResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                if (!(message.forceUpgradeVersion && typeof message.forceUpgradeVersion.length === "number" || $util.isString(message.forceUpgradeVersion)))
                    return "forceUpgradeVersion: buffer expected";
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                if (!(message.latestVersion && typeof message.latestVersion.length === "number" || $util.isString(message.latestVersion)))
                    return "latestVersion: buffer expected";
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                if (!(message.latestDownloadUrl && typeof message.latestDownloadUrl.length === "number" || $util.isString(message.latestDownloadUrl)))
                    return "latestDownloadUrl: buffer expected";
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                if (!(message.latestDownloadMd5 && typeof message.latestDownloadMd5.length === "number" || $util.isString(message.latestDownloadMd5)))
                    return "latestDownloadMd5: buffer expected";
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                if (!$util.isInteger(message.latestDownloadSize) && !(message.latestDownloadSize && $util.isInteger(message.latestDownloadSize.low) && $util.isInteger(message.latestDownloadSize.high)))
                    return "latestDownloadSize: integer|Long expected";
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                if (!(message.resourceVersion && typeof message.resourceVersion.length === "number" || $util.isString(message.resourceVersion)))
                    return "resourceVersion: buffer expected";
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                if (!(message.resourceDownloadUrl && typeof message.resourceDownloadUrl.length === "number" || $util.isString(message.resourceDownloadUrl)))
                    return "resourceDownloadUrl: buffer expected";
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                if (!(message.resourceDownloadMd5 && typeof message.resourceDownloadMd5.length === "number" || $util.isString(message.resourceDownloadMd5)))
                    return "resourceDownloadMd5: buffer expected";
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                if (!$util.isInteger(message.resourceDownloadSize) && !(message.resourceDownloadSize && $util.isInteger(message.resourceDownloadSize.low) && $util.isInteger(message.resourceDownloadSize.high)))
                    return "resourceDownloadSize: integer|Long expected";
            return null;
        };

        /**
         * Creates a ProHallVersionVerifyResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProHallVersionVerifyResponse} ProHallVersionVerifyResponse
         */
        ProHallVersionVerifyResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProHallVersionVerifyResponse)
                return object;
            var message = new $root.messages.ProHallVersionVerifyResponse();
            if (object.forceUpgradeVersion != null)
                if (typeof object.forceUpgradeVersion === "string")
                    $util.base64.decode(object.forceUpgradeVersion, message.forceUpgradeVersion = $util.newBuffer($util.base64.length(object.forceUpgradeVersion)), 0);
                else if (object.forceUpgradeVersion.length)
                    message.forceUpgradeVersion = object.forceUpgradeVersion;
            if (object.latestVersion != null)
                if (typeof object.latestVersion === "string")
                    $util.base64.decode(object.latestVersion, message.latestVersion = $util.newBuffer($util.base64.length(object.latestVersion)), 0);
                else if (object.latestVersion.length)
                    message.latestVersion = object.latestVersion;
            if (object.latestDownloadUrl != null)
                if (typeof object.latestDownloadUrl === "string")
                    $util.base64.decode(object.latestDownloadUrl, message.latestDownloadUrl = $util.newBuffer($util.base64.length(object.latestDownloadUrl)), 0);
                else if (object.latestDownloadUrl.length)
                    message.latestDownloadUrl = object.latestDownloadUrl;
            if (object.latestDownloadMd5 != null)
                if (typeof object.latestDownloadMd5 === "string")
                    $util.base64.decode(object.latestDownloadMd5, message.latestDownloadMd5 = $util.newBuffer($util.base64.length(object.latestDownloadMd5)), 0);
                else if (object.latestDownloadMd5.length)
                    message.latestDownloadMd5 = object.latestDownloadMd5;
            if (object.latestDownloadSize != null)
                if ($util.Long)
                    (message.latestDownloadSize = $util.Long.fromValue(object.latestDownloadSize)).unsigned = false;
                else if (typeof object.latestDownloadSize === "string")
                    message.latestDownloadSize = parseInt(object.latestDownloadSize, 10);
                else if (typeof object.latestDownloadSize === "number")
                    message.latestDownloadSize = object.latestDownloadSize;
                else if (typeof object.latestDownloadSize === "object")
                    message.latestDownloadSize = new $util.LongBits(object.latestDownloadSize.low >>> 0, object.latestDownloadSize.high >>> 0).toNumber();
            if (object.resourceVersion != null)
                if (typeof object.resourceVersion === "string")
                    $util.base64.decode(object.resourceVersion, message.resourceVersion = $util.newBuffer($util.base64.length(object.resourceVersion)), 0);
                else if (object.resourceVersion.length)
                    message.resourceVersion = object.resourceVersion;
            if (object.resourceDownloadUrl != null)
                if (typeof object.resourceDownloadUrl === "string")
                    $util.base64.decode(object.resourceDownloadUrl, message.resourceDownloadUrl = $util.newBuffer($util.base64.length(object.resourceDownloadUrl)), 0);
                else if (object.resourceDownloadUrl.length)
                    message.resourceDownloadUrl = object.resourceDownloadUrl;
            if (object.resourceDownloadMd5 != null)
                if (typeof object.resourceDownloadMd5 === "string")
                    $util.base64.decode(object.resourceDownloadMd5, message.resourceDownloadMd5 = $util.newBuffer($util.base64.length(object.resourceDownloadMd5)), 0);
                else if (object.resourceDownloadMd5.length)
                    message.resourceDownloadMd5 = object.resourceDownloadMd5;
            if (object.resourceDownloadSize != null)
                if ($util.Long)
                    (message.resourceDownloadSize = $util.Long.fromValue(object.resourceDownloadSize)).unsigned = false;
                else if (typeof object.resourceDownloadSize === "string")
                    message.resourceDownloadSize = parseInt(object.resourceDownloadSize, 10);
                else if (typeof object.resourceDownloadSize === "number")
                    message.resourceDownloadSize = object.resourceDownloadSize;
                else if (typeof object.resourceDownloadSize === "object")
                    message.resourceDownloadSize = new $util.LongBits(object.resourceDownloadSize.low >>> 0, object.resourceDownloadSize.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a ProHallVersionVerifyResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProHallVersionVerifyResponse
         * @static
         * @param {messages.ProHallVersionVerifyResponse} message ProHallVersionVerifyResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProHallVersionVerifyResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.forceUpgradeVersion = options.bytes === String ? "" : [];
                object.latestVersion = options.bytes === String ? "" : [];
                object.latestDownloadUrl = options.bytes === String ? "" : [];
                object.latestDownloadMd5 = options.bytes === String ? "" : [];
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.latestDownloadSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.latestDownloadSize = options.longs === String ? "0" : 0;
                object.resourceVersion = options.bytes === String ? "" : [];
                object.resourceDownloadUrl = options.bytes === String ? "" : [];
                object.resourceDownloadMd5 = options.bytes === String ? "" : [];
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.resourceDownloadSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.resourceDownloadSize = options.longs === String ? "0" : 0;
            }
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                object.forceUpgradeVersion = options.bytes === String ? $util.base64.encode(message.forceUpgradeVersion, 0, message.forceUpgradeVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.forceUpgradeVersion) : message.forceUpgradeVersion;
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                object.latestVersion = options.bytes === String ? $util.base64.encode(message.latestVersion, 0, message.latestVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestVersion) : message.latestVersion;
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                object.latestDownloadUrl = options.bytes === String ? $util.base64.encode(message.latestDownloadUrl, 0, message.latestDownloadUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestDownloadUrl) : message.latestDownloadUrl;
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                object.latestDownloadMd5 = options.bytes === String ? $util.base64.encode(message.latestDownloadMd5, 0, message.latestDownloadMd5.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestDownloadMd5) : message.latestDownloadMd5;
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                if (typeof message.latestDownloadSize === "number")
                    object.latestDownloadSize = options.longs === String ? String(message.latestDownloadSize) : message.latestDownloadSize;
                else
                    object.latestDownloadSize = options.longs === String ? $util.Long.prototype.toString.call(message.latestDownloadSize) : options.longs === Number ? new $util.LongBits(message.latestDownloadSize.low >>> 0, message.latestDownloadSize.high >>> 0).toNumber() : message.latestDownloadSize;
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                object.resourceVersion = options.bytes === String ? $util.base64.encode(message.resourceVersion, 0, message.resourceVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceVersion) : message.resourceVersion;
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                object.resourceDownloadUrl = options.bytes === String ? $util.base64.encode(message.resourceDownloadUrl, 0, message.resourceDownloadUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceDownloadUrl) : message.resourceDownloadUrl;
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                object.resourceDownloadMd5 = options.bytes === String ? $util.base64.encode(message.resourceDownloadMd5, 0, message.resourceDownloadMd5.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceDownloadMd5) : message.resourceDownloadMd5;
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                if (typeof message.resourceDownloadSize === "number")
                    object.resourceDownloadSize = options.longs === String ? String(message.resourceDownloadSize) : message.resourceDownloadSize;
                else
                    object.resourceDownloadSize = options.longs === String ? $util.Long.prototype.toString.call(message.resourceDownloadSize) : options.longs === Number ? new $util.LongBits(message.resourceDownloadSize.low >>> 0, message.resourceDownloadSize.high >>> 0).toNumber() : message.resourceDownloadSize;
            return object;
        };

        /**
         * Converts this ProHallVersionVerifyResponse to JSON.
         * @function toJSON
         * @memberof messages.ProHallVersionVerifyResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProHallVersionVerifyResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProHallVersionVerifyResponse.MSGID
         * @enum {string}
         * @property {number} ID=52 ID value
         */
        ProHallVersionVerifyResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[52] = "ID"] = 52;
            return values;
        })();

        return ProHallVersionVerifyResponse;
    })();

    messages.ProGameVersionVerifyRequest = (function() {

        /**
         * Properties of a ProGameVersionVerifyRequest.
         * @memberof messages
         * @interface IProGameVersionVerifyRequest
         * @property {number|null} [gameId] ProGameVersionVerifyRequest gameId
         * @property {messages.DeviceType|null} [deviceType] ProGameVersionVerifyRequest deviceType
         * @property {messages.MarketType|null} [marketType] ProGameVersionVerifyRequest marketType
         * @property {Uint8Array|null} [clientVersion] ProGameVersionVerifyRequest clientVersion
         */

        /**
         * Constructs a new ProGameVersionVerifyRequest.
         * @memberof messages
         * @classdesc Represents a ProGameVersionVerifyRequest.
         * @implements IProGameVersionVerifyRequest
         * @constructor
         * @param {messages.IProGameVersionVerifyRequest=} [properties] Properties to set
         */
        function ProGameVersionVerifyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameVersionVerifyRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameVersionVerifyRequest
         * @instance
         */
        ProGameVersionVerifyRequest.prototype.gameId = 0;

        /**
         * ProGameVersionVerifyRequest deviceType.
         * @member {messages.DeviceType} deviceType
         * @memberof messages.ProGameVersionVerifyRequest
         * @instance
         */
        ProGameVersionVerifyRequest.prototype.deviceType = 1;

        /**
         * ProGameVersionVerifyRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProGameVersionVerifyRequest
         * @instance
         */
        ProGameVersionVerifyRequest.prototype.marketType = 100;

        /**
         * ProGameVersionVerifyRequest clientVersion.
         * @member {Uint8Array} clientVersion
         * @memberof messages.ProGameVersionVerifyRequest
         * @instance
         */
        ProGameVersionVerifyRequest.prototype.clientVersion = $util.newBuffer([]);

        /**
         * Creates a new ProGameVersionVerifyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {messages.IProGameVersionVerifyRequest=} [properties] Properties to set
         * @returns {messages.ProGameVersionVerifyRequest} ProGameVersionVerifyRequest instance
         */
        ProGameVersionVerifyRequest.create = function create(properties) {
            return new ProGameVersionVerifyRequest(properties);
        };

        /**
         * Encodes the specified ProGameVersionVerifyRequest message. Does not implicitly {@link messages.ProGameVersionVerifyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {messages.IProGameVersionVerifyRequest} message ProGameVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deviceType);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.marketType);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ProGameVersionVerifyRequest message, length delimited. Does not implicitly {@link messages.ProGameVersionVerifyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {messages.IProGameVersionVerifyRequest} message ProGameVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameVersionVerifyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameVersionVerifyRequest} ProGameVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameVersionVerifyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.deviceType = reader.int32();
                    break;
                case 4:
                    message.marketType = reader.int32();
                    break;
                case 5:
                    message.clientVersion = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameVersionVerifyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameVersionVerifyRequest} ProGameVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameVersionVerifyRequest message.
         * @function verify
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameVersionVerifyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 99:
                    break;
                }
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!(message.clientVersion && typeof message.clientVersion.length === "number" || $util.isString(message.clientVersion)))
                    return "clientVersion: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameVersionVerifyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameVersionVerifyRequest} ProGameVersionVerifyRequest
         */
        ProGameVersionVerifyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameVersionVerifyRequest)
                return object;
            var message = new $root.messages.ProGameVersionVerifyRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            switch (object.deviceType) {
            case "DEVICE_IPHONE":
            case 1:
                message.deviceType = 1;
                break;
            case "DEVICE_IPAD":
            case 2:
                message.deviceType = 2;
                break;
            case "DEVICE_ANDROID_PHONE":
            case 3:
                message.deviceType = 3;
                break;
            case "DEVICE_ANDROID_PAD":
            case 4:
                message.deviceType = 4;
                break;
            case "DEVICE_WIN_PHONE":
            case 5:
                message.deviceType = 5;
                break;
            case "DEVICE_WIN_PC":
            case 6:
                message.deviceType = 6;
                break;
            case "DEVICE_WIN_PAD":
            case 7:
                message.deviceType = 7;
                break;
            case "DEVICE_OTHER":
            case 99:
                message.deviceType = 99;
                break;
            }
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.clientVersion != null)
                if (typeof object.clientVersion === "string")
                    $util.base64.decode(object.clientVersion, message.clientVersion = $util.newBuffer($util.base64.length(object.clientVersion)), 0);
                else if (object.clientVersion.length)
                    message.clientVersion = object.clientVersion;
            return message;
        };

        /**
         * Creates a plain object from a ProGameVersionVerifyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameVersionVerifyRequest
         * @static
         * @param {messages.ProGameVersionVerifyRequest} message ProGameVersionVerifyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameVersionVerifyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.deviceType = options.enums === String ? "DEVICE_IPHONE" : 1;
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.clientVersion = options.bytes === String ? "" : [];
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.messages.DeviceType[message.deviceType] : message.deviceType;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = options.bytes === String ? $util.base64.encode(message.clientVersion, 0, message.clientVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVersion) : message.clientVersion;
            return object;
        };

        /**
         * Converts this ProGameVersionVerifyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameVersionVerifyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameVersionVerifyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameVersionVerifyRequest.MSGID
         * @enum {string}
         * @property {number} ID=53 ID value
         */
        ProGameVersionVerifyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[53] = "ID"] = 53;
            return values;
        })();

        return ProGameVersionVerifyRequest;
    })();

    messages.ProGameForceVersionVerifyRequest = (function() {

        /**
         * Properties of a ProGameForceVersionVerifyRequest.
         * @memberof messages
         * @interface IProGameForceVersionVerifyRequest
         * @property {number|null} [gameId] ProGameForceVersionVerifyRequest gameId
         * @property {messages.DeviceType|null} [deviceType] ProGameForceVersionVerifyRequest deviceType
         * @property {messages.MarketType|null} [marketType] ProGameForceVersionVerifyRequest marketType
         * @property {Uint8Array|null} [clientVersion] ProGameForceVersionVerifyRequest clientVersion
         */

        /**
         * Constructs a new ProGameForceVersionVerifyRequest.
         * @memberof messages
         * @classdesc Represents a ProGameForceVersionVerifyRequest.
         * @implements IProGameForceVersionVerifyRequest
         * @constructor
         * @param {messages.IProGameForceVersionVerifyRequest=} [properties] Properties to set
         */
        function ProGameForceVersionVerifyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameForceVersionVerifyRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @instance
         */
        ProGameForceVersionVerifyRequest.prototype.gameId = 0;

        /**
         * ProGameForceVersionVerifyRequest deviceType.
         * @member {messages.DeviceType} deviceType
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @instance
         */
        ProGameForceVersionVerifyRequest.prototype.deviceType = 1;

        /**
         * ProGameForceVersionVerifyRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @instance
         */
        ProGameForceVersionVerifyRequest.prototype.marketType = 100;

        /**
         * ProGameForceVersionVerifyRequest clientVersion.
         * @member {Uint8Array} clientVersion
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @instance
         */
        ProGameForceVersionVerifyRequest.prototype.clientVersion = $util.newBuffer([]);

        /**
         * Creates a new ProGameForceVersionVerifyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {messages.IProGameForceVersionVerifyRequest=} [properties] Properties to set
         * @returns {messages.ProGameForceVersionVerifyRequest} ProGameForceVersionVerifyRequest instance
         */
        ProGameForceVersionVerifyRequest.create = function create(properties) {
            return new ProGameForceVersionVerifyRequest(properties);
        };

        /**
         * Encodes the specified ProGameForceVersionVerifyRequest message. Does not implicitly {@link messages.ProGameForceVersionVerifyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {messages.IProGameForceVersionVerifyRequest} message ProGameForceVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameForceVersionVerifyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deviceType);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.marketType);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ProGameForceVersionVerifyRequest message, length delimited. Does not implicitly {@link messages.ProGameForceVersionVerifyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {messages.IProGameForceVersionVerifyRequest} message ProGameForceVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameForceVersionVerifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameForceVersionVerifyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameForceVersionVerifyRequest} ProGameForceVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameForceVersionVerifyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameForceVersionVerifyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.deviceType = reader.int32();
                    break;
                case 4:
                    message.marketType = reader.int32();
                    break;
                case 5:
                    message.clientVersion = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameForceVersionVerifyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameForceVersionVerifyRequest} ProGameForceVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameForceVersionVerifyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameForceVersionVerifyRequest message.
         * @function verify
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameForceVersionVerifyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 99:
                    break;
                }
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!(message.clientVersion && typeof message.clientVersion.length === "number" || $util.isString(message.clientVersion)))
                    return "clientVersion: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameForceVersionVerifyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameForceVersionVerifyRequest} ProGameForceVersionVerifyRequest
         */
        ProGameForceVersionVerifyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameForceVersionVerifyRequest)
                return object;
            var message = new $root.messages.ProGameForceVersionVerifyRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            switch (object.deviceType) {
            case "DEVICE_IPHONE":
            case 1:
                message.deviceType = 1;
                break;
            case "DEVICE_IPAD":
            case 2:
                message.deviceType = 2;
                break;
            case "DEVICE_ANDROID_PHONE":
            case 3:
                message.deviceType = 3;
                break;
            case "DEVICE_ANDROID_PAD":
            case 4:
                message.deviceType = 4;
                break;
            case "DEVICE_WIN_PHONE":
            case 5:
                message.deviceType = 5;
                break;
            case "DEVICE_WIN_PC":
            case 6:
                message.deviceType = 6;
                break;
            case "DEVICE_WIN_PAD":
            case 7:
                message.deviceType = 7;
                break;
            case "DEVICE_OTHER":
            case 99:
                message.deviceType = 99;
                break;
            }
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.clientVersion != null)
                if (typeof object.clientVersion === "string")
                    $util.base64.decode(object.clientVersion, message.clientVersion = $util.newBuffer($util.base64.length(object.clientVersion)), 0);
                else if (object.clientVersion.length)
                    message.clientVersion = object.clientVersion;
            return message;
        };

        /**
         * Creates a plain object from a ProGameForceVersionVerifyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @static
         * @param {messages.ProGameForceVersionVerifyRequest} message ProGameForceVersionVerifyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameForceVersionVerifyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.deviceType = options.enums === String ? "DEVICE_IPHONE" : 1;
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.clientVersion = options.bytes === String ? "" : [];
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.messages.DeviceType[message.deviceType] : message.deviceType;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = options.bytes === String ? $util.base64.encode(message.clientVersion, 0, message.clientVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVersion) : message.clientVersion;
            return object;
        };

        /**
         * Converts this ProGameForceVersionVerifyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameForceVersionVerifyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameForceVersionVerifyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameForceVersionVerifyRequest.MSGID
         * @enum {string}
         * @property {number} ID=68 ID value
         */
        ProGameForceVersionVerifyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[68] = "ID"] = 68;
            return values;
        })();

        return ProGameForceVersionVerifyRequest;
    })();

    messages.ProGameVersionVerifyErrorResponse = (function() {

        /**
         * Properties of a ProGameVersionVerifyErrorResponse.
         * @memberof messages
         * @interface IProGameVersionVerifyErrorResponse
         * @property {messages.ProGameVersionVerifyErrorResponse.ErrorNo|null} [errorNo] ProGameVersionVerifyErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameVersionVerifyErrorResponse errorMsg
         */

        /**
         * Constructs a new ProGameVersionVerifyErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProGameVersionVerifyErrorResponse.
         * @implements IProGameVersionVerifyErrorResponse
         * @constructor
         * @param {messages.IProGameVersionVerifyErrorResponse=} [properties] Properties to set
         */
        function ProGameVersionVerifyErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameVersionVerifyErrorResponse errorNo.
         * @member {messages.ProGameVersionVerifyErrorResponse.ErrorNo} errorNo
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @instance
         */
        ProGameVersionVerifyErrorResponse.prototype.errorNo = 1;

        /**
         * ProGameVersionVerifyErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @instance
         */
        ProGameVersionVerifyErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProGameVersionVerifyErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {messages.IProGameVersionVerifyErrorResponse=} [properties] Properties to set
         * @returns {messages.ProGameVersionVerifyErrorResponse} ProGameVersionVerifyErrorResponse instance
         */
        ProGameVersionVerifyErrorResponse.create = function create(properties) {
            return new ProGameVersionVerifyErrorResponse(properties);
        };

        /**
         * Encodes the specified ProGameVersionVerifyErrorResponse message. Does not implicitly {@link messages.ProGameVersionVerifyErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {messages.IProGameVersionVerifyErrorResponse} message ProGameVersionVerifyErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProGameVersionVerifyErrorResponse message, length delimited. Does not implicitly {@link messages.ProGameVersionVerifyErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {messages.IProGameVersionVerifyErrorResponse} message ProGameVersionVerifyErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameVersionVerifyErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameVersionVerifyErrorResponse} ProGameVersionVerifyErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameVersionVerifyErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameVersionVerifyErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameVersionVerifyErrorResponse} ProGameVersionVerifyErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameVersionVerifyErrorResponse message.
         * @function verify
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameVersionVerifyErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameVersionVerifyErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameVersionVerifyErrorResponse} ProGameVersionVerifyErrorResponse
         */
        ProGameVersionVerifyErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameVersionVerifyErrorResponse)
                return object;
            var message = new $root.messages.ProGameVersionVerifyErrorResponse();
            switch (object.errorNo) {
            case "ERR_CLIENT_PLATFORM_NOTFOUND":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_GAME_NOTFOUND":
            case 2:
                message.errorNo = 2;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProGameVersionVerifyErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @static
         * @param {messages.ProGameVersionVerifyErrorResponse} message ProGameVersionVerifyErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameVersionVerifyErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_CLIENT_PLATFORM_NOTFOUND" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProGameVersionVerifyErrorResponse.ErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProGameVersionVerifyErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameVersionVerifyErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameVersionVerifyErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameVersionVerifyErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=54 ID value
         */
        ProGameVersionVerifyErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[54] = "ID"] = 54;
            return values;
        })();

        /**
         * ErrorNo enum.
         * @name messages.ProGameVersionVerifyErrorResponse.ErrorNo
         * @enum {string}
         * @property {number} ERR_CLIENT_PLATFORM_NOTFOUND=1 ERR_CLIENT_PLATFORM_NOTFOUND value
         * @property {number} ERR_GAME_NOTFOUND=2 ERR_GAME_NOTFOUND value
         */
        ProGameVersionVerifyErrorResponse.ErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_CLIENT_PLATFORM_NOTFOUND"] = 1;
            values[valuesById[2] = "ERR_GAME_NOTFOUND"] = 2;
            return values;
        })();

        return ProGameVersionVerifyErrorResponse;
    })();

    messages.ProGameSourceVersionVerifyRequest = (function() {

        /**
         * Properties of a ProGameSourceVersionVerifyRequest.
         * @memberof messages
         * @interface IProGameSourceVersionVerifyRequest
         * @property {number|null} [gameId] ProGameSourceVersionVerifyRequest gameId
         * @property {Uint8Array|null} [sourceId] ProGameSourceVersionVerifyRequest sourceId
         * @property {messages.DeviceType|null} [deviceType] ProGameSourceVersionVerifyRequest deviceType
         * @property {messages.MarketType|null} [marketType] ProGameSourceVersionVerifyRequest marketType
         * @property {Uint8Array|null} [clientVersion] ProGameSourceVersionVerifyRequest clientVersion
         */

        /**
         * Constructs a new ProGameSourceVersionVerifyRequest.
         * @memberof messages
         * @classdesc Represents a ProGameSourceVersionVerifyRequest.
         * @implements IProGameSourceVersionVerifyRequest
         * @constructor
         * @param {messages.IProGameSourceVersionVerifyRequest=} [properties] Properties to set
         */
        function ProGameSourceVersionVerifyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameSourceVersionVerifyRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         */
        ProGameSourceVersionVerifyRequest.prototype.gameId = 0;

        /**
         * ProGameSourceVersionVerifyRequest sourceId.
         * @member {Uint8Array} sourceId
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         */
        ProGameSourceVersionVerifyRequest.prototype.sourceId = $util.newBuffer([]);

        /**
         * ProGameSourceVersionVerifyRequest deviceType.
         * @member {messages.DeviceType} deviceType
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         */
        ProGameSourceVersionVerifyRequest.prototype.deviceType = 1;

        /**
         * ProGameSourceVersionVerifyRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         */
        ProGameSourceVersionVerifyRequest.prototype.marketType = 100;

        /**
         * ProGameSourceVersionVerifyRequest clientVersion.
         * @member {Uint8Array} clientVersion
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         */
        ProGameSourceVersionVerifyRequest.prototype.clientVersion = $util.newBuffer([]);

        /**
         * Creates a new ProGameSourceVersionVerifyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {messages.IProGameSourceVersionVerifyRequest=} [properties] Properties to set
         * @returns {messages.ProGameSourceVersionVerifyRequest} ProGameSourceVersionVerifyRequest instance
         */
        ProGameSourceVersionVerifyRequest.create = function create(properties) {
            return new ProGameSourceVersionVerifyRequest(properties);
        };

        /**
         * Encodes the specified ProGameSourceVersionVerifyRequest message. Does not implicitly {@link messages.ProGameSourceVersionVerifyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {messages.IProGameSourceVersionVerifyRequest} message ProGameSourceVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameSourceVersionVerifyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.sourceId != null && message.hasOwnProperty("sourceId"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.sourceId);
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.deviceType);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.marketType);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ProGameSourceVersionVerifyRequest message, length delimited. Does not implicitly {@link messages.ProGameSourceVersionVerifyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {messages.IProGameSourceVersionVerifyRequest} message ProGameSourceVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameSourceVersionVerifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameSourceVersionVerifyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameSourceVersionVerifyRequest} ProGameSourceVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameSourceVersionVerifyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameSourceVersionVerifyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.sourceId = reader.bytes();
                    break;
                case 4:
                    message.deviceType = reader.int32();
                    break;
                case 5:
                    message.marketType = reader.int32();
                    break;
                case 6:
                    message.clientVersion = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameSourceVersionVerifyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameSourceVersionVerifyRequest} ProGameSourceVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameSourceVersionVerifyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameSourceVersionVerifyRequest message.
         * @function verify
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameSourceVersionVerifyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.sourceId != null && message.hasOwnProperty("sourceId"))
                if (!(message.sourceId && typeof message.sourceId.length === "number" || $util.isString(message.sourceId)))
                    return "sourceId: buffer expected";
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 99:
                    break;
                }
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!(message.clientVersion && typeof message.clientVersion.length === "number" || $util.isString(message.clientVersion)))
                    return "clientVersion: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameSourceVersionVerifyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameSourceVersionVerifyRequest} ProGameSourceVersionVerifyRequest
         */
        ProGameSourceVersionVerifyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameSourceVersionVerifyRequest)
                return object;
            var message = new $root.messages.ProGameSourceVersionVerifyRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.sourceId != null)
                if (typeof object.sourceId === "string")
                    $util.base64.decode(object.sourceId, message.sourceId = $util.newBuffer($util.base64.length(object.sourceId)), 0);
                else if (object.sourceId.length)
                    message.sourceId = object.sourceId;
            switch (object.deviceType) {
            case "DEVICE_IPHONE":
            case 1:
                message.deviceType = 1;
                break;
            case "DEVICE_IPAD":
            case 2:
                message.deviceType = 2;
                break;
            case "DEVICE_ANDROID_PHONE":
            case 3:
                message.deviceType = 3;
                break;
            case "DEVICE_ANDROID_PAD":
            case 4:
                message.deviceType = 4;
                break;
            case "DEVICE_WIN_PHONE":
            case 5:
                message.deviceType = 5;
                break;
            case "DEVICE_WIN_PC":
            case 6:
                message.deviceType = 6;
                break;
            case "DEVICE_WIN_PAD":
            case 7:
                message.deviceType = 7;
                break;
            case "DEVICE_OTHER":
            case 99:
                message.deviceType = 99;
                break;
            }
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.clientVersion != null)
                if (typeof object.clientVersion === "string")
                    $util.base64.decode(object.clientVersion, message.clientVersion = $util.newBuffer($util.base64.length(object.clientVersion)), 0);
                else if (object.clientVersion.length)
                    message.clientVersion = object.clientVersion;
            return message;
        };

        /**
         * Creates a plain object from a ProGameSourceVersionVerifyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @static
         * @param {messages.ProGameSourceVersionVerifyRequest} message ProGameSourceVersionVerifyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameSourceVersionVerifyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.sourceId = options.bytes === String ? "" : [];
                object.deviceType = options.enums === String ? "DEVICE_IPHONE" : 1;
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.clientVersion = options.bytes === String ? "" : [];
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.sourceId != null && message.hasOwnProperty("sourceId"))
                object.sourceId = options.bytes === String ? $util.base64.encode(message.sourceId, 0, message.sourceId.length) : options.bytes === Array ? Array.prototype.slice.call(message.sourceId) : message.sourceId;
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.messages.DeviceType[message.deviceType] : message.deviceType;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = options.bytes === String ? $util.base64.encode(message.clientVersion, 0, message.clientVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVersion) : message.clientVersion;
            return object;
        };

        /**
         * Converts this ProGameSourceVersionVerifyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameSourceVersionVerifyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameSourceVersionVerifyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameSourceVersionVerifyRequest.MSGID
         * @enum {string}
         * @property {number} ID=69 ID value
         */
        ProGameSourceVersionVerifyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[69] = "ID"] = 69;
            return values;
        })();

        return ProGameSourceVersionVerifyRequest;
    })();

    messages.ProGameVersionVerifyResponse = (function() {

        /**
         * Properties of a ProGameVersionVerifyResponse.
         * @memberof messages
         * @interface IProGameVersionVerifyResponse
         * @property {number|null} [gameId] ProGameVersionVerifyResponse gameId
         * @property {Uint8Array|null} [forceUpgradeVersion] ProGameVersionVerifyResponse forceUpgradeVersion
         * @property {Uint8Array|null} [latestVersion] ProGameVersionVerifyResponse latestVersion
         * @property {Uint8Array|null} [latestDownloadUrl] ProGameVersionVerifyResponse latestDownloadUrl
         * @property {Uint8Array|null} [latestDownloadMd5] ProGameVersionVerifyResponse latestDownloadMd5
         * @property {number|Long|null} [latestDownloadSize] ProGameVersionVerifyResponse latestDownloadSize
         * @property {Uint8Array|null} [resourceVersion] ProGameVersionVerifyResponse resourceVersion
         * @property {Uint8Array|null} [resourceDownloadUrl] ProGameVersionVerifyResponse resourceDownloadUrl
         * @property {Uint8Array|null} [resourceDownloadMd5] ProGameVersionVerifyResponse resourceDownloadMd5
         * @property {number|Long|null} [resourceDownloadSize] ProGameVersionVerifyResponse resourceDownloadSize
         */

        /**
         * Constructs a new ProGameVersionVerifyResponse.
         * @memberof messages
         * @classdesc Represents a ProGameVersionVerifyResponse.
         * @implements IProGameVersionVerifyResponse
         * @constructor
         * @param {messages.IProGameVersionVerifyResponse=} [properties] Properties to set
         */
        function ProGameVersionVerifyResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameVersionVerifyResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.gameId = 0;

        /**
         * ProGameVersionVerifyResponse forceUpgradeVersion.
         * @member {Uint8Array} forceUpgradeVersion
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.forceUpgradeVersion = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse latestVersion.
         * @member {Uint8Array} latestVersion
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.latestVersion = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse latestDownloadUrl.
         * @member {Uint8Array} latestDownloadUrl
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.latestDownloadUrl = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse latestDownloadMd5.
         * @member {Uint8Array} latestDownloadMd5
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.latestDownloadMd5 = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse latestDownloadSize.
         * @member {number|Long} latestDownloadSize
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.latestDownloadSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * ProGameVersionVerifyResponse resourceVersion.
         * @member {Uint8Array} resourceVersion
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.resourceVersion = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse resourceDownloadUrl.
         * @member {Uint8Array} resourceDownloadUrl
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.resourceDownloadUrl = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse resourceDownloadMd5.
         * @member {Uint8Array} resourceDownloadMd5
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.resourceDownloadMd5 = $util.newBuffer([]);

        /**
         * ProGameVersionVerifyResponse resourceDownloadSize.
         * @member {number|Long} resourceDownloadSize
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         */
        ProGameVersionVerifyResponse.prototype.resourceDownloadSize = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new ProGameVersionVerifyResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {messages.IProGameVersionVerifyResponse=} [properties] Properties to set
         * @returns {messages.ProGameVersionVerifyResponse} ProGameVersionVerifyResponse instance
         */
        ProGameVersionVerifyResponse.create = function create(properties) {
            return new ProGameVersionVerifyResponse(properties);
        };

        /**
         * Encodes the specified ProGameVersionVerifyResponse message. Does not implicitly {@link messages.ProGameVersionVerifyResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {messages.IProGameVersionVerifyResponse} message ProGameVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.forceUpgradeVersion);
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.latestVersion);
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.latestDownloadUrl);
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.latestDownloadMd5);
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                writer.uint32(/* id 7, wireType 0 =*/56).int64(message.latestDownloadSize);
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.resourceVersion);
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.resourceDownloadUrl);
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                writer.uint32(/* id 10, wireType 2 =*/82).bytes(message.resourceDownloadMd5);
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                writer.uint32(/* id 11, wireType 0 =*/88).int64(message.resourceDownloadSize);
            return writer;
        };

        /**
         * Encodes the specified ProGameVersionVerifyResponse message, length delimited. Does not implicitly {@link messages.ProGameVersionVerifyResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {messages.IProGameVersionVerifyResponse} message ProGameVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameVersionVerifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameVersionVerifyResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameVersionVerifyResponse} ProGameVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameVersionVerifyResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.forceUpgradeVersion = reader.bytes();
                    break;
                case 4:
                    message.latestVersion = reader.bytes();
                    break;
                case 5:
                    message.latestDownloadUrl = reader.bytes();
                    break;
                case 6:
                    message.latestDownloadMd5 = reader.bytes();
                    break;
                case 7:
                    message.latestDownloadSize = reader.int64();
                    break;
                case 8:
                    message.resourceVersion = reader.bytes();
                    break;
                case 9:
                    message.resourceDownloadUrl = reader.bytes();
                    break;
                case 10:
                    message.resourceDownloadMd5 = reader.bytes();
                    break;
                case 11:
                    message.resourceDownloadSize = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameVersionVerifyResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameVersionVerifyResponse} ProGameVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameVersionVerifyResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameVersionVerifyResponse message.
         * @function verify
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameVersionVerifyResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                if (!(message.forceUpgradeVersion && typeof message.forceUpgradeVersion.length === "number" || $util.isString(message.forceUpgradeVersion)))
                    return "forceUpgradeVersion: buffer expected";
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                if (!(message.latestVersion && typeof message.latestVersion.length === "number" || $util.isString(message.latestVersion)))
                    return "latestVersion: buffer expected";
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                if (!(message.latestDownloadUrl && typeof message.latestDownloadUrl.length === "number" || $util.isString(message.latestDownloadUrl)))
                    return "latestDownloadUrl: buffer expected";
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                if (!(message.latestDownloadMd5 && typeof message.latestDownloadMd5.length === "number" || $util.isString(message.latestDownloadMd5)))
                    return "latestDownloadMd5: buffer expected";
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                if (!$util.isInteger(message.latestDownloadSize) && !(message.latestDownloadSize && $util.isInteger(message.latestDownloadSize.low) && $util.isInteger(message.latestDownloadSize.high)))
                    return "latestDownloadSize: integer|Long expected";
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                if (!(message.resourceVersion && typeof message.resourceVersion.length === "number" || $util.isString(message.resourceVersion)))
                    return "resourceVersion: buffer expected";
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                if (!(message.resourceDownloadUrl && typeof message.resourceDownloadUrl.length === "number" || $util.isString(message.resourceDownloadUrl)))
                    return "resourceDownloadUrl: buffer expected";
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                if (!(message.resourceDownloadMd5 && typeof message.resourceDownloadMd5.length === "number" || $util.isString(message.resourceDownloadMd5)))
                    return "resourceDownloadMd5: buffer expected";
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                if (!$util.isInteger(message.resourceDownloadSize) && !(message.resourceDownloadSize && $util.isInteger(message.resourceDownloadSize.low) && $util.isInteger(message.resourceDownloadSize.high)))
                    return "resourceDownloadSize: integer|Long expected";
            return null;
        };

        /**
         * Creates a ProGameVersionVerifyResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameVersionVerifyResponse} ProGameVersionVerifyResponse
         */
        ProGameVersionVerifyResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameVersionVerifyResponse)
                return object;
            var message = new $root.messages.ProGameVersionVerifyResponse();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.forceUpgradeVersion != null)
                if (typeof object.forceUpgradeVersion === "string")
                    $util.base64.decode(object.forceUpgradeVersion, message.forceUpgradeVersion = $util.newBuffer($util.base64.length(object.forceUpgradeVersion)), 0);
                else if (object.forceUpgradeVersion.length)
                    message.forceUpgradeVersion = object.forceUpgradeVersion;
            if (object.latestVersion != null)
                if (typeof object.latestVersion === "string")
                    $util.base64.decode(object.latestVersion, message.latestVersion = $util.newBuffer($util.base64.length(object.latestVersion)), 0);
                else if (object.latestVersion.length)
                    message.latestVersion = object.latestVersion;
            if (object.latestDownloadUrl != null)
                if (typeof object.latestDownloadUrl === "string")
                    $util.base64.decode(object.latestDownloadUrl, message.latestDownloadUrl = $util.newBuffer($util.base64.length(object.latestDownloadUrl)), 0);
                else if (object.latestDownloadUrl.length)
                    message.latestDownloadUrl = object.latestDownloadUrl;
            if (object.latestDownloadMd5 != null)
                if (typeof object.latestDownloadMd5 === "string")
                    $util.base64.decode(object.latestDownloadMd5, message.latestDownloadMd5 = $util.newBuffer($util.base64.length(object.latestDownloadMd5)), 0);
                else if (object.latestDownloadMd5.length)
                    message.latestDownloadMd5 = object.latestDownloadMd5;
            if (object.latestDownloadSize != null)
                if ($util.Long)
                    (message.latestDownloadSize = $util.Long.fromValue(object.latestDownloadSize)).unsigned = false;
                else if (typeof object.latestDownloadSize === "string")
                    message.latestDownloadSize = parseInt(object.latestDownloadSize, 10);
                else if (typeof object.latestDownloadSize === "number")
                    message.latestDownloadSize = object.latestDownloadSize;
                else if (typeof object.latestDownloadSize === "object")
                    message.latestDownloadSize = new $util.LongBits(object.latestDownloadSize.low >>> 0, object.latestDownloadSize.high >>> 0).toNumber();
            if (object.resourceVersion != null)
                if (typeof object.resourceVersion === "string")
                    $util.base64.decode(object.resourceVersion, message.resourceVersion = $util.newBuffer($util.base64.length(object.resourceVersion)), 0);
                else if (object.resourceVersion.length)
                    message.resourceVersion = object.resourceVersion;
            if (object.resourceDownloadUrl != null)
                if (typeof object.resourceDownloadUrl === "string")
                    $util.base64.decode(object.resourceDownloadUrl, message.resourceDownloadUrl = $util.newBuffer($util.base64.length(object.resourceDownloadUrl)), 0);
                else if (object.resourceDownloadUrl.length)
                    message.resourceDownloadUrl = object.resourceDownloadUrl;
            if (object.resourceDownloadMd5 != null)
                if (typeof object.resourceDownloadMd5 === "string")
                    $util.base64.decode(object.resourceDownloadMd5, message.resourceDownloadMd5 = $util.newBuffer($util.base64.length(object.resourceDownloadMd5)), 0);
                else if (object.resourceDownloadMd5.length)
                    message.resourceDownloadMd5 = object.resourceDownloadMd5;
            if (object.resourceDownloadSize != null)
                if ($util.Long)
                    (message.resourceDownloadSize = $util.Long.fromValue(object.resourceDownloadSize)).unsigned = false;
                else if (typeof object.resourceDownloadSize === "string")
                    message.resourceDownloadSize = parseInt(object.resourceDownloadSize, 10);
                else if (typeof object.resourceDownloadSize === "number")
                    message.resourceDownloadSize = object.resourceDownloadSize;
                else if (typeof object.resourceDownloadSize === "object")
                    message.resourceDownloadSize = new $util.LongBits(object.resourceDownloadSize.low >>> 0, object.resourceDownloadSize.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a ProGameVersionVerifyResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameVersionVerifyResponse
         * @static
         * @param {messages.ProGameVersionVerifyResponse} message ProGameVersionVerifyResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameVersionVerifyResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.forceUpgradeVersion = options.bytes === String ? "" : [];
                object.latestVersion = options.bytes === String ? "" : [];
                object.latestDownloadUrl = options.bytes === String ? "" : [];
                object.latestDownloadMd5 = options.bytes === String ? "" : [];
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.latestDownloadSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.latestDownloadSize = options.longs === String ? "0" : 0;
                object.resourceVersion = options.bytes === String ? "" : [];
                object.resourceDownloadUrl = options.bytes === String ? "" : [];
                object.resourceDownloadMd5 = options.bytes === String ? "" : [];
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.resourceDownloadSize = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.resourceDownloadSize = options.longs === String ? "0" : 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.forceUpgradeVersion != null && message.hasOwnProperty("forceUpgradeVersion"))
                object.forceUpgradeVersion = options.bytes === String ? $util.base64.encode(message.forceUpgradeVersion, 0, message.forceUpgradeVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.forceUpgradeVersion) : message.forceUpgradeVersion;
            if (message.latestVersion != null && message.hasOwnProperty("latestVersion"))
                object.latestVersion = options.bytes === String ? $util.base64.encode(message.latestVersion, 0, message.latestVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestVersion) : message.latestVersion;
            if (message.latestDownloadUrl != null && message.hasOwnProperty("latestDownloadUrl"))
                object.latestDownloadUrl = options.bytes === String ? $util.base64.encode(message.latestDownloadUrl, 0, message.latestDownloadUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestDownloadUrl) : message.latestDownloadUrl;
            if (message.latestDownloadMd5 != null && message.hasOwnProperty("latestDownloadMd5"))
                object.latestDownloadMd5 = options.bytes === String ? $util.base64.encode(message.latestDownloadMd5, 0, message.latestDownloadMd5.length) : options.bytes === Array ? Array.prototype.slice.call(message.latestDownloadMd5) : message.latestDownloadMd5;
            if (message.latestDownloadSize != null && message.hasOwnProperty("latestDownloadSize"))
                if (typeof message.latestDownloadSize === "number")
                    object.latestDownloadSize = options.longs === String ? String(message.latestDownloadSize) : message.latestDownloadSize;
                else
                    object.latestDownloadSize = options.longs === String ? $util.Long.prototype.toString.call(message.latestDownloadSize) : options.longs === Number ? new $util.LongBits(message.latestDownloadSize.low >>> 0, message.latestDownloadSize.high >>> 0).toNumber() : message.latestDownloadSize;
            if (message.resourceVersion != null && message.hasOwnProperty("resourceVersion"))
                object.resourceVersion = options.bytes === String ? $util.base64.encode(message.resourceVersion, 0, message.resourceVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceVersion) : message.resourceVersion;
            if (message.resourceDownloadUrl != null && message.hasOwnProperty("resourceDownloadUrl"))
                object.resourceDownloadUrl = options.bytes === String ? $util.base64.encode(message.resourceDownloadUrl, 0, message.resourceDownloadUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceDownloadUrl) : message.resourceDownloadUrl;
            if (message.resourceDownloadMd5 != null && message.hasOwnProperty("resourceDownloadMd5"))
                object.resourceDownloadMd5 = options.bytes === String ? $util.base64.encode(message.resourceDownloadMd5, 0, message.resourceDownloadMd5.length) : options.bytes === Array ? Array.prototype.slice.call(message.resourceDownloadMd5) : message.resourceDownloadMd5;
            if (message.resourceDownloadSize != null && message.hasOwnProperty("resourceDownloadSize"))
                if (typeof message.resourceDownloadSize === "number")
                    object.resourceDownloadSize = options.longs === String ? String(message.resourceDownloadSize) : message.resourceDownloadSize;
                else
                    object.resourceDownloadSize = options.longs === String ? $util.Long.prototype.toString.call(message.resourceDownloadSize) : options.longs === Number ? new $util.LongBits(message.resourceDownloadSize.low >>> 0, message.resourceDownloadSize.high >>> 0).toNumber() : message.resourceDownloadSize;
            return object;
        };

        /**
         * Converts this ProGameVersionVerifyResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameVersionVerifyResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameVersionVerifyResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameVersionVerifyResponse.MSGID
         * @enum {string}
         * @property {number} ID=55 ID value
         */
        ProGameVersionVerifyResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[55] = "ID"] = 55;
            return values;
        })();

        return ProGameVersionVerifyResponse;
    })();

    messages.GameCategory = (function() {

        /**
         * Properties of a GameCategory.
         * @memberof messages
         * @interface IGameCategory
         * @property {number|null} [categoryId] GameCategory categoryId
         * @property {number|null} [parentId] GameCategory parentId
         * @property {Uint8Array|null} [categoryName] GameCategory categoryName
         */

        /**
         * Constructs a new GameCategory.
         * @memberof messages
         * @classdesc Represents a GameCategory.
         * @implements IGameCategory
         * @constructor
         * @param {messages.IGameCategory=} [properties] Properties to set
         */
        function GameCategory(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameCategory categoryId.
         * @member {number} categoryId
         * @memberof messages.GameCategory
         * @instance
         */
        GameCategory.prototype.categoryId = 0;

        /**
         * GameCategory parentId.
         * @member {number} parentId
         * @memberof messages.GameCategory
         * @instance
         */
        GameCategory.prototype.parentId = 0;

        /**
         * GameCategory categoryName.
         * @member {Uint8Array} categoryName
         * @memberof messages.GameCategory
         * @instance
         */
        GameCategory.prototype.categoryName = $util.newBuffer([]);

        /**
         * Creates a new GameCategory instance using the specified properties.
         * @function create
         * @memberof messages.GameCategory
         * @static
         * @param {messages.IGameCategory=} [properties] Properties to set
         * @returns {messages.GameCategory} GameCategory instance
         */
        GameCategory.create = function create(properties) {
            return new GameCategory(properties);
        };

        /**
         * Encodes the specified GameCategory message. Does not implicitly {@link messages.GameCategory.verify|verify} messages.
         * @function encode
         * @memberof messages.GameCategory
         * @static
         * @param {messages.IGameCategory} message GameCategory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCategory.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.categoryId);
            if (message.categoryName != null && message.hasOwnProperty("categoryName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.categoryName);
            if (message.parentId != null && message.hasOwnProperty("parentId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.parentId);
            return writer;
        };

        /**
         * Encodes the specified GameCategory message, length delimited. Does not implicitly {@link messages.GameCategory.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.GameCategory
         * @static
         * @param {messages.IGameCategory} message GameCategory message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameCategory.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameCategory message from the specified reader or buffer.
         * @function decode
         * @memberof messages.GameCategory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.GameCategory} GameCategory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCategory.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.GameCategory();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.categoryId = reader.int32();
                    break;
                case 4:
                    message.parentId = reader.int32();
                    break;
                case 3:
                    message.categoryName = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameCategory message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.GameCategory
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.GameCategory} GameCategory
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameCategory.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameCategory message.
         * @function verify
         * @memberof messages.GameCategory
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameCategory.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                if (!$util.isInteger(message.categoryId))
                    return "categoryId: integer expected";
            if (message.parentId != null && message.hasOwnProperty("parentId"))
                if (!$util.isInteger(message.parentId))
                    return "parentId: integer expected";
            if (message.categoryName != null && message.hasOwnProperty("categoryName"))
                if (!(message.categoryName && typeof message.categoryName.length === "number" || $util.isString(message.categoryName)))
                    return "categoryName: buffer expected";
            return null;
        };

        /**
         * Creates a GameCategory message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.GameCategory
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.GameCategory} GameCategory
         */
        GameCategory.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.GameCategory)
                return object;
            var message = new $root.messages.GameCategory();
            if (object.categoryId != null)
                message.categoryId = object.categoryId | 0;
            if (object.parentId != null)
                message.parentId = object.parentId | 0;
            if (object.categoryName != null)
                if (typeof object.categoryName === "string")
                    $util.base64.decode(object.categoryName, message.categoryName = $util.newBuffer($util.base64.length(object.categoryName)), 0);
                else if (object.categoryName.length)
                    message.categoryName = object.categoryName;
            return message;
        };

        /**
         * Creates a plain object from a GameCategory message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.GameCategory
         * @static
         * @param {messages.GameCategory} message GameCategory
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameCategory.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.categoryId = 0;
                object.categoryName = options.bytes === String ? "" : [];
                object.parentId = 0;
            }
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                object.categoryId = message.categoryId;
            if (message.categoryName != null && message.hasOwnProperty("categoryName"))
                object.categoryName = options.bytes === String ? $util.base64.encode(message.categoryName, 0, message.categoryName.length) : options.bytes === Array ? Array.prototype.slice.call(message.categoryName) : message.categoryName;
            if (message.parentId != null && message.hasOwnProperty("parentId"))
                object.parentId = message.parentId;
            return object;
        };

        /**
         * Converts this GameCategory to JSON.
         * @function toJSON
         * @memberof messages.GameCategory
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameCategory.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameCategory;
    })();

    messages.Game = (function() {

        /**
         * Properties of a Game.
         * @memberof messages
         * @interface IGame
         * @property {number|null} [gameId] Game gameId
         * @property {number|null} [categoryId] Game categoryId
         * @property {Uint8Array|null} [gameName] Game gameName
         * @property {Uint8Array|null} [keyword] Game keyword
         * @property {number|null} [onlineNums] Game onlineNums
         * @property {number|null} [priority] Game priority
         * @property {number|null} [downloadNums] Game downloadNums
         */

        /**
         * Constructs a new Game.
         * @memberof messages
         * @classdesc Represents a Game.
         * @implements IGame
         * @constructor
         * @param {messages.IGame=} [properties] Properties to set
         */
        function Game(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Game gameId.
         * @member {number} gameId
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.gameId = 0;

        /**
         * Game categoryId.
         * @member {number} categoryId
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.categoryId = 0;

        /**
         * Game gameName.
         * @member {Uint8Array} gameName
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.gameName = $util.newBuffer([]);

        /**
         * Game keyword.
         * @member {Uint8Array} keyword
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.keyword = $util.newBuffer([]);

        /**
         * Game onlineNums.
         * @member {number} onlineNums
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.onlineNums = 0;

        /**
         * Game priority.
         * @member {number} priority
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.priority = 0;

        /**
         * Game downloadNums.
         * @member {number} downloadNums
         * @memberof messages.Game
         * @instance
         */
        Game.prototype.downloadNums = 0;

        /**
         * Creates a new Game instance using the specified properties.
         * @function create
         * @memberof messages.Game
         * @static
         * @param {messages.IGame=} [properties] Properties to set
         * @returns {messages.Game} Game instance
         */
        Game.create = function create(properties) {
            return new Game(properties);
        };

        /**
         * Encodes the specified Game message. Does not implicitly {@link messages.Game.verify|verify} messages.
         * @function encode
         * @memberof messages.Game
         * @static
         * @param {messages.IGame} message Game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Game.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.categoryId);
            if (message.gameName != null && message.hasOwnProperty("gameName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.gameName);
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.keyword);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.onlineNums);
            if (message.priority != null && message.hasOwnProperty("priority"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.priority);
            if (message.downloadNums != null && message.hasOwnProperty("downloadNums"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.downloadNums);
            return writer;
        };

        /**
         * Encodes the specified Game message, length delimited. Does not implicitly {@link messages.Game.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.Game
         * @static
         * @param {messages.IGame} message Game message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Game.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Game message from the specified reader or buffer.
         * @function decode
         * @memberof messages.Game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.Game} Game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Game.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.Game();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.categoryId = reader.int32();
                    break;
                case 4:
                    message.gameName = reader.bytes();
                    break;
                case 5:
                    message.keyword = reader.bytes();
                    break;
                case 6:
                    message.onlineNums = reader.int32();
                    break;
                case 7:
                    message.priority = reader.int32();
                    break;
                case 8:
                    message.downloadNums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Game message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.Game
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.Game} Game
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Game.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Game message.
         * @function verify
         * @memberof messages.Game
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Game.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                if (!$util.isInteger(message.categoryId))
                    return "categoryId: integer expected";
            if (message.gameName != null && message.hasOwnProperty("gameName"))
                if (!(message.gameName && typeof message.gameName.length === "number" || $util.isString(message.gameName)))
                    return "gameName: buffer expected";
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                if (!(message.keyword && typeof message.keyword.length === "number" || $util.isString(message.keyword)))
                    return "keyword: buffer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            if (message.priority != null && message.hasOwnProperty("priority"))
                if (!$util.isInteger(message.priority))
                    return "priority: integer expected";
            if (message.downloadNums != null && message.hasOwnProperty("downloadNums"))
                if (!$util.isInteger(message.downloadNums))
                    return "downloadNums: integer expected";
            return null;
        };

        /**
         * Creates a Game message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.Game
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.Game} Game
         */
        Game.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.Game)
                return object;
            var message = new $root.messages.Game();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.categoryId != null)
                message.categoryId = object.categoryId | 0;
            if (object.gameName != null)
                if (typeof object.gameName === "string")
                    $util.base64.decode(object.gameName, message.gameName = $util.newBuffer($util.base64.length(object.gameName)), 0);
                else if (object.gameName.length)
                    message.gameName = object.gameName;
            if (object.keyword != null)
                if (typeof object.keyword === "string")
                    $util.base64.decode(object.keyword, message.keyword = $util.newBuffer($util.base64.length(object.keyword)), 0);
                else if (object.keyword.length)
                    message.keyword = object.keyword;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            if (object.priority != null)
                message.priority = object.priority | 0;
            if (object.downloadNums != null)
                message.downloadNums = object.downloadNums | 0;
            return message;
        };

        /**
         * Creates a plain object from a Game message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.Game
         * @static
         * @param {messages.Game} message Game
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Game.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.categoryId = 0;
                object.gameName = options.bytes === String ? "" : [];
                object.keyword = options.bytes === String ? "" : [];
                object.onlineNums = 0;
                object.priority = 0;
                object.downloadNums = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.categoryId != null && message.hasOwnProperty("categoryId"))
                object.categoryId = message.categoryId;
            if (message.gameName != null && message.hasOwnProperty("gameName"))
                object.gameName = options.bytes === String ? $util.base64.encode(message.gameName, 0, message.gameName.length) : options.bytes === Array ? Array.prototype.slice.call(message.gameName) : message.gameName;
            if (message.keyword != null && message.hasOwnProperty("keyword"))
                object.keyword = options.bytes === String ? $util.base64.encode(message.keyword, 0, message.keyword.length) : options.bytes === Array ? Array.prototype.slice.call(message.keyword) : message.keyword;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            if (message.priority != null && message.hasOwnProperty("priority"))
                object.priority = message.priority;
            if (message.downloadNums != null && message.hasOwnProperty("downloadNums"))
                object.downloadNums = message.downloadNums;
            return object;
        };

        /**
         * Converts this Game to JSON.
         * @function toJSON
         * @memberof messages.Game
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Game.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return Game;
    })();

    messages.GameRoom = (function() {

        /**
         * Properties of a GameRoom.
         * @memberof messages
         * @interface IGameRoom
         * @property {number|null} [gameId] GameRoom gameId
         * @property {number|null} [roomId] GameRoom roomId
         * @property {Uint8Array|null} [roomName] GameRoom roomName
         * @property {messages.GameRoom.RoomType|null} [roomType] GameRoom roomType
         * @property {messages.GameRoom.RoomCoinType|null} [roomCoinType] GameRoom roomCoinType
         * @property {number|null} [deskSeatNums] GameRoom deskSeatNums
         * @property {number|null} [deskNums] GameRoom deskNums
         * @property {number|null} [bottomCoin] GameRoom bottomCoin
         * @property {number|null} [taxCoin] GameRoom taxCoin
         * @property {number|null} [limitMinCoin] GameRoom limitMinCoin
         * @property {number|null} [limitMaxCoin] GameRoom limitMaxCoin
         * @property {number|null} [priority] GameRoom priority
         * @property {number|null} [onlineNums] GameRoom onlineNums
         * @property {number|null} [destId] GameRoom destId
         */

        /**
         * Constructs a new GameRoom.
         * @memberof messages
         * @classdesc Represents a GameRoom.
         * @implements IGameRoom
         * @constructor
         * @param {messages.IGameRoom=} [properties] Properties to set
         */
        function GameRoom(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameRoom gameId.
         * @member {number} gameId
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.gameId = 0;

        /**
         * GameRoom roomId.
         * @member {number} roomId
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.roomId = 0;

        /**
         * GameRoom roomName.
         * @member {Uint8Array} roomName
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.roomName = $util.newBuffer([]);

        /**
         * GameRoom roomType.
         * @member {messages.GameRoom.RoomType} roomType
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.roomType = 1;

        /**
         * GameRoom roomCoinType.
         * @member {messages.GameRoom.RoomCoinType} roomCoinType
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.roomCoinType = 1;

        /**
         * GameRoom deskSeatNums.
         * @member {number} deskSeatNums
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.deskSeatNums = 0;

        /**
         * GameRoom deskNums.
         * @member {number} deskNums
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.deskNums = 0;

        /**
         * GameRoom bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.bottomCoin = 0;

        /**
         * GameRoom taxCoin.
         * @member {number} taxCoin
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.taxCoin = 0;

        /**
         * GameRoom limitMinCoin.
         * @member {number} limitMinCoin
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.limitMinCoin = 0;

        /**
         * GameRoom limitMaxCoin.
         * @member {number} limitMaxCoin
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.limitMaxCoin = 0;

        /**
         * GameRoom priority.
         * @member {number} priority
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.priority = 0;

        /**
         * GameRoom onlineNums.
         * @member {number} onlineNums
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.onlineNums = 0;

        /**
         * GameRoom destId.
         * @member {number} destId
         * @memberof messages.GameRoom
         * @instance
         */
        GameRoom.prototype.destId = 0;

        /**
         * Creates a new GameRoom instance using the specified properties.
         * @function create
         * @memberof messages.GameRoom
         * @static
         * @param {messages.IGameRoom=} [properties] Properties to set
         * @returns {messages.GameRoom} GameRoom instance
         */
        GameRoom.create = function create(properties) {
            return new GameRoom(properties);
        };

        /**
         * Encodes the specified GameRoom message. Does not implicitly {@link messages.GameRoom.verify|verify} messages.
         * @function encode
         * @memberof messages.GameRoom
         * @static
         * @param {messages.IGameRoom} message GameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameRoom.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomId);
            if (message.roomName != null && message.hasOwnProperty("roomName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.roomName);
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomType);
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.roomCoinType);
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.deskSeatNums);
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.deskNums);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.bottomCoin);
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.taxCoin);
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.limitMinCoin);
            if (message.limitMaxCoin != null && message.hasOwnProperty("limitMaxCoin"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.limitMaxCoin);
            if (message.priority != null && message.hasOwnProperty("priority"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.priority);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 13, wireType 0 =*/104).int32(message.onlineNums);
            if (message.destId != null && message.hasOwnProperty("destId"))
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.destId);
            return writer;
        };

        /**
         * Encodes the specified GameRoom message, length delimited. Does not implicitly {@link messages.GameRoom.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.GameRoom
         * @static
         * @param {messages.IGameRoom} message GameRoom message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameRoom.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameRoom message from the specified reader or buffer.
         * @function decode
         * @memberof messages.GameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.GameRoom} GameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameRoom.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.GameRoom();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameId = reader.int32();
                    break;
                case 2:
                    message.roomId = reader.int32();
                    break;
                case 3:
                    message.roomName = reader.bytes();
                    break;
                case 4:
                    message.roomType = reader.int32();
                    break;
                case 5:
                    message.roomCoinType = reader.int32();
                    break;
                case 6:
                    message.deskSeatNums = reader.int32();
                    break;
                case 7:
                    message.deskNums = reader.int32();
                    break;
                case 8:
                    message.bottomCoin = reader.int32();
                    break;
                case 9:
                    message.taxCoin = reader.int32();
                    break;
                case 10:
                    message.limitMinCoin = reader.int32();
                    break;
                case 11:
                    message.limitMaxCoin = reader.int32();
                    break;
                case 12:
                    message.priority = reader.int32();
                    break;
                case 13:
                    message.onlineNums = reader.int32();
                    break;
                case 14:
                    message.destId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameRoom message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.GameRoom
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.GameRoom} GameRoom
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameRoom.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameRoom message.
         * @function verify
         * @memberof messages.GameRoom
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameRoom.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.roomName != null && message.hasOwnProperty("roomName"))
                if (!(message.roomName && typeof message.roomName.length === "number" || $util.isString(message.roomName)))
                    return "roomName: buffer expected";
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                switch (message.roomType) {
                default:
                    return "roomType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 99:
                    break;
                }
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                switch (message.roomCoinType) {
                default:
                    return "roomCoinType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                if (!$util.isInteger(message.deskSeatNums))
                    return "deskSeatNums: integer expected";
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                if (!$util.isInteger(message.deskNums))
                    return "deskNums: integer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                if (!$util.isInteger(message.taxCoin))
                    return "taxCoin: integer expected";
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                if (!$util.isInteger(message.limitMinCoin))
                    return "limitMinCoin: integer expected";
            if (message.limitMaxCoin != null && message.hasOwnProperty("limitMaxCoin"))
                if (!$util.isInteger(message.limitMaxCoin))
                    return "limitMaxCoin: integer expected";
            if (message.priority != null && message.hasOwnProperty("priority"))
                if (!$util.isInteger(message.priority))
                    return "priority: integer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            if (message.destId != null && message.hasOwnProperty("destId"))
                if (!$util.isInteger(message.destId))
                    return "destId: integer expected";
            return null;
        };

        /**
         * Creates a GameRoom message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.GameRoom
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.GameRoom} GameRoom
         */
        GameRoom.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.GameRoom)
                return object;
            var message = new $root.messages.GameRoom();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.roomName != null)
                if (typeof object.roomName === "string")
                    $util.base64.decode(object.roomName, message.roomName = $util.newBuffer($util.base64.length(object.roomName)), 0);
                else if (object.roomName.length)
                    message.roomName = object.roomName;
            switch (object.roomType) {
            case "NORMAL_ROOM":
            case 1:
                message.roomType = 1;
                break;
            case "CHEAT_ROOM":
            case 2:
                message.roomType = 2;
                break;
            case "QUEUE_ROOM":
            case 3:
                message.roomType = 3;
                break;
            case "MATCH_ROOM":
            case 4:
                message.roomType = 4;
                break;
            case "PERSONAL_ROOM":
            case 5:
                message.roomType = 5;
                break;
            case "CARD_ROOM":
            case 6:
                message.roomType = 6;
                break;
            case "COMMON_ROOM_TYPE_MAX":
            case 99:
                message.roomType = 99;
                break;
            }
            switch (object.roomCoinType) {
            case "COIN":
            case 1:
                message.roomCoinType = 1;
                break;
            case "POINT":
            case 2:
                message.roomCoinType = 2;
                break;
            }
            if (object.deskSeatNums != null)
                message.deskSeatNums = object.deskSeatNums | 0;
            if (object.deskNums != null)
                message.deskNums = object.deskNums | 0;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.taxCoin != null)
                message.taxCoin = object.taxCoin | 0;
            if (object.limitMinCoin != null)
                message.limitMinCoin = object.limitMinCoin | 0;
            if (object.limitMaxCoin != null)
                message.limitMaxCoin = object.limitMaxCoin | 0;
            if (object.priority != null)
                message.priority = object.priority | 0;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            if (object.destId != null)
                message.destId = object.destId | 0;
            return message;
        };

        /**
         * Creates a plain object from a GameRoom message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.GameRoom
         * @static
         * @param {messages.GameRoom} message GameRoom
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameRoom.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.roomId = 0;
                object.roomName = options.bytes === String ? "" : [];
                object.roomType = options.enums === String ? "NORMAL_ROOM" : 1;
                object.roomCoinType = options.enums === String ? "COIN" : 1;
                object.deskSeatNums = 0;
                object.deskNums = 0;
                object.bottomCoin = 0;
                object.taxCoin = 0;
                object.limitMinCoin = 0;
                object.limitMaxCoin = 0;
                object.priority = 0;
                object.onlineNums = 0;
                object.destId = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.roomName != null && message.hasOwnProperty("roomName"))
                object.roomName = options.bytes === String ? $util.base64.encode(message.roomName, 0, message.roomName.length) : options.bytes === Array ? Array.prototype.slice.call(message.roomName) : message.roomName;
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                object.roomType = options.enums === String ? $root.messages.GameRoom.RoomType[message.roomType] : message.roomType;
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                object.roomCoinType = options.enums === String ? $root.messages.GameRoom.RoomCoinType[message.roomCoinType] : message.roomCoinType;
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                object.deskSeatNums = message.deskSeatNums;
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                object.deskNums = message.deskNums;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                object.taxCoin = message.taxCoin;
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                object.limitMinCoin = message.limitMinCoin;
            if (message.limitMaxCoin != null && message.hasOwnProperty("limitMaxCoin"))
                object.limitMaxCoin = message.limitMaxCoin;
            if (message.priority != null && message.hasOwnProperty("priority"))
                object.priority = message.priority;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            if (message.destId != null && message.hasOwnProperty("destId"))
                object.destId = message.destId;
            return object;
        };

        /**
         * Converts this GameRoom to JSON.
         * @function toJSON
         * @memberof messages.GameRoom
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameRoom.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * RoomType enum.
         * @name messages.GameRoom.RoomType
         * @enum {string}
         * @property {number} NORMAL_ROOM=1 NORMAL_ROOM value
         * @property {number} CHEAT_ROOM=2 CHEAT_ROOM value
         * @property {number} QUEUE_ROOM=3 QUEUE_ROOM value
         * @property {number} MATCH_ROOM=4 MATCH_ROOM value
         * @property {number} PERSONAL_ROOM=5 PERSONAL_ROOM value
         * @property {number} CARD_ROOM=6 CARD_ROOM value
         * @property {number} COMMON_ROOM_TYPE_MAX=99 COMMON_ROOM_TYPE_MAX value
         */
        GameRoom.RoomType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "NORMAL_ROOM"] = 1;
            values[valuesById[2] = "CHEAT_ROOM"] = 2;
            values[valuesById[3] = "QUEUE_ROOM"] = 3;
            values[valuesById[4] = "MATCH_ROOM"] = 4;
            values[valuesById[5] = "PERSONAL_ROOM"] = 5;
            values[valuesById[6] = "CARD_ROOM"] = 6;
            values[valuesById[99] = "COMMON_ROOM_TYPE_MAX"] = 99;
            return values;
        })();

        /**
         * RoomCoinType enum.
         * @name messages.GameRoom.RoomCoinType
         * @enum {string}
         * @property {number} COIN=1 COIN value
         * @property {number} POINT=2 POINT value
         */
        GameRoom.RoomCoinType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "COIN"] = 1;
            values[valuesById[2] = "POINT"] = 2;
            return values;
        })();

        return GameRoom;
    })();

    messages.GameOnline = (function() {

        /**
         * Properties of a GameOnline.
         * @memberof messages
         * @interface IGameOnline
         * @property {number|null} [gameId] GameOnline gameId
         * @property {number|null} [onlineNums] GameOnline onlineNums
         */

        /**
         * Constructs a new GameOnline.
         * @memberof messages
         * @classdesc Represents a GameOnline.
         * @implements IGameOnline
         * @constructor
         * @param {messages.IGameOnline=} [properties] Properties to set
         */
        function GameOnline(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameOnline gameId.
         * @member {number} gameId
         * @memberof messages.GameOnline
         * @instance
         */
        GameOnline.prototype.gameId = 0;

        /**
         * GameOnline onlineNums.
         * @member {number} onlineNums
         * @memberof messages.GameOnline
         * @instance
         */
        GameOnline.prototype.onlineNums = 0;

        /**
         * Creates a new GameOnline instance using the specified properties.
         * @function create
         * @memberof messages.GameOnline
         * @static
         * @param {messages.IGameOnline=} [properties] Properties to set
         * @returns {messages.GameOnline} GameOnline instance
         */
        GameOnline.create = function create(properties) {
            return new GameOnline(properties);
        };

        /**
         * Encodes the specified GameOnline message. Does not implicitly {@link messages.GameOnline.verify|verify} messages.
         * @function encode
         * @memberof messages.GameOnline
         * @static
         * @param {messages.IGameOnline} message GameOnline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOnline.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameId);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.onlineNums);
            return writer;
        };

        /**
         * Encodes the specified GameOnline message, length delimited. Does not implicitly {@link messages.GameOnline.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.GameOnline
         * @static
         * @param {messages.IGameOnline} message GameOnline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameOnline.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameOnline message from the specified reader or buffer.
         * @function decode
         * @memberof messages.GameOnline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.GameOnline} GameOnline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOnline.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.GameOnline();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.gameId = reader.int32();
                    break;
                case 2:
                    message.onlineNums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameOnline message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.GameOnline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.GameOnline} GameOnline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameOnline.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameOnline message.
         * @function verify
         * @memberof messages.GameOnline
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameOnline.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            return null;
        };

        /**
         * Creates a GameOnline message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.GameOnline
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.GameOnline} GameOnline
         */
        GameOnline.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.GameOnline)
                return object;
            var message = new $root.messages.GameOnline();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            return message;
        };

        /**
         * Creates a plain object from a GameOnline message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.GameOnline
         * @static
         * @param {messages.GameOnline} message GameOnline
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameOnline.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.onlineNums = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            return object;
        };

        /**
         * Converts this GameOnline to JSON.
         * @function toJSON
         * @memberof messages.GameOnline
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameOnline.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameOnline;
    })();

    messages.GameRoomOnline = (function() {

        /**
         * Properties of a GameRoomOnline.
         * @memberof messages
         * @interface IGameRoomOnline
         * @property {number|null} [roomId] GameRoomOnline roomId
         * @property {number|null} [onlineNums] GameRoomOnline onlineNums
         * @property {number|null} [roomType] GameRoomOnline roomType
         */

        /**
         * Constructs a new GameRoomOnline.
         * @memberof messages
         * @classdesc Represents a GameRoomOnline.
         * @implements IGameRoomOnline
         * @constructor
         * @param {messages.IGameRoomOnline=} [properties] Properties to set
         */
        function GameRoomOnline(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * GameRoomOnline roomId.
         * @member {number} roomId
         * @memberof messages.GameRoomOnline
         * @instance
         */
        GameRoomOnline.prototype.roomId = 0;

        /**
         * GameRoomOnline onlineNums.
         * @member {number} onlineNums
         * @memberof messages.GameRoomOnline
         * @instance
         */
        GameRoomOnline.prototype.onlineNums = 0;

        /**
         * GameRoomOnline roomType.
         * @member {number} roomType
         * @memberof messages.GameRoomOnline
         * @instance
         */
        GameRoomOnline.prototype.roomType = 0;

        /**
         * Creates a new GameRoomOnline instance using the specified properties.
         * @function create
         * @memberof messages.GameRoomOnline
         * @static
         * @param {messages.IGameRoomOnline=} [properties] Properties to set
         * @returns {messages.GameRoomOnline} GameRoomOnline instance
         */
        GameRoomOnline.create = function create(properties) {
            return new GameRoomOnline(properties);
        };

        /**
         * Encodes the specified GameRoomOnline message. Does not implicitly {@link messages.GameRoomOnline.verify|verify} messages.
         * @function encode
         * @memberof messages.GameRoomOnline
         * @static
         * @param {messages.IGameRoomOnline} message GameRoomOnline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameRoomOnline.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roomId);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.onlineNums);
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomType);
            return writer;
        };

        /**
         * Encodes the specified GameRoomOnline message, length delimited. Does not implicitly {@link messages.GameRoomOnline.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.GameRoomOnline
         * @static
         * @param {messages.IGameRoomOnline} message GameRoomOnline message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        GameRoomOnline.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a GameRoomOnline message from the specified reader or buffer.
         * @function decode
         * @memberof messages.GameRoomOnline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.GameRoomOnline} GameRoomOnline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameRoomOnline.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.GameRoomOnline();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.roomId = reader.int32();
                    break;
                case 2:
                    message.onlineNums = reader.int32();
                    break;
                case 3:
                    message.roomType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a GameRoomOnline message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.GameRoomOnline
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.GameRoomOnline} GameRoomOnline
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        GameRoomOnline.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a GameRoomOnline message.
         * @function verify
         * @memberof messages.GameRoomOnline
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        GameRoomOnline.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                if (!$util.isInteger(message.roomType))
                    return "roomType: integer expected";
            return null;
        };

        /**
         * Creates a GameRoomOnline message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.GameRoomOnline
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.GameRoomOnline} GameRoomOnline
         */
        GameRoomOnline.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.GameRoomOnline)
                return object;
            var message = new $root.messages.GameRoomOnline();
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            if (object.roomType != null)
                message.roomType = object.roomType | 0;
            return message;
        };

        /**
         * Creates a plain object from a GameRoomOnline message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.GameRoomOnline
         * @static
         * @param {messages.GameRoomOnline} message GameRoomOnline
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        GameRoomOnline.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomId = 0;
                object.onlineNums = 0;
                object.roomType = 0;
            }
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                object.roomType = message.roomType;
            return object;
        };

        /**
         * Converts this GameRoomOnline to JSON.
         * @function toJSON
         * @memberof messages.GameRoomOnline
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        GameRoomOnline.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return GameRoomOnline;
    })();

    messages.ProGameCategoryRequest = (function() {

        /**
         * Properties of a ProGameCategoryRequest.
         * @memberof messages
         * @interface IProGameCategoryRequest
         */

        /**
         * Constructs a new ProGameCategoryRequest.
         * @memberof messages
         * @classdesc Represents a ProGameCategoryRequest.
         * @implements IProGameCategoryRequest
         * @constructor
         * @param {messages.IProGameCategoryRequest=} [properties] Properties to set
         */
        function ProGameCategoryRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameCategoryRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {messages.IProGameCategoryRequest=} [properties] Properties to set
         * @returns {messages.ProGameCategoryRequest} ProGameCategoryRequest instance
         */
        ProGameCategoryRequest.create = function create(properties) {
            return new ProGameCategoryRequest(properties);
        };

        /**
         * Encodes the specified ProGameCategoryRequest message. Does not implicitly {@link messages.ProGameCategoryRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {messages.IProGameCategoryRequest} message ProGameCategoryRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameCategoryRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameCategoryRequest message, length delimited. Does not implicitly {@link messages.ProGameCategoryRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {messages.IProGameCategoryRequest} message ProGameCategoryRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameCategoryRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameCategoryRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameCategoryRequest} ProGameCategoryRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameCategoryRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameCategoryRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameCategoryRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameCategoryRequest} ProGameCategoryRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameCategoryRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameCategoryRequest message.
         * @function verify
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameCategoryRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameCategoryRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameCategoryRequest} ProGameCategoryRequest
         */
        ProGameCategoryRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameCategoryRequest)
                return object;
            return new $root.messages.ProGameCategoryRequest();
        };

        /**
         * Creates a plain object from a ProGameCategoryRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameCategoryRequest
         * @static
         * @param {messages.ProGameCategoryRequest} message ProGameCategoryRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameCategoryRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameCategoryRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameCategoryRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameCategoryRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameCategoryRequest.MSGID
         * @enum {string}
         * @property {number} ID=56 ID value
         */
        ProGameCategoryRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[56] = "ID"] = 56;
            return values;
        })();

        return ProGameCategoryRequest;
    })();

    messages.ProGameCategoryResponse = (function() {

        /**
         * Properties of a ProGameCategoryResponse.
         * @memberof messages
         * @interface IProGameCategoryResponse
         * @property {Array.<messages.IGameCategory>|null} [category] ProGameCategoryResponse category
         */

        /**
         * Constructs a new ProGameCategoryResponse.
         * @memberof messages
         * @classdesc Represents a ProGameCategoryResponse.
         * @implements IProGameCategoryResponse
         * @constructor
         * @param {messages.IProGameCategoryResponse=} [properties] Properties to set
         */
        function ProGameCategoryResponse(properties) {
            this.category = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameCategoryResponse category.
         * @member {Array.<messages.IGameCategory>} category
         * @memberof messages.ProGameCategoryResponse
         * @instance
         */
        ProGameCategoryResponse.prototype.category = $util.emptyArray;

        /**
         * Creates a new ProGameCategoryResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {messages.IProGameCategoryResponse=} [properties] Properties to set
         * @returns {messages.ProGameCategoryResponse} ProGameCategoryResponse instance
         */
        ProGameCategoryResponse.create = function create(properties) {
            return new ProGameCategoryResponse(properties);
        };

        /**
         * Encodes the specified ProGameCategoryResponse message. Does not implicitly {@link messages.ProGameCategoryResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {messages.IProGameCategoryResponse} message ProGameCategoryResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameCategoryResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.category != null && message.category.length)
                for (var i = 0; i < message.category.length; ++i)
                    $root.messages.GameCategory.encode(message.category[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameCategoryResponse message, length delimited. Does not implicitly {@link messages.ProGameCategoryResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {messages.IProGameCategoryResponse} message ProGameCategoryResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameCategoryResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameCategoryResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameCategoryResponse} ProGameCategoryResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameCategoryResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameCategoryResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.category && message.category.length))
                        message.category = [];
                    message.category.push($root.messages.GameCategory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameCategoryResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameCategoryResponse} ProGameCategoryResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameCategoryResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameCategoryResponse message.
         * @function verify
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameCategoryResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.category != null && message.hasOwnProperty("category")) {
                if (!Array.isArray(message.category))
                    return "category: array expected";
                for (var i = 0; i < message.category.length; ++i) {
                    var error = $root.messages.GameCategory.verify(message.category[i]);
                    if (error)
                        return "category." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGameCategoryResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameCategoryResponse} ProGameCategoryResponse
         */
        ProGameCategoryResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameCategoryResponse)
                return object;
            var message = new $root.messages.ProGameCategoryResponse();
            if (object.category) {
                if (!Array.isArray(object.category))
                    throw TypeError(".messages.ProGameCategoryResponse.category: array expected");
                message.category = [];
                for (var i = 0; i < object.category.length; ++i) {
                    if (typeof object.category[i] !== "object")
                        throw TypeError(".messages.ProGameCategoryResponse.category: object expected");
                    message.category[i] = $root.messages.GameCategory.fromObject(object.category[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameCategoryResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameCategoryResponse
         * @static
         * @param {messages.ProGameCategoryResponse} message ProGameCategoryResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameCategoryResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.category = [];
            if (message.category && message.category.length) {
                object.category = [];
                for (var j = 0; j < message.category.length; ++j)
                    object.category[j] = $root.messages.GameCategory.toObject(message.category[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGameCategoryResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameCategoryResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameCategoryResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameCategoryResponse.MSGID
         * @enum {string}
         * @property {number} ID=57 ID value
         */
        ProGameCategoryResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[57] = "ID"] = 57;
            return values;
        })();

        return ProGameCategoryResponse;
    })();

    messages.ProGameListRequest = (function() {

        /**
         * Properties of a ProGameListRequest.
         * @memberof messages
         * @interface IProGameListRequest
         */

        /**
         * Constructs a new ProGameListRequest.
         * @memberof messages
         * @classdesc Represents a ProGameListRequest.
         * @implements IProGameListRequest
         * @constructor
         * @param {messages.IProGameListRequest=} [properties] Properties to set
         */
        function ProGameListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameListRequest
         * @static
         * @param {messages.IProGameListRequest=} [properties] Properties to set
         * @returns {messages.ProGameListRequest} ProGameListRequest instance
         */
        ProGameListRequest.create = function create(properties) {
            return new ProGameListRequest(properties);
        };

        /**
         * Encodes the specified ProGameListRequest message. Does not implicitly {@link messages.ProGameListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameListRequest
         * @static
         * @param {messages.IProGameListRequest} message ProGameListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameListRequest message, length delimited. Does not implicitly {@link messages.ProGameListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameListRequest
         * @static
         * @param {messages.IProGameListRequest} message ProGameListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameListRequest} ProGameListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameListRequest} ProGameListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameListRequest message.
         * @function verify
         * @memberof messages.ProGameListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameListRequest} ProGameListRequest
         */
        ProGameListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameListRequest)
                return object;
            return new $root.messages.ProGameListRequest();
        };

        /**
         * Creates a plain object from a ProGameListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameListRequest
         * @static
         * @param {messages.ProGameListRequest} message ProGameListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameListRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameListRequest.MSGID
         * @enum {string}
         * @property {number} ID=58 ID value
         */
        ProGameListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[58] = "ID"] = 58;
            return values;
        })();

        return ProGameListRequest;
    })();

    messages.ProGameListResponse = (function() {

        /**
         * Properties of a ProGameListResponse.
         * @memberof messages
         * @interface IProGameListResponse
         * @property {Array.<messages.IGame>|null} [game] ProGameListResponse game
         */

        /**
         * Constructs a new ProGameListResponse.
         * @memberof messages
         * @classdesc Represents a ProGameListResponse.
         * @implements IProGameListResponse
         * @constructor
         * @param {messages.IProGameListResponse=} [properties] Properties to set
         */
        function ProGameListResponse(properties) {
            this.game = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameListResponse game.
         * @member {Array.<messages.IGame>} game
         * @memberof messages.ProGameListResponse
         * @instance
         */
        ProGameListResponse.prototype.game = $util.emptyArray;

        /**
         * Creates a new ProGameListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameListResponse
         * @static
         * @param {messages.IProGameListResponse=} [properties] Properties to set
         * @returns {messages.ProGameListResponse} ProGameListResponse instance
         */
        ProGameListResponse.create = function create(properties) {
            return new ProGameListResponse(properties);
        };

        /**
         * Encodes the specified ProGameListResponse message. Does not implicitly {@link messages.ProGameListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameListResponse
         * @static
         * @param {messages.IProGameListResponse} message ProGameListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.game != null && message.game.length)
                for (var i = 0; i < message.game.length; ++i)
                    $root.messages.Game.encode(message.game[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameListResponse message, length delimited. Does not implicitly {@link messages.ProGameListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameListResponse
         * @static
         * @param {messages.IProGameListResponse} message ProGameListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameListResponse} ProGameListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.game && message.game.length))
                        message.game = [];
                    message.game.push($root.messages.Game.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameListResponse} ProGameListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameListResponse message.
         * @function verify
         * @memberof messages.ProGameListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.game != null && message.hasOwnProperty("game")) {
                if (!Array.isArray(message.game))
                    return "game: array expected";
                for (var i = 0; i < message.game.length; ++i) {
                    var error = $root.messages.Game.verify(message.game[i]);
                    if (error)
                        return "game." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGameListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameListResponse} ProGameListResponse
         */
        ProGameListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameListResponse)
                return object;
            var message = new $root.messages.ProGameListResponse();
            if (object.game) {
                if (!Array.isArray(object.game))
                    throw TypeError(".messages.ProGameListResponse.game: array expected");
                message.game = [];
                for (var i = 0; i < object.game.length; ++i) {
                    if (typeof object.game[i] !== "object")
                        throw TypeError(".messages.ProGameListResponse.game: object expected");
                    message.game[i] = $root.messages.Game.fromObject(object.game[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameListResponse
         * @static
         * @param {messages.ProGameListResponse} message ProGameListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.game = [];
            if (message.game && message.game.length) {
                object.game = [];
                for (var j = 0; j < message.game.length; ++j)
                    object.game[j] = $root.messages.Game.toObject(message.game[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGameListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameListResponse.MSGID
         * @enum {string}
         * @property {number} ID=59 ID value
         */
        ProGameListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[59] = "ID"] = 59;
            return values;
        })();

        return ProGameListResponse;
    })();

    messages.ProGameRoomListRequest = (function() {

        /**
         * Properties of a ProGameRoomListRequest.
         * @memberof messages
         * @interface IProGameRoomListRequest
         * @property {number|null} [gameId] ProGameRoomListRequest gameId
         */

        /**
         * Constructs a new ProGameRoomListRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomListRequest.
         * @implements IProGameRoomListRequest
         * @constructor
         * @param {messages.IProGameRoomListRequest=} [properties] Properties to set
         */
        function ProGameRoomListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomListRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomListRequest
         * @instance
         */
        ProGameRoomListRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGameRoomListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {messages.IProGameRoomListRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomListRequest} ProGameRoomListRequest instance
         */
        ProGameRoomListRequest.create = function create(properties) {
            return new ProGameRoomListRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomListRequest message. Does not implicitly {@link messages.ProGameRoomListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {messages.IProGameRoomListRequest} message ProGameRoomListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomListRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {messages.IProGameRoomListRequest} message ProGameRoomListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomListRequest} ProGameRoomListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomListRequest} ProGameRoomListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomListRequest message.
         * @function verify
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomListRequest} ProGameRoomListRequest
         */
        ProGameRoomListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomListRequest)
                return object;
            var message = new $root.messages.ProGameRoomListRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomListRequest
         * @static
         * @param {messages.ProGameRoomListRequest} message ProGameRoomListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gameId = 0;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGameRoomListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomListRequest.MSGID
         * @enum {string}
         * @property {number} ID=60 ID value
         */
        ProGameRoomListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[60] = "ID"] = 60;
            return values;
        })();

        return ProGameRoomListRequest;
    })();

    messages.ProGameRoomListNewRequest = (function() {

        /**
         * Properties of a ProGameRoomListNewRequest.
         * @memberof messages
         * @interface IProGameRoomListNewRequest
         * @property {number|null} [gameId] ProGameRoomListNewRequest gameId
         */

        /**
         * Constructs a new ProGameRoomListNewRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomListNewRequest.
         * @implements IProGameRoomListNewRequest
         * @constructor
         * @param {messages.IProGameRoomListNewRequest=} [properties] Properties to set
         */
        function ProGameRoomListNewRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomListNewRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomListNewRequest
         * @instance
         */
        ProGameRoomListNewRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGameRoomListNewRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {messages.IProGameRoomListNewRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomListNewRequest} ProGameRoomListNewRequest instance
         */
        ProGameRoomListNewRequest.create = function create(properties) {
            return new ProGameRoomListNewRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomListNewRequest message. Does not implicitly {@link messages.ProGameRoomListNewRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {messages.IProGameRoomListNewRequest} message ProGameRoomListNewRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListNewRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomListNewRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomListNewRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {messages.IProGameRoomListNewRequest} message ProGameRoomListNewRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListNewRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomListNewRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomListNewRequest} ProGameRoomListNewRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListNewRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomListNewRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomListNewRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomListNewRequest} ProGameRoomListNewRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListNewRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomListNewRequest message.
         * @function verify
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomListNewRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomListNewRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomListNewRequest} ProGameRoomListNewRequest
         */
        ProGameRoomListNewRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomListNewRequest)
                return object;
            var message = new $root.messages.ProGameRoomListNewRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomListNewRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomListNewRequest
         * @static
         * @param {messages.ProGameRoomListNewRequest} message ProGameRoomListNewRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomListNewRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gameId = 0;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGameRoomListNewRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomListNewRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomListNewRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomListNewRequest.MSGID
         * @enum {string}
         * @property {number} ID=67 ID value
         */
        ProGameRoomListNewRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[67] = "ID"] = 67;
            return values;
        })();

        return ProGameRoomListNewRequest;
    })();

    messages.ProGameRoomListResponse = (function() {

        /**
         * Properties of a ProGameRoomListResponse.
         * @memberof messages
         * @interface IProGameRoomListResponse
         * @property {number|null} [gameId] ProGameRoomListResponse gameId
         * @property {number|null} [gameCategoryId] ProGameRoomListResponse gameCategoryId
         * @property {Array.<messages.IGameRoom>|null} [room] ProGameRoomListResponse room
         */

        /**
         * Constructs a new ProGameRoomListResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomListResponse.
         * @implements IProGameRoomListResponse
         * @constructor
         * @param {messages.IProGameRoomListResponse=} [properties] Properties to set
         */
        function ProGameRoomListResponse(properties) {
            this.room = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomListResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomListResponse
         * @instance
         */
        ProGameRoomListResponse.prototype.gameId = 0;

        /**
         * ProGameRoomListResponse gameCategoryId.
         * @member {number} gameCategoryId
         * @memberof messages.ProGameRoomListResponse
         * @instance
         */
        ProGameRoomListResponse.prototype.gameCategoryId = 0;

        /**
         * ProGameRoomListResponse room.
         * @member {Array.<messages.IGameRoom>} room
         * @memberof messages.ProGameRoomListResponse
         * @instance
         */
        ProGameRoomListResponse.prototype.room = $util.emptyArray;

        /**
         * Creates a new ProGameRoomListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {messages.IProGameRoomListResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomListResponse} ProGameRoomListResponse instance
         */
        ProGameRoomListResponse.create = function create(properties) {
            return new ProGameRoomListResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomListResponse message. Does not implicitly {@link messages.ProGameRoomListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {messages.IProGameRoomListResponse} message ProGameRoomListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.gameCategoryId != null && message.hasOwnProperty("gameCategoryId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameCategoryId);
            if (message.room != null && message.room.length)
                for (var i = 0; i < message.room.length; ++i)
                    $root.messages.GameRoom.encode(message.room[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomListResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {messages.IProGameRoomListResponse} message ProGameRoomListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomListResponse} ProGameRoomListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.gameCategoryId = reader.int32();
                    break;
                case 4:
                    if (!(message.room && message.room.length))
                        message.room = [];
                    message.room.push($root.messages.GameRoom.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomListResponse} ProGameRoomListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomListResponse message.
         * @function verify
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.gameCategoryId != null && message.hasOwnProperty("gameCategoryId"))
                if (!$util.isInteger(message.gameCategoryId))
                    return "gameCategoryId: integer expected";
            if (message.room != null && message.hasOwnProperty("room")) {
                if (!Array.isArray(message.room))
                    return "room: array expected";
                for (var i = 0; i < message.room.length; ++i) {
                    var error = $root.messages.GameRoom.verify(message.room[i]);
                    if (error)
                        return "room." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGameRoomListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomListResponse} ProGameRoomListResponse
         */
        ProGameRoomListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomListResponse)
                return object;
            var message = new $root.messages.ProGameRoomListResponse();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.gameCategoryId != null)
                message.gameCategoryId = object.gameCategoryId | 0;
            if (object.room) {
                if (!Array.isArray(object.room))
                    throw TypeError(".messages.ProGameRoomListResponse.room: array expected");
                message.room = [];
                for (var i = 0; i < object.room.length; ++i) {
                    if (typeof object.room[i] !== "object")
                        throw TypeError(".messages.ProGameRoomListResponse.room: object expected");
                    message.room[i] = $root.messages.GameRoom.fromObject(object.room[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomListResponse
         * @static
         * @param {messages.ProGameRoomListResponse} message ProGameRoomListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.room = [];
            if (options.defaults) {
                object.gameId = 0;
                object.gameCategoryId = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.gameCategoryId != null && message.hasOwnProperty("gameCategoryId"))
                object.gameCategoryId = message.gameCategoryId;
            if (message.room && message.room.length) {
                object.room = [];
                for (var j = 0; j < message.room.length; ++j)
                    object.room[j] = $root.messages.GameRoom.toObject(message.room[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGameRoomListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomListResponse.MSGID
         * @enum {string}
         * @property {number} ID=61 ID value
         */
        ProGameRoomListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[61] = "ID"] = 61;
            return values;
        })();

        return ProGameRoomListResponse;
    })();

    messages.ProGameOnlineRequest = (function() {

        /**
         * Properties of a ProGameOnlineRequest.
         * @memberof messages
         * @interface IProGameOnlineRequest
         */

        /**
         * Constructs a new ProGameOnlineRequest.
         * @memberof messages
         * @classdesc Represents a ProGameOnlineRequest.
         * @implements IProGameOnlineRequest
         * @constructor
         * @param {messages.IProGameOnlineRequest=} [properties] Properties to set
         */
        function ProGameOnlineRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameOnlineRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {messages.IProGameOnlineRequest=} [properties] Properties to set
         * @returns {messages.ProGameOnlineRequest} ProGameOnlineRequest instance
         */
        ProGameOnlineRequest.create = function create(properties) {
            return new ProGameOnlineRequest(properties);
        };

        /**
         * Encodes the specified ProGameOnlineRequest message. Does not implicitly {@link messages.ProGameOnlineRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {messages.IProGameOnlineRequest} message ProGameOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameOnlineRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameOnlineRequest message, length delimited. Does not implicitly {@link messages.ProGameOnlineRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {messages.IProGameOnlineRequest} message ProGameOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameOnlineRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameOnlineRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameOnlineRequest} ProGameOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameOnlineRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameOnlineRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameOnlineRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameOnlineRequest} ProGameOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameOnlineRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameOnlineRequest message.
         * @function verify
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameOnlineRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameOnlineRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameOnlineRequest} ProGameOnlineRequest
         */
        ProGameOnlineRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameOnlineRequest)
                return object;
            return new $root.messages.ProGameOnlineRequest();
        };

        /**
         * Creates a plain object from a ProGameOnlineRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameOnlineRequest
         * @static
         * @param {messages.ProGameOnlineRequest} message ProGameOnlineRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameOnlineRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameOnlineRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameOnlineRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameOnlineRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameOnlineRequest.MSGID
         * @enum {string}
         * @property {number} ID=62 ID value
         */
        ProGameOnlineRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[62] = "ID"] = 62;
            return values;
        })();

        return ProGameOnlineRequest;
    })();

    messages.ProGameOnlineResponse = (function() {

        /**
         * Properties of a ProGameOnlineResponse.
         * @memberof messages
         * @interface IProGameOnlineResponse
         * @property {Array.<messages.IGameOnline>|null} [online] ProGameOnlineResponse online
         */

        /**
         * Constructs a new ProGameOnlineResponse.
         * @memberof messages
         * @classdesc Represents a ProGameOnlineResponse.
         * @implements IProGameOnlineResponse
         * @constructor
         * @param {messages.IProGameOnlineResponse=} [properties] Properties to set
         */
        function ProGameOnlineResponse(properties) {
            this.online = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameOnlineResponse online.
         * @member {Array.<messages.IGameOnline>} online
         * @memberof messages.ProGameOnlineResponse
         * @instance
         */
        ProGameOnlineResponse.prototype.online = $util.emptyArray;

        /**
         * Creates a new ProGameOnlineResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {messages.IProGameOnlineResponse=} [properties] Properties to set
         * @returns {messages.ProGameOnlineResponse} ProGameOnlineResponse instance
         */
        ProGameOnlineResponse.create = function create(properties) {
            return new ProGameOnlineResponse(properties);
        };

        /**
         * Encodes the specified ProGameOnlineResponse message. Does not implicitly {@link messages.ProGameOnlineResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {messages.IProGameOnlineResponse} message ProGameOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameOnlineResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.online != null && message.online.length)
                for (var i = 0; i < message.online.length; ++i)
                    $root.messages.GameOnline.encode(message.online[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameOnlineResponse message, length delimited. Does not implicitly {@link messages.ProGameOnlineResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {messages.IProGameOnlineResponse} message ProGameOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameOnlineResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameOnlineResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameOnlineResponse} ProGameOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameOnlineResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameOnlineResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.online && message.online.length))
                        message.online = [];
                    message.online.push($root.messages.GameOnline.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameOnlineResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameOnlineResponse} ProGameOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameOnlineResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameOnlineResponse message.
         * @function verify
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameOnlineResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.online != null && message.hasOwnProperty("online")) {
                if (!Array.isArray(message.online))
                    return "online: array expected";
                for (var i = 0; i < message.online.length; ++i) {
                    var error = $root.messages.GameOnline.verify(message.online[i]);
                    if (error)
                        return "online." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGameOnlineResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameOnlineResponse} ProGameOnlineResponse
         */
        ProGameOnlineResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameOnlineResponse)
                return object;
            var message = new $root.messages.ProGameOnlineResponse();
            if (object.online) {
                if (!Array.isArray(object.online))
                    throw TypeError(".messages.ProGameOnlineResponse.online: array expected");
                message.online = [];
                for (var i = 0; i < object.online.length; ++i) {
                    if (typeof object.online[i] !== "object")
                        throw TypeError(".messages.ProGameOnlineResponse.online: object expected");
                    message.online[i] = $root.messages.GameOnline.fromObject(object.online[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameOnlineResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameOnlineResponse
         * @static
         * @param {messages.ProGameOnlineResponse} message ProGameOnlineResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameOnlineResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.online = [];
            if (message.online && message.online.length) {
                object.online = [];
                for (var j = 0; j < message.online.length; ++j)
                    object.online[j] = $root.messages.GameOnline.toObject(message.online[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGameOnlineResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameOnlineResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameOnlineResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameOnlineResponse.MSGID
         * @enum {string}
         * @property {number} ID=63 ID value
         */
        ProGameOnlineResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[63] = "ID"] = 63;
            return values;
        })();

        return ProGameOnlineResponse;
    })();

    messages.ProGameRoomOnlineRequest = (function() {

        /**
         * Properties of a ProGameRoomOnlineRequest.
         * @memberof messages
         * @interface IProGameRoomOnlineRequest
         * @property {number|null} [gameId] ProGameRoomOnlineRequest gameId
         */

        /**
         * Constructs a new ProGameRoomOnlineRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomOnlineRequest.
         * @implements IProGameRoomOnlineRequest
         * @constructor
         * @param {messages.IProGameRoomOnlineRequest=} [properties] Properties to set
         */
        function ProGameRoomOnlineRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomOnlineRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomOnlineRequest
         * @instance
         */
        ProGameRoomOnlineRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGameRoomOnlineRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {messages.IProGameRoomOnlineRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomOnlineRequest} ProGameRoomOnlineRequest instance
         */
        ProGameRoomOnlineRequest.create = function create(properties) {
            return new ProGameRoomOnlineRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomOnlineRequest message. Does not implicitly {@link messages.ProGameRoomOnlineRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {messages.IProGameRoomOnlineRequest} message ProGameRoomOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomOnlineRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomOnlineRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomOnlineRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {messages.IProGameRoomOnlineRequest} message ProGameRoomOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomOnlineRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomOnlineRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomOnlineRequest} ProGameRoomOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomOnlineRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomOnlineRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomOnlineRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomOnlineRequest} ProGameRoomOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomOnlineRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomOnlineRequest message.
         * @function verify
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomOnlineRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomOnlineRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomOnlineRequest} ProGameRoomOnlineRequest
         */
        ProGameRoomOnlineRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomOnlineRequest)
                return object;
            var message = new $root.messages.ProGameRoomOnlineRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomOnlineRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomOnlineRequest
         * @static
         * @param {messages.ProGameRoomOnlineRequest} message ProGameRoomOnlineRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomOnlineRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gameId = 0;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGameRoomOnlineRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomOnlineRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomOnlineRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomOnlineRequest.MSGID
         * @enum {string}
         * @property {number} ID=64 ID value
         */
        ProGameRoomOnlineRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[64] = "ID"] = 64;
            return values;
        })();

        return ProGameRoomOnlineRequest;
    })();

    messages.ProGameRoomOnlineResponse = (function() {

        /**
         * Properties of a ProGameRoomOnlineResponse.
         * @memberof messages
         * @interface IProGameRoomOnlineResponse
         * @property {number|null} [gameId] ProGameRoomOnlineResponse gameId
         * @property {Array.<messages.IGameRoomOnline>|null} [online] ProGameRoomOnlineResponse online
         */

        /**
         * Constructs a new ProGameRoomOnlineResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomOnlineResponse.
         * @implements IProGameRoomOnlineResponse
         * @constructor
         * @param {messages.IProGameRoomOnlineResponse=} [properties] Properties to set
         */
        function ProGameRoomOnlineResponse(properties) {
            this.online = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomOnlineResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomOnlineResponse
         * @instance
         */
        ProGameRoomOnlineResponse.prototype.gameId = 0;

        /**
         * ProGameRoomOnlineResponse online.
         * @member {Array.<messages.IGameRoomOnline>} online
         * @memberof messages.ProGameRoomOnlineResponse
         * @instance
         */
        ProGameRoomOnlineResponse.prototype.online = $util.emptyArray;

        /**
         * Creates a new ProGameRoomOnlineResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {messages.IProGameRoomOnlineResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomOnlineResponse} ProGameRoomOnlineResponse instance
         */
        ProGameRoomOnlineResponse.create = function create(properties) {
            return new ProGameRoomOnlineResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomOnlineResponse message. Does not implicitly {@link messages.ProGameRoomOnlineResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {messages.IProGameRoomOnlineResponse} message ProGameRoomOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomOnlineResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.online != null && message.online.length)
                for (var i = 0; i < message.online.length; ++i)
                    $root.messages.GameRoomOnline.encode(message.online[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomOnlineResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomOnlineResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {messages.IProGameRoomOnlineResponse} message ProGameRoomOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomOnlineResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomOnlineResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomOnlineResponse} ProGameRoomOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomOnlineResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomOnlineResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    if (!(message.online && message.online.length))
                        message.online = [];
                    message.online.push($root.messages.GameRoomOnline.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomOnlineResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomOnlineResponse} ProGameRoomOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomOnlineResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomOnlineResponse message.
         * @function verify
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomOnlineResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.online != null && message.hasOwnProperty("online")) {
                if (!Array.isArray(message.online))
                    return "online: array expected";
                for (var i = 0; i < message.online.length; ++i) {
                    var error = $root.messages.GameRoomOnline.verify(message.online[i]);
                    if (error)
                        return "online." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGameRoomOnlineResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomOnlineResponse} ProGameRoomOnlineResponse
         */
        ProGameRoomOnlineResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomOnlineResponse)
                return object;
            var message = new $root.messages.ProGameRoomOnlineResponse();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.online) {
                if (!Array.isArray(object.online))
                    throw TypeError(".messages.ProGameRoomOnlineResponse.online: array expected");
                message.online = [];
                for (var i = 0; i < object.online.length; ++i) {
                    if (typeof object.online[i] !== "object")
                        throw TypeError(".messages.ProGameRoomOnlineResponse.online: object expected");
                    message.online[i] = $root.messages.GameRoomOnline.fromObject(object.online[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomOnlineResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomOnlineResponse
         * @static
         * @param {messages.ProGameRoomOnlineResponse} message ProGameRoomOnlineResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomOnlineResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.online = [];
            if (options.defaults)
                object.gameId = 0;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.online && message.online.length) {
                object.online = [];
                for (var j = 0; j < message.online.length; ++j)
                    object.online[j] = $root.messages.GameRoomOnline.toObject(message.online[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGameRoomOnlineResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomOnlineResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomOnlineResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomOnlineResponse.MSGID
         * @enum {string}
         * @property {number} ID=65 ID value
         */
        ProGameRoomOnlineResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[65] = "ID"] = 65;
            return values;
        })();

        return ProGameRoomOnlineResponse;
    })();

    messages.ProSetGameOnlineNumsRequest = (function() {

        /**
         * Properties of a ProSetGameOnlineNumsRequest.
         * @memberof messages
         * @interface IProSetGameOnlineNumsRequest
         * @property {number|null} [gameId] ProSetGameOnlineNumsRequest gameId
         * @property {number|null} [ruleId] ProSetGameOnlineNumsRequest ruleId
         * @property {number|null} [roomId] ProSetGameOnlineNumsRequest roomId
         * @property {number|null} [onlineNums] ProSetGameOnlineNumsRequest onlineNums
         */

        /**
         * Constructs a new ProSetGameOnlineNumsRequest.
         * @memberof messages
         * @classdesc Represents a ProSetGameOnlineNumsRequest.
         * @implements IProSetGameOnlineNumsRequest
         * @constructor
         * @param {messages.IProSetGameOnlineNumsRequest=} [properties] Properties to set
         */
        function ProSetGameOnlineNumsRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProSetGameOnlineNumsRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @instance
         */
        ProSetGameOnlineNumsRequest.prototype.gameId = 0;

        /**
         * ProSetGameOnlineNumsRequest ruleId.
         * @member {number} ruleId
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @instance
         */
        ProSetGameOnlineNumsRequest.prototype.ruleId = 0;

        /**
         * ProSetGameOnlineNumsRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @instance
         */
        ProSetGameOnlineNumsRequest.prototype.roomId = 0;

        /**
         * ProSetGameOnlineNumsRequest onlineNums.
         * @member {number} onlineNums
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @instance
         */
        ProSetGameOnlineNumsRequest.prototype.onlineNums = 0;

        /**
         * Creates a new ProSetGameOnlineNumsRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {messages.IProSetGameOnlineNumsRequest=} [properties] Properties to set
         * @returns {messages.ProSetGameOnlineNumsRequest} ProSetGameOnlineNumsRequest instance
         */
        ProSetGameOnlineNumsRequest.create = function create(properties) {
            return new ProSetGameOnlineNumsRequest(properties);
        };

        /**
         * Encodes the specified ProSetGameOnlineNumsRequest message. Does not implicitly {@link messages.ProSetGameOnlineNumsRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {messages.IProSetGameOnlineNumsRequest} message ProSetGameOnlineNumsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProSetGameOnlineNumsRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.ruleId != null && message.hasOwnProperty("ruleId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ruleId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.onlineNums);
            return writer;
        };

        /**
         * Encodes the specified ProSetGameOnlineNumsRequest message, length delimited. Does not implicitly {@link messages.ProSetGameOnlineNumsRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {messages.IProSetGameOnlineNumsRequest} message ProSetGameOnlineNumsRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProSetGameOnlineNumsRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProSetGameOnlineNumsRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProSetGameOnlineNumsRequest} ProSetGameOnlineNumsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProSetGameOnlineNumsRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProSetGameOnlineNumsRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.ruleId = reader.int32();
                    break;
                case 4:
                    message.roomId = reader.int32();
                    break;
                case 5:
                    message.onlineNums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProSetGameOnlineNumsRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProSetGameOnlineNumsRequest} ProSetGameOnlineNumsRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProSetGameOnlineNumsRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProSetGameOnlineNumsRequest message.
         * @function verify
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProSetGameOnlineNumsRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.ruleId != null && message.hasOwnProperty("ruleId"))
                if (!$util.isInteger(message.ruleId))
                    return "ruleId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            return null;
        };

        /**
         * Creates a ProSetGameOnlineNumsRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProSetGameOnlineNumsRequest} ProSetGameOnlineNumsRequest
         */
        ProSetGameOnlineNumsRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProSetGameOnlineNumsRequest)
                return object;
            var message = new $root.messages.ProSetGameOnlineNumsRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.ruleId != null)
                message.ruleId = object.ruleId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProSetGameOnlineNumsRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @static
         * @param {messages.ProSetGameOnlineNumsRequest} message ProSetGameOnlineNumsRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProSetGameOnlineNumsRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.ruleId = 0;
                object.roomId = 0;
                object.onlineNums = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.ruleId != null && message.hasOwnProperty("ruleId"))
                object.ruleId = message.ruleId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            return object;
        };

        /**
         * Converts this ProSetGameOnlineNumsRequest to JSON.
         * @function toJSON
         * @memberof messages.ProSetGameOnlineNumsRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProSetGameOnlineNumsRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProSetGameOnlineNumsRequest.MSGID
         * @enum {string}
         * @property {number} ID=66 ID value
         */
        ProSetGameOnlineNumsRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[66] = "ID"] = 66;
            return values;
        })();

        return ProSetGameOnlineNumsRequest;
    })();

    messages.ProConnectRequest = (function() {

        /**
         * Properties of a ProConnectRequest.
         * @memberof messages
         * @interface IProConnectRequest
         * @property {messages.ProConnectRequest.ConnectType|null} [connectType] ProConnectRequest connectType
         */

        /**
         * Constructs a new ProConnectRequest.
         * @memberof messages
         * @classdesc Represents a ProConnectRequest.
         * @implements IProConnectRequest
         * @constructor
         * @param {messages.IProConnectRequest=} [properties] Properties to set
         */
        function ProConnectRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProConnectRequest connectType.
         * @member {messages.ProConnectRequest.ConnectType} connectType
         * @memberof messages.ProConnectRequest
         * @instance
         */
        ProConnectRequest.prototype.connectType = 1;

        /**
         * Creates a new ProConnectRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProConnectRequest
         * @static
         * @param {messages.IProConnectRequest=} [properties] Properties to set
         * @returns {messages.ProConnectRequest} ProConnectRequest instance
         */
        ProConnectRequest.create = function create(properties) {
            return new ProConnectRequest(properties);
        };

        /**
         * Encodes the specified ProConnectRequest message. Does not implicitly {@link messages.ProConnectRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProConnectRequest
         * @static
         * @param {messages.IProConnectRequest} message ProConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProConnectRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.connectType != null && message.hasOwnProperty("connectType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.connectType);
            return writer;
        };

        /**
         * Encodes the specified ProConnectRequest message, length delimited. Does not implicitly {@link messages.ProConnectRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProConnectRequest
         * @static
         * @param {messages.IProConnectRequest} message ProConnectRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProConnectRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProConnectRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProConnectRequest} ProConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProConnectRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProConnectRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.connectType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProConnectRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProConnectRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProConnectRequest} ProConnectRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProConnectRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProConnectRequest message.
         * @function verify
         * @memberof messages.ProConnectRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProConnectRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.connectType != null && message.hasOwnProperty("connectType"))
                switch (message.connectType) {
                default:
                    return "connectType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProConnectRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProConnectRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProConnectRequest} ProConnectRequest
         */
        ProConnectRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProConnectRequest)
                return object;
            var message = new $root.messages.ProConnectRequest();
            switch (object.connectType) {
            case "CLIENT_REQUEST":
            case 1:
                message.connectType = 1;
                break;
            case "TRANSFER_CONNECT":
            case 2:
                message.connectType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProConnectRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProConnectRequest
         * @static
         * @param {messages.ProConnectRequest} message ProConnectRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProConnectRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.connectType = options.enums === String ? "CLIENT_REQUEST" : 1;
            if (message.connectType != null && message.hasOwnProperty("connectType"))
                object.connectType = options.enums === String ? $root.messages.ProConnectRequest.ConnectType[message.connectType] : message.connectType;
            return object;
        };

        /**
         * Converts this ProConnectRequest to JSON.
         * @function toJSON
         * @memberof messages.ProConnectRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProConnectRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProConnectRequest.MSGID
         * @enum {string}
         * @property {number} ID=1 ID value
         */
        ProConnectRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ID"] = 1;
            return values;
        })();

        /**
         * ConnectType enum.
         * @name messages.ProConnectRequest.ConnectType
         * @enum {string}
         * @property {number} CLIENT_REQUEST=1 CLIENT_REQUEST value
         * @property {number} TRANSFER_CONNECT=2 TRANSFER_CONNECT value
         */
        ProConnectRequest.ConnectType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "CLIENT_REQUEST"] = 1;
            values[valuesById[2] = "TRANSFER_CONNECT"] = 2;
            return values;
        })();

        return ProConnectRequest;
    })();

    messages.ProConnectResponse = (function() {

        /**
         * Properties of a ProConnectResponse.
         * @memberof messages
         * @interface IProConnectResponse
         * @property {number|null} [heartbeatTimeout] ProConnectResponse heartbeatTimeout
         * @property {number|null} [heartbeatRate] ProConnectResponse heartbeatRate
         */

        /**
         * Constructs a new ProConnectResponse.
         * @memberof messages
         * @classdesc Represents a ProConnectResponse.
         * @implements IProConnectResponse
         * @constructor
         * @param {messages.IProConnectResponse=} [properties] Properties to set
         */
        function ProConnectResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProConnectResponse heartbeatTimeout.
         * @member {number} heartbeatTimeout
         * @memberof messages.ProConnectResponse
         * @instance
         */
        ProConnectResponse.prototype.heartbeatTimeout = 60;

        /**
         * ProConnectResponse heartbeatRate.
         * @member {number} heartbeatRate
         * @memberof messages.ProConnectResponse
         * @instance
         */
        ProConnectResponse.prototype.heartbeatRate = 20;

        /**
         * Creates a new ProConnectResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProConnectResponse
         * @static
         * @param {messages.IProConnectResponse=} [properties] Properties to set
         * @returns {messages.ProConnectResponse} ProConnectResponse instance
         */
        ProConnectResponse.create = function create(properties) {
            return new ProConnectResponse(properties);
        };

        /**
         * Encodes the specified ProConnectResponse message. Does not implicitly {@link messages.ProConnectResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProConnectResponse
         * @static
         * @param {messages.IProConnectResponse} message ProConnectResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProConnectResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.heartbeatTimeout != null && message.hasOwnProperty("heartbeatTimeout"))
                writer.uint32(/* id 3, wireType 0 =*/24).sint32(message.heartbeatTimeout);
            if (message.heartbeatRate != null && message.hasOwnProperty("heartbeatRate"))
                writer.uint32(/* id 4, wireType 0 =*/32).sint32(message.heartbeatRate);
            return writer;
        };

        /**
         * Encodes the specified ProConnectResponse message, length delimited. Does not implicitly {@link messages.ProConnectResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProConnectResponse
         * @static
         * @param {messages.IProConnectResponse} message ProConnectResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProConnectResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProConnectResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProConnectResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProConnectResponse} ProConnectResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProConnectResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProConnectResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.heartbeatTimeout = reader.sint32();
                    break;
                case 4:
                    message.heartbeatRate = reader.sint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProConnectResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProConnectResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProConnectResponse} ProConnectResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProConnectResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProConnectResponse message.
         * @function verify
         * @memberof messages.ProConnectResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProConnectResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.heartbeatTimeout != null && message.hasOwnProperty("heartbeatTimeout"))
                if (!$util.isInteger(message.heartbeatTimeout))
                    return "heartbeatTimeout: integer expected";
            if (message.heartbeatRate != null && message.hasOwnProperty("heartbeatRate"))
                if (!$util.isInteger(message.heartbeatRate))
                    return "heartbeatRate: integer expected";
            return null;
        };

        /**
         * Creates a ProConnectResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProConnectResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProConnectResponse} ProConnectResponse
         */
        ProConnectResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProConnectResponse)
                return object;
            var message = new $root.messages.ProConnectResponse();
            if (object.heartbeatTimeout != null)
                message.heartbeatTimeout = object.heartbeatTimeout | 0;
            if (object.heartbeatRate != null)
                message.heartbeatRate = object.heartbeatRate | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProConnectResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProConnectResponse
         * @static
         * @param {messages.ProConnectResponse} message ProConnectResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProConnectResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.heartbeatTimeout = 60;
                object.heartbeatRate = 20;
            }
            if (message.heartbeatTimeout != null && message.hasOwnProperty("heartbeatTimeout"))
                object.heartbeatTimeout = message.heartbeatTimeout;
            if (message.heartbeatRate != null && message.hasOwnProperty("heartbeatRate"))
                object.heartbeatRate = message.heartbeatRate;
            return object;
        };

        /**
         * Converts this ProConnectResponse to JSON.
         * @function toJSON
         * @memberof messages.ProConnectResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProConnectResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProConnectResponse.MSGID
         * @enum {string}
         * @property {number} ID=15 ID value
         */
        ProConnectResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[15] = "ID"] = 15;
            return values;
        })();

        return ProConnectResponse;
    })();

    messages.ProHeartBeatResponse = (function() {

        /**
         * Properties of a ProHeartBeatResponse.
         * @memberof messages
         * @interface IProHeartBeatResponse
         */

        /**
         * Constructs a new ProHeartBeatResponse.
         * @memberof messages
         * @classdesc Represents a ProHeartBeatResponse.
         * @implements IProHeartBeatResponse
         * @constructor
         * @param {messages.IProHeartBeatResponse=} [properties] Properties to set
         */
        function ProHeartBeatResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProHeartBeatResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {messages.IProHeartBeatResponse=} [properties] Properties to set
         * @returns {messages.ProHeartBeatResponse} ProHeartBeatResponse instance
         */
        ProHeartBeatResponse.create = function create(properties) {
            return new ProHeartBeatResponse(properties);
        };

        /**
         * Encodes the specified ProHeartBeatResponse message. Does not implicitly {@link messages.ProHeartBeatResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {messages.IProHeartBeatResponse} message ProHeartBeatResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHeartBeatResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProHeartBeatResponse message, length delimited. Does not implicitly {@link messages.ProHeartBeatResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {messages.IProHeartBeatResponse} message ProHeartBeatResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHeartBeatResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProHeartBeatResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProHeartBeatResponse} ProHeartBeatResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHeartBeatResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProHeartBeatResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProHeartBeatResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProHeartBeatResponse} ProHeartBeatResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHeartBeatResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProHeartBeatResponse message.
         * @function verify
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProHeartBeatResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProHeartBeatResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProHeartBeatResponse} ProHeartBeatResponse
         */
        ProHeartBeatResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProHeartBeatResponse)
                return object;
            return new $root.messages.ProHeartBeatResponse();
        };

        /**
         * Creates a plain object from a ProHeartBeatResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProHeartBeatResponse
         * @static
         * @param {messages.ProHeartBeatResponse} message ProHeartBeatResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProHeartBeatResponse.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProHeartBeatResponse to JSON.
         * @function toJSON
         * @memberof messages.ProHeartBeatResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProHeartBeatResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProHeartBeatResponse.MSGID
         * @enum {string}
         * @property {number} ID=3 ID value
         */
        ProHeartBeatResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[3] = "ID"] = 3;
            return values;
        })();

        return ProHeartBeatResponse;
    })();

    messages.ProHeartBeatRequest = (function() {

        /**
         * Properties of a ProHeartBeatRequest.
         * @memberof messages
         * @interface IProHeartBeatRequest
         */

        /**
         * Constructs a new ProHeartBeatRequest.
         * @memberof messages
         * @classdesc Represents a ProHeartBeatRequest.
         * @implements IProHeartBeatRequest
         * @constructor
         * @param {messages.IProHeartBeatRequest=} [properties] Properties to set
         */
        function ProHeartBeatRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProHeartBeatRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {messages.IProHeartBeatRequest=} [properties] Properties to set
         * @returns {messages.ProHeartBeatRequest} ProHeartBeatRequest instance
         */
        ProHeartBeatRequest.create = function create(properties) {
            return new ProHeartBeatRequest(properties);
        };

        /**
         * Encodes the specified ProHeartBeatRequest message. Does not implicitly {@link messages.ProHeartBeatRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {messages.IProHeartBeatRequest} message ProHeartBeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHeartBeatRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProHeartBeatRequest message, length delimited. Does not implicitly {@link messages.ProHeartBeatRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {messages.IProHeartBeatRequest} message ProHeartBeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProHeartBeatRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProHeartBeatRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProHeartBeatRequest} ProHeartBeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHeartBeatRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProHeartBeatRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProHeartBeatRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProHeartBeatRequest} ProHeartBeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProHeartBeatRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProHeartBeatRequest message.
         * @function verify
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProHeartBeatRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProHeartBeatRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProHeartBeatRequest} ProHeartBeatRequest
         */
        ProHeartBeatRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProHeartBeatRequest)
                return object;
            return new $root.messages.ProHeartBeatRequest();
        };

        /**
         * Creates a plain object from a ProHeartBeatRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProHeartBeatRequest
         * @static
         * @param {messages.ProHeartBeatRequest} message ProHeartBeatRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProHeartBeatRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProHeartBeatRequest to JSON.
         * @function toJSON
         * @memberof messages.ProHeartBeatRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProHeartBeatRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProHeartBeatRequest.MSGID
         * @enum {string}
         * @property {number} ID=4 ID value
         */
        ProHeartBeatRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[4] = "ID"] = 4;
            return values;
        })();

        return ProHeartBeatRequest;
    })();

    messages.ProSocketCloseRequest = (function() {

        /**
         * Properties of a ProSocketCloseRequest.
         * @memberof messages
         * @interface IProSocketCloseRequest
         */

        /**
         * Constructs a new ProSocketCloseRequest.
         * @memberof messages
         * @classdesc Represents a ProSocketCloseRequest.
         * @implements IProSocketCloseRequest
         * @constructor
         * @param {messages.IProSocketCloseRequest=} [properties] Properties to set
         */
        function ProSocketCloseRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProSocketCloseRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {messages.IProSocketCloseRequest=} [properties] Properties to set
         * @returns {messages.ProSocketCloseRequest} ProSocketCloseRequest instance
         */
        ProSocketCloseRequest.create = function create(properties) {
            return new ProSocketCloseRequest(properties);
        };

        /**
         * Encodes the specified ProSocketCloseRequest message. Does not implicitly {@link messages.ProSocketCloseRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {messages.IProSocketCloseRequest} message ProSocketCloseRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProSocketCloseRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProSocketCloseRequest message, length delimited. Does not implicitly {@link messages.ProSocketCloseRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {messages.IProSocketCloseRequest} message ProSocketCloseRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProSocketCloseRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProSocketCloseRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProSocketCloseRequest} ProSocketCloseRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProSocketCloseRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProSocketCloseRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProSocketCloseRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProSocketCloseRequest} ProSocketCloseRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProSocketCloseRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProSocketCloseRequest message.
         * @function verify
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProSocketCloseRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProSocketCloseRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProSocketCloseRequest} ProSocketCloseRequest
         */
        ProSocketCloseRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProSocketCloseRequest)
                return object;
            return new $root.messages.ProSocketCloseRequest();
        };

        /**
         * Creates a plain object from a ProSocketCloseRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProSocketCloseRequest
         * @static
         * @param {messages.ProSocketCloseRequest} message ProSocketCloseRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProSocketCloseRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProSocketCloseRequest to JSON.
         * @function toJSON
         * @memberof messages.ProSocketCloseRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProSocketCloseRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProSocketCloseRequest.MSGID
         * @enum {string}
         * @property {number} ID=5 ID value
         */
        ProSocketCloseRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[5] = "ID"] = 5;
            return values;
        })();

        return ProSocketCloseRequest;
    })();

    messages.ProForceUserOfflineRequest = (function() {

        /**
         * Properties of a ProForceUserOfflineRequest.
         * @memberof messages
         * @interface IProForceUserOfflineRequest
         */

        /**
         * Constructs a new ProForceUserOfflineRequest.
         * @memberof messages
         * @classdesc Represents a ProForceUserOfflineRequest.
         * @implements IProForceUserOfflineRequest
         * @constructor
         * @param {messages.IProForceUserOfflineRequest=} [properties] Properties to set
         */
        function ProForceUserOfflineRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProForceUserOfflineRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {messages.IProForceUserOfflineRequest=} [properties] Properties to set
         * @returns {messages.ProForceUserOfflineRequest} ProForceUserOfflineRequest instance
         */
        ProForceUserOfflineRequest.create = function create(properties) {
            return new ProForceUserOfflineRequest(properties);
        };

        /**
         * Encodes the specified ProForceUserOfflineRequest message. Does not implicitly {@link messages.ProForceUserOfflineRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {messages.IProForceUserOfflineRequest} message ProForceUserOfflineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceUserOfflineRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProForceUserOfflineRequest message, length delimited. Does not implicitly {@link messages.ProForceUserOfflineRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {messages.IProForceUserOfflineRequest} message ProForceUserOfflineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceUserOfflineRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProForceUserOfflineRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProForceUserOfflineRequest} ProForceUserOfflineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceUserOfflineRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProForceUserOfflineRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProForceUserOfflineRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProForceUserOfflineRequest} ProForceUserOfflineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceUserOfflineRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProForceUserOfflineRequest message.
         * @function verify
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProForceUserOfflineRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProForceUserOfflineRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProForceUserOfflineRequest} ProForceUserOfflineRequest
         */
        ProForceUserOfflineRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProForceUserOfflineRequest)
                return object;
            return new $root.messages.ProForceUserOfflineRequest();
        };

        /**
         * Creates a plain object from a ProForceUserOfflineRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProForceUserOfflineRequest
         * @static
         * @param {messages.ProForceUserOfflineRequest} message ProForceUserOfflineRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProForceUserOfflineRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProForceUserOfflineRequest to JSON.
         * @function toJSON
         * @memberof messages.ProForceUserOfflineRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProForceUserOfflineRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProForceUserOfflineRequest.MSGID
         * @enum {string}
         * @property {number} ID=6 ID value
         */
        ProForceUserOfflineRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[6] = "ID"] = 6;
            return values;
        })();

        return ProForceUserOfflineRequest;
    })();

    messages.ProForceUserOfflineResponse = (function() {

        /**
         * Properties of a ProForceUserOfflineResponse.
         * @memberof messages
         * @interface IProForceUserOfflineResponse
         */

        /**
         * Constructs a new ProForceUserOfflineResponse.
         * @memberof messages
         * @classdesc Represents a ProForceUserOfflineResponse.
         * @implements IProForceUserOfflineResponse
         * @constructor
         * @param {messages.IProForceUserOfflineResponse=} [properties] Properties to set
         */
        function ProForceUserOfflineResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProForceUserOfflineResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {messages.IProForceUserOfflineResponse=} [properties] Properties to set
         * @returns {messages.ProForceUserOfflineResponse} ProForceUserOfflineResponse instance
         */
        ProForceUserOfflineResponse.create = function create(properties) {
            return new ProForceUserOfflineResponse(properties);
        };

        /**
         * Encodes the specified ProForceUserOfflineResponse message. Does not implicitly {@link messages.ProForceUserOfflineResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {messages.IProForceUserOfflineResponse} message ProForceUserOfflineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceUserOfflineResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProForceUserOfflineResponse message, length delimited. Does not implicitly {@link messages.ProForceUserOfflineResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {messages.IProForceUserOfflineResponse} message ProForceUserOfflineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceUserOfflineResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProForceUserOfflineResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProForceUserOfflineResponse} ProForceUserOfflineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceUserOfflineResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProForceUserOfflineResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProForceUserOfflineResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProForceUserOfflineResponse} ProForceUserOfflineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceUserOfflineResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProForceUserOfflineResponse message.
         * @function verify
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProForceUserOfflineResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProForceUserOfflineResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProForceUserOfflineResponse} ProForceUserOfflineResponse
         */
        ProForceUserOfflineResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProForceUserOfflineResponse)
                return object;
            return new $root.messages.ProForceUserOfflineResponse();
        };

        /**
         * Creates a plain object from a ProForceUserOfflineResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProForceUserOfflineResponse
         * @static
         * @param {messages.ProForceUserOfflineResponse} message ProForceUserOfflineResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProForceUserOfflineResponse.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProForceUserOfflineResponse to JSON.
         * @function toJSON
         * @memberof messages.ProForceUserOfflineResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProForceUserOfflineResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProForceUserOfflineResponse.MSGID
         * @enum {string}
         * @property {number} ID=7 ID value
         */
        ProForceUserOfflineResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[7] = "ID"] = 7;
            return values;
        })();

        return ProForceUserOfflineResponse;
    })();

    messages.ProTransferErrorResponse = (function() {

        /**
         * Properties of a ProTransferErrorResponse.
         * @memberof messages
         * @interface IProTransferErrorResponse
         * @property {number|null} [destId] ProTransferErrorResponse destId
         * @property {messages.ProTransferErrorResponse.ErrorNo|null} [errorNo] ProTransferErrorResponse errorNo
         */

        /**
         * Constructs a new ProTransferErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProTransferErrorResponse.
         * @implements IProTransferErrorResponse
         * @constructor
         * @param {messages.IProTransferErrorResponse=} [properties] Properties to set
         */
        function ProTransferErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTransferErrorResponse destId.
         * @member {number} destId
         * @memberof messages.ProTransferErrorResponse
         * @instance
         */
        ProTransferErrorResponse.prototype.destId = 0;

        /**
         * ProTransferErrorResponse errorNo.
         * @member {messages.ProTransferErrorResponse.ErrorNo} errorNo
         * @memberof messages.ProTransferErrorResponse
         * @instance
         */
        ProTransferErrorResponse.prototype.errorNo = 1;

        /**
         * Creates a new ProTransferErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {messages.IProTransferErrorResponse=} [properties] Properties to set
         * @returns {messages.ProTransferErrorResponse} ProTransferErrorResponse instance
         */
        ProTransferErrorResponse.create = function create(properties) {
            return new ProTransferErrorResponse(properties);
        };

        /**
         * Encodes the specified ProTransferErrorResponse message. Does not implicitly {@link messages.ProTransferErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {messages.IProTransferErrorResponse} message ProTransferErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTransferErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.destId != null && message.hasOwnProperty("destId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.destId);
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.errorNo);
            return writer;
        };

        /**
         * Encodes the specified ProTransferErrorResponse message, length delimited. Does not implicitly {@link messages.ProTransferErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {messages.IProTransferErrorResponse} message ProTransferErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTransferErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTransferErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTransferErrorResponse} ProTransferErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTransferErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTransferErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.destId = reader.int32();
                    break;
                case 3:
                    message.errorNo = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTransferErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTransferErrorResponse} ProTransferErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTransferErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTransferErrorResponse message.
         * @function verify
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTransferErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.destId != null && message.hasOwnProperty("destId"))
                if (!$util.isInteger(message.destId))
                    return "destId: integer expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProTransferErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTransferErrorResponse} ProTransferErrorResponse
         */
        ProTransferErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTransferErrorResponse)
                return object;
            var message = new $root.messages.ProTransferErrorResponse();
            if (object.destId != null)
                message.destId = object.destId | 0;
            switch (object.errorNo) {
            case "ERR_UNKOWN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_SERVER_DOWN":
            case 2:
                message.errorNo = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProTransferErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTransferErrorResponse
         * @static
         * @param {messages.ProTransferErrorResponse} message ProTransferErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTransferErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.destId = 0;
                object.errorNo = options.enums === String ? "ERR_UNKOWN" : 1;
            }
            if (message.destId != null && message.hasOwnProperty("destId"))
                object.destId = message.destId;
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProTransferErrorResponse.ErrorNo[message.errorNo] : message.errorNo;
            return object;
        };

        /**
         * Converts this ProTransferErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProTransferErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTransferErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTransferErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=8 ID value
         */
        ProTransferErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[8] = "ID"] = 8;
            return values;
        })();

        /**
         * ErrorNo enum.
         * @name messages.ProTransferErrorResponse.ErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_SERVER_DOWN=2 ERR_SERVER_DOWN value
         */
        ProTransferErrorResponse.ErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_SERVER_DOWN"] = 2;
            return values;
        })();

        return ProTransferErrorResponse;
    })();

    messages.ProGameClientVersionVerifyRequest = (function() {

        /**
         * Properties of a ProGameClientVersionVerifyRequest.
         * @memberof messages
         * @interface IProGameClientVersionVerifyRequest
         * @property {messages.DeviceType|null} [deviceType] ProGameClientVersionVerifyRequest deviceType
         * @property {messages.MarketType|null} [marketId] ProGameClientVersionVerifyRequest marketId
         * @property {Uint8Array|null} [clientVersion] ProGameClientVersionVerifyRequest clientVersion
         */

        /**
         * Constructs a new ProGameClientVersionVerifyRequest.
         * @memberof messages
         * @classdesc Represents a ProGameClientVersionVerifyRequest.
         * @implements IProGameClientVersionVerifyRequest
         * @constructor
         * @param {messages.IProGameClientVersionVerifyRequest=} [properties] Properties to set
         */
        function ProGameClientVersionVerifyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameClientVersionVerifyRequest deviceType.
         * @member {messages.DeviceType} deviceType
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @instance
         */
        ProGameClientVersionVerifyRequest.prototype.deviceType = 1;

        /**
         * ProGameClientVersionVerifyRequest marketId.
         * @member {messages.MarketType} marketId
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @instance
         */
        ProGameClientVersionVerifyRequest.prototype.marketId = 100;

        /**
         * ProGameClientVersionVerifyRequest clientVersion.
         * @member {Uint8Array} clientVersion
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @instance
         */
        ProGameClientVersionVerifyRequest.prototype.clientVersion = $util.newBuffer([]);

        /**
         * Creates a new ProGameClientVersionVerifyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {messages.IProGameClientVersionVerifyRequest=} [properties] Properties to set
         * @returns {messages.ProGameClientVersionVerifyRequest} ProGameClientVersionVerifyRequest instance
         */
        ProGameClientVersionVerifyRequest.create = function create(properties) {
            return new ProGameClientVersionVerifyRequest(properties);
        };

        /**
         * Encodes the specified ProGameClientVersionVerifyRequest message. Does not implicitly {@link messages.ProGameClientVersionVerifyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {messages.IProGameClientVersionVerifyRequest} message ProGameClientVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientVersionVerifyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deviceType);
            if (message.marketId != null && message.hasOwnProperty("marketId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.marketId);
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.clientVersion);
            return writer;
        };

        /**
         * Encodes the specified ProGameClientVersionVerifyRequest message, length delimited. Does not implicitly {@link messages.ProGameClientVersionVerifyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {messages.IProGameClientVersionVerifyRequest} message ProGameClientVersionVerifyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientVersionVerifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameClientVersionVerifyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameClientVersionVerifyRequest} ProGameClientVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientVersionVerifyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameClientVersionVerifyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deviceType = reader.int32();
                    break;
                case 3:
                    message.marketId = reader.int32();
                    break;
                case 4:
                    message.clientVersion = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameClientVersionVerifyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameClientVersionVerifyRequest} ProGameClientVersionVerifyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientVersionVerifyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameClientVersionVerifyRequest message.
         * @function verify
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameClientVersionVerifyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                switch (message.deviceType) {
                default:
                    return "deviceType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 99:
                    break;
                }
            if (message.marketId != null && message.hasOwnProperty("marketId"))
                switch (message.marketId) {
                default:
                    return "marketId: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                if (!(message.clientVersion && typeof message.clientVersion.length === "number" || $util.isString(message.clientVersion)))
                    return "clientVersion: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameClientVersionVerifyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameClientVersionVerifyRequest} ProGameClientVersionVerifyRequest
         */
        ProGameClientVersionVerifyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameClientVersionVerifyRequest)
                return object;
            var message = new $root.messages.ProGameClientVersionVerifyRequest();
            switch (object.deviceType) {
            case "DEVICE_IPHONE":
            case 1:
                message.deviceType = 1;
                break;
            case "DEVICE_IPAD":
            case 2:
                message.deviceType = 2;
                break;
            case "DEVICE_ANDROID_PHONE":
            case 3:
                message.deviceType = 3;
                break;
            case "DEVICE_ANDROID_PAD":
            case 4:
                message.deviceType = 4;
                break;
            case "DEVICE_WIN_PHONE":
            case 5:
                message.deviceType = 5;
                break;
            case "DEVICE_WIN_PC":
            case 6:
                message.deviceType = 6;
                break;
            case "DEVICE_WIN_PAD":
            case 7:
                message.deviceType = 7;
                break;
            case "DEVICE_OTHER":
            case 99:
                message.deviceType = 99;
                break;
            }
            switch (object.marketId) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketId = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketId = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketId = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketId = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketId = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketId = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketId = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketId = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketId = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketId = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketId = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketId = 9900;
                break;
            }
            if (object.clientVersion != null)
                if (typeof object.clientVersion === "string")
                    $util.base64.decode(object.clientVersion, message.clientVersion = $util.newBuffer($util.base64.length(object.clientVersion)), 0);
                else if (object.clientVersion.length)
                    message.clientVersion = object.clientVersion;
            return message;
        };

        /**
         * Creates a plain object from a ProGameClientVersionVerifyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @static
         * @param {messages.ProGameClientVersionVerifyRequest} message ProGameClientVersionVerifyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameClientVersionVerifyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deviceType = options.enums === String ? "DEVICE_IPHONE" : 1;
                object.marketId = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.clientVersion = options.bytes === String ? "" : [];
            }
            if (message.deviceType != null && message.hasOwnProperty("deviceType"))
                object.deviceType = options.enums === String ? $root.messages.DeviceType[message.deviceType] : message.deviceType;
            if (message.marketId != null && message.hasOwnProperty("marketId"))
                object.marketId = options.enums === String ? $root.messages.MarketType[message.marketId] : message.marketId;
            if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
                object.clientVersion = options.bytes === String ? $util.base64.encode(message.clientVersion, 0, message.clientVersion.length) : options.bytes === Array ? Array.prototype.slice.call(message.clientVersion) : message.clientVersion;
            return object;
        };

        /**
         * Converts this ProGameClientVersionVerifyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameClientVersionVerifyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameClientVersionVerifyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameClientVersionVerifyRequest.MSGID
         * @enum {string}
         * @property {number} ID=1000 ID value
         */
        ProGameClientVersionVerifyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1000] = "ID"] = 1000;
            return values;
        })();

        return ProGameClientVersionVerifyRequest;
    })();

    messages.ProGameClientVersionVerifyResponse = (function() {

        /**
         * Properties of a ProGameClientVersionVerifyResponse.
         * @memberof messages
         * @interface IProGameClientVersionVerifyResponse
         * @property {messages.ProGameClientVersionVerifyResponse.VerifyType|null} [verifyType] ProGameClientVersionVerifyResponse verifyType
         * @property {Uint8Array|null} [verifyMsg] ProGameClientVersionVerifyResponse verifyMsg
         */

        /**
         * Constructs a new ProGameClientVersionVerifyResponse.
         * @memberof messages
         * @classdesc Represents a ProGameClientVersionVerifyResponse.
         * @implements IProGameClientVersionVerifyResponse
         * @constructor
         * @param {messages.IProGameClientVersionVerifyResponse=} [properties] Properties to set
         */
        function ProGameClientVersionVerifyResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameClientVersionVerifyResponse verifyType.
         * @member {messages.ProGameClientVersionVerifyResponse.VerifyType} verifyType
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @instance
         */
        ProGameClientVersionVerifyResponse.prototype.verifyType = 1;

        /**
         * ProGameClientVersionVerifyResponse verifyMsg.
         * @member {Uint8Array} verifyMsg
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @instance
         */
        ProGameClientVersionVerifyResponse.prototype.verifyMsg = $util.newBuffer([]);

        /**
         * Creates a new ProGameClientVersionVerifyResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {messages.IProGameClientVersionVerifyResponse=} [properties] Properties to set
         * @returns {messages.ProGameClientVersionVerifyResponse} ProGameClientVersionVerifyResponse instance
         */
        ProGameClientVersionVerifyResponse.create = function create(properties) {
            return new ProGameClientVersionVerifyResponse(properties);
        };

        /**
         * Encodes the specified ProGameClientVersionVerifyResponse message. Does not implicitly {@link messages.ProGameClientVersionVerifyResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {messages.IProGameClientVersionVerifyResponse} message ProGameClientVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientVersionVerifyResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.verifyType != null && message.hasOwnProperty("verifyType"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.verifyType);
            if (message.verifyMsg != null && message.hasOwnProperty("verifyMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.verifyMsg);
            return writer;
        };

        /**
         * Encodes the specified ProGameClientVersionVerifyResponse message, length delimited. Does not implicitly {@link messages.ProGameClientVersionVerifyResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {messages.IProGameClientVersionVerifyResponse} message ProGameClientVersionVerifyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientVersionVerifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameClientVersionVerifyResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameClientVersionVerifyResponse} ProGameClientVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientVersionVerifyResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameClientVersionVerifyResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.verifyType = reader.int32();
                    break;
                case 3:
                    message.verifyMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameClientVersionVerifyResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameClientVersionVerifyResponse} ProGameClientVersionVerifyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientVersionVerifyResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameClientVersionVerifyResponse message.
         * @function verify
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameClientVersionVerifyResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.verifyType != null && message.hasOwnProperty("verifyType"))
                switch (message.verifyType) {
                default:
                    return "verifyType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.verifyMsg != null && message.hasOwnProperty("verifyMsg"))
                if (!(message.verifyMsg && typeof message.verifyMsg.length === "number" || $util.isString(message.verifyMsg)))
                    return "verifyMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameClientVersionVerifyResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameClientVersionVerifyResponse} ProGameClientVersionVerifyResponse
         */
        ProGameClientVersionVerifyResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameClientVersionVerifyResponse)
                return object;
            var message = new $root.messages.ProGameClientVersionVerifyResponse();
            switch (object.verifyType) {
            case "VERIFY_PASS":
            case 1:
                message.verifyType = 1;
                break;
            case "VERIFY_FAILURE":
            case 2:
                message.verifyType = 2;
                break;
            }
            if (object.verifyMsg != null)
                if (typeof object.verifyMsg === "string")
                    $util.base64.decode(object.verifyMsg, message.verifyMsg = $util.newBuffer($util.base64.length(object.verifyMsg)), 0);
                else if (object.verifyMsg.length)
                    message.verifyMsg = object.verifyMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProGameClientVersionVerifyResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @static
         * @param {messages.ProGameClientVersionVerifyResponse} message ProGameClientVersionVerifyResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameClientVersionVerifyResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.verifyType = options.enums === String ? "VERIFY_PASS" : 1;
                object.verifyMsg = options.bytes === String ? "" : [];
            }
            if (message.verifyType != null && message.hasOwnProperty("verifyType"))
                object.verifyType = options.enums === String ? $root.messages.ProGameClientVersionVerifyResponse.VerifyType[message.verifyType] : message.verifyType;
            if (message.verifyMsg != null && message.hasOwnProperty("verifyMsg"))
                object.verifyMsg = options.bytes === String ? $util.base64.encode(message.verifyMsg, 0, message.verifyMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.verifyMsg) : message.verifyMsg;
            return object;
        };

        /**
         * Converts this ProGameClientVersionVerifyResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameClientVersionVerifyResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameClientVersionVerifyResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameClientVersionVerifyResponse.MSGID
         * @enum {string}
         * @property {number} ID=1001 ID value
         */
        ProGameClientVersionVerifyResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1001] = "ID"] = 1001;
            return values;
        })();

        /**
         * VerifyType enum.
         * @name messages.ProGameClientVersionVerifyResponse.VerifyType
         * @enum {string}
         * @property {number} VERIFY_PASS=1 VERIFY_PASS value
         * @property {number} VERIFY_FAILURE=2 VERIFY_FAILURE value
         */
        ProGameClientVersionVerifyResponse.VerifyType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "VERIFY_PASS"] = 1;
            values[valuesById[2] = "VERIFY_FAILURE"] = 2;
            return values;
        })();

        return ProGameClientVersionVerifyResponse;
    })();

    messages.ProGameRoomLoginRequest = (function() {

        /**
         * Properties of a ProGameRoomLoginRequest.
         * @memberof messages
         * @interface IProGameRoomLoginRequest
         * @property {number|null} [userId] ProGameRoomLoginRequest userId
         * @property {number|null} [gameId] ProGameRoomLoginRequest gameId
         * @property {number|null} [roomId] ProGameRoomLoginRequest roomId
         */

        /**
         * Constructs a new ProGameRoomLoginRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomLoginRequest.
         * @implements IProGameRoomLoginRequest
         * @constructor
         * @param {messages.IProGameRoomLoginRequest=} [properties] Properties to set
         */
        function ProGameRoomLoginRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomLoginRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameRoomLoginRequest
         * @instance
         */
        ProGameRoomLoginRequest.prototype.userId = 0;

        /**
         * ProGameRoomLoginRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomLoginRequest
         * @instance
         */
        ProGameRoomLoginRequest.prototype.gameId = 0;

        /**
         * ProGameRoomLoginRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProGameRoomLoginRequest
         * @instance
         */
        ProGameRoomLoginRequest.prototype.roomId = 0;

        /**
         * Creates a new ProGameRoomLoginRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {messages.IProGameRoomLoginRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomLoginRequest} ProGameRoomLoginRequest instance
         */
        ProGameRoomLoginRequest.create = function create(properties) {
            return new ProGameRoomLoginRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomLoginRequest message. Does not implicitly {@link messages.ProGameRoomLoginRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {messages.IProGameRoomLoginRequest} message ProGameRoomLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomLoginRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomLoginRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {messages.IProGameRoomLoginRequest} message ProGameRoomLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomLoginRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomLoginRequest} ProGameRoomLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomLoginRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomLoginRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomLoginRequest} ProGameRoomLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomLoginRequest message.
         * @function verify
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomLoginRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomLoginRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomLoginRequest} ProGameRoomLoginRequest
         */
        ProGameRoomLoginRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomLoginRequest)
                return object;
            var message = new $root.messages.ProGameRoomLoginRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomLoginRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomLoginRequest
         * @static
         * @param {messages.ProGameRoomLoginRequest} message ProGameRoomLoginRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomLoginRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.roomId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProGameRoomLoginRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomLoginRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomLoginRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomLoginRequest.MSGID
         * @enum {string}
         * @property {number} ID=1002 ID value
         */
        ProGameRoomLoginRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1002] = "ID"] = 1002;
            return values;
        })();

        return ProGameRoomLoginRequest;
    })();

    messages.ProGameRoomLoginErrorResponse = (function() {

        /**
         * Properties of a ProGameRoomLoginErrorResponse.
         * @memberof messages
         * @interface IProGameRoomLoginErrorResponse
         * @property {messages.ProGameRoomLoginErrorResponse.LoginErrorNo|null} [errorNo] ProGameRoomLoginErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameRoomLoginErrorResponse errorMsg
         * @property {number|null} [roomId] ProGameRoomLoginErrorResponse roomId
         */

        /**
         * Constructs a new ProGameRoomLoginErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomLoginErrorResponse.
         * @implements IProGameRoomLoginErrorResponse
         * @constructor
         * @param {messages.IProGameRoomLoginErrorResponse=} [properties] Properties to set
         */
        function ProGameRoomLoginErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomLoginErrorResponse errorNo.
         * @member {messages.ProGameRoomLoginErrorResponse.LoginErrorNo} errorNo
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @instance
         */
        ProGameRoomLoginErrorResponse.prototype.errorNo = 1;

        /**
         * ProGameRoomLoginErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @instance
         */
        ProGameRoomLoginErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * ProGameRoomLoginErrorResponse roomId.
         * @member {number} roomId
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @instance
         */
        ProGameRoomLoginErrorResponse.prototype.roomId = 0;

        /**
         * Creates a new ProGameRoomLoginErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {messages.IProGameRoomLoginErrorResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomLoginErrorResponse} ProGameRoomLoginErrorResponse instance
         */
        ProGameRoomLoginErrorResponse.create = function create(properties) {
            return new ProGameRoomLoginErrorResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomLoginErrorResponse message. Does not implicitly {@link messages.ProGameRoomLoginErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {messages.IProGameRoomLoginErrorResponse} message ProGameRoomLoginErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomLoginErrorResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomLoginErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {messages.IProGameRoomLoginErrorResponse} message ProGameRoomLoginErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomLoginErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomLoginErrorResponse} ProGameRoomLoginErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomLoginErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                case 4:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomLoginErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomLoginErrorResponse} ProGameRoomLoginErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomLoginErrorResponse message.
         * @function verify
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomLoginErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomLoginErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomLoginErrorResponse} ProGameRoomLoginErrorResponse
         */
        ProGameRoomLoginErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomLoginErrorResponse)
                return object;
            var message = new $root.messages.ProGameRoomLoginErrorResponse();
            switch (object.errorNo) {
            case "ERR_UNKOWN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_ALREADY_LOGINED":
            case 2:
                message.errorNo = 2;
                break;
            case "ERR_PEOPLE_FULL":
            case 3:
                message.errorNo = 3;
                break;
            case "ERR_LACK_COIN":
            case 4:
                message.errorNo = 4;
                break;
            case "ERR_OVERTOP_COIN":
            case 5:
                message.errorNo = 5;
                break;
            case "ERR_VERSION":
            case 6:
                message.errorNo = 6;
                break;
            case "ERR_GAME_LEVEL":
            case 7:
                message.errorNo = 7;
                break;
            case "ERR_REQUEST_PARAMTER":
            case 8:
                message.errorNo = 8;
                break;
            case "ERR_NOT_LOGINED":
            case 9:
                message.errorNo = 9;
                break;
            case "ERR_MAX_COIN":
            case 10:
                message.errorNo = 10;
                break;
            case "ERR_NO_HOST":
            case 11:
                message.errorNo = 11;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomLoginErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @static
         * @param {messages.ProGameRoomLoginErrorResponse} message ProGameRoomLoginErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomLoginErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_UNKOWN" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
                object.roomId = 0;
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProGameRoomLoginErrorResponse.LoginErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProGameRoomLoginErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomLoginErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomLoginErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomLoginErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=1003 ID value
         */
        ProGameRoomLoginErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1003] = "ID"] = 1003;
            return values;
        })();

        /**
         * LoginErrorNo enum.
         * @name messages.ProGameRoomLoginErrorResponse.LoginErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_ALREADY_LOGINED=2 ERR_ALREADY_LOGINED value
         * @property {number} ERR_PEOPLE_FULL=3 ERR_PEOPLE_FULL value
         * @property {number} ERR_LACK_COIN=4 ERR_LACK_COIN value
         * @property {number} ERR_OVERTOP_COIN=5 ERR_OVERTOP_COIN value
         * @property {number} ERR_VERSION=6 ERR_VERSION value
         * @property {number} ERR_GAME_LEVEL=7 ERR_GAME_LEVEL value
         * @property {number} ERR_REQUEST_PARAMTER=8 ERR_REQUEST_PARAMTER value
         * @property {number} ERR_NOT_LOGINED=9 ERR_NOT_LOGINED value
         * @property {number} ERR_MAX_COIN=10 ERR_MAX_COIN value
         * @property {number} ERR_NO_HOST=11 ERR_NO_HOST value
         */
        ProGameRoomLoginErrorResponse.LoginErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_ALREADY_LOGINED"] = 2;
            values[valuesById[3] = "ERR_PEOPLE_FULL"] = 3;
            values[valuesById[4] = "ERR_LACK_COIN"] = 4;
            values[valuesById[5] = "ERR_OVERTOP_COIN"] = 5;
            values[valuesById[6] = "ERR_VERSION"] = 6;
            values[valuesById[7] = "ERR_GAME_LEVEL"] = 7;
            values[valuesById[8] = "ERR_REQUEST_PARAMTER"] = 8;
            values[valuesById[9] = "ERR_NOT_LOGINED"] = 9;
            values[valuesById[10] = "ERR_MAX_COIN"] = 10;
            values[valuesById[11] = "ERR_NO_HOST"] = 11;
            return values;
        })();

        return ProGameRoomLoginErrorResponse;
    })();

    messages.ProGameRoomLoginSuccessResponse = (function() {

        /**
         * Properties of a ProGameRoomLoginSuccessResponse.
         * @memberof messages
         * @interface IProGameRoomLoginSuccessResponse
         * @property {messages.IUser|null} [user] ProGameRoomLoginSuccessResponse user
         */

        /**
         * Constructs a new ProGameRoomLoginSuccessResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomLoginSuccessResponse.
         * @implements IProGameRoomLoginSuccessResponse
         * @constructor
         * @param {messages.IProGameRoomLoginSuccessResponse=} [properties] Properties to set
         */
        function ProGameRoomLoginSuccessResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomLoginSuccessResponse user.
         * @member {messages.IUser|null|undefined} user
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @instance
         */
        ProGameRoomLoginSuccessResponse.prototype.user = null;

        /**
         * Creates a new ProGameRoomLoginSuccessResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {messages.IProGameRoomLoginSuccessResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomLoginSuccessResponse} ProGameRoomLoginSuccessResponse instance
         */
        ProGameRoomLoginSuccessResponse.create = function create(properties) {
            return new ProGameRoomLoginSuccessResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomLoginSuccessResponse message. Does not implicitly {@link messages.ProGameRoomLoginSuccessResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {messages.IProGameRoomLoginSuccessResponse} message ProGameRoomLoginSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginSuccessResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.user != null && message.hasOwnProperty("user"))
                $root.messages.User.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomLoginSuccessResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomLoginSuccessResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {messages.IProGameRoomLoginSuccessResponse} message ProGameRoomLoginSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginSuccessResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomLoginSuccessResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomLoginSuccessResponse} ProGameRoomLoginSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginSuccessResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomLoginSuccessResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.user = $root.messages.User.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomLoginSuccessResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomLoginSuccessResponse} ProGameRoomLoginSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginSuccessResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomLoginSuccessResponse message.
         * @function verify
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomLoginSuccessResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.user != null && message.hasOwnProperty("user")) {
                var error = $root.messages.User.verify(message.user);
                if (error)
                    return "user." + error;
            }
            return null;
        };

        /**
         * Creates a ProGameRoomLoginSuccessResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomLoginSuccessResponse} ProGameRoomLoginSuccessResponse
         */
        ProGameRoomLoginSuccessResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomLoginSuccessResponse)
                return object;
            var message = new $root.messages.ProGameRoomLoginSuccessResponse();
            if (object.user != null) {
                if (typeof object.user !== "object")
                    throw TypeError(".messages.ProGameRoomLoginSuccessResponse.user: object expected");
                message.user = $root.messages.User.fromObject(object.user);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomLoginSuccessResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @static
         * @param {messages.ProGameRoomLoginSuccessResponse} message ProGameRoomLoginSuccessResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomLoginSuccessResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.user = null;
            if (message.user != null && message.hasOwnProperty("user"))
                object.user = $root.messages.User.toObject(message.user, options);
            return object;
        };

        /**
         * Converts this ProGameRoomLoginSuccessResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomLoginSuccessResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomLoginSuccessResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomLoginSuccessResponse.MSGID
         * @enum {string}
         * @property {number} ID=1004 ID value
         */
        ProGameRoomLoginSuccessResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1004] = "ID"] = 1004;
            return values;
        })();

        return ProGameRoomLoginSuccessResponse;
    })();

    messages.ProGameRoomInfoResponse = (function() {

        /**
         * Properties of a ProGameRoomInfoResponse.
         * @memberof messages
         * @interface IProGameRoomInfoResponse
         * @property {number|null} [gameId] ProGameRoomInfoResponse gameId
         * @property {number|null} [roomId] ProGameRoomInfoResponse roomId
         * @property {messages.ProGameRoomInfoResponse.RoomType|null} [roomType] ProGameRoomInfoResponse roomType
         * @property {number|null} [deskNums] ProGameRoomInfoResponse deskNums
         * @property {number|null} [deskSeatNums] ProGameRoomInfoResponse deskSeatNums
         * @property {number|null} [bottomCoin] ProGameRoomInfoResponse bottomCoin
         * @property {number|null} [taxCoin] ProGameRoomInfoResponse taxCoin
         * @property {number|null} [limitMinCoin] ProGameRoomInfoResponse limitMinCoin
         * @property {number|null} [limixMaxCoin] ProGameRoomInfoResponse limixMaxCoin
         * @property {messages.ProGameRoomInfoResponse.RoomCoinType|null} [roomCoinType] ProGameRoomInfoResponse roomCoinType
         */

        /**
         * Constructs a new ProGameRoomInfoResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomInfoResponse.
         * @implements IProGameRoomInfoResponse
         * @constructor
         * @param {messages.IProGameRoomInfoResponse=} [properties] Properties to set
         */
        function ProGameRoomInfoResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomInfoResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.gameId = 0;

        /**
         * ProGameRoomInfoResponse roomId.
         * @member {number} roomId
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.roomId = 0;

        /**
         * ProGameRoomInfoResponse roomType.
         * @member {messages.ProGameRoomInfoResponse.RoomType} roomType
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.roomType = 2;

        /**
         * ProGameRoomInfoResponse deskNums.
         * @member {number} deskNums
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.deskNums = 0;

        /**
         * ProGameRoomInfoResponse deskSeatNums.
         * @member {number} deskSeatNums
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.deskSeatNums = 0;

        /**
         * ProGameRoomInfoResponse bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.bottomCoin = 0;

        /**
         * ProGameRoomInfoResponse taxCoin.
         * @member {number} taxCoin
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.taxCoin = 0;

        /**
         * ProGameRoomInfoResponse limitMinCoin.
         * @member {number} limitMinCoin
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.limitMinCoin = 0;

        /**
         * ProGameRoomInfoResponse limixMaxCoin.
         * @member {number} limixMaxCoin
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.limixMaxCoin = 0;

        /**
         * ProGameRoomInfoResponse roomCoinType.
         * @member {messages.ProGameRoomInfoResponse.RoomCoinType} roomCoinType
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         */
        ProGameRoomInfoResponse.prototype.roomCoinType = 1;

        /**
         * Creates a new ProGameRoomInfoResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {messages.IProGameRoomInfoResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomInfoResponse} ProGameRoomInfoResponse instance
         */
        ProGameRoomInfoResponse.create = function create(properties) {
            return new ProGameRoomInfoResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomInfoResponse message. Does not implicitly {@link messages.ProGameRoomInfoResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {messages.IProGameRoomInfoResponse} message ProGameRoomInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomInfoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomType);
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.deskNums);
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.deskSeatNums);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.bottomCoin);
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.taxCoin);
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.limitMinCoin);
            if (message.limixMaxCoin != null && message.hasOwnProperty("limixMaxCoin"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.limixMaxCoin);
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.roomCoinType);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomInfoResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomInfoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {messages.IProGameRoomInfoResponse} message ProGameRoomInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomInfoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomInfoResponse} ProGameRoomInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomInfoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomInfoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                case 4:
                    message.roomType = reader.int32();
                    break;
                case 5:
                    message.deskNums = reader.int32();
                    break;
                case 6:
                    message.deskSeatNums = reader.int32();
                    break;
                case 7:
                    message.bottomCoin = reader.int32();
                    break;
                case 8:
                    message.taxCoin = reader.int32();
                    break;
                case 9:
                    message.limitMinCoin = reader.int32();
                    break;
                case 10:
                    message.limixMaxCoin = reader.int32();
                    break;
                case 11:
                    message.roomCoinType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomInfoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomInfoResponse} ProGameRoomInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomInfoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomInfoResponse message.
         * @function verify
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomInfoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                switch (message.roomType) {
                default:
                    return "roomType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                if (!$util.isInteger(message.deskNums))
                    return "deskNums: integer expected";
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                if (!$util.isInteger(message.deskSeatNums))
                    return "deskSeatNums: integer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                if (!$util.isInteger(message.taxCoin))
                    return "taxCoin: integer expected";
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                if (!$util.isInteger(message.limitMinCoin))
                    return "limitMinCoin: integer expected";
            if (message.limixMaxCoin != null && message.hasOwnProperty("limixMaxCoin"))
                if (!$util.isInteger(message.limixMaxCoin))
                    return "limixMaxCoin: integer expected";
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                switch (message.roomCoinType) {
                default:
                    return "roomCoinType: enum value expected";
                case 1:
                case 2:
                case 3:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGameRoomInfoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomInfoResponse} ProGameRoomInfoResponse
         */
        ProGameRoomInfoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomInfoResponse)
                return object;
            var message = new $root.messages.ProGameRoomInfoResponse();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            switch (object.roomType) {
            case "ROOM_TYPE_NORMAL":
            case 1:
                message.roomType = 1;
                break;
            case "ROOM_TYPE_CHEAT":
            case 2:
                message.roomType = 2;
                break;
            case "ROOM_TYPE_QUEUE":
            case 3:
                message.roomType = 3;
                break;
            case "ROOM_TYPE_MATCH":
            case 4:
                message.roomType = 4;
                break;
            case "ROOM_TYPE_PERSONAL":
            case 5:
                message.roomType = 5;
                break;
            case "ROOM_TYPE_CARD":
            case 6:
                message.roomType = 6;
                break;
            }
            if (object.deskNums != null)
                message.deskNums = object.deskNums | 0;
            if (object.deskSeatNums != null)
                message.deskSeatNums = object.deskSeatNums | 0;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.taxCoin != null)
                message.taxCoin = object.taxCoin | 0;
            if (object.limitMinCoin != null)
                message.limitMinCoin = object.limitMinCoin | 0;
            if (object.limixMaxCoin != null)
                message.limixMaxCoin = object.limixMaxCoin | 0;
            switch (object.roomCoinType) {
            case "ROOM_COIN_GOLDCOIN":
            case 1:
                message.roomCoinType = 1;
                break;
            case "ROOM_COIN_MATCH":
            case 2:
                message.roomCoinType = 2;
                break;
            case "ROOM_COIN_SCORE":
            case 3:
                message.roomCoinType = 3;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomInfoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomInfoResponse
         * @static
         * @param {messages.ProGameRoomInfoResponse} message ProGameRoomInfoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomInfoResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.roomId = 0;
                object.roomType = options.enums === String ? "ROOM_TYPE_CHEAT" : 2;
                object.deskNums = 0;
                object.deskSeatNums = 0;
                object.bottomCoin = 0;
                object.taxCoin = 0;
                object.limitMinCoin = 0;
                object.limixMaxCoin = 0;
                object.roomCoinType = options.enums === String ? "ROOM_COIN_GOLDCOIN" : 1;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.roomType != null && message.hasOwnProperty("roomType"))
                object.roomType = options.enums === String ? $root.messages.ProGameRoomInfoResponse.RoomType[message.roomType] : message.roomType;
            if (message.deskNums != null && message.hasOwnProperty("deskNums"))
                object.deskNums = message.deskNums;
            if (message.deskSeatNums != null && message.hasOwnProperty("deskSeatNums"))
                object.deskSeatNums = message.deskSeatNums;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.taxCoin != null && message.hasOwnProperty("taxCoin"))
                object.taxCoin = message.taxCoin;
            if (message.limitMinCoin != null && message.hasOwnProperty("limitMinCoin"))
                object.limitMinCoin = message.limitMinCoin;
            if (message.limixMaxCoin != null && message.hasOwnProperty("limixMaxCoin"))
                object.limixMaxCoin = message.limixMaxCoin;
            if (message.roomCoinType != null && message.hasOwnProperty("roomCoinType"))
                object.roomCoinType = options.enums === String ? $root.messages.ProGameRoomInfoResponse.RoomCoinType[message.roomCoinType] : message.roomCoinType;
            return object;
        };

        /**
         * Converts this ProGameRoomInfoResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomInfoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomInfoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomInfoResponse.MSGID
         * @enum {string}
         * @property {number} ID=1005 ID value
         */
        ProGameRoomInfoResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1005] = "ID"] = 1005;
            return values;
        })();

        /**
         * RoomType enum.
         * @name messages.ProGameRoomInfoResponse.RoomType
         * @enum {string}
         * @property {number} ROOM_TYPE_NORMAL=1 ROOM_TYPE_NORMAL value
         * @property {number} ROOM_TYPE_CHEAT=2 ROOM_TYPE_CHEAT value
         * @property {number} ROOM_TYPE_QUEUE=3 ROOM_TYPE_QUEUE value
         * @property {number} ROOM_TYPE_MATCH=4 ROOM_TYPE_MATCH value
         * @property {number} ROOM_TYPE_PERSONAL=5 ROOM_TYPE_PERSONAL value
         * @property {number} ROOM_TYPE_CARD=6 ROOM_TYPE_CARD value
         */
        ProGameRoomInfoResponse.RoomType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ROOM_TYPE_NORMAL"] = 1;
            values[valuesById[2] = "ROOM_TYPE_CHEAT"] = 2;
            values[valuesById[3] = "ROOM_TYPE_QUEUE"] = 3;
            values[valuesById[4] = "ROOM_TYPE_MATCH"] = 4;
            values[valuesById[5] = "ROOM_TYPE_PERSONAL"] = 5;
            values[valuesById[6] = "ROOM_TYPE_CARD"] = 6;
            return values;
        })();

        /**
         * RoomCoinType enum.
         * @name messages.ProGameRoomInfoResponse.RoomCoinType
         * @enum {string}
         * @property {number} ROOM_COIN_GOLDCOIN=1 ROOM_COIN_GOLDCOIN value
         * @property {number} ROOM_COIN_MATCH=2 ROOM_COIN_MATCH value
         * @property {number} ROOM_COIN_SCORE=3 ROOM_COIN_SCORE value
         */
        ProGameRoomInfoResponse.RoomCoinType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ROOM_COIN_GOLDCOIN"] = 1;
            values[valuesById[2] = "ROOM_COIN_MATCH"] = 2;
            values[valuesById[3] = "ROOM_COIN_SCORE"] = 3;
            return values;
        })();

        return ProGameRoomInfoResponse;
    })();

    messages.ProGameRoomLoginFinishResponse = (function() {

        /**
         * Properties of a ProGameRoomLoginFinishResponse.
         * @memberof messages
         * @interface IProGameRoomLoginFinishResponse
         */

        /**
         * Constructs a new ProGameRoomLoginFinishResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomLoginFinishResponse.
         * @implements IProGameRoomLoginFinishResponse
         * @constructor
         * @param {messages.IProGameRoomLoginFinishResponse=} [properties] Properties to set
         */
        function ProGameRoomLoginFinishResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameRoomLoginFinishResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {messages.IProGameRoomLoginFinishResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomLoginFinishResponse} ProGameRoomLoginFinishResponse instance
         */
        ProGameRoomLoginFinishResponse.create = function create(properties) {
            return new ProGameRoomLoginFinishResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomLoginFinishResponse message. Does not implicitly {@link messages.ProGameRoomLoginFinishResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {messages.IProGameRoomLoginFinishResponse} message ProGameRoomLoginFinishResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginFinishResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomLoginFinishResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomLoginFinishResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {messages.IProGameRoomLoginFinishResponse} message ProGameRoomLoginFinishResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLoginFinishResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomLoginFinishResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomLoginFinishResponse} ProGameRoomLoginFinishResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginFinishResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomLoginFinishResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomLoginFinishResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomLoginFinishResponse} ProGameRoomLoginFinishResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLoginFinishResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomLoginFinishResponse message.
         * @function verify
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomLoginFinishResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameRoomLoginFinishResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomLoginFinishResponse} ProGameRoomLoginFinishResponse
         */
        ProGameRoomLoginFinishResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomLoginFinishResponse)
                return object;
            return new $root.messages.ProGameRoomLoginFinishResponse();
        };

        /**
         * Creates a plain object from a ProGameRoomLoginFinishResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @static
         * @param {messages.ProGameRoomLoginFinishResponse} message ProGameRoomLoginFinishResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomLoginFinishResponse.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameRoomLoginFinishResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomLoginFinishResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomLoginFinishResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomLoginFinishResponse.MSGID
         * @enum {string}
         * @property {number} ID=1006 ID value
         */
        ProGameRoomLoginFinishResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1006] = "ID"] = 1006;
            return values;
        })();

        return ProGameRoomLoginFinishResponse;
    })();

    messages.ProGameRoomLogoutRequest = (function() {

        /**
         * Properties of a ProGameRoomLogoutRequest.
         * @memberof messages
         * @interface IProGameRoomLogoutRequest
         * @property {number|null} [userId] ProGameRoomLogoutRequest userId
         */

        /**
         * Constructs a new ProGameRoomLogoutRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomLogoutRequest.
         * @implements IProGameRoomLogoutRequest
         * @constructor
         * @param {messages.IProGameRoomLogoutRequest=} [properties] Properties to set
         */
        function ProGameRoomLogoutRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomLogoutRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameRoomLogoutRequest
         * @instance
         */
        ProGameRoomLogoutRequest.prototype.userId = 0;

        /**
         * Creates a new ProGameRoomLogoutRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {messages.IProGameRoomLogoutRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomLogoutRequest} ProGameRoomLogoutRequest instance
         */
        ProGameRoomLogoutRequest.create = function create(properties) {
            return new ProGameRoomLogoutRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomLogoutRequest message. Does not implicitly {@link messages.ProGameRoomLogoutRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {messages.IProGameRoomLogoutRequest} message ProGameRoomLogoutRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLogoutRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomLogoutRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomLogoutRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {messages.IProGameRoomLogoutRequest} message ProGameRoomLogoutRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomLogoutRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomLogoutRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomLogoutRequest} ProGameRoomLogoutRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLogoutRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomLogoutRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomLogoutRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomLogoutRequest} ProGameRoomLogoutRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomLogoutRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomLogoutRequest message.
         * @function verify
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomLogoutRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomLogoutRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomLogoutRequest} ProGameRoomLogoutRequest
         */
        ProGameRoomLogoutRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomLogoutRequest)
                return object;
            var message = new $root.messages.ProGameRoomLogoutRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomLogoutRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomLogoutRequest
         * @static
         * @param {messages.ProGameRoomLogoutRequest} message ProGameRoomLogoutRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomLogoutRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userId = 0;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProGameRoomLogoutRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomLogoutRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomLogoutRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomLogoutRequest.MSGID
         * @enum {string}
         * @property {number} ID=1007 ID value
         */
        ProGameRoomLogoutRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1007] = "ID"] = 1007;
            return values;
        })();

        return ProGameRoomLogoutRequest;
    })();

    messages.ProGameRoomAllocateRequest = (function() {

        /**
         * Properties of a ProGameRoomAllocateRequest.
         * @memberof messages
         * @interface IProGameRoomAllocateRequest
         * @property {number|null} [userId] ProGameRoomAllocateRequest userId
         * @property {number|null} [gameId] ProGameRoomAllocateRequest gameId
         * @property {number|null} [roomId] ProGameRoomAllocateRequest roomId
         */

        /**
         * Constructs a new ProGameRoomAllocateRequest.
         * @memberof messages
         * @classdesc Represents a ProGameRoomAllocateRequest.
         * @implements IProGameRoomAllocateRequest
         * @constructor
         * @param {messages.IProGameRoomAllocateRequest=} [properties] Properties to set
         */
        function ProGameRoomAllocateRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomAllocateRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameRoomAllocateRequest
         * @instance
         */
        ProGameRoomAllocateRequest.prototype.userId = 0;

        /**
         * ProGameRoomAllocateRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameRoomAllocateRequest
         * @instance
         */
        ProGameRoomAllocateRequest.prototype.gameId = 0;

        /**
         * ProGameRoomAllocateRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProGameRoomAllocateRequest
         * @instance
         */
        ProGameRoomAllocateRequest.prototype.roomId = 0;

        /**
         * Creates a new ProGameRoomAllocateRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {messages.IProGameRoomAllocateRequest=} [properties] Properties to set
         * @returns {messages.ProGameRoomAllocateRequest} ProGameRoomAllocateRequest instance
         */
        ProGameRoomAllocateRequest.create = function create(properties) {
            return new ProGameRoomAllocateRequest(properties);
        };

        /**
         * Encodes the specified ProGameRoomAllocateRequest message. Does not implicitly {@link messages.ProGameRoomAllocateRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {messages.IProGameRoomAllocateRequest} message ProGameRoomAllocateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomAllocateRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomAllocateRequest message, length delimited. Does not implicitly {@link messages.ProGameRoomAllocateRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {messages.IProGameRoomAllocateRequest} message ProGameRoomAllocateRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomAllocateRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomAllocateRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomAllocateRequest} ProGameRoomAllocateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomAllocateRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomAllocateRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomAllocateRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomAllocateRequest} ProGameRoomAllocateRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomAllocateRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomAllocateRequest message.
         * @function verify
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomAllocateRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomAllocateRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomAllocateRequest} ProGameRoomAllocateRequest
         */
        ProGameRoomAllocateRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomAllocateRequest)
                return object;
            var message = new $root.messages.ProGameRoomAllocateRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomAllocateRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomAllocateRequest
         * @static
         * @param {messages.ProGameRoomAllocateRequest} message ProGameRoomAllocateRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomAllocateRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.roomId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProGameRoomAllocateRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomAllocateRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomAllocateRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomAllocateRequest.MSGID
         * @enum {string}
         * @property {number} ID=1008 ID value
         */
        ProGameRoomAllocateRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1008] = "ID"] = 1008;
            return values;
        })();

        return ProGameRoomAllocateRequest;
    })();

    messages.ProGameRoomAllocateErrorResponse = (function() {

        /**
         * Properties of a ProGameRoomAllocateErrorResponse.
         * @memberof messages
         * @interface IProGameRoomAllocateErrorResponse
         * @property {number|null} [errorNo] ProGameRoomAllocateErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameRoomAllocateErrorResponse errorMsg
         */

        /**
         * Constructs a new ProGameRoomAllocateErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomAllocateErrorResponse.
         * @implements IProGameRoomAllocateErrorResponse
         * @constructor
         * @param {messages.IProGameRoomAllocateErrorResponse=} [properties] Properties to set
         */
        function ProGameRoomAllocateErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomAllocateErrorResponse errorNo.
         * @member {number} errorNo
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @instance
         */
        ProGameRoomAllocateErrorResponse.prototype.errorNo = 0;

        /**
         * ProGameRoomAllocateErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @instance
         */
        ProGameRoomAllocateErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProGameRoomAllocateErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {messages.IProGameRoomAllocateErrorResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomAllocateErrorResponse} ProGameRoomAllocateErrorResponse instance
         */
        ProGameRoomAllocateErrorResponse.create = function create(properties) {
            return new ProGameRoomAllocateErrorResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomAllocateErrorResponse message. Does not implicitly {@link messages.ProGameRoomAllocateErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {messages.IProGameRoomAllocateErrorResponse} message ProGameRoomAllocateErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomAllocateErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomAllocateErrorResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomAllocateErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {messages.IProGameRoomAllocateErrorResponse} message ProGameRoomAllocateErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomAllocateErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomAllocateErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomAllocateErrorResponse} ProGameRoomAllocateErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomAllocateErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomAllocateErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomAllocateErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomAllocateErrorResponse} ProGameRoomAllocateErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomAllocateErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomAllocateErrorResponse message.
         * @function verify
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomAllocateErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                if (!$util.isInteger(message.errorNo))
                    return "errorNo: integer expected";
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameRoomAllocateErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomAllocateErrorResponse} ProGameRoomAllocateErrorResponse
         */
        ProGameRoomAllocateErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomAllocateErrorResponse)
                return object;
            var message = new $root.messages.ProGameRoomAllocateErrorResponse();
            if (object.errorNo != null)
                message.errorNo = object.errorNo | 0;
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomAllocateErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @static
         * @param {messages.ProGameRoomAllocateErrorResponse} message ProGameRoomAllocateErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomAllocateErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = 0;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProGameRoomAllocateErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomAllocateErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomAllocateErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomAllocateErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=1009 ID value
         */
        ProGameRoomAllocateErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1009] = "ID"] = 1009;
            return values;
        })();

        /**
         * AllocateErrorNo enum.
         * @name messages.ProGameRoomAllocateErrorResponse.AllocateErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_NO_AVAILABLE_DESK=2 ERR_NO_AVAILABLE_DESK value
         */
        ProGameRoomAllocateErrorResponse.AllocateErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_NO_AVAILABLE_DESK"] = 2;
            return values;
        })();

        return ProGameRoomAllocateErrorResponse;
    })();

    messages.ProGameRoomUserStateResponse = (function() {

        /**
         * Properties of a ProGameRoomUserStateResponse.
         * @memberof messages
         * @interface IProGameRoomUserStateResponse
         * @property {number|null} [userId] ProGameRoomUserStateResponse userId
         * @property {number|null} [deskId] ProGameRoomUserStateResponse deskId
         * @property {number|null} [seatId] ProGameRoomUserStateResponse seatId
         * @property {messages.UserState|null} [state] ProGameRoomUserStateResponse state
         */

        /**
         * Constructs a new ProGameRoomUserStateResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomUserStateResponse.
         * @implements IProGameRoomUserStateResponse
         * @constructor
         * @param {messages.IProGameRoomUserStateResponse=} [properties] Properties to set
         */
        function ProGameRoomUserStateResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomUserStateResponse userId.
         * @member {number} userId
         * @memberof messages.ProGameRoomUserStateResponse
         * @instance
         */
        ProGameRoomUserStateResponse.prototype.userId = 0;

        /**
         * ProGameRoomUserStateResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameRoomUserStateResponse
         * @instance
         */
        ProGameRoomUserStateResponse.prototype.deskId = -1;

        /**
         * ProGameRoomUserStateResponse seatId.
         * @member {number} seatId
         * @memberof messages.ProGameRoomUserStateResponse
         * @instance
         */
        ProGameRoomUserStateResponse.prototype.seatId = -1;

        /**
         * ProGameRoomUserStateResponse state.
         * @member {messages.UserState} state
         * @memberof messages.ProGameRoomUserStateResponse
         * @instance
         */
        ProGameRoomUserStateResponse.prototype.state = 0;

        /**
         * Creates a new ProGameRoomUserStateResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {messages.IProGameRoomUserStateResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomUserStateResponse} ProGameRoomUserStateResponse instance
         */
        ProGameRoomUserStateResponse.create = function create(properties) {
            return new ProGameRoomUserStateResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomUserStateResponse message. Does not implicitly {@link messages.ProGameRoomUserStateResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {messages.IProGameRoomUserStateResponse} message ProGameRoomUserStateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomUserStateResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.state);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomUserStateResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomUserStateResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {messages.IProGameRoomUserStateResponse} message ProGameRoomUserStateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomUserStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomUserStateResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomUserStateResponse} ProGameRoomUserStateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomUserStateResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomUserStateResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                case 5:
                    message.state = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomUserStateResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomUserStateResponse} ProGameRoomUserStateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomUserStateResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomUserStateResponse message.
         * @function verify
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomUserStateResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 20:
                case 21:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGameRoomUserStateResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomUserStateResponse} ProGameRoomUserStateResponse
         */
        ProGameRoomUserStateResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomUserStateResponse)
                return object;
            var message = new $root.messages.ProGameRoomUserStateResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            switch (object.state) {
            case "USER_NONE":
            case 0:
                message.state = 0;
                break;
            case "USER_IDLE":
            case 1:
                message.state = 1;
                break;
            case "USER_SEAT_HOLD":
            case 2:
                message.state = 2;
                break;
            case "USER_SIT":
            case 3:
                message.state = 3;
                break;
            case "USER_READY":
            case 4:
                message.state = 4;
                break;
            case "USER_WATCH":
            case 5:
                message.state = 5;
                break;
            case "USER_OFFLINE":
            case 20:
                message.state = 20;
                break;
            case "USER_PLAY":
            case 21:
                message.state = 21;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomUserStateResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomUserStateResponse
         * @static
         * @param {messages.ProGameRoomUserStateResponse} message ProGameRoomUserStateResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomUserStateResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = -1;
                object.seatId = -1;
                object.state = options.enums === String ? "USER_NONE" : 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.messages.UserState[message.state] : message.state;
            return object;
        };

        /**
         * Converts this ProGameRoomUserStateResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomUserStateResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomUserStateResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomUserStateResponse.MSGID
         * @enum {string}
         * @property {number} ID=1010 ID value
         */
        ProGameRoomUserStateResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1010] = "ID"] = 1010;
            return values;
        })();

        return ProGameRoomUserStateResponse;
    })();

    messages.ProGameRoomDeskStateResponse = (function() {

        /**
         * Properties of a ProGameRoomDeskStateResponse.
         * @memberof messages
         * @interface IProGameRoomDeskStateResponse
         * @property {number|null} [deskId] ProGameRoomDeskStateResponse deskId
         * @property {messages.DeskState|null} [state] ProGameRoomDeskStateResponse state
         */

        /**
         * Constructs a new ProGameRoomDeskStateResponse.
         * @memberof messages
         * @classdesc Represents a ProGameRoomDeskStateResponse.
         * @implements IProGameRoomDeskStateResponse
         * @constructor
         * @param {messages.IProGameRoomDeskStateResponse=} [properties] Properties to set
         */
        function ProGameRoomDeskStateResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameRoomDeskStateResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameRoomDeskStateResponse
         * @instance
         */
        ProGameRoomDeskStateResponse.prototype.deskId = 0;

        /**
         * ProGameRoomDeskStateResponse state.
         * @member {messages.DeskState} state
         * @memberof messages.ProGameRoomDeskStateResponse
         * @instance
         */
        ProGameRoomDeskStateResponse.prototype.state = 1;

        /**
         * Creates a new ProGameRoomDeskStateResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {messages.IProGameRoomDeskStateResponse=} [properties] Properties to set
         * @returns {messages.ProGameRoomDeskStateResponse} ProGameRoomDeskStateResponse instance
         */
        ProGameRoomDeskStateResponse.create = function create(properties) {
            return new ProGameRoomDeskStateResponse(properties);
        };

        /**
         * Encodes the specified ProGameRoomDeskStateResponse message. Does not implicitly {@link messages.ProGameRoomDeskStateResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {messages.IProGameRoomDeskStateResponse} message ProGameRoomDeskStateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomDeskStateResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
            if (message.state != null && message.hasOwnProperty("state"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.state);
            return writer;
        };

        /**
         * Encodes the specified ProGameRoomDeskStateResponse message, length delimited. Does not implicitly {@link messages.ProGameRoomDeskStateResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {messages.IProGameRoomDeskStateResponse} message ProGameRoomDeskStateResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameRoomDeskStateResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameRoomDeskStateResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameRoomDeskStateResponse} ProGameRoomDeskStateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomDeskStateResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameRoomDeskStateResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deskId = reader.int32();
                    break;
                case 3:
                    message.state = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameRoomDeskStateResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameRoomDeskStateResponse} ProGameRoomDeskStateResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameRoomDeskStateResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameRoomDeskStateResponse message.
         * @function verify
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameRoomDeskStateResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.state != null && message.hasOwnProperty("state"))
                switch (message.state) {
                default:
                    return "state: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGameRoomDeskStateResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameRoomDeskStateResponse} ProGameRoomDeskStateResponse
         */
        ProGameRoomDeskStateResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameRoomDeskStateResponse)
                return object;
            var message = new $root.messages.ProGameRoomDeskStateResponse();
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            switch (object.state) {
            case "DESK_EMPTY":
            case 1:
                message.state = 1;
                break;
            case "DESK_IDLE":
            case 2:
                message.state = 2;
                break;
            case "DESK_FULL":
            case 3:
                message.state = 3;
                break;
            case "DESK_PALY":
            case 4:
                message.state = 4;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameRoomDeskStateResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameRoomDeskStateResponse
         * @static
         * @param {messages.ProGameRoomDeskStateResponse} message ProGameRoomDeskStateResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameRoomDeskStateResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deskId = 0;
                object.state = options.enums === String ? "DESK_EMPTY" : 1;
            }
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.state != null && message.hasOwnProperty("state"))
                object.state = options.enums === String ? $root.messages.DeskState[message.state] : message.state;
            return object;
        };

        /**
         * Converts this ProGameRoomDeskStateResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameRoomDeskStateResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameRoomDeskStateResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameRoomDeskStateResponse.MSGID
         * @enum {string}
         * @property {number} ID=1011 ID value
         */
        ProGameRoomDeskStateResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1011] = "ID"] = 1011;
            return values;
        })();

        return ProGameRoomDeskStateResponse;
    })();

    messages.ProGameClientReadyRequest = (function() {

        /**
         * Properties of a ProGameClientReadyRequest.
         * @memberof messages
         * @interface IProGameClientReadyRequest
         */

        /**
         * Constructs a new ProGameClientReadyRequest.
         * @memberof messages
         * @classdesc Represents a ProGameClientReadyRequest.
         * @implements IProGameClientReadyRequest
         * @constructor
         * @param {messages.IProGameClientReadyRequest=} [properties] Properties to set
         */
        function ProGameClientReadyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameClientReadyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {messages.IProGameClientReadyRequest=} [properties] Properties to set
         * @returns {messages.ProGameClientReadyRequest} ProGameClientReadyRequest instance
         */
        ProGameClientReadyRequest.create = function create(properties) {
            return new ProGameClientReadyRequest(properties);
        };

        /**
         * Encodes the specified ProGameClientReadyRequest message. Does not implicitly {@link messages.ProGameClientReadyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {messages.IProGameClientReadyRequest} message ProGameClientReadyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientReadyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameClientReadyRequest message, length delimited. Does not implicitly {@link messages.ProGameClientReadyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {messages.IProGameClientReadyRequest} message ProGameClientReadyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientReadyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameClientReadyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameClientReadyRequest} ProGameClientReadyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientReadyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameClientReadyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameClientReadyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameClientReadyRequest} ProGameClientReadyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientReadyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameClientReadyRequest message.
         * @function verify
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameClientReadyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameClientReadyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameClientReadyRequest} ProGameClientReadyRequest
         */
        ProGameClientReadyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameClientReadyRequest)
                return object;
            return new $root.messages.ProGameClientReadyRequest();
        };

        /**
         * Creates a plain object from a ProGameClientReadyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameClientReadyRequest
         * @static
         * @param {messages.ProGameClientReadyRequest} message ProGameClientReadyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameClientReadyRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameClientReadyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameClientReadyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameClientReadyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameClientReadyRequest.MSGID
         * @enum {string}
         * @property {number} ID=1012 ID value
         */
        ProGameClientReadyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1012] = "ID"] = 1012;
            return values;
        })();

        return ProGameClientReadyRequest;
    })();

    messages.ProGameHeartBeatRequest = (function() {

        /**
         * Properties of a ProGameHeartBeatRequest.
         * @memberof messages
         * @interface IProGameHeartBeatRequest
         */

        /**
         * Constructs a new ProGameHeartBeatRequest.
         * @memberof messages
         * @classdesc Represents a ProGameHeartBeatRequest.
         * @implements IProGameHeartBeatRequest
         * @constructor
         * @param {messages.IProGameHeartBeatRequest=} [properties] Properties to set
         */
        function ProGameHeartBeatRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameHeartBeatRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {messages.IProGameHeartBeatRequest=} [properties] Properties to set
         * @returns {messages.ProGameHeartBeatRequest} ProGameHeartBeatRequest instance
         */
        ProGameHeartBeatRequest.create = function create(properties) {
            return new ProGameHeartBeatRequest(properties);
        };

        /**
         * Encodes the specified ProGameHeartBeatRequest message. Does not implicitly {@link messages.ProGameHeartBeatRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {messages.IProGameHeartBeatRequest} message ProGameHeartBeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameHeartBeatRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameHeartBeatRequest message, length delimited. Does not implicitly {@link messages.ProGameHeartBeatRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {messages.IProGameHeartBeatRequest} message ProGameHeartBeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameHeartBeatRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameHeartBeatRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameHeartBeatRequest} ProGameHeartBeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameHeartBeatRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameHeartBeatRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameHeartBeatRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameHeartBeatRequest} ProGameHeartBeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameHeartBeatRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameHeartBeatRequest message.
         * @function verify
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameHeartBeatRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameHeartBeatRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameHeartBeatRequest} ProGameHeartBeatRequest
         */
        ProGameHeartBeatRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameHeartBeatRequest)
                return object;
            return new $root.messages.ProGameHeartBeatRequest();
        };

        /**
         * Creates a plain object from a ProGameHeartBeatRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameHeartBeatRequest
         * @static
         * @param {messages.ProGameHeartBeatRequest} message ProGameHeartBeatRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameHeartBeatRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameHeartBeatRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameHeartBeatRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameHeartBeatRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameHeartBeatRequest.MSGID
         * @enum {string}
         * @property {number} ID=1013 ID value
         */
        ProGameHeartBeatRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1013] = "ID"] = 1013;
            return values;
        })();

        return ProGameHeartBeatRequest;
    })();

    messages.ProGameHeartBeatResponse = (function() {

        /**
         * Properties of a ProGameHeartBeatResponse.
         * @memberof messages
         * @interface IProGameHeartBeatResponse
         */

        /**
         * Constructs a new ProGameHeartBeatResponse.
         * @memberof messages
         * @classdesc Represents a ProGameHeartBeatResponse.
         * @implements IProGameHeartBeatResponse
         * @constructor
         * @param {messages.IProGameHeartBeatResponse=} [properties] Properties to set
         */
        function ProGameHeartBeatResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameHeartBeatResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {messages.IProGameHeartBeatResponse=} [properties] Properties to set
         * @returns {messages.ProGameHeartBeatResponse} ProGameHeartBeatResponse instance
         */
        ProGameHeartBeatResponse.create = function create(properties) {
            return new ProGameHeartBeatResponse(properties);
        };

        /**
         * Encodes the specified ProGameHeartBeatResponse message. Does not implicitly {@link messages.ProGameHeartBeatResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {messages.IProGameHeartBeatResponse} message ProGameHeartBeatResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameHeartBeatResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameHeartBeatResponse message, length delimited. Does not implicitly {@link messages.ProGameHeartBeatResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {messages.IProGameHeartBeatResponse} message ProGameHeartBeatResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameHeartBeatResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameHeartBeatResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameHeartBeatResponse} ProGameHeartBeatResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameHeartBeatResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameHeartBeatResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameHeartBeatResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameHeartBeatResponse} ProGameHeartBeatResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameHeartBeatResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameHeartBeatResponse message.
         * @function verify
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameHeartBeatResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameHeartBeatResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameHeartBeatResponse} ProGameHeartBeatResponse
         */
        ProGameHeartBeatResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameHeartBeatResponse)
                return object;
            return new $root.messages.ProGameHeartBeatResponse();
        };

        /**
         * Creates a plain object from a ProGameHeartBeatResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameHeartBeatResponse
         * @static
         * @param {messages.ProGameHeartBeatResponse} message ProGameHeartBeatResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameHeartBeatResponse.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameHeartBeatResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameHeartBeatResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameHeartBeatResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameHeartBeatResponse.MSGID
         * @enum {string}
         * @property {number} ID=1014 ID value
         */
        ProGameHeartBeatResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1014] = "ID"] = 1014;
            return values;
        })();

        return ProGameHeartBeatResponse;
    })();

    messages.ProGameClientForceCloseResponse = (function() {

        /**
         * Properties of a ProGameClientForceCloseResponse.
         * @memberof messages
         * @interface IProGameClientForceCloseResponse
         * @property {messages.ProGameClientForceCloseResponse.ErrorNo|null} [errorNo] ProGameClientForceCloseResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameClientForceCloseResponse errorMsg
         */

        /**
         * Constructs a new ProGameClientForceCloseResponse.
         * @memberof messages
         * @classdesc Represents a ProGameClientForceCloseResponse.
         * @implements IProGameClientForceCloseResponse
         * @constructor
         * @param {messages.IProGameClientForceCloseResponse=} [properties] Properties to set
         */
        function ProGameClientForceCloseResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameClientForceCloseResponse errorNo.
         * @member {messages.ProGameClientForceCloseResponse.ErrorNo} errorNo
         * @memberof messages.ProGameClientForceCloseResponse
         * @instance
         */
        ProGameClientForceCloseResponse.prototype.errorNo = 1;

        /**
         * ProGameClientForceCloseResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameClientForceCloseResponse
         * @instance
         */
        ProGameClientForceCloseResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProGameClientForceCloseResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {messages.IProGameClientForceCloseResponse=} [properties] Properties to set
         * @returns {messages.ProGameClientForceCloseResponse} ProGameClientForceCloseResponse instance
         */
        ProGameClientForceCloseResponse.create = function create(properties) {
            return new ProGameClientForceCloseResponse(properties);
        };

        /**
         * Encodes the specified ProGameClientForceCloseResponse message. Does not implicitly {@link messages.ProGameClientForceCloseResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {messages.IProGameClientForceCloseResponse} message ProGameClientForceCloseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientForceCloseResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProGameClientForceCloseResponse message, length delimited. Does not implicitly {@link messages.ProGameClientForceCloseResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {messages.IProGameClientForceCloseResponse} message ProGameClientForceCloseResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameClientForceCloseResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameClientForceCloseResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameClientForceCloseResponse} ProGameClientForceCloseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientForceCloseResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameClientForceCloseResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameClientForceCloseResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameClientForceCloseResponse} ProGameClientForceCloseResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameClientForceCloseResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameClientForceCloseResponse message.
         * @function verify
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameClientForceCloseResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameClientForceCloseResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameClientForceCloseResponse} ProGameClientForceCloseResponse
         */
        ProGameClientForceCloseResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameClientForceCloseResponse)
                return object;
            var message = new $root.messages.ProGameClientForceCloseResponse();
            switch (object.errorNo) {
            case "ERR_UNKOWN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_HEARTBEAt_TIMEOUT":
            case 2:
                message.errorNo = 2;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProGameClientForceCloseResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameClientForceCloseResponse
         * @static
         * @param {messages.ProGameClientForceCloseResponse} message ProGameClientForceCloseResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameClientForceCloseResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_UNKOWN" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProGameClientForceCloseResponse.ErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProGameClientForceCloseResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameClientForceCloseResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameClientForceCloseResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameClientForceCloseResponse.MSGID
         * @enum {string}
         * @property {number} ID=1015 ID value
         */
        ProGameClientForceCloseResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1015] = "ID"] = 1015;
            return values;
        })();

        /**
         * ErrorNo enum.
         * @name messages.ProGameClientForceCloseResponse.ErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_HEARTBEAt_TIMEOUT=2 ERR_HEARTBEAt_TIMEOUT value
         */
        ProGameClientForceCloseResponse.ErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_HEARTBEAt_TIMEOUT"] = 2;
            return values;
        })();

        return ProGameClientForceCloseResponse;
    })();

    messages.ProGameDeskLaunchResponse = (function() {

        /**
         * Properties of a ProGameDeskLaunchResponse.
         * @memberof messages
         * @interface IProGameDeskLaunchResponse
         */

        /**
         * Constructs a new ProGameDeskLaunchResponse.
         * @memberof messages
         * @classdesc Represents a ProGameDeskLaunchResponse.
         * @implements IProGameDeskLaunchResponse
         * @constructor
         * @param {messages.IProGameDeskLaunchResponse=} [properties] Properties to set
         */
        function ProGameDeskLaunchResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProGameDeskLaunchResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {messages.IProGameDeskLaunchResponse=} [properties] Properties to set
         * @returns {messages.ProGameDeskLaunchResponse} ProGameDeskLaunchResponse instance
         */
        ProGameDeskLaunchResponse.create = function create(properties) {
            return new ProGameDeskLaunchResponse(properties);
        };

        /**
         * Encodes the specified ProGameDeskLaunchResponse message. Does not implicitly {@link messages.ProGameDeskLaunchResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {messages.IProGameDeskLaunchResponse} message ProGameDeskLaunchResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskLaunchResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskLaunchResponse message, length delimited. Does not implicitly {@link messages.ProGameDeskLaunchResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {messages.IProGameDeskLaunchResponse} message ProGameDeskLaunchResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskLaunchResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskLaunchResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskLaunchResponse} ProGameDeskLaunchResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskLaunchResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskLaunchResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskLaunchResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskLaunchResponse} ProGameDeskLaunchResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskLaunchResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskLaunchResponse message.
         * @function verify
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskLaunchResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProGameDeskLaunchResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskLaunchResponse} ProGameDeskLaunchResponse
         */
        ProGameDeskLaunchResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskLaunchResponse)
                return object;
            return new $root.messages.ProGameDeskLaunchResponse();
        };

        /**
         * Creates a plain object from a ProGameDeskLaunchResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskLaunchResponse
         * @static
         * @param {messages.ProGameDeskLaunchResponse} message ProGameDeskLaunchResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskLaunchResponse.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProGameDeskLaunchResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskLaunchResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskLaunchResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskLaunchResponse.MSGID
         * @enum {string}
         * @property {number} ID=1020 ID value
         */
        ProGameDeskLaunchResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1020] = "ID"] = 1020;
            return values;
        })();

        return ProGameDeskLaunchResponse;
    })();

    messages.ProGameDeskUserSitRequest = (function() {

        /**
         * Properties of a ProGameDeskUserSitRequest.
         * @memberof messages
         * @interface IProGameDeskUserSitRequest
         * @property {number|null} [userId] ProGameDeskUserSitRequest userId
         * @property {number|null} [deskId] ProGameDeskUserSitRequest deskId
         * @property {number|null} [seatId] ProGameDeskUserSitRequest seatId
         */

        /**
         * Constructs a new ProGameDeskUserSitRequest.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserSitRequest.
         * @implements IProGameDeskUserSitRequest
         * @constructor
         * @param {messages.IProGameDeskUserSitRequest=} [properties] Properties to set
         */
        function ProGameDeskUserSitRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserSitRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserSitRequest
         * @instance
         */
        ProGameDeskUserSitRequest.prototype.userId = 0;

        /**
         * ProGameDeskUserSitRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserSitRequest
         * @instance
         */
        ProGameDeskUserSitRequest.prototype.deskId = 0;

        /**
         * ProGameDeskUserSitRequest seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserSitRequest
         * @instance
         */
        ProGameDeskUserSitRequest.prototype.seatId = 0;

        /**
         * Creates a new ProGameDeskUserSitRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {messages.IProGameDeskUserSitRequest=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserSitRequest} ProGameDeskUserSitRequest instance
         */
        ProGameDeskUserSitRequest.create = function create(properties) {
            return new ProGameDeskUserSitRequest(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserSitRequest message. Does not implicitly {@link messages.ProGameDeskUserSitRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {messages.IProGameDeskUserSitRequest} message ProGameDeskUserSitRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserSitRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserSitRequest message, length delimited. Does not implicitly {@link messages.ProGameDeskUserSitRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {messages.IProGameDeskUserSitRequest} message ProGameDeskUserSitRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserSitRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserSitRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserSitRequest} ProGameDeskUserSitRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserSitRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserSitRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserSitRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserSitRequest} ProGameDeskUserSitRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserSitRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserSitRequest message.
         * @function verify
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserSitRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserSitRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserSitRequest} ProGameDeskUserSitRequest
         */
        ProGameDeskUserSitRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserSitRequest)
                return object;
            var message = new $root.messages.ProGameDeskUserSitRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserSitRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserSitRequest
         * @static
         * @param {messages.ProGameDeskUserSitRequest} message ProGameDeskUserSitRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserSitRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserSitRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserSitRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserSitRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserSitRequest.MSGID
         * @enum {string}
         * @property {number} ID=1021 ID value
         */
        ProGameDeskUserSitRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1021] = "ID"] = 1021;
            return values;
        })();

        return ProGameDeskUserSitRequest;
    })();

    messages.ProGameDeskErrorResponse = (function() {

        /**
         * Properties of a ProGameDeskErrorResponse.
         * @memberof messages
         * @interface IProGameDeskErrorResponse
         * @property {messages.ProGameDeskErrorResponse.SitErrorNo|null} [errorNo] ProGameDeskErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameDeskErrorResponse errorMsg
         */

        /**
         * Constructs a new ProGameDeskErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProGameDeskErrorResponse.
         * @implements IProGameDeskErrorResponse
         * @constructor
         * @param {messages.IProGameDeskErrorResponse=} [properties] Properties to set
         */
        function ProGameDeskErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskErrorResponse errorNo.
         * @member {messages.ProGameDeskErrorResponse.SitErrorNo} errorNo
         * @memberof messages.ProGameDeskErrorResponse
         * @instance
         */
        ProGameDeskErrorResponse.prototype.errorNo = 1;

        /**
         * ProGameDeskErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameDeskErrorResponse
         * @instance
         */
        ProGameDeskErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProGameDeskErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {messages.IProGameDeskErrorResponse=} [properties] Properties to set
         * @returns {messages.ProGameDeskErrorResponse} ProGameDeskErrorResponse instance
         */
        ProGameDeskErrorResponse.create = function create(properties) {
            return new ProGameDeskErrorResponse(properties);
        };

        /**
         * Encodes the specified ProGameDeskErrorResponse message. Does not implicitly {@link messages.ProGameDeskErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {messages.IProGameDeskErrorResponse} message ProGameDeskErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskErrorResponse message, length delimited. Does not implicitly {@link messages.ProGameDeskErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {messages.IProGameDeskErrorResponse} message ProGameDeskErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskErrorResponse} ProGameDeskErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskErrorResponse} ProGameDeskErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskErrorResponse message.
         * @function verify
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskErrorResponse} ProGameDeskErrorResponse
         */
        ProGameDeskErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskErrorResponse)
                return object;
            var message = new $root.messages.ProGameDeskErrorResponse();
            switch (object.errorNo) {
            case "ERR_UNKOWN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_SIT":
            case 2:
                message.errorNo = 2;
                break;
            case "ERR_STANDUP":
            case 3:
                message.errorNo = 3;
                break;
            case "ERR_CHANGE":
            case 4:
                message.errorNo = 4;
                break;
            case "ERR_NEED_PASSWORD":
            case 5:
                message.errorNo = 5;
                break;
            case "ERR_DESK_FULL":
            case 6:
                message.errorNo = 6;
                break;
            case "ERR_PASSWORD":
            case 7:
                message.errorNo = 7;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskErrorResponse
         * @static
         * @param {messages.ProGameDeskErrorResponse} message ProGameDeskErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_UNKOWN" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProGameDeskErrorResponse.SitErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProGameDeskErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=1022 ID value
         */
        ProGameDeskErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1022] = "ID"] = 1022;
            return values;
        })();

        /**
         * SitErrorNo enum.
         * @name messages.ProGameDeskErrorResponse.SitErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_SIT=2 ERR_SIT value
         * @property {number} ERR_STANDUP=3 ERR_STANDUP value
         * @property {number} ERR_CHANGE=4 ERR_CHANGE value
         * @property {number} ERR_NEED_PASSWORD=5 ERR_NEED_PASSWORD value
         * @property {number} ERR_DESK_FULL=6 ERR_DESK_FULL value
         * @property {number} ERR_PASSWORD=7 ERR_PASSWORD value
         */
        ProGameDeskErrorResponse.SitErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_SIT"] = 2;
            values[valuesById[3] = "ERR_STANDUP"] = 3;
            values[valuesById[4] = "ERR_CHANGE"] = 4;
            values[valuesById[5] = "ERR_NEED_PASSWORD"] = 5;
            values[valuesById[6] = "ERR_DESK_FULL"] = 6;
            values[valuesById[7] = "ERR_PASSWORD"] = 7;
            return values;
        })();

        return ProGameDeskErrorResponse;
    })();

    messages.ProGameDeskUserEnterResponse = (function() {

        /**
         * Properties of a ProGameDeskUserEnterResponse.
         * @memberof messages
         * @interface IProGameDeskUserEnterResponse
         * @property {messages.IUser|null} [user] ProGameDeskUserEnterResponse user
         * @property {number|null} [deskId] ProGameDeskUserEnterResponse deskId
         * @property {number|null} [seatId] ProGameDeskUserEnterResponse seatId
         * @property {messages.UserState|null} [userState] ProGameDeskUserEnterResponse userState
         */

        /**
         * Constructs a new ProGameDeskUserEnterResponse.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserEnterResponse.
         * @implements IProGameDeskUserEnterResponse
         * @constructor
         * @param {messages.IProGameDeskUserEnterResponse=} [properties] Properties to set
         */
        function ProGameDeskUserEnterResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserEnterResponse user.
         * @member {messages.IUser|null|undefined} user
         * @memberof messages.ProGameDeskUserEnterResponse
         * @instance
         */
        ProGameDeskUserEnterResponse.prototype.user = null;

        /**
         * ProGameDeskUserEnterResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserEnterResponse
         * @instance
         */
        ProGameDeskUserEnterResponse.prototype.deskId = 0;

        /**
         * ProGameDeskUserEnterResponse seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserEnterResponse
         * @instance
         */
        ProGameDeskUserEnterResponse.prototype.seatId = 0;

        /**
         * ProGameDeskUserEnterResponse userState.
         * @member {messages.UserState} userState
         * @memberof messages.ProGameDeskUserEnterResponse
         * @instance
         */
        ProGameDeskUserEnterResponse.prototype.userState = 0;

        /**
         * Creates a new ProGameDeskUserEnterResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {messages.IProGameDeskUserEnterResponse=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserEnterResponse} ProGameDeskUserEnterResponse instance
         */
        ProGameDeskUserEnterResponse.create = function create(properties) {
            return new ProGameDeskUserEnterResponse(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserEnterResponse message. Does not implicitly {@link messages.ProGameDeskUserEnterResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {messages.IProGameDeskUserEnterResponse} message ProGameDeskUserEnterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserEnterResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.user != null && message.hasOwnProperty("user"))
                $root.messages.User.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            if (message.userState != null && message.hasOwnProperty("userState"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.userState);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserEnterResponse message, length delimited. Does not implicitly {@link messages.ProGameDeskUserEnterResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {messages.IProGameDeskUserEnterResponse} message ProGameDeskUserEnterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserEnterResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserEnterResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserEnterResponse} ProGameDeskUserEnterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserEnterResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserEnterResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.user = $root.messages.User.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                case 5:
                    message.userState = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserEnterResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserEnterResponse} ProGameDeskUserEnterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserEnterResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserEnterResponse message.
         * @function verify
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserEnterResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.user != null && message.hasOwnProperty("user")) {
                var error = $root.messages.User.verify(message.user);
                if (error)
                    return "user." + error;
            }
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            if (message.userState != null && message.hasOwnProperty("userState"))
                switch (message.userState) {
                default:
                    return "userState: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 20:
                case 21:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGameDeskUserEnterResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserEnterResponse} ProGameDeskUserEnterResponse
         */
        ProGameDeskUserEnterResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserEnterResponse)
                return object;
            var message = new $root.messages.ProGameDeskUserEnterResponse();
            if (object.user != null) {
                if (typeof object.user !== "object")
                    throw TypeError(".messages.ProGameDeskUserEnterResponse.user: object expected");
                message.user = $root.messages.User.fromObject(object.user);
            }
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            switch (object.userState) {
            case "USER_NONE":
            case 0:
                message.userState = 0;
                break;
            case "USER_IDLE":
            case 1:
                message.userState = 1;
                break;
            case "USER_SEAT_HOLD":
            case 2:
                message.userState = 2;
                break;
            case "USER_SIT":
            case 3:
                message.userState = 3;
                break;
            case "USER_READY":
            case 4:
                message.userState = 4;
                break;
            case "USER_WATCH":
            case 5:
                message.userState = 5;
                break;
            case "USER_OFFLINE":
            case 20:
                message.userState = 20;
                break;
            case "USER_PLAY":
            case 21:
                message.userState = 21;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserEnterResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserEnterResponse
         * @static
         * @param {messages.ProGameDeskUserEnterResponse} message ProGameDeskUserEnterResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserEnterResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.user = null;
                object.deskId = 0;
                object.seatId = 0;
                object.userState = options.enums === String ? "USER_NONE" : 0;
            }
            if (message.user != null && message.hasOwnProperty("user"))
                object.user = $root.messages.User.toObject(message.user, options);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            if (message.userState != null && message.hasOwnProperty("userState"))
                object.userState = options.enums === String ? $root.messages.UserState[message.userState] : message.userState;
            return object;
        };

        /**
         * Converts this ProGameDeskUserEnterResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserEnterResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserEnterResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserEnterResponse.MSGID
         * @enum {string}
         * @property {number} ID=1023 ID value
         */
        ProGameDeskUserEnterResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1023] = "ID"] = 1023;
            return values;
        })();

        return ProGameDeskUserEnterResponse;
    })();

    messages.ProGameDeskUserStandUpRequest = (function() {

        /**
         * Properties of a ProGameDeskUserStandUpRequest.
         * @memberof messages
         * @interface IProGameDeskUserStandUpRequest
         * @property {number|null} [userId] ProGameDeskUserStandUpRequest userId
         * @property {number|null} [deskId] ProGameDeskUserStandUpRequest deskId
         * @property {number|null} [seatId] ProGameDeskUserStandUpRequest seatId
         */

        /**
         * Constructs a new ProGameDeskUserStandUpRequest.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserStandUpRequest.
         * @implements IProGameDeskUserStandUpRequest
         * @constructor
         * @param {messages.IProGameDeskUserStandUpRequest=} [properties] Properties to set
         */
        function ProGameDeskUserStandUpRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserStandUpRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @instance
         */
        ProGameDeskUserStandUpRequest.prototype.userId = 0;

        /**
         * ProGameDeskUserStandUpRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @instance
         */
        ProGameDeskUserStandUpRequest.prototype.deskId = 0;

        /**
         * ProGameDeskUserStandUpRequest seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @instance
         */
        ProGameDeskUserStandUpRequest.prototype.seatId = 0;

        /**
         * Creates a new ProGameDeskUserStandUpRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {messages.IProGameDeskUserStandUpRequest=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserStandUpRequest} ProGameDeskUserStandUpRequest instance
         */
        ProGameDeskUserStandUpRequest.create = function create(properties) {
            return new ProGameDeskUserStandUpRequest(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserStandUpRequest message. Does not implicitly {@link messages.ProGameDeskUserStandUpRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {messages.IProGameDeskUserStandUpRequest} message ProGameDeskUserStandUpRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserStandUpRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserStandUpRequest message, length delimited. Does not implicitly {@link messages.ProGameDeskUserStandUpRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {messages.IProGameDeskUserStandUpRequest} message ProGameDeskUserStandUpRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserStandUpRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserStandUpRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserStandUpRequest} ProGameDeskUserStandUpRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserStandUpRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserStandUpRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserStandUpRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserStandUpRequest} ProGameDeskUserStandUpRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserStandUpRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserStandUpRequest message.
         * @function verify
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserStandUpRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserStandUpRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserStandUpRequest} ProGameDeskUserStandUpRequest
         */
        ProGameDeskUserStandUpRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserStandUpRequest)
                return object;
            var message = new $root.messages.ProGameDeskUserStandUpRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserStandUpRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @static
         * @param {messages.ProGameDeskUserStandUpRequest} message ProGameDeskUserStandUpRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserStandUpRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserStandUpRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserStandUpRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserStandUpRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserStandUpRequest.MSGID
         * @enum {string}
         * @property {number} ID=1024 ID value
         */
        ProGameDeskUserStandUpRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1024] = "ID"] = 1024;
            return values;
        })();

        return ProGameDeskUserStandUpRequest;
    })();

    messages.ProGameDeskUserStandUpResponse = (function() {

        /**
         * Properties of a ProGameDeskUserStandUpResponse.
         * @memberof messages
         * @interface IProGameDeskUserStandUpResponse
         * @property {number|null} [userId] ProGameDeskUserStandUpResponse userId
         * @property {number|null} [deskId] ProGameDeskUserStandUpResponse deskId
         * @property {number|null} [seatId] ProGameDeskUserStandUpResponse seatId
         */

        /**
         * Constructs a new ProGameDeskUserStandUpResponse.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserStandUpResponse.
         * @implements IProGameDeskUserStandUpResponse
         * @constructor
         * @param {messages.IProGameDeskUserStandUpResponse=} [properties] Properties to set
         */
        function ProGameDeskUserStandUpResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserStandUpResponse userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @instance
         */
        ProGameDeskUserStandUpResponse.prototype.userId = 0;

        /**
         * ProGameDeskUserStandUpResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @instance
         */
        ProGameDeskUserStandUpResponse.prototype.deskId = 0;

        /**
         * ProGameDeskUserStandUpResponse seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @instance
         */
        ProGameDeskUserStandUpResponse.prototype.seatId = 0;

        /**
         * Creates a new ProGameDeskUserStandUpResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {messages.IProGameDeskUserStandUpResponse=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserStandUpResponse} ProGameDeskUserStandUpResponse instance
         */
        ProGameDeskUserStandUpResponse.create = function create(properties) {
            return new ProGameDeskUserStandUpResponse(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserStandUpResponse message. Does not implicitly {@link messages.ProGameDeskUserStandUpResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {messages.IProGameDeskUserStandUpResponse} message ProGameDeskUserStandUpResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserStandUpResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserStandUpResponse message, length delimited. Does not implicitly {@link messages.ProGameDeskUserStandUpResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {messages.IProGameDeskUserStandUpResponse} message ProGameDeskUserStandUpResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserStandUpResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserStandUpResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserStandUpResponse} ProGameDeskUserStandUpResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserStandUpResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserStandUpResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserStandUpResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserStandUpResponse} ProGameDeskUserStandUpResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserStandUpResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserStandUpResponse message.
         * @function verify
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserStandUpResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserStandUpResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserStandUpResponse} ProGameDeskUserStandUpResponse
         */
        ProGameDeskUserStandUpResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserStandUpResponse)
                return object;
            var message = new $root.messages.ProGameDeskUserStandUpResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserStandUpResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @static
         * @param {messages.ProGameDeskUserStandUpResponse} message ProGameDeskUserStandUpResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserStandUpResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserStandUpResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserStandUpResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserStandUpResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserStandUpResponse.MSGID
         * @enum {string}
         * @property {number} ID=1025 ID value
         */
        ProGameDeskUserStandUpResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1025] = "ID"] = 1025;
            return values;
        })();

        return ProGameDeskUserStandUpResponse;
    })();

    messages.ProGameDeskUserChangeSeatRequest = (function() {

        /**
         * Properties of a ProGameDeskUserChangeSeatRequest.
         * @memberof messages
         * @interface IProGameDeskUserChangeSeatRequest
         * @property {number|null} [userId] ProGameDeskUserChangeSeatRequest userId
         */

        /**
         * Constructs a new ProGameDeskUserChangeSeatRequest.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserChangeSeatRequest.
         * @implements IProGameDeskUserChangeSeatRequest
         * @constructor
         * @param {messages.IProGameDeskUserChangeSeatRequest=} [properties] Properties to set
         */
        function ProGameDeskUserChangeSeatRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserChangeSeatRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @instance
         */
        ProGameDeskUserChangeSeatRequest.prototype.userId = 0;

        /**
         * Creates a new ProGameDeskUserChangeSeatRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {messages.IProGameDeskUserChangeSeatRequest=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserChangeSeatRequest} ProGameDeskUserChangeSeatRequest instance
         */
        ProGameDeskUserChangeSeatRequest.create = function create(properties) {
            return new ProGameDeskUserChangeSeatRequest(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserChangeSeatRequest message. Does not implicitly {@link messages.ProGameDeskUserChangeSeatRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {messages.IProGameDeskUserChangeSeatRequest} message ProGameDeskUserChangeSeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserChangeSeatRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserChangeSeatRequest message, length delimited. Does not implicitly {@link messages.ProGameDeskUserChangeSeatRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {messages.IProGameDeskUserChangeSeatRequest} message ProGameDeskUserChangeSeatRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserChangeSeatRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserChangeSeatRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserChangeSeatRequest} ProGameDeskUserChangeSeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserChangeSeatRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserChangeSeatRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserChangeSeatRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserChangeSeatRequest} ProGameDeskUserChangeSeatRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserChangeSeatRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserChangeSeatRequest message.
         * @function verify
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserChangeSeatRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserChangeSeatRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserChangeSeatRequest} ProGameDeskUserChangeSeatRequest
         */
        ProGameDeskUserChangeSeatRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserChangeSeatRequest)
                return object;
            var message = new $root.messages.ProGameDeskUserChangeSeatRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserChangeSeatRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @static
         * @param {messages.ProGameDeskUserChangeSeatRequest} message ProGameDeskUserChangeSeatRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserChangeSeatRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userId = 0;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserChangeSeatRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserChangeSeatRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserChangeSeatRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserChangeSeatRequest.MSGID
         * @enum {string}
         * @property {number} ID=1026 ID value
         */
        ProGameDeskUserChangeSeatRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1026] = "ID"] = 1026;
            return values;
        })();

        return ProGameDeskUserChangeSeatRequest;
    })();

    messages.ProGameDeskUserForceQuitRequest = (function() {

        /**
         * Properties of a ProGameDeskUserForceQuitRequest.
         * @memberof messages
         * @interface IProGameDeskUserForceQuitRequest
         * @property {number|null} [userId] ProGameDeskUserForceQuitRequest userId
         * @property {number|null} [deskId] ProGameDeskUserForceQuitRequest deskId
         * @property {number|null} [seatId] ProGameDeskUserForceQuitRequest seatId
         */

        /**
         * Constructs a new ProGameDeskUserForceQuitRequest.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserForceQuitRequest.
         * @implements IProGameDeskUserForceQuitRequest
         * @constructor
         * @param {messages.IProGameDeskUserForceQuitRequest=} [properties] Properties to set
         */
        function ProGameDeskUserForceQuitRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserForceQuitRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @instance
         */
        ProGameDeskUserForceQuitRequest.prototype.userId = 0;

        /**
         * ProGameDeskUserForceQuitRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @instance
         */
        ProGameDeskUserForceQuitRequest.prototype.deskId = 0;

        /**
         * ProGameDeskUserForceQuitRequest seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @instance
         */
        ProGameDeskUserForceQuitRequest.prototype.seatId = 0;

        /**
         * Creates a new ProGameDeskUserForceQuitRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {messages.IProGameDeskUserForceQuitRequest=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserForceQuitRequest} ProGameDeskUserForceQuitRequest instance
         */
        ProGameDeskUserForceQuitRequest.create = function create(properties) {
            return new ProGameDeskUserForceQuitRequest(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserForceQuitRequest message. Does not implicitly {@link messages.ProGameDeskUserForceQuitRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {messages.IProGameDeskUserForceQuitRequest} message ProGameDeskUserForceQuitRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserForceQuitRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserForceQuitRequest message, length delimited. Does not implicitly {@link messages.ProGameDeskUserForceQuitRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {messages.IProGameDeskUserForceQuitRequest} message ProGameDeskUserForceQuitRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserForceQuitRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserForceQuitRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserForceQuitRequest} ProGameDeskUserForceQuitRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserForceQuitRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserForceQuitRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserForceQuitRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserForceQuitRequest} ProGameDeskUserForceQuitRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserForceQuitRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserForceQuitRequest message.
         * @function verify
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserForceQuitRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserForceQuitRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserForceQuitRequest} ProGameDeskUserForceQuitRequest
         */
        ProGameDeskUserForceQuitRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserForceQuitRequest)
                return object;
            var message = new $root.messages.ProGameDeskUserForceQuitRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserForceQuitRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @static
         * @param {messages.ProGameDeskUserForceQuitRequest} message ProGameDeskUserForceQuitRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserForceQuitRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserForceQuitRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserForceQuitRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserForceQuitRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserForceQuitRequest.MSGID
         * @enum {string}
         * @property {number} ID=1027 ID value
         */
        ProGameDeskUserForceQuitRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1027] = "ID"] = 1027;
            return values;
        })();

        return ProGameDeskUserForceQuitRequest;
    })();

    messages.ProGameDeskUserOfflineResponse = (function() {

        /**
         * Properties of a ProGameDeskUserOfflineResponse.
         * @memberof messages
         * @interface IProGameDeskUserOfflineResponse
         * @property {number|null} [userId] ProGameDeskUserOfflineResponse userId
         * @property {number|null} [deskId] ProGameDeskUserOfflineResponse deskId
         * @property {number|null} [seatId] ProGameDeskUserOfflineResponse seatId
         */

        /**
         * Constructs a new ProGameDeskUserOfflineResponse.
         * @memberof messages
         * @classdesc Represents a ProGameDeskUserOfflineResponse.
         * @implements IProGameDeskUserOfflineResponse
         * @constructor
         * @param {messages.IProGameDeskUserOfflineResponse=} [properties] Properties to set
         */
        function ProGameDeskUserOfflineResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameDeskUserOfflineResponse userId.
         * @member {number} userId
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @instance
         */
        ProGameDeskUserOfflineResponse.prototype.userId = 0;

        /**
         * ProGameDeskUserOfflineResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @instance
         */
        ProGameDeskUserOfflineResponse.prototype.deskId = 0;

        /**
         * ProGameDeskUserOfflineResponse seatId.
         * @member {number} seatId
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @instance
         */
        ProGameDeskUserOfflineResponse.prototype.seatId = 0;

        /**
         * Creates a new ProGameDeskUserOfflineResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {messages.IProGameDeskUserOfflineResponse=} [properties] Properties to set
         * @returns {messages.ProGameDeskUserOfflineResponse} ProGameDeskUserOfflineResponse instance
         */
        ProGameDeskUserOfflineResponse.create = function create(properties) {
            return new ProGameDeskUserOfflineResponse(properties);
        };

        /**
         * Encodes the specified ProGameDeskUserOfflineResponse message. Does not implicitly {@link messages.ProGameDeskUserOfflineResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {messages.IProGameDeskUserOfflineResponse} message ProGameDeskUserOfflineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserOfflineResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameDeskUserOfflineResponse message, length delimited. Does not implicitly {@link messages.ProGameDeskUserOfflineResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {messages.IProGameDeskUserOfflineResponse} message ProGameDeskUserOfflineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameDeskUserOfflineResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameDeskUserOfflineResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameDeskUserOfflineResponse} ProGameDeskUserOfflineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserOfflineResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameDeskUserOfflineResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameDeskUserOfflineResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameDeskUserOfflineResponse} ProGameDeskUserOfflineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameDeskUserOfflineResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameDeskUserOfflineResponse message.
         * @function verify
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameDeskUserOfflineResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameDeskUserOfflineResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameDeskUserOfflineResponse} ProGameDeskUserOfflineResponse
         */
        ProGameDeskUserOfflineResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameDeskUserOfflineResponse)
                return object;
            var message = new $root.messages.ProGameDeskUserOfflineResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameDeskUserOfflineResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @static
         * @param {messages.ProGameDeskUserOfflineResponse} message ProGameDeskUserOfflineResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameDeskUserOfflineResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ProGameDeskUserOfflineResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameDeskUserOfflineResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameDeskUserOfflineResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameDeskUserOfflineResponse.MSGID
         * @enum {string}
         * @property {number} ID=1028 ID value
         */
        ProGameDeskUserOfflineResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1028] = "ID"] = 1028;
            return values;
        })();

        return ProGameDeskUserOfflineResponse;
    })();

    messages.ProFrameGameRoomOnlineRequest = (function() {

        /**
         * Properties of a ProFrameGameRoomOnlineRequest.
         * @memberof messages
         * @interface IProFrameGameRoomOnlineRequest
         * @property {number|null} [gameId] ProFrameGameRoomOnlineRequest gameId
         * @property {number|null} [roomId] ProFrameGameRoomOnlineRequest roomId
         */

        /**
         * Constructs a new ProFrameGameRoomOnlineRequest.
         * @memberof messages
         * @classdesc Represents a ProFrameGameRoomOnlineRequest.
         * @implements IProFrameGameRoomOnlineRequest
         * @constructor
         * @param {messages.IProFrameGameRoomOnlineRequest=} [properties] Properties to set
         */
        function ProFrameGameRoomOnlineRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProFrameGameRoomOnlineRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @instance
         */
        ProFrameGameRoomOnlineRequest.prototype.gameId = 0;

        /**
         * ProFrameGameRoomOnlineRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @instance
         */
        ProFrameGameRoomOnlineRequest.prototype.roomId = 0;

        /**
         * Creates a new ProFrameGameRoomOnlineRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {messages.IProFrameGameRoomOnlineRequest=} [properties] Properties to set
         * @returns {messages.ProFrameGameRoomOnlineRequest} ProFrameGameRoomOnlineRequest instance
         */
        ProFrameGameRoomOnlineRequest.create = function create(properties) {
            return new ProFrameGameRoomOnlineRequest(properties);
        };

        /**
         * Encodes the specified ProFrameGameRoomOnlineRequest message. Does not implicitly {@link messages.ProFrameGameRoomOnlineRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {messages.IProFrameGameRoomOnlineRequest} message ProFrameGameRoomOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProFrameGameRoomOnlineRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProFrameGameRoomOnlineRequest message, length delimited. Does not implicitly {@link messages.ProFrameGameRoomOnlineRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {messages.IProFrameGameRoomOnlineRequest} message ProFrameGameRoomOnlineRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProFrameGameRoomOnlineRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProFrameGameRoomOnlineRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProFrameGameRoomOnlineRequest} ProFrameGameRoomOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProFrameGameRoomOnlineRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProFrameGameRoomOnlineRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProFrameGameRoomOnlineRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProFrameGameRoomOnlineRequest} ProFrameGameRoomOnlineRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProFrameGameRoomOnlineRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProFrameGameRoomOnlineRequest message.
         * @function verify
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProFrameGameRoomOnlineRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProFrameGameRoomOnlineRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProFrameGameRoomOnlineRequest} ProFrameGameRoomOnlineRequest
         */
        ProFrameGameRoomOnlineRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProFrameGameRoomOnlineRequest)
                return object;
            var message = new $root.messages.ProFrameGameRoomOnlineRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProFrameGameRoomOnlineRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @static
         * @param {messages.ProFrameGameRoomOnlineRequest} message ProFrameGameRoomOnlineRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProFrameGameRoomOnlineRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.roomId = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProFrameGameRoomOnlineRequest to JSON.
         * @function toJSON
         * @memberof messages.ProFrameGameRoomOnlineRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProFrameGameRoomOnlineRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProFrameGameRoomOnlineRequest.MSGID
         * @enum {string}
         * @property {number} ID=1029 ID value
         */
        ProFrameGameRoomOnlineRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1029] = "ID"] = 1029;
            return values;
        })();

        return ProFrameGameRoomOnlineRequest;
    })();

    messages.ProFrameGameRoomOnlineResponse = (function() {

        /**
         * Properties of a ProFrameGameRoomOnlineResponse.
         * @memberof messages
         * @interface IProFrameGameRoomOnlineResponse
         * @property {number|null} [gameId] ProFrameGameRoomOnlineResponse gameId
         * @property {number|null} [roomId] ProFrameGameRoomOnlineResponse roomId
         * @property {number|null} [onlineNums] ProFrameGameRoomOnlineResponse onlineNums
         */

        /**
         * Constructs a new ProFrameGameRoomOnlineResponse.
         * @memberof messages
         * @classdesc Represents a ProFrameGameRoomOnlineResponse.
         * @implements IProFrameGameRoomOnlineResponse
         * @constructor
         * @param {messages.IProFrameGameRoomOnlineResponse=} [properties] Properties to set
         */
        function ProFrameGameRoomOnlineResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProFrameGameRoomOnlineResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @instance
         */
        ProFrameGameRoomOnlineResponse.prototype.gameId = 0;

        /**
         * ProFrameGameRoomOnlineResponse roomId.
         * @member {number} roomId
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @instance
         */
        ProFrameGameRoomOnlineResponse.prototype.roomId = 0;

        /**
         * ProFrameGameRoomOnlineResponse onlineNums.
         * @member {number} onlineNums
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @instance
         */
        ProFrameGameRoomOnlineResponse.prototype.onlineNums = 0;

        /**
         * Creates a new ProFrameGameRoomOnlineResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {messages.IProFrameGameRoomOnlineResponse=} [properties] Properties to set
         * @returns {messages.ProFrameGameRoomOnlineResponse} ProFrameGameRoomOnlineResponse instance
         */
        ProFrameGameRoomOnlineResponse.create = function create(properties) {
            return new ProFrameGameRoomOnlineResponse(properties);
        };

        /**
         * Encodes the specified ProFrameGameRoomOnlineResponse message. Does not implicitly {@link messages.ProFrameGameRoomOnlineResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {messages.IProFrameGameRoomOnlineResponse} message ProFrameGameRoomOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProFrameGameRoomOnlineResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.onlineNums);
            return writer;
        };

        /**
         * Encodes the specified ProFrameGameRoomOnlineResponse message, length delimited. Does not implicitly {@link messages.ProFrameGameRoomOnlineResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {messages.IProFrameGameRoomOnlineResponse} message ProFrameGameRoomOnlineResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProFrameGameRoomOnlineResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProFrameGameRoomOnlineResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProFrameGameRoomOnlineResponse} ProFrameGameRoomOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProFrameGameRoomOnlineResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProFrameGameRoomOnlineResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                case 4:
                    message.onlineNums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProFrameGameRoomOnlineResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProFrameGameRoomOnlineResponse} ProFrameGameRoomOnlineResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProFrameGameRoomOnlineResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProFrameGameRoomOnlineResponse message.
         * @function verify
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProFrameGameRoomOnlineResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                if (!$util.isInteger(message.onlineNums))
                    return "onlineNums: integer expected";
            return null;
        };

        /**
         * Creates a ProFrameGameRoomOnlineResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProFrameGameRoomOnlineResponse} ProFrameGameRoomOnlineResponse
         */
        ProFrameGameRoomOnlineResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProFrameGameRoomOnlineResponse)
                return object;
            var message = new $root.messages.ProFrameGameRoomOnlineResponse();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.onlineNums != null)
                message.onlineNums = object.onlineNums | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProFrameGameRoomOnlineResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @static
         * @param {messages.ProFrameGameRoomOnlineResponse} message ProFrameGameRoomOnlineResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProFrameGameRoomOnlineResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.roomId = 0;
                object.onlineNums = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.onlineNums != null && message.hasOwnProperty("onlineNums"))
                object.onlineNums = message.onlineNums;
            return object;
        };

        /**
         * Converts this ProFrameGameRoomOnlineResponse to JSON.
         * @function toJSON
         * @memberof messages.ProFrameGameRoomOnlineResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProFrameGameRoomOnlineResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProFrameGameRoomOnlineResponse.MSGID
         * @enum {string}
         * @property {number} ID=1030 ID value
         */
        ProFrameGameRoomOnlineResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1030] = "ID"] = 1030;
            return values;
        })();

        return ProFrameGameRoomOnlineResponse;
    })();

    messages.PersonalDeskInfo = (function() {

        /**
         * Properties of a PersonalDeskInfo.
         * @memberof messages
         * @interface IPersonalDeskInfo
         * @property {number|null} [deskId] PersonalDeskInfo deskId
         * @property {Uint8Array|null} [deskName] PersonalDeskInfo deskName
         * @property {number|null} [bottomCoin] PersonalDeskInfo bottomCoin
         * @property {number|null} [idleNums] PersonalDeskInfo idleNums
         * @property {boolean|null} [hasPassword] PersonalDeskInfo hasPassword
         * @property {number|null} [deskType] PersonalDeskInfo deskType
         */

        /**
         * Constructs a new PersonalDeskInfo.
         * @memberof messages
         * @classdesc Represents a PersonalDeskInfo.
         * @implements IPersonalDeskInfo
         * @constructor
         * @param {messages.IPersonalDeskInfo=} [properties] Properties to set
         */
        function PersonalDeskInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * PersonalDeskInfo deskId.
         * @member {number} deskId
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.deskId = 0;

        /**
         * PersonalDeskInfo deskName.
         * @member {Uint8Array} deskName
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.deskName = $util.newBuffer([]);

        /**
         * PersonalDeskInfo bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.bottomCoin = 0;

        /**
         * PersonalDeskInfo idleNums.
         * @member {number} idleNums
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.idleNums = 0;

        /**
         * PersonalDeskInfo hasPassword.
         * @member {boolean} hasPassword
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.hasPassword = false;

        /**
         * PersonalDeskInfo deskType.
         * @member {number} deskType
         * @memberof messages.PersonalDeskInfo
         * @instance
         */
        PersonalDeskInfo.prototype.deskType = 0;

        /**
         * Creates a new PersonalDeskInfo instance using the specified properties.
         * @function create
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {messages.IPersonalDeskInfo=} [properties] Properties to set
         * @returns {messages.PersonalDeskInfo} PersonalDeskInfo instance
         */
        PersonalDeskInfo.create = function create(properties) {
            return new PersonalDeskInfo(properties);
        };

        /**
         * Encodes the specified PersonalDeskInfo message. Does not implicitly {@link messages.PersonalDeskInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {messages.IPersonalDeskInfo} message PersonalDeskInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonalDeskInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.deskName);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bottomCoin);
            if (message.idleNums != null && message.hasOwnProperty("idleNums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.idleNums);
            if (message.hasPassword != null && message.hasOwnProperty("hasPassword"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.hasPassword);
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.deskType);
            return writer;
        };

        /**
         * Encodes the specified PersonalDeskInfo message, length delimited. Does not implicitly {@link messages.PersonalDeskInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {messages.IPersonalDeskInfo} message PersonalDeskInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        PersonalDeskInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a PersonalDeskInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.PersonalDeskInfo} PersonalDeskInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonalDeskInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.PersonalDeskInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deskId = reader.int32();
                    break;
                case 3:
                    message.deskName = reader.bytes();
                    break;
                case 4:
                    message.bottomCoin = reader.int32();
                    break;
                case 5:
                    message.idleNums = reader.int32();
                    break;
                case 6:
                    message.hasPassword = reader.bool();
                    break;
                case 7:
                    message.deskType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a PersonalDeskInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.PersonalDeskInfo} PersonalDeskInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        PersonalDeskInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a PersonalDeskInfo message.
         * @function verify
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        PersonalDeskInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                if (!(message.deskName && typeof message.deskName.length === "number" || $util.isString(message.deskName)))
                    return "deskName: buffer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.idleNums != null && message.hasOwnProperty("idleNums"))
                if (!$util.isInteger(message.idleNums))
                    return "idleNums: integer expected";
            if (message.hasPassword != null && message.hasOwnProperty("hasPassword"))
                if (typeof message.hasPassword !== "boolean")
                    return "hasPassword: boolean expected";
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                if (!$util.isInteger(message.deskType))
                    return "deskType: integer expected";
            return null;
        };

        /**
         * Creates a PersonalDeskInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.PersonalDeskInfo} PersonalDeskInfo
         */
        PersonalDeskInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.PersonalDeskInfo)
                return object;
            var message = new $root.messages.PersonalDeskInfo();
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.deskName != null)
                if (typeof object.deskName === "string")
                    $util.base64.decode(object.deskName, message.deskName = $util.newBuffer($util.base64.length(object.deskName)), 0);
                else if (object.deskName.length)
                    message.deskName = object.deskName;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.idleNums != null)
                message.idleNums = object.idleNums | 0;
            if (object.hasPassword != null)
                message.hasPassword = Boolean(object.hasPassword);
            if (object.deskType != null)
                message.deskType = object.deskType | 0;
            return message;
        };

        /**
         * Creates a plain object from a PersonalDeskInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.PersonalDeskInfo
         * @static
         * @param {messages.PersonalDeskInfo} message PersonalDeskInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        PersonalDeskInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deskId = 0;
                object.deskName = options.bytes === String ? "" : [];
                object.bottomCoin = 0;
                object.idleNums = 0;
                object.hasPassword = false;
                object.deskType = 0;
            }
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                object.deskName = options.bytes === String ? $util.base64.encode(message.deskName, 0, message.deskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskName) : message.deskName;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.idleNums != null && message.hasOwnProperty("idleNums"))
                object.idleNums = message.idleNums;
            if (message.hasPassword != null && message.hasOwnProperty("hasPassword"))
                object.hasPassword = message.hasPassword;
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                object.deskType = message.deskType;
            return object;
        };

        /**
         * Converts this PersonalDeskInfo to JSON.
         * @function toJSON
         * @memberof messages.PersonalDeskInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        PersonalDeskInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return PersonalDeskInfo;
    })();

    messages.ChangeUserSeatInfo = (function() {

        /**
         * Properties of a ChangeUserSeatInfo.
         * @memberof messages
         * @interface IChangeUserSeatInfo
         * @property {number|null} [userId] ChangeUserSeatInfo userId
         * @property {number|null} [seatId] ChangeUserSeatInfo seatId
         */

        /**
         * Constructs a new ChangeUserSeatInfo.
         * @memberof messages
         * @classdesc Represents a ChangeUserSeatInfo.
         * @implements IChangeUserSeatInfo
         * @constructor
         * @param {messages.IChangeUserSeatInfo=} [properties] Properties to set
         */
        function ChangeUserSeatInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ChangeUserSeatInfo userId.
         * @member {number} userId
         * @memberof messages.ChangeUserSeatInfo
         * @instance
         */
        ChangeUserSeatInfo.prototype.userId = 0;

        /**
         * ChangeUserSeatInfo seatId.
         * @member {number} seatId
         * @memberof messages.ChangeUserSeatInfo
         * @instance
         */
        ChangeUserSeatInfo.prototype.seatId = 0;

        /**
         * Creates a new ChangeUserSeatInfo instance using the specified properties.
         * @function create
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {messages.IChangeUserSeatInfo=} [properties] Properties to set
         * @returns {messages.ChangeUserSeatInfo} ChangeUserSeatInfo instance
         */
        ChangeUserSeatInfo.create = function create(properties) {
            return new ChangeUserSeatInfo(properties);
        };

        /**
         * Encodes the specified ChangeUserSeatInfo message. Does not implicitly {@link messages.ChangeUserSeatInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {messages.IChangeUserSeatInfo} message ChangeUserSeatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChangeUserSeatInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified ChangeUserSeatInfo message, length delimited. Does not implicitly {@link messages.ChangeUserSeatInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {messages.IChangeUserSeatInfo} message ChangeUserSeatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ChangeUserSeatInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ChangeUserSeatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ChangeUserSeatInfo} ChangeUserSeatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChangeUserSeatInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ChangeUserSeatInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ChangeUserSeatInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ChangeUserSeatInfo} ChangeUserSeatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ChangeUserSeatInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ChangeUserSeatInfo message.
         * @function verify
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ChangeUserSeatInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a ChangeUserSeatInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ChangeUserSeatInfo} ChangeUserSeatInfo
         */
        ChangeUserSeatInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ChangeUserSeatInfo)
                return object;
            var message = new $root.messages.ChangeUserSeatInfo();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ChangeUserSeatInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ChangeUserSeatInfo
         * @static
         * @param {messages.ChangeUserSeatInfo} message ChangeUserSeatInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ChangeUserSeatInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.seatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this ChangeUserSeatInfo to JSON.
         * @function toJSON
         * @memberof messages.ChangeUserSeatInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ChangeUserSeatInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return ChangeUserSeatInfo;
    })();

    messages.RoomCardDeskInfo = (function() {

        /**
         * Properties of a RoomCardDeskInfo.
         * @memberof messages
         * @interface IRoomCardDeskInfo
         * @property {number|null} [roomTag] RoomCardDeskInfo roomTag
         * @property {number|null} [aeraId] RoomCardDeskInfo aeraId
         * @property {number|null} [deskSeat] RoomCardDeskInfo deskSeat
         * @property {Uint8Array|null} [ruleFlag] RoomCardDeskInfo ruleFlag
         * @property {number|null} [userNum] RoomCardDeskInfo userNum
         * @property {number|null} [creatTime] RoomCardDeskInfo creatTime
         * @property {number|null} [gameStatus] RoomCardDeskInfo gameStatus
         * @property {Array.<Uint8Array>|null} [nickName] RoomCardDeskInfo nickName
         * @property {Array.<number>|null} [userId] RoomCardDeskInfo userId
         * @property {Array.<Uint8Array>|null} [headFile] RoomCardDeskInfo headFile
         */

        /**
         * Constructs a new RoomCardDeskInfo.
         * @memberof messages
         * @classdesc Represents a RoomCardDeskInfo.
         * @implements IRoomCardDeskInfo
         * @constructor
         * @param {messages.IRoomCardDeskInfo=} [properties] Properties to set
         */
        function RoomCardDeskInfo(properties) {
            this.nickName = [];
            this.userId = [];
            this.headFile = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * RoomCardDeskInfo roomTag.
         * @member {number} roomTag
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.roomTag = 0;

        /**
         * RoomCardDeskInfo aeraId.
         * @member {number} aeraId
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.aeraId = 0;

        /**
         * RoomCardDeskInfo deskSeat.
         * @member {number} deskSeat
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.deskSeat = 0;

        /**
         * RoomCardDeskInfo ruleFlag.
         * @member {Uint8Array} ruleFlag
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.ruleFlag = $util.newBuffer([]);

        /**
         * RoomCardDeskInfo userNum.
         * @member {number} userNum
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.userNum = 0;

        /**
         * RoomCardDeskInfo creatTime.
         * @member {number} creatTime
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.creatTime = 0;

        /**
         * RoomCardDeskInfo gameStatus.
         * @member {number} gameStatus
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.gameStatus = 0;

        /**
         * RoomCardDeskInfo nickName.
         * @member {Array.<Uint8Array>} nickName
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.nickName = $util.emptyArray;

        /**
         * RoomCardDeskInfo userId.
         * @member {Array.<number>} userId
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.userId = $util.emptyArray;

        /**
         * RoomCardDeskInfo headFile.
         * @member {Array.<Uint8Array>} headFile
         * @memberof messages.RoomCardDeskInfo
         * @instance
         */
        RoomCardDeskInfo.prototype.headFile = $util.emptyArray;

        /**
         * Creates a new RoomCardDeskInfo instance using the specified properties.
         * @function create
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {messages.IRoomCardDeskInfo=} [properties] Properties to set
         * @returns {messages.RoomCardDeskInfo} RoomCardDeskInfo instance
         */
        RoomCardDeskInfo.create = function create(properties) {
            return new RoomCardDeskInfo(properties);
        };

        /**
         * Encodes the specified RoomCardDeskInfo message. Does not implicitly {@link messages.RoomCardDeskInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {messages.IRoomCardDeskInfo} message RoomCardDeskInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomCardDeskInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.aeraId);
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.deskSeat);
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.ruleFlag);
            if (message.userNum != null && message.hasOwnProperty("userNum"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.userNum);
            if (message.creatTime != null && message.hasOwnProperty("creatTime"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.creatTime);
            if (message.gameStatus != null && message.hasOwnProperty("gameStatus"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.gameStatus);
            if (message.nickName != null && message.nickName.length)
                for (var i = 0; i < message.nickName.length; ++i)
                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.nickName[i]);
            if (message.userId != null && message.userId.length)
                for (var i = 0; i < message.userId.length; ++i)
                    writer.uint32(/* id 10, wireType 0 =*/80).int32(message.userId[i]);
            if (message.headFile != null && message.headFile.length)
                for (var i = 0; i < message.headFile.length; ++i)
                    writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.headFile[i]);
            return writer;
        };

        /**
         * Encodes the specified RoomCardDeskInfo message, length delimited. Does not implicitly {@link messages.RoomCardDeskInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {messages.IRoomCardDeskInfo} message RoomCardDeskInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        RoomCardDeskInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a RoomCardDeskInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.RoomCardDeskInfo} RoomCardDeskInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomCardDeskInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.RoomCardDeskInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.aeraId = reader.int32();
                    break;
                case 4:
                    message.deskSeat = reader.int32();
                    break;
                case 5:
                    message.ruleFlag = reader.bytes();
                    break;
                case 6:
                    message.userNum = reader.int32();
                    break;
                case 7:
                    message.creatTime = reader.int32();
                    break;
                case 8:
                    message.gameStatus = reader.int32();
                    break;
                case 9:
                    if (!(message.nickName && message.nickName.length))
                        message.nickName = [];
                    message.nickName.push(reader.bytes());
                    break;
                case 10:
                    if (!(message.userId && message.userId.length))
                        message.userId = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.userId.push(reader.int32());
                    } else
                        message.userId.push(reader.int32());
                    break;
                case 11:
                    if (!(message.headFile && message.headFile.length))
                        message.headFile = [];
                    message.headFile.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a RoomCardDeskInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.RoomCardDeskInfo} RoomCardDeskInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        RoomCardDeskInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a RoomCardDeskInfo message.
         * @function verify
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        RoomCardDeskInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                if (!$util.isInteger(message.aeraId))
                    return "aeraId: integer expected";
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                if (!$util.isInteger(message.deskSeat))
                    return "deskSeat: integer expected";
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                if (!(message.ruleFlag && typeof message.ruleFlag.length === "number" || $util.isString(message.ruleFlag)))
                    return "ruleFlag: buffer expected";
            if (message.userNum != null && message.hasOwnProperty("userNum"))
                if (!$util.isInteger(message.userNum))
                    return "userNum: integer expected";
            if (message.creatTime != null && message.hasOwnProperty("creatTime"))
                if (!$util.isInteger(message.creatTime))
                    return "creatTime: integer expected";
            if (message.gameStatus != null && message.hasOwnProperty("gameStatus"))
                if (!$util.isInteger(message.gameStatus))
                    return "gameStatus: integer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName")) {
                if (!Array.isArray(message.nickName))
                    return "nickName: array expected";
                for (var i = 0; i < message.nickName.length; ++i)
                    if (!(message.nickName[i] && typeof message.nickName[i].length === "number" || $util.isString(message.nickName[i])))
                        return "nickName: buffer[] expected";
            }
            if (message.userId != null && message.hasOwnProperty("userId")) {
                if (!Array.isArray(message.userId))
                    return "userId: array expected";
                for (var i = 0; i < message.userId.length; ++i)
                    if (!$util.isInteger(message.userId[i]))
                        return "userId: integer[] expected";
            }
            if (message.headFile != null && message.hasOwnProperty("headFile")) {
                if (!Array.isArray(message.headFile))
                    return "headFile: array expected";
                for (var i = 0; i < message.headFile.length; ++i)
                    if (!(message.headFile[i] && typeof message.headFile[i].length === "number" || $util.isString(message.headFile[i])))
                        return "headFile: buffer[] expected";
            }
            return null;
        };

        /**
         * Creates a RoomCardDeskInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.RoomCardDeskInfo} RoomCardDeskInfo
         */
        RoomCardDeskInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.RoomCardDeskInfo)
                return object;
            var message = new $root.messages.RoomCardDeskInfo();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.aeraId != null)
                message.aeraId = object.aeraId | 0;
            if (object.deskSeat != null)
                message.deskSeat = object.deskSeat | 0;
            if (object.ruleFlag != null)
                if (typeof object.ruleFlag === "string")
                    $util.base64.decode(object.ruleFlag, message.ruleFlag = $util.newBuffer($util.base64.length(object.ruleFlag)), 0);
                else if (object.ruleFlag.length)
                    message.ruleFlag = object.ruleFlag;
            if (object.userNum != null)
                message.userNum = object.userNum | 0;
            if (object.creatTime != null)
                message.creatTime = object.creatTime | 0;
            if (object.gameStatus != null)
                message.gameStatus = object.gameStatus | 0;
            if (object.nickName) {
                if (!Array.isArray(object.nickName))
                    throw TypeError(".messages.RoomCardDeskInfo.nickName: array expected");
                message.nickName = [];
                for (var i = 0; i < object.nickName.length; ++i)
                    if (typeof object.nickName[i] === "string")
                        $util.base64.decode(object.nickName[i], message.nickName[i] = $util.newBuffer($util.base64.length(object.nickName[i])), 0);
                    else if (object.nickName[i].length)
                        message.nickName[i] = object.nickName[i];
            }
            if (object.userId) {
                if (!Array.isArray(object.userId))
                    throw TypeError(".messages.RoomCardDeskInfo.userId: array expected");
                message.userId = [];
                for (var i = 0; i < object.userId.length; ++i)
                    message.userId[i] = object.userId[i] | 0;
            }
            if (object.headFile) {
                if (!Array.isArray(object.headFile))
                    throw TypeError(".messages.RoomCardDeskInfo.headFile: array expected");
                message.headFile = [];
                for (var i = 0; i < object.headFile.length; ++i)
                    if (typeof object.headFile[i] === "string")
                        $util.base64.decode(object.headFile[i], message.headFile[i] = $util.newBuffer($util.base64.length(object.headFile[i])), 0);
                    else if (object.headFile[i].length)
                        message.headFile[i] = object.headFile[i];
            }
            return message;
        };

        /**
         * Creates a plain object from a RoomCardDeskInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.RoomCardDeskInfo
         * @static
         * @param {messages.RoomCardDeskInfo} message RoomCardDeskInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        RoomCardDeskInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.nickName = [];
                object.userId = [];
                object.headFile = [];
            }
            if (options.defaults) {
                object.roomTag = 0;
                object.aeraId = 0;
                object.deskSeat = 0;
                object.ruleFlag = options.bytes === String ? "" : [];
                object.userNum = 0;
                object.creatTime = 0;
                object.gameStatus = 0;
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                object.aeraId = message.aeraId;
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                object.deskSeat = message.deskSeat;
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                object.ruleFlag = options.bytes === String ? $util.base64.encode(message.ruleFlag, 0, message.ruleFlag.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleFlag) : message.ruleFlag;
            if (message.userNum != null && message.hasOwnProperty("userNum"))
                object.userNum = message.userNum;
            if (message.creatTime != null && message.hasOwnProperty("creatTime"))
                object.creatTime = message.creatTime;
            if (message.gameStatus != null && message.hasOwnProperty("gameStatus"))
                object.gameStatus = message.gameStatus;
            if (message.nickName && message.nickName.length) {
                object.nickName = [];
                for (var j = 0; j < message.nickName.length; ++j)
                    object.nickName[j] = options.bytes === String ? $util.base64.encode(message.nickName[j], 0, message.nickName[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName[j]) : message.nickName[j];
            }
            if (message.userId && message.userId.length) {
                object.userId = [];
                for (var j = 0; j < message.userId.length; ++j)
                    object.userId[j] = message.userId[j];
            }
            if (message.headFile && message.headFile.length) {
                object.headFile = [];
                for (var j = 0; j < message.headFile.length; ++j)
                    object.headFile[j] = options.bytes === String ? $util.base64.encode(message.headFile[j], 0, message.headFile[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.headFile[j]) : message.headFile[j];
            }
            return object;
        };

        /**
         * Converts this RoomCardDeskInfo to JSON.
         * @function toJSON
         * @memberof messages.RoomCardDeskInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        RoomCardDeskInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return RoomCardDeskInfo;
    })();

    messages.ProGamePersonalDesksRequest = (function() {

        /**
         * Properties of a ProGamePersonalDesksRequest.
         * @memberof messages
         * @interface IProGamePersonalDesksRequest
         * @property {number|null} [userId] ProGamePersonalDesksRequest userId
         */

        /**
         * Constructs a new ProGamePersonalDesksRequest.
         * @memberof messages
         * @classdesc Represents a ProGamePersonalDesksRequest.
         * @implements IProGamePersonalDesksRequest
         * @constructor
         * @param {messages.IProGamePersonalDesksRequest=} [properties] Properties to set
         */
        function ProGamePersonalDesksRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGamePersonalDesksRequest userId.
         * @member {number} userId
         * @memberof messages.ProGamePersonalDesksRequest
         * @instance
         */
        ProGamePersonalDesksRequest.prototype.userId = 0;

        /**
         * Creates a new ProGamePersonalDesksRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {messages.IProGamePersonalDesksRequest=} [properties] Properties to set
         * @returns {messages.ProGamePersonalDesksRequest} ProGamePersonalDesksRequest instance
         */
        ProGamePersonalDesksRequest.create = function create(properties) {
            return new ProGamePersonalDesksRequest(properties);
        };

        /**
         * Encodes the specified ProGamePersonalDesksRequest message. Does not implicitly {@link messages.ProGamePersonalDesksRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {messages.IProGamePersonalDesksRequest} message ProGamePersonalDesksRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGamePersonalDesksRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProGamePersonalDesksRequest message, length delimited. Does not implicitly {@link messages.ProGamePersonalDesksRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {messages.IProGamePersonalDesksRequest} message ProGamePersonalDesksRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGamePersonalDesksRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGamePersonalDesksRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGamePersonalDesksRequest} ProGamePersonalDesksRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGamePersonalDesksRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGamePersonalDesksRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGamePersonalDesksRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGamePersonalDesksRequest} ProGamePersonalDesksRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGamePersonalDesksRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGamePersonalDesksRequest message.
         * @function verify
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGamePersonalDesksRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProGamePersonalDesksRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGamePersonalDesksRequest} ProGamePersonalDesksRequest
         */
        ProGamePersonalDesksRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGamePersonalDesksRequest)
                return object;
            var message = new $root.messages.ProGamePersonalDesksRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGamePersonalDesksRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGamePersonalDesksRequest
         * @static
         * @param {messages.ProGamePersonalDesksRequest} message ProGamePersonalDesksRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGamePersonalDesksRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userId = 0;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProGamePersonalDesksRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGamePersonalDesksRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGamePersonalDesksRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGamePersonalDesksRequest.MSGID
         * @enum {string}
         * @property {number} ID=1050 ID value
         */
        ProGamePersonalDesksRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1050] = "ID"] = 1050;
            return values;
        })();

        return ProGamePersonalDesksRequest;
    })();

    messages.ProGamePersonalDesksResponse = (function() {

        /**
         * Properties of a ProGamePersonalDesksResponse.
         * @memberof messages
         * @interface IProGamePersonalDesksResponse
         * @property {Array.<messages.IPersonalDeskInfo>|null} [desks] ProGamePersonalDesksResponse desks
         */

        /**
         * Constructs a new ProGamePersonalDesksResponse.
         * @memberof messages
         * @classdesc Represents a ProGamePersonalDesksResponse.
         * @implements IProGamePersonalDesksResponse
         * @constructor
         * @param {messages.IProGamePersonalDesksResponse=} [properties] Properties to set
         */
        function ProGamePersonalDesksResponse(properties) {
            this.desks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGamePersonalDesksResponse desks.
         * @member {Array.<messages.IPersonalDeskInfo>} desks
         * @memberof messages.ProGamePersonalDesksResponse
         * @instance
         */
        ProGamePersonalDesksResponse.prototype.desks = $util.emptyArray;

        /**
         * Creates a new ProGamePersonalDesksResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {messages.IProGamePersonalDesksResponse=} [properties] Properties to set
         * @returns {messages.ProGamePersonalDesksResponse} ProGamePersonalDesksResponse instance
         */
        ProGamePersonalDesksResponse.create = function create(properties) {
            return new ProGamePersonalDesksResponse(properties);
        };

        /**
         * Encodes the specified ProGamePersonalDesksResponse message. Does not implicitly {@link messages.ProGamePersonalDesksResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {messages.IProGamePersonalDesksResponse} message ProGamePersonalDesksResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGamePersonalDesksResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.desks != null && message.desks.length)
                for (var i = 0; i < message.desks.length; ++i)
                    $root.messages.PersonalDeskInfo.encode(message.desks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGamePersonalDesksResponse message, length delimited. Does not implicitly {@link messages.ProGamePersonalDesksResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {messages.IProGamePersonalDesksResponse} message ProGamePersonalDesksResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGamePersonalDesksResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGamePersonalDesksResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGamePersonalDesksResponse} ProGamePersonalDesksResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGamePersonalDesksResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGamePersonalDesksResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    if (!(message.desks && message.desks.length))
                        message.desks = [];
                    message.desks.push($root.messages.PersonalDeskInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGamePersonalDesksResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGamePersonalDesksResponse} ProGamePersonalDesksResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGamePersonalDesksResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGamePersonalDesksResponse message.
         * @function verify
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGamePersonalDesksResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.desks != null && message.hasOwnProperty("desks")) {
                if (!Array.isArray(message.desks))
                    return "desks: array expected";
                for (var i = 0; i < message.desks.length; ++i) {
                    var error = $root.messages.PersonalDeskInfo.verify(message.desks[i]);
                    if (error)
                        return "desks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGamePersonalDesksResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGamePersonalDesksResponse} ProGamePersonalDesksResponse
         */
        ProGamePersonalDesksResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGamePersonalDesksResponse)
                return object;
            var message = new $root.messages.ProGamePersonalDesksResponse();
            if (object.desks) {
                if (!Array.isArray(object.desks))
                    throw TypeError(".messages.ProGamePersonalDesksResponse.desks: array expected");
                message.desks = [];
                for (var i = 0; i < object.desks.length; ++i) {
                    if (typeof object.desks[i] !== "object")
                        throw TypeError(".messages.ProGamePersonalDesksResponse.desks: object expected");
                    message.desks[i] = $root.messages.PersonalDeskInfo.fromObject(object.desks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGamePersonalDesksResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGamePersonalDesksResponse
         * @static
         * @param {messages.ProGamePersonalDesksResponse} message ProGamePersonalDesksResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGamePersonalDesksResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.desks = [];
            if (message.desks && message.desks.length) {
                object.desks = [];
                for (var j = 0; j < message.desks.length; ++j)
                    object.desks[j] = $root.messages.PersonalDeskInfo.toObject(message.desks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGamePersonalDesksResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGamePersonalDesksResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGamePersonalDesksResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGamePersonalDesksResponse.MSGID
         * @enum {string}
         * @property {number} ID=1051 ID value
         */
        ProGamePersonalDesksResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1051] = "ID"] = 1051;
            return values;
        })();

        return ProGamePersonalDesksResponse;
    })();

    messages.ProGameUserEnterDeskRequest = (function() {

        /**
         * Properties of a ProGameUserEnterDeskRequest.
         * @memberof messages
         * @interface IProGameUserEnterDeskRequest
         * @property {number|null} [userId] ProGameUserEnterDeskRequest userId
         * @property {number|null} [deskId] ProGameUserEnterDeskRequest deskId
         * @property {Uint8Array|null} [deskPassword] ProGameUserEnterDeskRequest deskPassword
         * @property {messages.ProGameUserEnterDeskRequest.RoomType|null} [roomtype] ProGameUserEnterDeskRequest roomtype
         * @property {number|null} [playFlag] ProGameUserEnterDeskRequest playFlag
         */

        /**
         * Constructs a new ProGameUserEnterDeskRequest.
         * @memberof messages
         * @classdesc Represents a ProGameUserEnterDeskRequest.
         * @implements IProGameUserEnterDeskRequest
         * @constructor
         * @param {messages.IProGameUserEnterDeskRequest=} [properties] Properties to set
         */
        function ProGameUserEnterDeskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserEnterDeskRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         */
        ProGameUserEnterDeskRequest.prototype.userId = 0;

        /**
         * ProGameUserEnterDeskRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         */
        ProGameUserEnterDeskRequest.prototype.deskId = 0;

        /**
         * ProGameUserEnterDeskRequest deskPassword.
         * @member {Uint8Array} deskPassword
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         */
        ProGameUserEnterDeskRequest.prototype.deskPassword = $util.newBuffer([]);

        /**
         * ProGameUserEnterDeskRequest roomtype.
         * @member {messages.ProGameUserEnterDeskRequest.RoomType} roomtype
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         */
        ProGameUserEnterDeskRequest.prototype.roomtype = 1;

        /**
         * ProGameUserEnterDeskRequest playFlag.
         * @member {number} playFlag
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         */
        ProGameUserEnterDeskRequest.prototype.playFlag = 0;

        /**
         * Creates a new ProGameUserEnterDeskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {messages.IProGameUserEnterDeskRequest=} [properties] Properties to set
         * @returns {messages.ProGameUserEnterDeskRequest} ProGameUserEnterDeskRequest instance
         */
        ProGameUserEnterDeskRequest.create = function create(properties) {
            return new ProGameUserEnterDeskRequest(properties);
        };

        /**
         * Encodes the specified ProGameUserEnterDeskRequest message. Does not implicitly {@link messages.ProGameUserEnterDeskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {messages.IProGameUserEnterDeskRequest} message ProGameUserEnterDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEnterDeskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.deskPassword);
            if (message.roomtype != null && message.hasOwnProperty("roomtype"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.roomtype);
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.playFlag);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserEnterDeskRequest message, length delimited. Does not implicitly {@link messages.ProGameUserEnterDeskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {messages.IProGameUserEnterDeskRequest} message ProGameUserEnterDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEnterDeskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserEnterDeskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserEnterDeskRequest} ProGameUserEnterDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEnterDeskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserEnterDeskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.deskPassword = reader.bytes();
                    break;
                case 5:
                    message.roomtype = reader.int32();
                    break;
                case 6:
                    message.playFlag = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserEnterDeskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserEnterDeskRequest} ProGameUserEnterDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEnterDeskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserEnterDeskRequest message.
         * @function verify
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserEnterDeskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                if (!(message.deskPassword && typeof message.deskPassword.length === "number" || $util.isString(message.deskPassword)))
                    return "deskPassword: buffer expected";
            if (message.roomtype != null && message.hasOwnProperty("roomtype"))
                switch (message.roomtype) {
                default:
                    return "roomtype: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                if (!$util.isInteger(message.playFlag))
                    return "playFlag: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserEnterDeskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserEnterDeskRequest} ProGameUserEnterDeskRequest
         */
        ProGameUserEnterDeskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserEnterDeskRequest)
                return object;
            var message = new $root.messages.ProGameUserEnterDeskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.deskPassword != null)
                if (typeof object.deskPassword === "string")
                    $util.base64.decode(object.deskPassword, message.deskPassword = $util.newBuffer($util.base64.length(object.deskPassword)), 0);
                else if (object.deskPassword.length)
                    message.deskPassword = object.deskPassword;
            switch (object.roomtype) {
            case "TYPE_PERSONAL":
            case 1:
                message.roomtype = 1;
                break;
            case "TYPE_ROOMCARD":
            case 2:
                message.roomtype = 2;
                break;
            }
            if (object.playFlag != null)
                message.playFlag = object.playFlag | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserEnterDeskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserEnterDeskRequest
         * @static
         * @param {messages.ProGameUserEnterDeskRequest} message ProGameUserEnterDeskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserEnterDeskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.deskPassword = options.bytes === String ? "" : [];
                object.roomtype = options.enums === String ? "TYPE_PERSONAL" : 1;
                object.playFlag = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                object.deskPassword = options.bytes === String ? $util.base64.encode(message.deskPassword, 0, message.deskPassword.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskPassword) : message.deskPassword;
            if (message.roomtype != null && message.hasOwnProperty("roomtype"))
                object.roomtype = options.enums === String ? $root.messages.ProGameUserEnterDeskRequest.RoomType[message.roomtype] : message.roomtype;
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                object.playFlag = message.playFlag;
            return object;
        };

        /**
         * Converts this ProGameUserEnterDeskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserEnterDeskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserEnterDeskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserEnterDeskRequest.MSGID
         * @enum {string}
         * @property {number} ID=1052 ID value
         */
        ProGameUserEnterDeskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1052] = "ID"] = 1052;
            return values;
        })();

        /**
         * RoomType enum.
         * @name messages.ProGameUserEnterDeskRequest.RoomType
         * @enum {string}
         * @property {number} TYPE_PERSONAL=1 TYPE_PERSONAL value
         * @property {number} TYPE_ROOMCARD=2 TYPE_ROOMCARD value
         */
        ProGameUserEnterDeskRequest.RoomType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TYPE_PERSONAL"] = 1;
            values[valuesById[2] = "TYPE_ROOMCARD"] = 2;
            return values;
        })();

        return ProGameUserEnterDeskRequest;
    })();

    messages.ProGameUserEnterDeskResponse = (function() {

        /**
         * Properties of a ProGameUserEnterDeskResponse.
         * @memberof messages
         * @interface IProGameUserEnterDeskResponse
         * @property {number|null} [userId] ProGameUserEnterDeskResponse userId
         * @property {number|null} [deskId] ProGameUserEnterDeskResponse deskId
         * @property {number|null} [bottomCoin] ProGameUserEnterDeskResponse bottomCoin
         * @property {Uint8Array|null} [deskName] ProGameUserEnterDeskResponse deskName
         * @property {number|null} [deskType] ProGameUserEnterDeskResponse deskType
         * @property {number|null} [flagId] ProGameUserEnterDeskResponse flagId
         * @property {number|null} [deskPeople] ProGameUserEnterDeskResponse deskPeople
         */

        /**
         * Constructs a new ProGameUserEnterDeskResponse.
         * @memberof messages
         * @classdesc Represents a ProGameUserEnterDeskResponse.
         * @implements IProGameUserEnterDeskResponse
         * @constructor
         * @param {messages.IProGameUserEnterDeskResponse=} [properties] Properties to set
         */
        function ProGameUserEnterDeskResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserEnterDeskResponse userId.
         * @member {number} userId
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.userId = 0;

        /**
         * ProGameUserEnterDeskResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.deskId = 0;

        /**
         * ProGameUserEnterDeskResponse bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.bottomCoin = 0;

        /**
         * ProGameUserEnterDeskResponse deskName.
         * @member {Uint8Array} deskName
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.deskName = $util.newBuffer([]);

        /**
         * ProGameUserEnterDeskResponse deskType.
         * @member {number} deskType
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.deskType = 0;

        /**
         * ProGameUserEnterDeskResponse flagId.
         * @member {number} flagId
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.flagId = 0;

        /**
         * ProGameUserEnterDeskResponse deskPeople.
         * @member {number} deskPeople
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         */
        ProGameUserEnterDeskResponse.prototype.deskPeople = 0;

        /**
         * Creates a new ProGameUserEnterDeskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {messages.IProGameUserEnterDeskResponse=} [properties] Properties to set
         * @returns {messages.ProGameUserEnterDeskResponse} ProGameUserEnterDeskResponse instance
         */
        ProGameUserEnterDeskResponse.create = function create(properties) {
            return new ProGameUserEnterDeskResponse(properties);
        };

        /**
         * Encodes the specified ProGameUserEnterDeskResponse message. Does not implicitly {@link messages.ProGameUserEnterDeskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {messages.IProGameUserEnterDeskResponse} message ProGameUserEnterDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEnterDeskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bottomCoin);
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.deskName);
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.deskType);
            if (message.flagId != null && message.hasOwnProperty("flagId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.flagId);
            if (message.deskPeople != null && message.hasOwnProperty("deskPeople"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.deskPeople);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserEnterDeskResponse message, length delimited. Does not implicitly {@link messages.ProGameUserEnterDeskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {messages.IProGameUserEnterDeskResponse} message ProGameUserEnterDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEnterDeskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserEnterDeskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserEnterDeskResponse} ProGameUserEnterDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEnterDeskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserEnterDeskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.bottomCoin = reader.int32();
                    break;
                case 5:
                    message.deskName = reader.bytes();
                    break;
                case 6:
                    message.deskType = reader.int32();
                    break;
                case 7:
                    message.flagId = reader.int32();
                    break;
                case 8:
                    message.deskPeople = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserEnterDeskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserEnterDeskResponse} ProGameUserEnterDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEnterDeskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserEnterDeskResponse message.
         * @function verify
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserEnterDeskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                if (!(message.deskName && typeof message.deskName.length === "number" || $util.isString(message.deskName)))
                    return "deskName: buffer expected";
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                if (!$util.isInteger(message.deskType))
                    return "deskType: integer expected";
            if (message.flagId != null && message.hasOwnProperty("flagId"))
                if (!$util.isInteger(message.flagId))
                    return "flagId: integer expected";
            if (message.deskPeople != null && message.hasOwnProperty("deskPeople"))
                if (!$util.isInteger(message.deskPeople))
                    return "deskPeople: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserEnterDeskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserEnterDeskResponse} ProGameUserEnterDeskResponse
         */
        ProGameUserEnterDeskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserEnterDeskResponse)
                return object;
            var message = new $root.messages.ProGameUserEnterDeskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.deskName != null)
                if (typeof object.deskName === "string")
                    $util.base64.decode(object.deskName, message.deskName = $util.newBuffer($util.base64.length(object.deskName)), 0);
                else if (object.deskName.length)
                    message.deskName = object.deskName;
            if (object.deskType != null)
                message.deskType = object.deskType | 0;
            if (object.flagId != null)
                message.flagId = object.flagId | 0;
            if (object.deskPeople != null)
                message.deskPeople = object.deskPeople | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserEnterDeskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserEnterDeskResponse
         * @static
         * @param {messages.ProGameUserEnterDeskResponse} message ProGameUserEnterDeskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserEnterDeskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.bottomCoin = 0;
                object.deskName = options.bytes === String ? "" : [];
                object.deskType = 0;
                object.flagId = 0;
                object.deskPeople = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                object.deskName = options.bytes === String ? $util.base64.encode(message.deskName, 0, message.deskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskName) : message.deskName;
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                object.deskType = message.deskType;
            if (message.flagId != null && message.hasOwnProperty("flagId"))
                object.flagId = message.flagId;
            if (message.deskPeople != null && message.hasOwnProperty("deskPeople"))
                object.deskPeople = message.deskPeople;
            return object;
        };

        /**
         * Converts this ProGameUserEnterDeskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserEnterDeskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserEnterDeskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserEnterDeskResponse.MSGID
         * @enum {string}
         * @property {number} ID=1061 ID value
         */
        ProGameUserEnterDeskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1061] = "ID"] = 1061;
            return values;
        })();

        return ProGameUserEnterDeskResponse;
    })();

    messages.ProGameUserKickRequest = (function() {

        /**
         * Properties of a ProGameUserKickRequest.
         * @memberof messages
         * @interface IProGameUserKickRequest
         * @property {number|null} [userId] ProGameUserKickRequest userId
         * @property {number|null} [kickDeskId] ProGameUserKickRequest kickDeskId
         * @property {number|null} [kickSeatId] ProGameUserKickRequest kickSeatId
         */

        /**
         * Constructs a new ProGameUserKickRequest.
         * @memberof messages
         * @classdesc Represents a ProGameUserKickRequest.
         * @implements IProGameUserKickRequest
         * @constructor
         * @param {messages.IProGameUserKickRequest=} [properties] Properties to set
         */
        function ProGameUserKickRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserKickRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameUserKickRequest
         * @instance
         */
        ProGameUserKickRequest.prototype.userId = 0;

        /**
         * ProGameUserKickRequest kickDeskId.
         * @member {number} kickDeskId
         * @memberof messages.ProGameUserKickRequest
         * @instance
         */
        ProGameUserKickRequest.prototype.kickDeskId = 0;

        /**
         * ProGameUserKickRequest kickSeatId.
         * @member {number} kickSeatId
         * @memberof messages.ProGameUserKickRequest
         * @instance
         */
        ProGameUserKickRequest.prototype.kickSeatId = 0;

        /**
         * Creates a new ProGameUserKickRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {messages.IProGameUserKickRequest=} [properties] Properties to set
         * @returns {messages.ProGameUserKickRequest} ProGameUserKickRequest instance
         */
        ProGameUserKickRequest.create = function create(properties) {
            return new ProGameUserKickRequest(properties);
        };

        /**
         * Encodes the specified ProGameUserKickRequest message. Does not implicitly {@link messages.ProGameUserKickRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {messages.IProGameUserKickRequest} message ProGameUserKickRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserKickRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.kickDeskId);
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kickSeatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserKickRequest message, length delimited. Does not implicitly {@link messages.ProGameUserKickRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {messages.IProGameUserKickRequest} message ProGameUserKickRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserKickRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserKickRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserKickRequest} ProGameUserKickRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserKickRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserKickRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.kickDeskId = reader.int32();
                    break;
                case 4:
                    message.kickSeatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserKickRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserKickRequest} ProGameUserKickRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserKickRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserKickRequest message.
         * @function verify
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserKickRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                if (!$util.isInteger(message.kickDeskId))
                    return "kickDeskId: integer expected";
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                if (!$util.isInteger(message.kickSeatId))
                    return "kickSeatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserKickRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserKickRequest} ProGameUserKickRequest
         */
        ProGameUserKickRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserKickRequest)
                return object;
            var message = new $root.messages.ProGameUserKickRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.kickDeskId != null)
                message.kickDeskId = object.kickDeskId | 0;
            if (object.kickSeatId != null)
                message.kickSeatId = object.kickSeatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserKickRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserKickRequest
         * @static
         * @param {messages.ProGameUserKickRequest} message ProGameUserKickRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserKickRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.kickDeskId = 0;
                object.kickSeatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                object.kickDeskId = message.kickDeskId;
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                object.kickSeatId = message.kickSeatId;
            return object;
        };

        /**
         * Converts this ProGameUserKickRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserKickRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserKickRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserKickRequest.MSGID
         * @enum {string}
         * @property {number} ID=1053 ID value
         */
        ProGameUserKickRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1053] = "ID"] = 1053;
            return values;
        })();

        return ProGameUserKickRequest;
    })();

    messages.ProGameUserKickResponse = (function() {

        /**
         * Properties of a ProGameUserKickResponse.
         * @memberof messages
         * @interface IProGameUserKickResponse
         * @property {number|null} [userId] ProGameUserKickResponse userId
         * @property {number|null} [kickDeskId] ProGameUserKickResponse kickDeskId
         * @property {number|null} [kickSeatId] ProGameUserKickResponse kickSeatId
         */

        /**
         * Constructs a new ProGameUserKickResponse.
         * @memberof messages
         * @classdesc Represents a ProGameUserKickResponse.
         * @implements IProGameUserKickResponse
         * @constructor
         * @param {messages.IProGameUserKickResponse=} [properties] Properties to set
         */
        function ProGameUserKickResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserKickResponse userId.
         * @member {number} userId
         * @memberof messages.ProGameUserKickResponse
         * @instance
         */
        ProGameUserKickResponse.prototype.userId = 0;

        /**
         * ProGameUserKickResponse kickDeskId.
         * @member {number} kickDeskId
         * @memberof messages.ProGameUserKickResponse
         * @instance
         */
        ProGameUserKickResponse.prototype.kickDeskId = 0;

        /**
         * ProGameUserKickResponse kickSeatId.
         * @member {number} kickSeatId
         * @memberof messages.ProGameUserKickResponse
         * @instance
         */
        ProGameUserKickResponse.prototype.kickSeatId = 0;

        /**
         * Creates a new ProGameUserKickResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {messages.IProGameUserKickResponse=} [properties] Properties to set
         * @returns {messages.ProGameUserKickResponse} ProGameUserKickResponse instance
         */
        ProGameUserKickResponse.create = function create(properties) {
            return new ProGameUserKickResponse(properties);
        };

        /**
         * Encodes the specified ProGameUserKickResponse message. Does not implicitly {@link messages.ProGameUserKickResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {messages.IProGameUserKickResponse} message ProGameUserKickResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserKickResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.kickDeskId);
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.kickSeatId);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserKickResponse message, length delimited. Does not implicitly {@link messages.ProGameUserKickResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {messages.IProGameUserKickResponse} message ProGameUserKickResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserKickResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserKickResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserKickResponse} ProGameUserKickResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserKickResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserKickResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.kickDeskId = reader.int32();
                    break;
                case 4:
                    message.kickSeatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserKickResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserKickResponse} ProGameUserKickResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserKickResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserKickResponse message.
         * @function verify
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserKickResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                if (!$util.isInteger(message.kickDeskId))
                    return "kickDeskId: integer expected";
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                if (!$util.isInteger(message.kickSeatId))
                    return "kickSeatId: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserKickResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserKickResponse} ProGameUserKickResponse
         */
        ProGameUserKickResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserKickResponse)
                return object;
            var message = new $root.messages.ProGameUserKickResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.kickDeskId != null)
                message.kickDeskId = object.kickDeskId | 0;
            if (object.kickSeatId != null)
                message.kickSeatId = object.kickSeatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserKickResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserKickResponse
         * @static
         * @param {messages.ProGameUserKickResponse} message ProGameUserKickResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserKickResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.kickDeskId = 0;
                object.kickSeatId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.kickDeskId != null && message.hasOwnProperty("kickDeskId"))
                object.kickDeskId = message.kickDeskId;
            if (message.kickSeatId != null && message.hasOwnProperty("kickSeatId"))
                object.kickSeatId = message.kickSeatId;
            return object;
        };

        /**
         * Converts this ProGameUserKickResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserKickResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserKickResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserKickResponse.MSGID
         * @enum {string}
         * @property {number} ID=1054 ID value
         */
        ProGameUserKickResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1054] = "ID"] = 1054;
            return values;
        })();

        return ProGameUserKickResponse;
    })();

    messages.ProGameUserBuildDeskRequest = (function() {

        /**
         * Properties of a ProGameUserBuildDeskRequest.
         * @memberof messages
         * @interface IProGameUserBuildDeskRequest
         * @property {number|null} [userId] ProGameUserBuildDeskRequest userId
         * @property {number|null} [bottomCoin] ProGameUserBuildDeskRequest bottomCoin
         * @property {Uint8Array|null} [deskName] ProGameUserBuildDeskRequest deskName
         * @property {Uint8Array|null} [deskPassword] ProGameUserBuildDeskRequest deskPassword
         * @property {number|null} [deskType] ProGameUserBuildDeskRequest deskType
         * @property {number|null} [gameId] ProGameUserBuildDeskRequest gameId
         * @property {number|null} [needRoomcard] ProGameUserBuildDeskRequest needRoomcard
         * @property {number|null} [playFlag] ProGameUserBuildDeskRequest playFlag
         * @property {number|null} [roomTag] ProGameUserBuildDeskRequest roomTag
         * @property {number|null} [aeraId] ProGameUserBuildDeskRequest aeraId
         * @property {number|null} [deskSeat] ProGameUserBuildDeskRequest deskSeat
         */

        /**
         * Constructs a new ProGameUserBuildDeskRequest.
         * @memberof messages
         * @classdesc Represents a ProGameUserBuildDeskRequest.
         * @implements IProGameUserBuildDeskRequest
         * @constructor
         * @param {messages.IProGameUserBuildDeskRequest=} [properties] Properties to set
         */
        function ProGameUserBuildDeskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserBuildDeskRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.userId = 0;

        /**
         * ProGameUserBuildDeskRequest bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.bottomCoin = 0;

        /**
         * ProGameUserBuildDeskRequest deskName.
         * @member {Uint8Array} deskName
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.deskName = $util.newBuffer([]);

        /**
         * ProGameUserBuildDeskRequest deskPassword.
         * @member {Uint8Array} deskPassword
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.deskPassword = $util.newBuffer([]);

        /**
         * ProGameUserBuildDeskRequest deskType.
         * @member {number} deskType
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.deskType = 0;

        /**
         * ProGameUserBuildDeskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.gameId = 0;

        /**
         * ProGameUserBuildDeskRequest needRoomcard.
         * @member {number} needRoomcard
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.needRoomcard = 0;

        /**
         * ProGameUserBuildDeskRequest playFlag.
         * @member {number} playFlag
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.playFlag = 0;

        /**
         * ProGameUserBuildDeskRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.roomTag = 0;

        /**
         * ProGameUserBuildDeskRequest aeraId.
         * @member {number} aeraId
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.aeraId = 0;

        /**
         * ProGameUserBuildDeskRequest deskSeat.
         * @member {number} deskSeat
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         */
        ProGameUserBuildDeskRequest.prototype.deskSeat = 0;

        /**
         * Creates a new ProGameUserBuildDeskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {messages.IProGameUserBuildDeskRequest=} [properties] Properties to set
         * @returns {messages.ProGameUserBuildDeskRequest} ProGameUserBuildDeskRequest instance
         */
        ProGameUserBuildDeskRequest.create = function create(properties) {
            return new ProGameUserBuildDeskRequest(properties);
        };

        /**
         * Encodes the specified ProGameUserBuildDeskRequest message. Does not implicitly {@link messages.ProGameUserBuildDeskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {messages.IProGameUserBuildDeskRequest} message ProGameUserBuildDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserBuildDeskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.bottomCoin);
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.deskName);
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.deskPassword);
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.deskType);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.gameId);
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.needRoomcard);
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.playFlag);
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.roomTag);
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.aeraId);
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.deskSeat);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserBuildDeskRequest message, length delimited. Does not implicitly {@link messages.ProGameUserBuildDeskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {messages.IProGameUserBuildDeskRequest} message ProGameUserBuildDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserBuildDeskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserBuildDeskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserBuildDeskRequest} ProGameUserBuildDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserBuildDeskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserBuildDeskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.bottomCoin = reader.int32();
                    break;
                case 4:
                    message.deskName = reader.bytes();
                    break;
                case 5:
                    message.deskPassword = reader.bytes();
                    break;
                case 6:
                    message.deskType = reader.int32();
                    break;
                case 7:
                    message.gameId = reader.int32();
                    break;
                case 8:
                    message.needRoomcard = reader.int32();
                    break;
                case 9:
                    message.playFlag = reader.int32();
                    break;
                case 10:
                    message.roomTag = reader.int32();
                    break;
                case 11:
                    message.aeraId = reader.int32();
                    break;
                case 12:
                    message.deskSeat = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserBuildDeskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserBuildDeskRequest} ProGameUserBuildDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserBuildDeskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserBuildDeskRequest message.
         * @function verify
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserBuildDeskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                if (!(message.deskName && typeof message.deskName.length === "number" || $util.isString(message.deskName)))
                    return "deskName: buffer expected";
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                if (!(message.deskPassword && typeof message.deskPassword.length === "number" || $util.isString(message.deskPassword)))
                    return "deskPassword: buffer expected";
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                if (!$util.isInteger(message.deskType))
                    return "deskType: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                if (!$util.isInteger(message.needRoomcard))
                    return "needRoomcard: integer expected";
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                if (!$util.isInteger(message.playFlag))
                    return "playFlag: integer expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                if (!$util.isInteger(message.aeraId))
                    return "aeraId: integer expected";
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                if (!$util.isInteger(message.deskSeat))
                    return "deskSeat: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserBuildDeskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserBuildDeskRequest} ProGameUserBuildDeskRequest
         */
        ProGameUserBuildDeskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserBuildDeskRequest)
                return object;
            var message = new $root.messages.ProGameUserBuildDeskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.deskName != null)
                if (typeof object.deskName === "string")
                    $util.base64.decode(object.deskName, message.deskName = $util.newBuffer($util.base64.length(object.deskName)), 0);
                else if (object.deskName.length)
                    message.deskName = object.deskName;
            if (object.deskPassword != null)
                if (typeof object.deskPassword === "string")
                    $util.base64.decode(object.deskPassword, message.deskPassword = $util.newBuffer($util.base64.length(object.deskPassword)), 0);
                else if (object.deskPassword.length)
                    message.deskPassword = object.deskPassword;
            if (object.deskType != null)
                message.deskType = object.deskType | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.needRoomcard != null)
                message.needRoomcard = object.needRoomcard | 0;
            if (object.playFlag != null)
                message.playFlag = object.playFlag | 0;
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.aeraId != null)
                message.aeraId = object.aeraId | 0;
            if (object.deskSeat != null)
                message.deskSeat = object.deskSeat | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserBuildDeskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserBuildDeskRequest
         * @static
         * @param {messages.ProGameUserBuildDeskRequest} message ProGameUserBuildDeskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserBuildDeskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.bottomCoin = 0;
                object.deskName = options.bytes === String ? "" : [];
                object.deskPassword = options.bytes === String ? "" : [];
                object.deskType = 0;
                object.gameId = 0;
                object.needRoomcard = 0;
                object.playFlag = 0;
                object.roomTag = 0;
                object.aeraId = 0;
                object.deskSeat = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.deskName != null && message.hasOwnProperty("deskName"))
                object.deskName = options.bytes === String ? $util.base64.encode(message.deskName, 0, message.deskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskName) : message.deskName;
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                object.deskPassword = options.bytes === String ? $util.base64.encode(message.deskPassword, 0, message.deskPassword.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskPassword) : message.deskPassword;
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                object.deskType = message.deskType;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                object.needRoomcard = message.needRoomcard;
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                object.playFlag = message.playFlag;
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                object.aeraId = message.aeraId;
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                object.deskSeat = message.deskSeat;
            return object;
        };

        /**
         * Converts this ProGameUserBuildDeskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserBuildDeskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserBuildDeskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserBuildDeskRequest.MSGID
         * @enum {string}
         * @property {number} ID=1055 ID value
         */
        ProGameUserBuildDeskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1055] = "ID"] = 1055;
            return values;
        })();

        return ProGameUserBuildDeskRequest;
    })();

    messages.ProGameUserEditDeskRequest = (function() {

        /**
         * Properties of a ProGameUserEditDeskRequest.
         * @memberof messages
         * @interface IProGameUserEditDeskRequest
         * @property {number|null} [userId] ProGameUserEditDeskRequest userId
         * @property {number|null} [deskId] ProGameUserEditDeskRequest deskId
         * @property {number|null} [bottomCoin] ProGameUserEditDeskRequest bottomCoin
         * @property {Uint8Array|null} [deskPassword] ProGameUserEditDeskRequest deskPassword
         * @property {number|null} [deskType] ProGameUserEditDeskRequest deskType
         */

        /**
         * Constructs a new ProGameUserEditDeskRequest.
         * @memberof messages
         * @classdesc Represents a ProGameUserEditDeskRequest.
         * @implements IProGameUserEditDeskRequest
         * @constructor
         * @param {messages.IProGameUserEditDeskRequest=} [properties] Properties to set
         */
        function ProGameUserEditDeskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserEditDeskRequest userId.
         * @member {number} userId
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         */
        ProGameUserEditDeskRequest.prototype.userId = 0;

        /**
         * ProGameUserEditDeskRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         */
        ProGameUserEditDeskRequest.prototype.deskId = 0;

        /**
         * ProGameUserEditDeskRequest bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         */
        ProGameUserEditDeskRequest.prototype.bottomCoin = 0;

        /**
         * ProGameUserEditDeskRequest deskPassword.
         * @member {Uint8Array} deskPassword
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         */
        ProGameUserEditDeskRequest.prototype.deskPassword = $util.newBuffer([]);

        /**
         * ProGameUserEditDeskRequest deskType.
         * @member {number} deskType
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         */
        ProGameUserEditDeskRequest.prototype.deskType = 0;

        /**
         * Creates a new ProGameUserEditDeskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {messages.IProGameUserEditDeskRequest=} [properties] Properties to set
         * @returns {messages.ProGameUserEditDeskRequest} ProGameUserEditDeskRequest instance
         */
        ProGameUserEditDeskRequest.create = function create(properties) {
            return new ProGameUserEditDeskRequest(properties);
        };

        /**
         * Encodes the specified ProGameUserEditDeskRequest message. Does not implicitly {@link messages.ProGameUserEditDeskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {messages.IProGameUserEditDeskRequest} message ProGameUserEditDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bottomCoin);
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.deskPassword);
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.deskType);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserEditDeskRequest message, length delimited. Does not implicitly {@link messages.ProGameUserEditDeskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {messages.IProGameUserEditDeskRequest} message ProGameUserEditDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserEditDeskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserEditDeskRequest} ProGameUserEditDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserEditDeskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                case 4:
                    message.bottomCoin = reader.int32();
                    break;
                case 5:
                    message.deskPassword = reader.bytes();
                    break;
                case 6:
                    message.deskType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserEditDeskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserEditDeskRequest} ProGameUserEditDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserEditDeskRequest message.
         * @function verify
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserEditDeskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                if (!(message.deskPassword && typeof message.deskPassword.length === "number" || $util.isString(message.deskPassword)))
                    return "deskPassword: buffer expected";
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                if (!$util.isInteger(message.deskType))
                    return "deskType: integer expected";
            return null;
        };

        /**
         * Creates a ProGameUserEditDeskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserEditDeskRequest} ProGameUserEditDeskRequest
         */
        ProGameUserEditDeskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserEditDeskRequest)
                return object;
            var message = new $root.messages.ProGameUserEditDeskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.deskPassword != null)
                if (typeof object.deskPassword === "string")
                    $util.base64.decode(object.deskPassword, message.deskPassword = $util.newBuffer($util.base64.length(object.deskPassword)), 0);
                else if (object.deskPassword.length)
                    message.deskPassword = object.deskPassword;
            if (object.deskType != null)
                message.deskType = object.deskType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserEditDeskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserEditDeskRequest
         * @static
         * @param {messages.ProGameUserEditDeskRequest} message ProGameUserEditDeskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserEditDeskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
                object.bottomCoin = 0;
                object.deskPassword = options.bytes === String ? "" : [];
                object.deskType = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.deskPassword != null && message.hasOwnProperty("deskPassword"))
                object.deskPassword = options.bytes === String ? $util.base64.encode(message.deskPassword, 0, message.deskPassword.length) : options.bytes === Array ? Array.prototype.slice.call(message.deskPassword) : message.deskPassword;
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                object.deskType = message.deskType;
            return object;
        };

        /**
         * Converts this ProGameUserEditDeskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserEditDeskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserEditDeskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserEditDeskRequest.MSGID
         * @enum {string}
         * @property {number} ID=1056 ID value
         */
        ProGameUserEditDeskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1056] = "ID"] = 1056;
            return values;
        })();

        return ProGameUserEditDeskRequest;
    })();

    messages.ProGameUserEditDeskErrorResponse = (function() {

        /**
         * Properties of a ProGameUserEditDeskErrorResponse.
         * @memberof messages
         * @interface IProGameUserEditDeskErrorResponse
         * @property {messages.ProGameUserEditDeskErrorResponse.EditErrorNo|null} [errorNo] ProGameUserEditDeskErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProGameUserEditDeskErrorResponse errorMsg
         * @property {messages.ProGameUserEditDeskErrorResponse.EditType|null} [editType] ProGameUserEditDeskErrorResponse editType
         */

        /**
         * Constructs a new ProGameUserEditDeskErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProGameUserEditDeskErrorResponse.
         * @implements IProGameUserEditDeskErrorResponse
         * @constructor
         * @param {messages.IProGameUserEditDeskErrorResponse=} [properties] Properties to set
         */
        function ProGameUserEditDeskErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserEditDeskErrorResponse errorNo.
         * @member {messages.ProGameUserEditDeskErrorResponse.EditErrorNo} errorNo
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @instance
         */
        ProGameUserEditDeskErrorResponse.prototype.errorNo = 1;

        /**
         * ProGameUserEditDeskErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @instance
         */
        ProGameUserEditDeskErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * ProGameUserEditDeskErrorResponse editType.
         * @member {messages.ProGameUserEditDeskErrorResponse.EditType} editType
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @instance
         */
        ProGameUserEditDeskErrorResponse.prototype.editType = 2;

        /**
         * Creates a new ProGameUserEditDeskErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {messages.IProGameUserEditDeskErrorResponse=} [properties] Properties to set
         * @returns {messages.ProGameUserEditDeskErrorResponse} ProGameUserEditDeskErrorResponse instance
         */
        ProGameUserEditDeskErrorResponse.create = function create(properties) {
            return new ProGameUserEditDeskErrorResponse(properties);
        };

        /**
         * Encodes the specified ProGameUserEditDeskErrorResponse message. Does not implicitly {@link messages.ProGameUserEditDeskErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {messages.IProGameUserEditDeskErrorResponse} message ProGameUserEditDeskErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
            if (message.editType != null && message.hasOwnProperty("editType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.editType);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserEditDeskErrorResponse message, length delimited. Does not implicitly {@link messages.ProGameUserEditDeskErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {messages.IProGameUserEditDeskErrorResponse} message ProGameUserEditDeskErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserEditDeskErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserEditDeskErrorResponse} ProGameUserEditDeskErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserEditDeskErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorMsg = reader.bytes();
                    break;
                case 4:
                    message.editType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserEditDeskErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserEditDeskErrorResponse} ProGameUserEditDeskErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserEditDeskErrorResponse message.
         * @function verify
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserEditDeskErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            if (message.editType != null && message.hasOwnProperty("editType"))
                switch (message.editType) {
                default:
                    return "editType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGameUserEditDeskErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserEditDeskErrorResponse} ProGameUserEditDeskErrorResponse
         */
        ProGameUserEditDeskErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserEditDeskErrorResponse)
                return object;
            var message = new $root.messages.ProGameUserEditDeskErrorResponse();
            switch (object.errorNo) {
            case "ERR_LACK_COIN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_DESK_EXIST":
            case 2:
                message.errorNo = 2;
                break;
            case "ERR_DESK_NAME":
            case 3:
                message.errorNo = 3;
                break;
            case "ERR_DESK_PASSWORD":
            case 4:
                message.errorNo = 4;
                break;
            case "ERR_DESK_BOTTOM_COIN":
            case 5:
                message.errorNo = 5;
                break;
            case "ERROR_IN_GAME":
            case 6:
                message.errorNo = 6;
                break;
            case "ERROR_USER":
            case 7:
                message.errorNo = 7;
                break;
            case "ERROR_ROOM_TYPE":
            case 8:
                message.errorNo = 8;
                break;
            case "ERROR_ROOM_CARD_EMPTY":
            case 9:
                message.errorNo = 9;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            switch (object.editType) {
            case "BUILD_DESK":
            case 1:
                message.editType = 1;
                break;
            case "EDIT_DESK":
            case 2:
                message.editType = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserEditDeskErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @static
         * @param {messages.ProGameUserEditDeskErrorResponse} message ProGameUserEditDeskErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserEditDeskErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_LACK_COIN" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
                object.editType = options.enums === String ? "EDIT_DESK" : 2;
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProGameUserEditDeskErrorResponse.EditErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            if (message.editType != null && message.hasOwnProperty("editType"))
                object.editType = options.enums === String ? $root.messages.ProGameUserEditDeskErrorResponse.EditType[message.editType] : message.editType;
            return object;
        };

        /**
         * Converts this ProGameUserEditDeskErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserEditDeskErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserEditDeskErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserEditDeskErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=1057 ID value
         */
        ProGameUserEditDeskErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1057] = "ID"] = 1057;
            return values;
        })();

        /**
         * EditErrorNo enum.
         * @name messages.ProGameUserEditDeskErrorResponse.EditErrorNo
         * @enum {string}
         * @property {number} ERR_LACK_COIN=1 ERR_LACK_COIN value
         * @property {number} ERR_DESK_EXIST=2 ERR_DESK_EXIST value
         * @property {number} ERR_DESK_NAME=3 ERR_DESK_NAME value
         * @property {number} ERR_DESK_PASSWORD=4 ERR_DESK_PASSWORD value
         * @property {number} ERR_DESK_BOTTOM_COIN=5 ERR_DESK_BOTTOM_COIN value
         * @property {number} ERROR_IN_GAME=6 ERROR_IN_GAME value
         * @property {number} ERROR_USER=7 ERROR_USER value
         * @property {number} ERROR_ROOM_TYPE=8 ERROR_ROOM_TYPE value
         * @property {number} ERROR_ROOM_CARD_EMPTY=9 ERROR_ROOM_CARD_EMPTY value
         */
        ProGameUserEditDeskErrorResponse.EditErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_LACK_COIN"] = 1;
            values[valuesById[2] = "ERR_DESK_EXIST"] = 2;
            values[valuesById[3] = "ERR_DESK_NAME"] = 3;
            values[valuesById[4] = "ERR_DESK_PASSWORD"] = 4;
            values[valuesById[5] = "ERR_DESK_BOTTOM_COIN"] = 5;
            values[valuesById[6] = "ERROR_IN_GAME"] = 6;
            values[valuesById[7] = "ERROR_USER"] = 7;
            values[valuesById[8] = "ERROR_ROOM_TYPE"] = 8;
            values[valuesById[9] = "ERROR_ROOM_CARD_EMPTY"] = 9;
            return values;
        })();

        /**
         * EditType enum.
         * @name messages.ProGameUserEditDeskErrorResponse.EditType
         * @enum {string}
         * @property {number} BUILD_DESK=1 BUILD_DESK value
         * @property {number} EDIT_DESK=2 EDIT_DESK value
         */
        ProGameUserEditDeskErrorResponse.EditType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "BUILD_DESK"] = 1;
            values[valuesById[2] = "EDIT_DESK"] = 2;
            return values;
        })();

        return ProGameUserEditDeskErrorResponse;
    })();

    messages.ProGameUserEditDeskSuccessResponse = (function() {

        /**
         * Properties of a ProGameUserEditDeskSuccessResponse.
         * @memberof messages
         * @interface IProGameUserEditDeskSuccessResponse
         * @property {number|null} [bottomCoin] ProGameUserEditDeskSuccessResponse bottomCoin
         * @property {number|null} [deskType] ProGameUserEditDeskSuccessResponse deskType
         * @property {boolean|null} [inGame] ProGameUserEditDeskSuccessResponse inGame
         */

        /**
         * Constructs a new ProGameUserEditDeskSuccessResponse.
         * @memberof messages
         * @classdesc Represents a ProGameUserEditDeskSuccessResponse.
         * @implements IProGameUserEditDeskSuccessResponse
         * @constructor
         * @param {messages.IProGameUserEditDeskSuccessResponse=} [properties] Properties to set
         */
        function ProGameUserEditDeskSuccessResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGameUserEditDeskSuccessResponse bottomCoin.
         * @member {number} bottomCoin
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @instance
         */
        ProGameUserEditDeskSuccessResponse.prototype.bottomCoin = 0;

        /**
         * ProGameUserEditDeskSuccessResponse deskType.
         * @member {number} deskType
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @instance
         */
        ProGameUserEditDeskSuccessResponse.prototype.deskType = 0;

        /**
         * ProGameUserEditDeskSuccessResponse inGame.
         * @member {boolean} inGame
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @instance
         */
        ProGameUserEditDeskSuccessResponse.prototype.inGame = false;

        /**
         * Creates a new ProGameUserEditDeskSuccessResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {messages.IProGameUserEditDeskSuccessResponse=} [properties] Properties to set
         * @returns {messages.ProGameUserEditDeskSuccessResponse} ProGameUserEditDeskSuccessResponse instance
         */
        ProGameUserEditDeskSuccessResponse.create = function create(properties) {
            return new ProGameUserEditDeskSuccessResponse(properties);
        };

        /**
         * Encodes the specified ProGameUserEditDeskSuccessResponse message. Does not implicitly {@link messages.ProGameUserEditDeskSuccessResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {messages.IProGameUserEditDeskSuccessResponse} message ProGameUserEditDeskSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskSuccessResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.bottomCoin);
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.deskType);
            if (message.inGame != null && message.hasOwnProperty("inGame"))
                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.inGame);
            return writer;
        };

        /**
         * Encodes the specified ProGameUserEditDeskSuccessResponse message, length delimited. Does not implicitly {@link messages.ProGameUserEditDeskSuccessResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {messages.IProGameUserEditDeskSuccessResponse} message ProGameUserEditDeskSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGameUserEditDeskSuccessResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGameUserEditDeskSuccessResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGameUserEditDeskSuccessResponse} ProGameUserEditDeskSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskSuccessResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGameUserEditDeskSuccessResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 4:
                    message.bottomCoin = reader.int32();
                    break;
                case 5:
                    message.deskType = reader.int32();
                    break;
                case 6:
                    message.inGame = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGameUserEditDeskSuccessResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGameUserEditDeskSuccessResponse} ProGameUserEditDeskSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGameUserEditDeskSuccessResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGameUserEditDeskSuccessResponse message.
         * @function verify
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGameUserEditDeskSuccessResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                if (!$util.isInteger(message.bottomCoin))
                    return "bottomCoin: integer expected";
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                if (!$util.isInteger(message.deskType))
                    return "deskType: integer expected";
            if (message.inGame != null && message.hasOwnProperty("inGame"))
                if (typeof message.inGame !== "boolean")
                    return "inGame: boolean expected";
            return null;
        };

        /**
         * Creates a ProGameUserEditDeskSuccessResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGameUserEditDeskSuccessResponse} ProGameUserEditDeskSuccessResponse
         */
        ProGameUserEditDeskSuccessResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGameUserEditDeskSuccessResponse)
                return object;
            var message = new $root.messages.ProGameUserEditDeskSuccessResponse();
            if (object.bottomCoin != null)
                message.bottomCoin = object.bottomCoin | 0;
            if (object.deskType != null)
                message.deskType = object.deskType | 0;
            if (object.inGame != null)
                message.inGame = Boolean(object.inGame);
            return message;
        };

        /**
         * Creates a plain object from a ProGameUserEditDeskSuccessResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @static
         * @param {messages.ProGameUserEditDeskSuccessResponse} message ProGameUserEditDeskSuccessResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGameUserEditDeskSuccessResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.bottomCoin = 0;
                object.deskType = 0;
                object.inGame = false;
            }
            if (message.bottomCoin != null && message.hasOwnProperty("bottomCoin"))
                object.bottomCoin = message.bottomCoin;
            if (message.deskType != null && message.hasOwnProperty("deskType"))
                object.deskType = message.deskType;
            if (message.inGame != null && message.hasOwnProperty("inGame"))
                object.inGame = message.inGame;
            return object;
        };

        /**
         * Converts this ProGameUserEditDeskSuccessResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGameUserEditDeskSuccessResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGameUserEditDeskSuccessResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGameUserEditDeskSuccessResponse.MSGID
         * @enum {string}
         * @property {number} ID=1058 ID value
         */
        ProGameUserEditDeskSuccessResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1058] = "ID"] = 1058;
            return values;
        })();

        return ProGameUserEditDeskSuccessResponse;
    })();

    messages.ProRobotUserStandUpNofify = (function() {

        /**
         * Properties of a ProRobotUserStandUpNofify.
         * @memberof messages
         * @interface IProRobotUserStandUpNofify
         */

        /**
         * Constructs a new ProRobotUserStandUpNofify.
         * @memberof messages
         * @classdesc Represents a ProRobotUserStandUpNofify.
         * @implements IProRobotUserStandUpNofify
         * @constructor
         * @param {messages.IProRobotUserStandUpNofify=} [properties] Properties to set
         */
        function ProRobotUserStandUpNofify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProRobotUserStandUpNofify instance using the specified properties.
         * @function create
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {messages.IProRobotUserStandUpNofify=} [properties] Properties to set
         * @returns {messages.ProRobotUserStandUpNofify} ProRobotUserStandUpNofify instance
         */
        ProRobotUserStandUpNofify.create = function create(properties) {
            return new ProRobotUserStandUpNofify(properties);
        };

        /**
         * Encodes the specified ProRobotUserStandUpNofify message. Does not implicitly {@link messages.ProRobotUserStandUpNofify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {messages.IProRobotUserStandUpNofify} message ProRobotUserStandUpNofify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProRobotUserStandUpNofify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProRobotUserStandUpNofify message, length delimited. Does not implicitly {@link messages.ProRobotUserStandUpNofify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {messages.IProRobotUserStandUpNofify} message ProRobotUserStandUpNofify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProRobotUserStandUpNofify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProRobotUserStandUpNofify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProRobotUserStandUpNofify} ProRobotUserStandUpNofify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProRobotUserStandUpNofify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProRobotUserStandUpNofify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProRobotUserStandUpNofify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProRobotUserStandUpNofify} ProRobotUserStandUpNofify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProRobotUserStandUpNofify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProRobotUserStandUpNofify message.
         * @function verify
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProRobotUserStandUpNofify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProRobotUserStandUpNofify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProRobotUserStandUpNofify} ProRobotUserStandUpNofify
         */
        ProRobotUserStandUpNofify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProRobotUserStandUpNofify)
                return object;
            return new $root.messages.ProRobotUserStandUpNofify();
        };

        /**
         * Creates a plain object from a ProRobotUserStandUpNofify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProRobotUserStandUpNofify
         * @static
         * @param {messages.ProRobotUserStandUpNofify} message ProRobotUserStandUpNofify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProRobotUserStandUpNofify.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProRobotUserStandUpNofify to JSON.
         * @function toJSON
         * @memberof messages.ProRobotUserStandUpNofify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProRobotUserStandUpNofify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProRobotUserStandUpNofify.MSGID
         * @enum {string}
         * @property {number} ID=1059 ID value
         */
        ProRobotUserStandUpNofify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1059] = "ID"] = 1059;
            return values;
        })();

        return ProRobotUserStandUpNofify;
    })();

    messages.ProClientPromptNotify = (function() {

        /**
         * Properties of a ProClientPromptNotify.
         * @memberof messages
         * @interface IProClientPromptNotify
         * @property {number|null} [prpmptId] ProClientPromptNotify prpmptId
         * @property {Uint8Array|null} [prpmptString] ProClientPromptNotify prpmptString
         */

        /**
         * Constructs a new ProClientPromptNotify.
         * @memberof messages
         * @classdesc Represents a ProClientPromptNotify.
         * @implements IProClientPromptNotify
         * @constructor
         * @param {messages.IProClientPromptNotify=} [properties] Properties to set
         */
        function ProClientPromptNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProClientPromptNotify prpmptId.
         * @member {number} prpmptId
         * @memberof messages.ProClientPromptNotify
         * @instance
         */
        ProClientPromptNotify.prototype.prpmptId = 0;

        /**
         * ProClientPromptNotify prpmptString.
         * @member {Uint8Array} prpmptString
         * @memberof messages.ProClientPromptNotify
         * @instance
         */
        ProClientPromptNotify.prototype.prpmptString = $util.newBuffer([]);

        /**
         * Creates a new ProClientPromptNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {messages.IProClientPromptNotify=} [properties] Properties to set
         * @returns {messages.ProClientPromptNotify} ProClientPromptNotify instance
         */
        ProClientPromptNotify.create = function create(properties) {
            return new ProClientPromptNotify(properties);
        };

        /**
         * Encodes the specified ProClientPromptNotify message. Does not implicitly {@link messages.ProClientPromptNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {messages.IProClientPromptNotify} message ProClientPromptNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientPromptNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.prpmptId != null && message.hasOwnProperty("prpmptId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.prpmptId);
            if (message.prpmptString != null && message.hasOwnProperty("prpmptString"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.prpmptString);
            return writer;
        };

        /**
         * Encodes the specified ProClientPromptNotify message, length delimited. Does not implicitly {@link messages.ProClientPromptNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {messages.IProClientPromptNotify} message ProClientPromptNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientPromptNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProClientPromptNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProClientPromptNotify} ProClientPromptNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientPromptNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProClientPromptNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.prpmptId = reader.int32();
                    break;
                case 3:
                    message.prpmptString = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProClientPromptNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProClientPromptNotify} ProClientPromptNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientPromptNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProClientPromptNotify message.
         * @function verify
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProClientPromptNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.prpmptId != null && message.hasOwnProperty("prpmptId"))
                if (!$util.isInteger(message.prpmptId))
                    return "prpmptId: integer expected";
            if (message.prpmptString != null && message.hasOwnProperty("prpmptString"))
                if (!(message.prpmptString && typeof message.prpmptString.length === "number" || $util.isString(message.prpmptString)))
                    return "prpmptString: buffer expected";
            return null;
        };

        /**
         * Creates a ProClientPromptNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProClientPromptNotify} ProClientPromptNotify
         */
        ProClientPromptNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProClientPromptNotify)
                return object;
            var message = new $root.messages.ProClientPromptNotify();
            if (object.prpmptId != null)
                message.prpmptId = object.prpmptId | 0;
            if (object.prpmptString != null)
                if (typeof object.prpmptString === "string")
                    $util.base64.decode(object.prpmptString, message.prpmptString = $util.newBuffer($util.base64.length(object.prpmptString)), 0);
                else if (object.prpmptString.length)
                    message.prpmptString = object.prpmptString;
            return message;
        };

        /**
         * Creates a plain object from a ProClientPromptNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProClientPromptNotify
         * @static
         * @param {messages.ProClientPromptNotify} message ProClientPromptNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProClientPromptNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.prpmptId = 0;
                object.prpmptString = options.bytes === String ? "" : [];
            }
            if (message.prpmptId != null && message.hasOwnProperty("prpmptId"))
                object.prpmptId = message.prpmptId;
            if (message.prpmptString != null && message.hasOwnProperty("prpmptString"))
                object.prpmptString = options.bytes === String ? $util.base64.encode(message.prpmptString, 0, message.prpmptString.length) : options.bytes === Array ? Array.prototype.slice.call(message.prpmptString) : message.prpmptString;
            return object;
        };

        /**
         * Converts this ProClientPromptNotify to JSON.
         * @function toJSON
         * @memberof messages.ProClientPromptNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProClientPromptNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProClientPromptNotify.MSGID
         * @enum {string}
         * @property {number} ID=1060 ID value
         */
        ProClientPromptNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1060] = "ID"] = 1060;
            return values;
        })();

        return ProClientPromptNotify;
    })();

    messages.ProAutoChangeDeskNotify = (function() {

        /**
         * Properties of a ProAutoChangeDeskNotify.
         * @memberof messages
         * @interface IProAutoChangeDeskNotify
         * @property {number|null} [maxWaittime] ProAutoChangeDeskNotify maxWaittime
         */

        /**
         * Constructs a new ProAutoChangeDeskNotify.
         * @memberof messages
         * @classdesc Represents a ProAutoChangeDeskNotify.
         * @implements IProAutoChangeDeskNotify
         * @constructor
         * @param {messages.IProAutoChangeDeskNotify=} [properties] Properties to set
         */
        function ProAutoChangeDeskNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProAutoChangeDeskNotify maxWaittime.
         * @member {number} maxWaittime
         * @memberof messages.ProAutoChangeDeskNotify
         * @instance
         */
        ProAutoChangeDeskNotify.prototype.maxWaittime = 0;

        /**
         * Creates a new ProAutoChangeDeskNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {messages.IProAutoChangeDeskNotify=} [properties] Properties to set
         * @returns {messages.ProAutoChangeDeskNotify} ProAutoChangeDeskNotify instance
         */
        ProAutoChangeDeskNotify.create = function create(properties) {
            return new ProAutoChangeDeskNotify(properties);
        };

        /**
         * Encodes the specified ProAutoChangeDeskNotify message. Does not implicitly {@link messages.ProAutoChangeDeskNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {messages.IProAutoChangeDeskNotify} message ProAutoChangeDeskNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAutoChangeDeskNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.maxWaittime != null && message.hasOwnProperty("maxWaittime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.maxWaittime);
            return writer;
        };

        /**
         * Encodes the specified ProAutoChangeDeskNotify message, length delimited. Does not implicitly {@link messages.ProAutoChangeDeskNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {messages.IProAutoChangeDeskNotify} message ProAutoChangeDeskNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAutoChangeDeskNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProAutoChangeDeskNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProAutoChangeDeskNotify} ProAutoChangeDeskNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAutoChangeDeskNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProAutoChangeDeskNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.maxWaittime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProAutoChangeDeskNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProAutoChangeDeskNotify} ProAutoChangeDeskNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAutoChangeDeskNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProAutoChangeDeskNotify message.
         * @function verify
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProAutoChangeDeskNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.maxWaittime != null && message.hasOwnProperty("maxWaittime"))
                if (!$util.isInteger(message.maxWaittime))
                    return "maxWaittime: integer expected";
            return null;
        };

        /**
         * Creates a ProAutoChangeDeskNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProAutoChangeDeskNotify} ProAutoChangeDeskNotify
         */
        ProAutoChangeDeskNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProAutoChangeDeskNotify)
                return object;
            var message = new $root.messages.ProAutoChangeDeskNotify();
            if (object.maxWaittime != null)
                message.maxWaittime = object.maxWaittime | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProAutoChangeDeskNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProAutoChangeDeskNotify
         * @static
         * @param {messages.ProAutoChangeDeskNotify} message ProAutoChangeDeskNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProAutoChangeDeskNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.maxWaittime = 0;
            if (message.maxWaittime != null && message.hasOwnProperty("maxWaittime"))
                object.maxWaittime = message.maxWaittime;
            return object;
        };

        /**
         * Converts this ProAutoChangeDeskNotify to JSON.
         * @function toJSON
         * @memberof messages.ProAutoChangeDeskNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProAutoChangeDeskNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProAutoChangeDeskNotify.MSGID
         * @enum {string}
         * @property {number} ID=1062 ID value
         */
        ProAutoChangeDeskNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1062] = "ID"] = 1062;
            return values;
        })();

        return ProAutoChangeDeskNotify;
    })();

    messages.ProMaintenanceNotify = (function() {

        /**
         * Properties of a ProMaintenanceNotify.
         * @memberof messages
         * @interface IProMaintenanceNotify
         */

        /**
         * Constructs a new ProMaintenanceNotify.
         * @memberof messages
         * @classdesc Represents a ProMaintenanceNotify.
         * @implements IProMaintenanceNotify
         * @constructor
         * @param {messages.IProMaintenanceNotify=} [properties] Properties to set
         */
        function ProMaintenanceNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProMaintenanceNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {messages.IProMaintenanceNotify=} [properties] Properties to set
         * @returns {messages.ProMaintenanceNotify} ProMaintenanceNotify instance
         */
        ProMaintenanceNotify.create = function create(properties) {
            return new ProMaintenanceNotify(properties);
        };

        /**
         * Encodes the specified ProMaintenanceNotify message. Does not implicitly {@link messages.ProMaintenanceNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {messages.IProMaintenanceNotify} message ProMaintenanceNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMaintenanceNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProMaintenanceNotify message, length delimited. Does not implicitly {@link messages.ProMaintenanceNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {messages.IProMaintenanceNotify} message ProMaintenanceNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMaintenanceNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProMaintenanceNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProMaintenanceNotify} ProMaintenanceNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMaintenanceNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProMaintenanceNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProMaintenanceNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProMaintenanceNotify} ProMaintenanceNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMaintenanceNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProMaintenanceNotify message.
         * @function verify
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProMaintenanceNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProMaintenanceNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProMaintenanceNotify} ProMaintenanceNotify
         */
        ProMaintenanceNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProMaintenanceNotify)
                return object;
            return new $root.messages.ProMaintenanceNotify();
        };

        /**
         * Creates a plain object from a ProMaintenanceNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProMaintenanceNotify
         * @static
         * @param {messages.ProMaintenanceNotify} message ProMaintenanceNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProMaintenanceNotify.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProMaintenanceNotify to JSON.
         * @function toJSON
         * @memberof messages.ProMaintenanceNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProMaintenanceNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProMaintenanceNotify.MSGID
         * @enum {string}
         * @property {number} ID=1063 ID value
         */
        ProMaintenanceNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1063] = "ID"] = 1063;
            return values;
        })();

        return ProMaintenanceNotify;
    })();

    messages.ProKickUserFromBackGround = (function() {

        /**
         * Properties of a ProKickUserFromBackGround.
         * @memberof messages
         * @interface IProKickUserFromBackGround
         * @property {number|null} [userId] ProKickUserFromBackGround userId
         * @property {number|null} [deskTag] ProKickUserFromBackGround deskTag
         */

        /**
         * Constructs a new ProKickUserFromBackGround.
         * @memberof messages
         * @classdesc Represents a ProKickUserFromBackGround.
         * @implements IProKickUserFromBackGround
         * @constructor
         * @param {messages.IProKickUserFromBackGround=} [properties] Properties to set
         */
        function ProKickUserFromBackGround(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProKickUserFromBackGround userId.
         * @member {number} userId
         * @memberof messages.ProKickUserFromBackGround
         * @instance
         */
        ProKickUserFromBackGround.prototype.userId = 0;

        /**
         * ProKickUserFromBackGround deskTag.
         * @member {number} deskTag
         * @memberof messages.ProKickUserFromBackGround
         * @instance
         */
        ProKickUserFromBackGround.prototype.deskTag = 0;

        /**
         * Creates a new ProKickUserFromBackGround instance using the specified properties.
         * @function create
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {messages.IProKickUserFromBackGround=} [properties] Properties to set
         * @returns {messages.ProKickUserFromBackGround} ProKickUserFromBackGround instance
         */
        ProKickUserFromBackGround.create = function create(properties) {
            return new ProKickUserFromBackGround(properties);
        };

        /**
         * Encodes the specified ProKickUserFromBackGround message. Does not implicitly {@link messages.ProKickUserFromBackGround.verify|verify} messages.
         * @function encode
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {messages.IProKickUserFromBackGround} message ProKickUserFromBackGround message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProKickUserFromBackGround.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskTag != null && message.hasOwnProperty("deskTag"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskTag);
            return writer;
        };

        /**
         * Encodes the specified ProKickUserFromBackGround message, length delimited. Does not implicitly {@link messages.ProKickUserFromBackGround.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {messages.IProKickUserFromBackGround} message ProKickUserFromBackGround message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProKickUserFromBackGround.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProKickUserFromBackGround message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProKickUserFromBackGround} ProKickUserFromBackGround
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProKickUserFromBackGround.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProKickUserFromBackGround();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskTag = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProKickUserFromBackGround message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProKickUserFromBackGround} ProKickUserFromBackGround
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProKickUserFromBackGround.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProKickUserFromBackGround message.
         * @function verify
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProKickUserFromBackGround.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskTag != null && message.hasOwnProperty("deskTag"))
                if (!$util.isInteger(message.deskTag))
                    return "deskTag: integer expected";
            return null;
        };

        /**
         * Creates a ProKickUserFromBackGround message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProKickUserFromBackGround} ProKickUserFromBackGround
         */
        ProKickUserFromBackGround.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProKickUserFromBackGround)
                return object;
            var message = new $root.messages.ProKickUserFromBackGround();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskTag != null)
                message.deskTag = object.deskTag | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProKickUserFromBackGround message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProKickUserFromBackGround
         * @static
         * @param {messages.ProKickUserFromBackGround} message ProKickUserFromBackGround
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProKickUserFromBackGround.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskTag = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskTag != null && message.hasOwnProperty("deskTag"))
                object.deskTag = message.deskTag;
            return object;
        };

        /**
         * Converts this ProKickUserFromBackGround to JSON.
         * @function toJSON
         * @memberof messages.ProKickUserFromBackGround
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProKickUserFromBackGround.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProKickUserFromBackGround.MSGID
         * @enum {string}
         * @property {number} ID=1064 ID value
         */
        ProKickUserFromBackGround.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1064] = "ID"] = 1064;
            return values;
        })();

        return ProKickUserFromBackGround;
    })();

    messages.ProForceGameServerRequest = (function() {

        /**
         * Properties of a ProForceGameServerRequest.
         * @memberof messages
         * @interface IProForceGameServerRequest
         * @property {number|null} [roomId] ProForceGameServerRequest roomId
         */

        /**
         * Constructs a new ProForceGameServerRequest.
         * @memberof messages
         * @classdesc Represents a ProForceGameServerRequest.
         * @implements IProForceGameServerRequest
         * @constructor
         * @param {messages.IProForceGameServerRequest=} [properties] Properties to set
         */
        function ProForceGameServerRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProForceGameServerRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProForceGameServerRequest
         * @instance
         */
        ProForceGameServerRequest.prototype.roomId = 0;

        /**
         * Creates a new ProForceGameServerRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {messages.IProForceGameServerRequest=} [properties] Properties to set
         * @returns {messages.ProForceGameServerRequest} ProForceGameServerRequest instance
         */
        ProForceGameServerRequest.create = function create(properties) {
            return new ProForceGameServerRequest(properties);
        };

        /**
         * Encodes the specified ProForceGameServerRequest message. Does not implicitly {@link messages.ProForceGameServerRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {messages.IProForceGameServerRequest} message ProForceGameServerRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceGameServerRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProForceGameServerRequest message, length delimited. Does not implicitly {@link messages.ProForceGameServerRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {messages.IProForceGameServerRequest} message ProForceGameServerRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceGameServerRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProForceGameServerRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProForceGameServerRequest} ProForceGameServerRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceGameServerRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProForceGameServerRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProForceGameServerRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProForceGameServerRequest} ProForceGameServerRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceGameServerRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProForceGameServerRequest message.
         * @function verify
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProForceGameServerRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProForceGameServerRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProForceGameServerRequest} ProForceGameServerRequest
         */
        ProForceGameServerRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProForceGameServerRequest)
                return object;
            var message = new $root.messages.ProForceGameServerRequest();
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProForceGameServerRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProForceGameServerRequest
         * @static
         * @param {messages.ProForceGameServerRequest} message ProForceGameServerRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProForceGameServerRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.roomId = 0;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProForceGameServerRequest to JSON.
         * @function toJSON
         * @memberof messages.ProForceGameServerRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProForceGameServerRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProForceGameServerRequest.MSGID
         * @enum {string}
         * @property {number} ID=1065 ID value
         */
        ProForceGameServerRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1065] = "ID"] = 1065;
            return values;
        })();

        return ProForceGameServerRequest;
    })();

    messages.ProForceGameServerResponse = (function() {

        /**
         * Properties of a ProForceGameServerResponse.
         * @memberof messages
         * @interface IProForceGameServerResponse
         * @property {number|null} [res] ProForceGameServerResponse res
         */

        /**
         * Constructs a new ProForceGameServerResponse.
         * @memberof messages
         * @classdesc Represents a ProForceGameServerResponse.
         * @implements IProForceGameServerResponse
         * @constructor
         * @param {messages.IProForceGameServerResponse=} [properties] Properties to set
         */
        function ProForceGameServerResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProForceGameServerResponse res.
         * @member {number} res
         * @memberof messages.ProForceGameServerResponse
         * @instance
         */
        ProForceGameServerResponse.prototype.res = 0;

        /**
         * Creates a new ProForceGameServerResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {messages.IProForceGameServerResponse=} [properties] Properties to set
         * @returns {messages.ProForceGameServerResponse} ProForceGameServerResponse instance
         */
        ProForceGameServerResponse.create = function create(properties) {
            return new ProForceGameServerResponse(properties);
        };

        /**
         * Encodes the specified ProForceGameServerResponse message. Does not implicitly {@link messages.ProForceGameServerResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {messages.IProForceGameServerResponse} message ProForceGameServerResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceGameServerResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.res != null && message.hasOwnProperty("res"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.res);
            return writer;
        };

        /**
         * Encodes the specified ProForceGameServerResponse message, length delimited. Does not implicitly {@link messages.ProForceGameServerResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {messages.IProForceGameServerResponse} message ProForceGameServerResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProForceGameServerResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProForceGameServerResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProForceGameServerResponse} ProForceGameServerResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceGameServerResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProForceGameServerResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.res = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProForceGameServerResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProForceGameServerResponse} ProForceGameServerResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProForceGameServerResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProForceGameServerResponse message.
         * @function verify
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProForceGameServerResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.res != null && message.hasOwnProperty("res"))
                if (!$util.isInteger(message.res))
                    return "res: integer expected";
            return null;
        };

        /**
         * Creates a ProForceGameServerResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProForceGameServerResponse} ProForceGameServerResponse
         */
        ProForceGameServerResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProForceGameServerResponse)
                return object;
            var message = new $root.messages.ProForceGameServerResponse();
            if (object.res != null)
                message.res = object.res | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProForceGameServerResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProForceGameServerResponse
         * @static
         * @param {messages.ProForceGameServerResponse} message ProForceGameServerResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProForceGameServerResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.res = 0;
            if (message.res != null && message.hasOwnProperty("res"))
                object.res = message.res;
            return object;
        };

        /**
         * Converts this ProForceGameServerResponse to JSON.
         * @function toJSON
         * @memberof messages.ProForceGameServerResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProForceGameServerResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProForceGameServerResponse.MSGID
         * @enum {string}
         * @property {number} ID=1066 ID value
         */
        ProForceGameServerResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1066] = "ID"] = 1066;
            return values;
        })();

        return ProForceGameServerResponse;
    })();

    messages.ProNotifyDispatchCleanRoomTag = (function() {

        /**
         * Properties of a ProNotifyDispatchCleanRoomTag.
         * @memberof messages
         * @interface IProNotifyDispatchCleanRoomTag
         * @property {number|null} [roomTag] ProNotifyDispatchCleanRoomTag roomTag
         */

        /**
         * Constructs a new ProNotifyDispatchCleanRoomTag.
         * @memberof messages
         * @classdesc Represents a ProNotifyDispatchCleanRoomTag.
         * @implements IProNotifyDispatchCleanRoomTag
         * @constructor
         * @param {messages.IProNotifyDispatchCleanRoomTag=} [properties] Properties to set
         */
        function ProNotifyDispatchCleanRoomTag(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyDispatchCleanRoomTag roomTag.
         * @member {number} roomTag
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @instance
         */
        ProNotifyDispatchCleanRoomTag.prototype.roomTag = 0;

        /**
         * Creates a new ProNotifyDispatchCleanRoomTag instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {messages.IProNotifyDispatchCleanRoomTag=} [properties] Properties to set
         * @returns {messages.ProNotifyDispatchCleanRoomTag} ProNotifyDispatchCleanRoomTag instance
         */
        ProNotifyDispatchCleanRoomTag.create = function create(properties) {
            return new ProNotifyDispatchCleanRoomTag(properties);
        };

        /**
         * Encodes the specified ProNotifyDispatchCleanRoomTag message. Does not implicitly {@link messages.ProNotifyDispatchCleanRoomTag.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {messages.IProNotifyDispatchCleanRoomTag} message ProNotifyDispatchCleanRoomTag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyDispatchCleanRoomTag.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyDispatchCleanRoomTag message, length delimited. Does not implicitly {@link messages.ProNotifyDispatchCleanRoomTag.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {messages.IProNotifyDispatchCleanRoomTag} message ProNotifyDispatchCleanRoomTag message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyDispatchCleanRoomTag.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyDispatchCleanRoomTag message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyDispatchCleanRoomTag} ProNotifyDispatchCleanRoomTag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyDispatchCleanRoomTag.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyDispatchCleanRoomTag();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyDispatchCleanRoomTag message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyDispatchCleanRoomTag} ProNotifyDispatchCleanRoomTag
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyDispatchCleanRoomTag.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyDispatchCleanRoomTag message.
         * @function verify
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyDispatchCleanRoomTag.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            return null;
        };

        /**
         * Creates a ProNotifyDispatchCleanRoomTag message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyDispatchCleanRoomTag} ProNotifyDispatchCleanRoomTag
         */
        ProNotifyDispatchCleanRoomTag.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyDispatchCleanRoomTag)
                return object;
            var message = new $root.messages.ProNotifyDispatchCleanRoomTag();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyDispatchCleanRoomTag message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @static
         * @param {messages.ProNotifyDispatchCleanRoomTag} message ProNotifyDispatchCleanRoomTag
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyDispatchCleanRoomTag.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.roomTag = 0;
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            return object;
        };

        /**
         * Converts this ProNotifyDispatchCleanRoomTag to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyDispatchCleanRoomTag
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyDispatchCleanRoomTag.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNotifyDispatchCleanRoomTag.MSGID
         * @enum {string}
         * @property {number} ID=1067 ID value
         */
        ProNotifyDispatchCleanRoomTag.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1067] = "ID"] = 1067;
            return values;
        })();

        return ProNotifyDispatchCleanRoomTag;
    })();

    messages.ProNotifyDispatchCleanUser = (function() {

        /**
         * Properties of a ProNotifyDispatchCleanUser.
         * @memberof messages
         * @interface IProNotifyDispatchCleanUser
         * @property {number|null} [userId] ProNotifyDispatchCleanUser userId
         */

        /**
         * Constructs a new ProNotifyDispatchCleanUser.
         * @memberof messages
         * @classdesc Represents a ProNotifyDispatchCleanUser.
         * @implements IProNotifyDispatchCleanUser
         * @constructor
         * @param {messages.IProNotifyDispatchCleanUser=} [properties] Properties to set
         */
        function ProNotifyDispatchCleanUser(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyDispatchCleanUser userId.
         * @member {number} userId
         * @memberof messages.ProNotifyDispatchCleanUser
         * @instance
         */
        ProNotifyDispatchCleanUser.prototype.userId = 0;

        /**
         * Creates a new ProNotifyDispatchCleanUser instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {messages.IProNotifyDispatchCleanUser=} [properties] Properties to set
         * @returns {messages.ProNotifyDispatchCleanUser} ProNotifyDispatchCleanUser instance
         */
        ProNotifyDispatchCleanUser.create = function create(properties) {
            return new ProNotifyDispatchCleanUser(properties);
        };

        /**
         * Encodes the specified ProNotifyDispatchCleanUser message. Does not implicitly {@link messages.ProNotifyDispatchCleanUser.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {messages.IProNotifyDispatchCleanUser} message ProNotifyDispatchCleanUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyDispatchCleanUser.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyDispatchCleanUser message, length delimited. Does not implicitly {@link messages.ProNotifyDispatchCleanUser.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {messages.IProNotifyDispatchCleanUser} message ProNotifyDispatchCleanUser message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyDispatchCleanUser.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyDispatchCleanUser message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyDispatchCleanUser} ProNotifyDispatchCleanUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyDispatchCleanUser.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyDispatchCleanUser();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyDispatchCleanUser message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyDispatchCleanUser} ProNotifyDispatchCleanUser
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyDispatchCleanUser.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyDispatchCleanUser message.
         * @function verify
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyDispatchCleanUser.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProNotifyDispatchCleanUser message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyDispatchCleanUser} ProNotifyDispatchCleanUser
         */
        ProNotifyDispatchCleanUser.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyDispatchCleanUser)
                return object;
            var message = new $root.messages.ProNotifyDispatchCleanUser();
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyDispatchCleanUser message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyDispatchCleanUser
         * @static
         * @param {messages.ProNotifyDispatchCleanUser} message ProNotifyDispatchCleanUser
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyDispatchCleanUser.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.userId = 0;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProNotifyDispatchCleanUser to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyDispatchCleanUser
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyDispatchCleanUser.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNotifyDispatchCleanUser.MSGID
         * @enum {string}
         * @property {number} ID=1068 ID value
         */
        ProNotifyDispatchCleanUser.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1068] = "ID"] = 1068;
            return values;
        })();

        return ProNotifyDispatchCleanUser;
    })();

    messages.ProBuildMatchDeskRequest = (function() {

        /**
         * Properties of a ProBuildMatchDeskRequest.
         * @memberof messages
         * @interface IProBuildMatchDeskRequest
         * @property {number|null} [roomTagid] ProBuildMatchDeskRequest roomTagid
         * @property {number|null} [roomRule] ProBuildMatchDeskRequest roomRule
         * @property {number|null} [roomAround] ProBuildMatchDeskRequest roomAround
         * @property {number|null} [matchId] ProBuildMatchDeskRequest matchId
         */

        /**
         * Constructs a new ProBuildMatchDeskRequest.
         * @memberof messages
         * @classdesc Represents a ProBuildMatchDeskRequest.
         * @implements IProBuildMatchDeskRequest
         * @constructor
         * @param {messages.IProBuildMatchDeskRequest=} [properties] Properties to set
         */
        function ProBuildMatchDeskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildMatchDeskRequest roomTagid.
         * @member {number} roomTagid
         * @memberof messages.ProBuildMatchDeskRequest
         * @instance
         */
        ProBuildMatchDeskRequest.prototype.roomTagid = 0;

        /**
         * ProBuildMatchDeskRequest roomRule.
         * @member {number} roomRule
         * @memberof messages.ProBuildMatchDeskRequest
         * @instance
         */
        ProBuildMatchDeskRequest.prototype.roomRule = 0;

        /**
         * ProBuildMatchDeskRequest roomAround.
         * @member {number} roomAround
         * @memberof messages.ProBuildMatchDeskRequest
         * @instance
         */
        ProBuildMatchDeskRequest.prototype.roomAround = 0;

        /**
         * ProBuildMatchDeskRequest matchId.
         * @member {number} matchId
         * @memberof messages.ProBuildMatchDeskRequest
         * @instance
         */
        ProBuildMatchDeskRequest.prototype.matchId = 0;

        /**
         * Creates a new ProBuildMatchDeskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {messages.IProBuildMatchDeskRequest=} [properties] Properties to set
         * @returns {messages.ProBuildMatchDeskRequest} ProBuildMatchDeskRequest instance
         */
        ProBuildMatchDeskRequest.create = function create(properties) {
            return new ProBuildMatchDeskRequest(properties);
        };

        /**
         * Encodes the specified ProBuildMatchDeskRequest message. Does not implicitly {@link messages.ProBuildMatchDeskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {messages.IProBuildMatchDeskRequest} message ProBuildMatchDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildMatchDeskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTagid != null && message.hasOwnProperty("roomTagid"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTagid);
            if (message.roomRule != null && message.hasOwnProperty("roomRule"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomRule);
            if (message.roomAround != null && message.hasOwnProperty("roomAround"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomAround);
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.matchId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildMatchDeskRequest message, length delimited. Does not implicitly {@link messages.ProBuildMatchDeskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {messages.IProBuildMatchDeskRequest} message ProBuildMatchDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildMatchDeskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildMatchDeskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildMatchDeskRequest} ProBuildMatchDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildMatchDeskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildMatchDeskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTagid = reader.int32();
                    break;
                case 3:
                    message.roomRule = reader.int32();
                    break;
                case 4:
                    message.roomAround = reader.int32();
                    break;
                case 5:
                    message.matchId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildMatchDeskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildMatchDeskRequest} ProBuildMatchDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildMatchDeskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildMatchDeskRequest message.
         * @function verify
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildMatchDeskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTagid != null && message.hasOwnProperty("roomTagid"))
                if (!$util.isInteger(message.roomTagid))
                    return "roomTagid: integer expected";
            if (message.roomRule != null && message.hasOwnProperty("roomRule"))
                if (!$util.isInteger(message.roomRule))
                    return "roomRule: integer expected";
            if (message.roomAround != null && message.hasOwnProperty("roomAround"))
                if (!$util.isInteger(message.roomAround))
                    return "roomAround: integer expected";
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                if (!$util.isInteger(message.matchId))
                    return "matchId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildMatchDeskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildMatchDeskRequest} ProBuildMatchDeskRequest
         */
        ProBuildMatchDeskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildMatchDeskRequest)
                return object;
            var message = new $root.messages.ProBuildMatchDeskRequest();
            if (object.roomTagid != null)
                message.roomTagid = object.roomTagid | 0;
            if (object.roomRule != null)
                message.roomRule = object.roomRule | 0;
            if (object.roomAround != null)
                message.roomAround = object.roomAround | 0;
            if (object.matchId != null)
                message.matchId = object.matchId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildMatchDeskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildMatchDeskRequest
         * @static
         * @param {messages.ProBuildMatchDeskRequest} message ProBuildMatchDeskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildMatchDeskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTagid = 0;
                object.roomRule = 0;
                object.roomAround = 0;
                object.matchId = 0;
            }
            if (message.roomTagid != null && message.hasOwnProperty("roomTagid"))
                object.roomTagid = message.roomTagid;
            if (message.roomRule != null && message.hasOwnProperty("roomRule"))
                object.roomRule = message.roomRule;
            if (message.roomAround != null && message.hasOwnProperty("roomAround"))
                object.roomAround = message.roomAround;
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                object.matchId = message.matchId;
            return object;
        };

        /**
         * Converts this ProBuildMatchDeskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProBuildMatchDeskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildMatchDeskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildMatchDeskRequest.MSGID
         * @enum {string}
         * @property {number} ID=1069 ID value
         */
        ProBuildMatchDeskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1069] = "ID"] = 1069;
            return values;
        })();

        return ProBuildMatchDeskRequest;
    })();

    messages.ProBuildMatchDeskResponse = (function() {

        /**
         * Properties of a ProBuildMatchDeskResponse.
         * @memberof messages
         * @interface IProBuildMatchDeskResponse
         * @property {number|null} [deskId] ProBuildMatchDeskResponse deskId
         */

        /**
         * Constructs a new ProBuildMatchDeskResponse.
         * @memberof messages
         * @classdesc Represents a ProBuildMatchDeskResponse.
         * @implements IProBuildMatchDeskResponse
         * @constructor
         * @param {messages.IProBuildMatchDeskResponse=} [properties] Properties to set
         */
        function ProBuildMatchDeskResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildMatchDeskResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProBuildMatchDeskResponse
         * @instance
         */
        ProBuildMatchDeskResponse.prototype.deskId = 0;

        /**
         * Creates a new ProBuildMatchDeskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {messages.IProBuildMatchDeskResponse=} [properties] Properties to set
         * @returns {messages.ProBuildMatchDeskResponse} ProBuildMatchDeskResponse instance
         */
        ProBuildMatchDeskResponse.create = function create(properties) {
            return new ProBuildMatchDeskResponse(properties);
        };

        /**
         * Encodes the specified ProBuildMatchDeskResponse message. Does not implicitly {@link messages.ProBuildMatchDeskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {messages.IProBuildMatchDeskResponse} message ProBuildMatchDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildMatchDeskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildMatchDeskResponse message, length delimited. Does not implicitly {@link messages.ProBuildMatchDeskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {messages.IProBuildMatchDeskResponse} message ProBuildMatchDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildMatchDeskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildMatchDeskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildMatchDeskResponse} ProBuildMatchDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildMatchDeskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildMatchDeskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildMatchDeskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildMatchDeskResponse} ProBuildMatchDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildMatchDeskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildMatchDeskResponse message.
         * @function verify
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildMatchDeskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildMatchDeskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildMatchDeskResponse} ProBuildMatchDeskResponse
         */
        ProBuildMatchDeskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildMatchDeskResponse)
                return object;
            var message = new $root.messages.ProBuildMatchDeskResponse();
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildMatchDeskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildMatchDeskResponse
         * @static
         * @param {messages.ProBuildMatchDeskResponse} message ProBuildMatchDeskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildMatchDeskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.deskId = 0;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            return object;
        };

        /**
         * Converts this ProBuildMatchDeskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProBuildMatchDeskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildMatchDeskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildMatchDeskResponse.MSGID
         * @enum {string}
         * @property {number} ID=1070 ID value
         */
        ProBuildMatchDeskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1070] = "ID"] = 1070;
            return values;
        })();

        return ProBuildMatchDeskResponse;
    })();

    messages.ProEnterMatchDeskRequest = (function() {

        /**
         * Properties of a ProEnterMatchDeskRequest.
         * @memberof messages
         * @interface IProEnterMatchDeskRequest
         * @property {number|null} [userId] ProEnterMatchDeskRequest userId
         * @property {number|null} [deskId] ProEnterMatchDeskRequest deskId
         */

        /**
         * Constructs a new ProEnterMatchDeskRequest.
         * @memberof messages
         * @classdesc Represents a ProEnterMatchDeskRequest.
         * @implements IProEnterMatchDeskRequest
         * @constructor
         * @param {messages.IProEnterMatchDeskRequest=} [properties] Properties to set
         */
        function ProEnterMatchDeskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProEnterMatchDeskRequest userId.
         * @member {number} userId
         * @memberof messages.ProEnterMatchDeskRequest
         * @instance
         */
        ProEnterMatchDeskRequest.prototype.userId = 0;

        /**
         * ProEnterMatchDeskRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProEnterMatchDeskRequest
         * @instance
         */
        ProEnterMatchDeskRequest.prototype.deskId = 0;

        /**
         * Creates a new ProEnterMatchDeskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {messages.IProEnterMatchDeskRequest=} [properties] Properties to set
         * @returns {messages.ProEnterMatchDeskRequest} ProEnterMatchDeskRequest instance
         */
        ProEnterMatchDeskRequest.create = function create(properties) {
            return new ProEnterMatchDeskRequest(properties);
        };

        /**
         * Encodes the specified ProEnterMatchDeskRequest message. Does not implicitly {@link messages.ProEnterMatchDeskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {messages.IProEnterMatchDeskRequest} message ProEnterMatchDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProEnterMatchDeskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.deskId);
            return writer;
        };

        /**
         * Encodes the specified ProEnterMatchDeskRequest message, length delimited. Does not implicitly {@link messages.ProEnterMatchDeskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {messages.IProEnterMatchDeskRequest} message ProEnterMatchDeskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProEnterMatchDeskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProEnterMatchDeskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProEnterMatchDeskRequest} ProEnterMatchDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProEnterMatchDeskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProEnterMatchDeskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.deskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProEnterMatchDeskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProEnterMatchDeskRequest} ProEnterMatchDeskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProEnterMatchDeskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProEnterMatchDeskRequest message.
         * @function verify
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProEnterMatchDeskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            return null;
        };

        /**
         * Creates a ProEnterMatchDeskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProEnterMatchDeskRequest} ProEnterMatchDeskRequest
         */
        ProEnterMatchDeskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProEnterMatchDeskRequest)
                return object;
            var message = new $root.messages.ProEnterMatchDeskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProEnterMatchDeskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProEnterMatchDeskRequest
         * @static
         * @param {messages.ProEnterMatchDeskRequest} message ProEnterMatchDeskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProEnterMatchDeskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.deskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            return object;
        };

        /**
         * Converts this ProEnterMatchDeskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProEnterMatchDeskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProEnterMatchDeskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProEnterMatchDeskRequest.MSGID
         * @enum {string}
         * @property {number} ID=1071 ID value
         */
        ProEnterMatchDeskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1071] = "ID"] = 1071;
            return values;
        })();

        return ProEnterMatchDeskRequest;
    })();

    messages.ProEnterMatchDeskResponse = (function() {

        /**
         * Properties of a ProEnterMatchDeskResponse.
         * @memberof messages
         * @interface IProEnterMatchDeskResponse
         * @property {number|null} [userId] ProEnterMatchDeskResponse userId
         * @property {number|null} [result] ProEnterMatchDeskResponse result
         */

        /**
         * Constructs a new ProEnterMatchDeskResponse.
         * @memberof messages
         * @classdesc Represents a ProEnterMatchDeskResponse.
         * @implements IProEnterMatchDeskResponse
         * @constructor
         * @param {messages.IProEnterMatchDeskResponse=} [properties] Properties to set
         */
        function ProEnterMatchDeskResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProEnterMatchDeskResponse userId.
         * @member {number} userId
         * @memberof messages.ProEnterMatchDeskResponse
         * @instance
         */
        ProEnterMatchDeskResponse.prototype.userId = 0;

        /**
         * ProEnterMatchDeskResponse result.
         * @member {number} result
         * @memberof messages.ProEnterMatchDeskResponse
         * @instance
         */
        ProEnterMatchDeskResponse.prototype.result = 0;

        /**
         * Creates a new ProEnterMatchDeskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {messages.IProEnterMatchDeskResponse=} [properties] Properties to set
         * @returns {messages.ProEnterMatchDeskResponse} ProEnterMatchDeskResponse instance
         */
        ProEnterMatchDeskResponse.create = function create(properties) {
            return new ProEnterMatchDeskResponse(properties);
        };

        /**
         * Encodes the specified ProEnterMatchDeskResponse message. Does not implicitly {@link messages.ProEnterMatchDeskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {messages.IProEnterMatchDeskResponse} message ProEnterMatchDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProEnterMatchDeskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProEnterMatchDeskResponse message, length delimited. Does not implicitly {@link messages.ProEnterMatchDeskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {messages.IProEnterMatchDeskResponse} message ProEnterMatchDeskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProEnterMatchDeskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProEnterMatchDeskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProEnterMatchDeskResponse} ProEnterMatchDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProEnterMatchDeskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProEnterMatchDeskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProEnterMatchDeskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProEnterMatchDeskResponse} ProEnterMatchDeskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProEnterMatchDeskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProEnterMatchDeskResponse message.
         * @function verify
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProEnterMatchDeskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProEnterMatchDeskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProEnterMatchDeskResponse} ProEnterMatchDeskResponse
         */
        ProEnterMatchDeskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProEnterMatchDeskResponse)
                return object;
            var message = new $root.messages.ProEnterMatchDeskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProEnterMatchDeskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProEnterMatchDeskResponse
         * @static
         * @param {messages.ProEnterMatchDeskResponse} message ProEnterMatchDeskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProEnterMatchDeskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.result = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProEnterMatchDeskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProEnterMatchDeskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProEnterMatchDeskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProEnterMatchDeskResponse.MSGID
         * @enum {string}
         * @property {number} ID=1072 ID value
         */
        ProEnterMatchDeskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1072] = "ID"] = 1072;
            return values;
        })();

        return ProEnterMatchDeskResponse;
    })();

    messages.ProMatchDeskEndNotify = (function() {

        /**
         * Properties of a ProMatchDeskEndNotify.
         * @memberof messages
         * @interface IProMatchDeskEndNotify
         * @property {number|null} [matchId] ProMatchDeskEndNotify matchId
         * @property {number|null} [matchRecordid] ProMatchDeskEndNotify matchRecordid
         * @property {number|null} [deskId] ProMatchDeskEndNotify deskId
         * @property {number|null} [gameId] ProMatchDeskEndNotify gameId
         * @property {number|null} [roomId] ProMatchDeskEndNotify roomId
         */

        /**
         * Constructs a new ProMatchDeskEndNotify.
         * @memberof messages
         * @classdesc Represents a ProMatchDeskEndNotify.
         * @implements IProMatchDeskEndNotify
         * @constructor
         * @param {messages.IProMatchDeskEndNotify=} [properties] Properties to set
         */
        function ProMatchDeskEndNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProMatchDeskEndNotify matchId.
         * @member {number} matchId
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         */
        ProMatchDeskEndNotify.prototype.matchId = 0;

        /**
         * ProMatchDeskEndNotify matchRecordid.
         * @member {number} matchRecordid
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         */
        ProMatchDeskEndNotify.prototype.matchRecordid = 0;

        /**
         * ProMatchDeskEndNotify deskId.
         * @member {number} deskId
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         */
        ProMatchDeskEndNotify.prototype.deskId = 0;

        /**
         * ProMatchDeskEndNotify gameId.
         * @member {number} gameId
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         */
        ProMatchDeskEndNotify.prototype.gameId = 0;

        /**
         * ProMatchDeskEndNotify roomId.
         * @member {number} roomId
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         */
        ProMatchDeskEndNotify.prototype.roomId = 0;

        /**
         * Creates a new ProMatchDeskEndNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {messages.IProMatchDeskEndNotify=} [properties] Properties to set
         * @returns {messages.ProMatchDeskEndNotify} ProMatchDeskEndNotify instance
         */
        ProMatchDeskEndNotify.create = function create(properties) {
            return new ProMatchDeskEndNotify(properties);
        };

        /**
         * Encodes the specified ProMatchDeskEndNotify message. Does not implicitly {@link messages.ProMatchDeskEndNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {messages.IProMatchDeskEndNotify} message ProMatchDeskEndNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMatchDeskEndNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchId);
            if (message.matchRecordid != null && message.hasOwnProperty("matchRecordid"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.matchRecordid);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.deskId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProMatchDeskEndNotify message, length delimited. Does not implicitly {@link messages.ProMatchDeskEndNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {messages.IProMatchDeskEndNotify} message ProMatchDeskEndNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMatchDeskEndNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProMatchDeskEndNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProMatchDeskEndNotify} ProMatchDeskEndNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMatchDeskEndNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProMatchDeskEndNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.matchId = reader.int32();
                    break;
                case 3:
                    message.matchRecordid = reader.int32();
                    break;
                case 4:
                    message.deskId = reader.int32();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                case 6:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProMatchDeskEndNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProMatchDeskEndNotify} ProMatchDeskEndNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMatchDeskEndNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProMatchDeskEndNotify message.
         * @function verify
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProMatchDeskEndNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                if (!$util.isInteger(message.matchId))
                    return "matchId: integer expected";
            if (message.matchRecordid != null && message.hasOwnProperty("matchRecordid"))
                if (!$util.isInteger(message.matchRecordid))
                    return "matchRecordid: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProMatchDeskEndNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProMatchDeskEndNotify} ProMatchDeskEndNotify
         */
        ProMatchDeskEndNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProMatchDeskEndNotify)
                return object;
            var message = new $root.messages.ProMatchDeskEndNotify();
            if (object.matchId != null)
                message.matchId = object.matchId | 0;
            if (object.matchRecordid != null)
                message.matchRecordid = object.matchRecordid | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProMatchDeskEndNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProMatchDeskEndNotify
         * @static
         * @param {messages.ProMatchDeskEndNotify} message ProMatchDeskEndNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProMatchDeskEndNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.matchId = 0;
                object.matchRecordid = 0;
                object.deskId = 0;
                object.gameId = 0;
                object.roomId = 0;
            }
            if (message.matchId != null && message.hasOwnProperty("matchId"))
                object.matchId = message.matchId;
            if (message.matchRecordid != null && message.hasOwnProperty("matchRecordid"))
                object.matchRecordid = message.matchRecordid;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProMatchDeskEndNotify to JSON.
         * @function toJSON
         * @memberof messages.ProMatchDeskEndNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProMatchDeskEndNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProMatchDeskEndNotify.MSGID
         * @enum {string}
         * @property {number} ID=1073 ID value
         */
        ProMatchDeskEndNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1073] = "ID"] = 1073;
            return values;
        })();

        return ProMatchDeskEndNotify;
    })();

    messages.ProClearDispatchUserRequest = (function() {

        /**
         * Properties of a ProClearDispatchUserRequest.
         * @memberof messages
         * @interface IProClearDispatchUserRequest
         * @property {number|null} [gameId] ProClearDispatchUserRequest gameId
         * @property {number|null} [roomId] ProClearDispatchUserRequest roomId
         */

        /**
         * Constructs a new ProClearDispatchUserRequest.
         * @memberof messages
         * @classdesc Represents a ProClearDispatchUserRequest.
         * @implements IProClearDispatchUserRequest
         * @constructor
         * @param {messages.IProClearDispatchUserRequest=} [properties] Properties to set
         */
        function ProClearDispatchUserRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProClearDispatchUserRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProClearDispatchUserRequest
         * @instance
         */
        ProClearDispatchUserRequest.prototype.gameId = 0;

        /**
         * ProClearDispatchUserRequest roomId.
         * @member {number} roomId
         * @memberof messages.ProClearDispatchUserRequest
         * @instance
         */
        ProClearDispatchUserRequest.prototype.roomId = 0;

        /**
         * Creates a new ProClearDispatchUserRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {messages.IProClearDispatchUserRequest=} [properties] Properties to set
         * @returns {messages.ProClearDispatchUserRequest} ProClearDispatchUserRequest instance
         */
        ProClearDispatchUserRequest.create = function create(properties) {
            return new ProClearDispatchUserRequest(properties);
        };

        /**
         * Encodes the specified ProClearDispatchUserRequest message. Does not implicitly {@link messages.ProClearDispatchUserRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {messages.IProClearDispatchUserRequest} message ProClearDispatchUserRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClearDispatchUserRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified ProClearDispatchUserRequest message, length delimited. Does not implicitly {@link messages.ProClearDispatchUserRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {messages.IProClearDispatchUserRequest} message ProClearDispatchUserRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClearDispatchUserRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProClearDispatchUserRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProClearDispatchUserRequest} ProClearDispatchUserRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClearDispatchUserRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProClearDispatchUserRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProClearDispatchUserRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProClearDispatchUserRequest} ProClearDispatchUserRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClearDispatchUserRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProClearDispatchUserRequest message.
         * @function verify
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProClearDispatchUserRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a ProClearDispatchUserRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProClearDispatchUserRequest} ProClearDispatchUserRequest
         */
        ProClearDispatchUserRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProClearDispatchUserRequest)
                return object;
            var message = new $root.messages.ProClearDispatchUserRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProClearDispatchUserRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProClearDispatchUserRequest
         * @static
         * @param {messages.ProClearDispatchUserRequest} message ProClearDispatchUserRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProClearDispatchUserRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.roomId = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this ProClearDispatchUserRequest to JSON.
         * @function toJSON
         * @memberof messages.ProClearDispatchUserRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProClearDispatchUserRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProClearDispatchUserRequest.MSGID
         * @enum {string}
         * @property {number} ID=1074 ID value
         */
        ProClearDispatchUserRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1074] = "ID"] = 1074;
            return values;
        })();

        return ProClearDispatchUserRequest;
    })();

    messages.ProChangeUserSeatNotify = (function() {

        /**
         * Properties of a ProChangeUserSeatNotify.
         * @memberof messages
         * @interface IProChangeUserSeatNotify
         * @property {Array.<messages.IChangeUserSeatInfo>|null} [userSeat] ProChangeUserSeatNotify userSeat
         */

        /**
         * Constructs a new ProChangeUserSeatNotify.
         * @memberof messages
         * @classdesc Represents a ProChangeUserSeatNotify.
         * @implements IProChangeUserSeatNotify
         * @constructor
         * @param {messages.IProChangeUserSeatNotify=} [properties] Properties to set
         */
        function ProChangeUserSeatNotify(properties) {
            this.userSeat = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProChangeUserSeatNotify userSeat.
         * @member {Array.<messages.IChangeUserSeatInfo>} userSeat
         * @memberof messages.ProChangeUserSeatNotify
         * @instance
         */
        ProChangeUserSeatNotify.prototype.userSeat = $util.emptyArray;

        /**
         * Creates a new ProChangeUserSeatNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {messages.IProChangeUserSeatNotify=} [properties] Properties to set
         * @returns {messages.ProChangeUserSeatNotify} ProChangeUserSeatNotify instance
         */
        ProChangeUserSeatNotify.create = function create(properties) {
            return new ProChangeUserSeatNotify(properties);
        };

        /**
         * Encodes the specified ProChangeUserSeatNotify message. Does not implicitly {@link messages.ProChangeUserSeatNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {messages.IProChangeUserSeatNotify} message ProChangeUserSeatNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProChangeUserSeatNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userSeat != null && message.userSeat.length)
                for (var i = 0; i < message.userSeat.length; ++i)
                    $root.messages.ChangeUserSeatInfo.encode(message.userSeat[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProChangeUserSeatNotify message, length delimited. Does not implicitly {@link messages.ProChangeUserSeatNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {messages.IProChangeUserSeatNotify} message ProChangeUserSeatNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProChangeUserSeatNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProChangeUserSeatNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProChangeUserSeatNotify} ProChangeUserSeatNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProChangeUserSeatNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProChangeUserSeatNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.userSeat && message.userSeat.length))
                        message.userSeat = [];
                    message.userSeat.push($root.messages.ChangeUserSeatInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProChangeUserSeatNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProChangeUserSeatNotify} ProChangeUserSeatNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProChangeUserSeatNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProChangeUserSeatNotify message.
         * @function verify
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProChangeUserSeatNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userSeat != null && message.hasOwnProperty("userSeat")) {
                if (!Array.isArray(message.userSeat))
                    return "userSeat: array expected";
                for (var i = 0; i < message.userSeat.length; ++i) {
                    var error = $root.messages.ChangeUserSeatInfo.verify(message.userSeat[i]);
                    if (error)
                        return "userSeat." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProChangeUserSeatNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProChangeUserSeatNotify} ProChangeUserSeatNotify
         */
        ProChangeUserSeatNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProChangeUserSeatNotify)
                return object;
            var message = new $root.messages.ProChangeUserSeatNotify();
            if (object.userSeat) {
                if (!Array.isArray(object.userSeat))
                    throw TypeError(".messages.ProChangeUserSeatNotify.userSeat: array expected");
                message.userSeat = [];
                for (var i = 0; i < object.userSeat.length; ++i) {
                    if (typeof object.userSeat[i] !== "object")
                        throw TypeError(".messages.ProChangeUserSeatNotify.userSeat: object expected");
                    message.userSeat[i] = $root.messages.ChangeUserSeatInfo.fromObject(object.userSeat[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProChangeUserSeatNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProChangeUserSeatNotify
         * @static
         * @param {messages.ProChangeUserSeatNotify} message ProChangeUserSeatNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProChangeUserSeatNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.userSeat = [];
            if (message.userSeat && message.userSeat.length) {
                object.userSeat = [];
                for (var j = 0; j < message.userSeat.length; ++j)
                    object.userSeat[j] = $root.messages.ChangeUserSeatInfo.toObject(message.userSeat[j], options);
            }
            return object;
        };

        /**
         * Converts this ProChangeUserSeatNotify to JSON.
         * @function toJSON
         * @memberof messages.ProChangeUserSeatNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProChangeUserSeatNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProChangeUserSeatNotify.MSGID
         * @enum {string}
         * @property {number} ID=1075 ID value
         */
        ProChangeUserSeatNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1075] = "ID"] = 1075;
            return values;
        })();

        return ProChangeUserSeatNotify;
    })();

    messages.ProBuildDeskByOtherRequest = (function() {

        /**
         * Properties of a ProBuildDeskByOtherRequest.
         * @memberof messages
         * @interface IProBuildDeskByOtherRequest
         * @property {number|null} [userId] ProBuildDeskByOtherRequest userId
         * @property {number|null} [gameId] ProBuildDeskByOtherRequest gameId
         * @property {number|null} [needRoomcard] ProBuildDeskByOtherRequest needRoomcard
         * @property {number|null} [playFlag] ProBuildDeskByOtherRequest playFlag
         * @property {number|null} [roomTag] ProBuildDeskByOtherRequest roomTag
         * @property {number|null} [aeraId] ProBuildDeskByOtherRequest aeraId
         * @property {number|null} [deskSeat] ProBuildDeskByOtherRequest deskSeat
         * @property {Uint8Array|null} [ruleFlag] ProBuildDeskByOtherRequest ruleFlag
         * @property {number|null} [organizeId] ProBuildDeskByOtherRequest organizeId
         */

        /**
         * Constructs a new ProBuildDeskByOtherRequest.
         * @memberof messages
         * @classdesc Represents a ProBuildDeskByOtherRequest.
         * @implements IProBuildDeskByOtherRequest
         * @constructor
         * @param {messages.IProBuildDeskByOtherRequest=} [properties] Properties to set
         */
        function ProBuildDeskByOtherRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildDeskByOtherRequest userId.
         * @member {number} userId
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.userId = 0;

        /**
         * ProBuildDeskByOtherRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.gameId = 0;

        /**
         * ProBuildDeskByOtherRequest needRoomcard.
         * @member {number} needRoomcard
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.needRoomcard = 0;

        /**
         * ProBuildDeskByOtherRequest playFlag.
         * @member {number} playFlag
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.playFlag = 0;

        /**
         * ProBuildDeskByOtherRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.roomTag = 0;

        /**
         * ProBuildDeskByOtherRequest aeraId.
         * @member {number} aeraId
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.aeraId = 0;

        /**
         * ProBuildDeskByOtherRequest deskSeat.
         * @member {number} deskSeat
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.deskSeat = 0;

        /**
         * ProBuildDeskByOtherRequest ruleFlag.
         * @member {Uint8Array} ruleFlag
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.ruleFlag = $util.newBuffer([]);

        /**
         * ProBuildDeskByOtherRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         */
        ProBuildDeskByOtherRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProBuildDeskByOtherRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {messages.IProBuildDeskByOtherRequest=} [properties] Properties to set
         * @returns {messages.ProBuildDeskByOtherRequest} ProBuildDeskByOtherRequest instance
         */
        ProBuildDeskByOtherRequest.create = function create(properties) {
            return new ProBuildDeskByOtherRequest(properties);
        };

        /**
         * Encodes the specified ProBuildDeskByOtherRequest message. Does not implicitly {@link messages.ProBuildDeskByOtherRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {messages.IProBuildDeskByOtherRequest} message ProBuildDeskByOtherRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOtherRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.needRoomcard);
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.playFlag);
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomTag);
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.aeraId);
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.deskSeat);
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.ruleFlag);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildDeskByOtherRequest message, length delimited. Does not implicitly {@link messages.ProBuildDeskByOtherRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {messages.IProBuildDeskByOtherRequest} message ProBuildDeskByOtherRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOtherRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildDeskByOtherRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildDeskByOtherRequest} ProBuildDeskByOtherRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOtherRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildDeskByOtherRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.needRoomcard = reader.int32();
                    break;
                case 5:
                    message.playFlag = reader.int32();
                    break;
                case 6:
                    message.roomTag = reader.int32();
                    break;
                case 7:
                    message.aeraId = reader.int32();
                    break;
                case 8:
                    message.deskSeat = reader.int32();
                    break;
                case 9:
                    message.ruleFlag = reader.bytes();
                    break;
                case 10:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildDeskByOtherRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildDeskByOtherRequest} ProBuildDeskByOtherRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOtherRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildDeskByOtherRequest message.
         * @function verify
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildDeskByOtherRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                if (!$util.isInteger(message.needRoomcard))
                    return "needRoomcard: integer expected";
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                if (!$util.isInteger(message.playFlag))
                    return "playFlag: integer expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                if (!$util.isInteger(message.aeraId))
                    return "aeraId: integer expected";
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                if (!$util.isInteger(message.deskSeat))
                    return "deskSeat: integer expected";
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                if (!(message.ruleFlag && typeof message.ruleFlag.length === "number" || $util.isString(message.ruleFlag)))
                    return "ruleFlag: buffer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildDeskByOtherRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildDeskByOtherRequest} ProBuildDeskByOtherRequest
         */
        ProBuildDeskByOtherRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildDeskByOtherRequest)
                return object;
            var message = new $root.messages.ProBuildDeskByOtherRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.needRoomcard != null)
                message.needRoomcard = object.needRoomcard | 0;
            if (object.playFlag != null)
                message.playFlag = object.playFlag | 0;
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.aeraId != null)
                message.aeraId = object.aeraId | 0;
            if (object.deskSeat != null)
                message.deskSeat = object.deskSeat | 0;
            if (object.ruleFlag != null)
                if (typeof object.ruleFlag === "string")
                    $util.base64.decode(object.ruleFlag, message.ruleFlag = $util.newBuffer($util.base64.length(object.ruleFlag)), 0);
                else if (object.ruleFlag.length)
                    message.ruleFlag = object.ruleFlag;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildDeskByOtherRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildDeskByOtherRequest
         * @static
         * @param {messages.ProBuildDeskByOtherRequest} message ProBuildDeskByOtherRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildDeskByOtherRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.needRoomcard = 0;
                object.playFlag = 0;
                object.roomTag = 0;
                object.aeraId = 0;
                object.deskSeat = 0;
                object.ruleFlag = options.bytes === String ? "" : [];
                object.organizeId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                object.needRoomcard = message.needRoomcard;
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                object.playFlag = message.playFlag;
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                object.aeraId = message.aeraId;
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                object.deskSeat = message.deskSeat;
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                object.ruleFlag = options.bytes === String ? $util.base64.encode(message.ruleFlag, 0, message.ruleFlag.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleFlag) : message.ruleFlag;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProBuildDeskByOtherRequest to JSON.
         * @function toJSON
         * @memberof messages.ProBuildDeskByOtherRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildDeskByOtherRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildDeskByOtherRequest.MSGID
         * @enum {string}
         * @property {number} ID=1076 ID value
         */
        ProBuildDeskByOtherRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1076] = "ID"] = 1076;
            return values;
        })();

        return ProBuildDeskByOtherRequest;
    })();

    messages.ProBuildDeskByOtherResponse = (function() {

        /**
         * Properties of a ProBuildDeskByOtherResponse.
         * @memberof messages
         * @interface IProBuildDeskByOtherResponse
         * @property {number|null} [errorNo] ProBuildDeskByOtherResponse errorNo
         * @property {Uint8Array|null} [errorInfo] ProBuildDeskByOtherResponse errorInfo
         * @property {messages.IRoomCardDeskInfo|null} [roomInfo] ProBuildDeskByOtherResponse roomInfo
         */

        /**
         * Constructs a new ProBuildDeskByOtherResponse.
         * @memberof messages
         * @classdesc Represents a ProBuildDeskByOtherResponse.
         * @implements IProBuildDeskByOtherResponse
         * @constructor
         * @param {messages.IProBuildDeskByOtherResponse=} [properties] Properties to set
         */
        function ProBuildDeskByOtherResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildDeskByOtherResponse errorNo.
         * @member {number} errorNo
         * @memberof messages.ProBuildDeskByOtherResponse
         * @instance
         */
        ProBuildDeskByOtherResponse.prototype.errorNo = 0;

        /**
         * ProBuildDeskByOtherResponse errorInfo.
         * @member {Uint8Array} errorInfo
         * @memberof messages.ProBuildDeskByOtherResponse
         * @instance
         */
        ProBuildDeskByOtherResponse.prototype.errorInfo = $util.newBuffer([]);

        /**
         * ProBuildDeskByOtherResponse roomInfo.
         * @member {messages.IRoomCardDeskInfo|null|undefined} roomInfo
         * @memberof messages.ProBuildDeskByOtherResponse
         * @instance
         */
        ProBuildDeskByOtherResponse.prototype.roomInfo = null;

        /**
         * Creates a new ProBuildDeskByOtherResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {messages.IProBuildDeskByOtherResponse=} [properties] Properties to set
         * @returns {messages.ProBuildDeskByOtherResponse} ProBuildDeskByOtherResponse instance
         */
        ProBuildDeskByOtherResponse.create = function create(properties) {
            return new ProBuildDeskByOtherResponse(properties);
        };

        /**
         * Encodes the specified ProBuildDeskByOtherResponse message. Does not implicitly {@link messages.ProBuildDeskByOtherResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {messages.IProBuildDeskByOtherResponse} message ProBuildDeskByOtherResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOtherResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorInfo);
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo"))
                $root.messages.RoomCardDeskInfo.encode(message.roomInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProBuildDeskByOtherResponse message, length delimited. Does not implicitly {@link messages.ProBuildDeskByOtherResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {messages.IProBuildDeskByOtherResponse} message ProBuildDeskByOtherResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOtherResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildDeskByOtherResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildDeskByOtherResponse} ProBuildDeskByOtherResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOtherResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildDeskByOtherResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorInfo = reader.bytes();
                    break;
                case 4:
                    message.roomInfo = $root.messages.RoomCardDeskInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildDeskByOtherResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildDeskByOtherResponse} ProBuildDeskByOtherResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOtherResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildDeskByOtherResponse message.
         * @function verify
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildDeskByOtherResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                if (!$util.isInteger(message.errorNo))
                    return "errorNo: integer expected";
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                if (!(message.errorInfo && typeof message.errorInfo.length === "number" || $util.isString(message.errorInfo)))
                    return "errorInfo: buffer expected";
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo")) {
                var error = $root.messages.RoomCardDeskInfo.verify(message.roomInfo);
                if (error)
                    return "roomInfo." + error;
            }
            return null;
        };

        /**
         * Creates a ProBuildDeskByOtherResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildDeskByOtherResponse} ProBuildDeskByOtherResponse
         */
        ProBuildDeskByOtherResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildDeskByOtherResponse)
                return object;
            var message = new $root.messages.ProBuildDeskByOtherResponse();
            if (object.errorNo != null)
                message.errorNo = object.errorNo | 0;
            if (object.errorInfo != null)
                if (typeof object.errorInfo === "string")
                    $util.base64.decode(object.errorInfo, message.errorInfo = $util.newBuffer($util.base64.length(object.errorInfo)), 0);
                else if (object.errorInfo.length)
                    message.errorInfo = object.errorInfo;
            if (object.roomInfo != null) {
                if (typeof object.roomInfo !== "object")
                    throw TypeError(".messages.ProBuildDeskByOtherResponse.roomInfo: object expected");
                message.roomInfo = $root.messages.RoomCardDeskInfo.fromObject(object.roomInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProBuildDeskByOtherResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildDeskByOtherResponse
         * @static
         * @param {messages.ProBuildDeskByOtherResponse} message ProBuildDeskByOtherResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildDeskByOtherResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = 0;
                object.errorInfo = options.bytes === String ? "" : [];
                object.roomInfo = null;
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = message.errorNo;
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                object.errorInfo = options.bytes === String ? $util.base64.encode(message.errorInfo, 0, message.errorInfo.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorInfo) : message.errorInfo;
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo"))
                object.roomInfo = $root.messages.RoomCardDeskInfo.toObject(message.roomInfo, options);
            return object;
        };

        /**
         * Converts this ProBuildDeskByOtherResponse to JSON.
         * @function toJSON
         * @memberof messages.ProBuildDeskByOtherResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildDeskByOtherResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildDeskByOtherResponse.MSGID
         * @enum {string}
         * @property {number} ID=1077 ID value
         */
        ProBuildDeskByOtherResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1077] = "ID"] = 1077;
            return values;
        })();

        return ProBuildDeskByOtherResponse;
    })();

    messages.ProBuildByOtherDeskListRequest = (function() {

        /**
         * Properties of a ProBuildByOtherDeskListRequest.
         * @memberof messages
         * @interface IProBuildByOtherDeskListRequest
         * @property {number|null} [userId] ProBuildByOtherDeskListRequest userId
         * @property {number|null} [gameId] ProBuildByOtherDeskListRequest gameId
         * @property {number|null} [aeraId] ProBuildByOtherDeskListRequest aeraId
         */

        /**
         * Constructs a new ProBuildByOtherDeskListRequest.
         * @memberof messages
         * @classdesc Represents a ProBuildByOtherDeskListRequest.
         * @implements IProBuildByOtherDeskListRequest
         * @constructor
         * @param {messages.IProBuildByOtherDeskListRequest=} [properties] Properties to set
         */
        function ProBuildByOtherDeskListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildByOtherDeskListRequest userId.
         * @member {number} userId
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @instance
         */
        ProBuildByOtherDeskListRequest.prototype.userId = 0;

        /**
         * ProBuildByOtherDeskListRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @instance
         */
        ProBuildByOtherDeskListRequest.prototype.gameId = 0;

        /**
         * ProBuildByOtherDeskListRequest aeraId.
         * @member {number} aeraId
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @instance
         */
        ProBuildByOtherDeskListRequest.prototype.aeraId = 0;

        /**
         * Creates a new ProBuildByOtherDeskListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {messages.IProBuildByOtherDeskListRequest=} [properties] Properties to set
         * @returns {messages.ProBuildByOtherDeskListRequest} ProBuildByOtherDeskListRequest instance
         */
        ProBuildByOtherDeskListRequest.create = function create(properties) {
            return new ProBuildByOtherDeskListRequest(properties);
        };

        /**
         * Encodes the specified ProBuildByOtherDeskListRequest message. Does not implicitly {@link messages.ProBuildByOtherDeskListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {messages.IProBuildByOtherDeskListRequest} message ProBuildByOtherDeskListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOtherDeskListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.aeraId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildByOtherDeskListRequest message, length delimited. Does not implicitly {@link messages.ProBuildByOtherDeskListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {messages.IProBuildByOtherDeskListRequest} message ProBuildByOtherDeskListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOtherDeskListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildByOtherDeskListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildByOtherDeskListRequest} ProBuildByOtherDeskListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOtherDeskListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildByOtherDeskListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.aeraId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildByOtherDeskListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildByOtherDeskListRequest} ProBuildByOtherDeskListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOtherDeskListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildByOtherDeskListRequest message.
         * @function verify
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildByOtherDeskListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                if (!$util.isInteger(message.aeraId))
                    return "aeraId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildByOtherDeskListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildByOtherDeskListRequest} ProBuildByOtherDeskListRequest
         */
        ProBuildByOtherDeskListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildByOtherDeskListRequest)
                return object;
            var message = new $root.messages.ProBuildByOtherDeskListRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.aeraId != null)
                message.aeraId = object.aeraId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildByOtherDeskListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @static
         * @param {messages.ProBuildByOtherDeskListRequest} message ProBuildByOtherDeskListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildByOtherDeskListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.aeraId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                object.aeraId = message.aeraId;
            return object;
        };

        /**
         * Converts this ProBuildByOtherDeskListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProBuildByOtherDeskListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildByOtherDeskListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildByOtherDeskListRequest.MSGID
         * @enum {string}
         * @property {number} ID=1078 ID value
         */
        ProBuildByOtherDeskListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1078] = "ID"] = 1078;
            return values;
        })();

        return ProBuildByOtherDeskListRequest;
    })();

    messages.ProBuildByOtherDeskListResponse = (function() {

        /**
         * Properties of a ProBuildByOtherDeskListResponse.
         * @memberof messages
         * @interface IProBuildByOtherDeskListResponse
         * @property {number|null} [currentTime] ProBuildByOtherDeskListResponse currentTime
         * @property {number|null} [roomNum] ProBuildByOtherDeskListResponse roomNum
         * @property {Array.<messages.IRoomCardDeskInfo>|null} [roomInfo] ProBuildByOtherDeskListResponse roomInfo
         */

        /**
         * Constructs a new ProBuildByOtherDeskListResponse.
         * @memberof messages
         * @classdesc Represents a ProBuildByOtherDeskListResponse.
         * @implements IProBuildByOtherDeskListResponse
         * @constructor
         * @param {messages.IProBuildByOtherDeskListResponse=} [properties] Properties to set
         */
        function ProBuildByOtherDeskListResponse(properties) {
            this.roomInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildByOtherDeskListResponse currentTime.
         * @member {number} currentTime
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @instance
         */
        ProBuildByOtherDeskListResponse.prototype.currentTime = 0;

        /**
         * ProBuildByOtherDeskListResponse roomNum.
         * @member {number} roomNum
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @instance
         */
        ProBuildByOtherDeskListResponse.prototype.roomNum = 0;

        /**
         * ProBuildByOtherDeskListResponse roomInfo.
         * @member {Array.<messages.IRoomCardDeskInfo>} roomInfo
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @instance
         */
        ProBuildByOtherDeskListResponse.prototype.roomInfo = $util.emptyArray;

        /**
         * Creates a new ProBuildByOtherDeskListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {messages.IProBuildByOtherDeskListResponse=} [properties] Properties to set
         * @returns {messages.ProBuildByOtherDeskListResponse} ProBuildByOtherDeskListResponse instance
         */
        ProBuildByOtherDeskListResponse.create = function create(properties) {
            return new ProBuildByOtherDeskListResponse(properties);
        };

        /**
         * Encodes the specified ProBuildByOtherDeskListResponse message. Does not implicitly {@link messages.ProBuildByOtherDeskListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {messages.IProBuildByOtherDeskListResponse} message ProBuildByOtherDeskListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOtherDeskListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.currentTime);
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomNum);
            if (message.roomInfo != null && message.roomInfo.length)
                for (var i = 0; i < message.roomInfo.length; ++i)
                    $root.messages.RoomCardDeskInfo.encode(message.roomInfo[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProBuildByOtherDeskListResponse message, length delimited. Does not implicitly {@link messages.ProBuildByOtherDeskListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {messages.IProBuildByOtherDeskListResponse} message ProBuildByOtherDeskListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOtherDeskListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildByOtherDeskListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildByOtherDeskListResponse} ProBuildByOtherDeskListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOtherDeskListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildByOtherDeskListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.currentTime = reader.int32();
                    break;
                case 3:
                    message.roomNum = reader.int32();
                    break;
                case 4:
                    if (!(message.roomInfo && message.roomInfo.length))
                        message.roomInfo = [];
                    message.roomInfo.push($root.messages.RoomCardDeskInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildByOtherDeskListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildByOtherDeskListResponse} ProBuildByOtherDeskListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOtherDeskListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildByOtherDeskListResponse message.
         * @function verify
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildByOtherDeskListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                if (!$util.isInteger(message.currentTime))
                    return "currentTime: integer expected";
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                if (!$util.isInteger(message.roomNum))
                    return "roomNum: integer expected";
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo")) {
                if (!Array.isArray(message.roomInfo))
                    return "roomInfo: array expected";
                for (var i = 0; i < message.roomInfo.length; ++i) {
                    var error = $root.messages.RoomCardDeskInfo.verify(message.roomInfo[i]);
                    if (error)
                        return "roomInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProBuildByOtherDeskListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildByOtherDeskListResponse} ProBuildByOtherDeskListResponse
         */
        ProBuildByOtherDeskListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildByOtherDeskListResponse)
                return object;
            var message = new $root.messages.ProBuildByOtherDeskListResponse();
            if (object.currentTime != null)
                message.currentTime = object.currentTime | 0;
            if (object.roomNum != null)
                message.roomNum = object.roomNum | 0;
            if (object.roomInfo) {
                if (!Array.isArray(object.roomInfo))
                    throw TypeError(".messages.ProBuildByOtherDeskListResponse.roomInfo: array expected");
                message.roomInfo = [];
                for (var i = 0; i < object.roomInfo.length; ++i) {
                    if (typeof object.roomInfo[i] !== "object")
                        throw TypeError(".messages.ProBuildByOtherDeskListResponse.roomInfo: object expected");
                    message.roomInfo[i] = $root.messages.RoomCardDeskInfo.fromObject(object.roomInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProBuildByOtherDeskListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @static
         * @param {messages.ProBuildByOtherDeskListResponse} message ProBuildByOtherDeskListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildByOtherDeskListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.roomInfo = [];
            if (options.defaults) {
                object.currentTime = 0;
                object.roomNum = 0;
            }
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                object.currentTime = message.currentTime;
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                object.roomNum = message.roomNum;
            if (message.roomInfo && message.roomInfo.length) {
                object.roomInfo = [];
                for (var j = 0; j < message.roomInfo.length; ++j)
                    object.roomInfo[j] = $root.messages.RoomCardDeskInfo.toObject(message.roomInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this ProBuildByOtherDeskListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProBuildByOtherDeskListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildByOtherDeskListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildByOtherDeskListResponse.MSGID
         * @enum {string}
         * @property {number} ID=1079 ID value
         */
        ProBuildByOtherDeskListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1079] = "ID"] = 1079;
            return values;
        })();

        return ProBuildByOtherDeskListResponse;
    })();

    messages.ProQuickSoundRequest = (function() {

        /**
         * Properties of a ProQuickSoundRequest.
         * @memberof messages
         * @interface IProQuickSoundRequest
         * @property {number|null} [deskId] ProQuickSoundRequest deskId
         * @property {number|null} [seatId] ProQuickSoundRequest seatId
         * @property {number|null} [soundId] ProQuickSoundRequest soundId
         * @property {Uint8Array|null} [text] ProQuickSoundRequest text
         */

        /**
         * Constructs a new ProQuickSoundRequest.
         * @memberof messages
         * @classdesc Represents a ProQuickSoundRequest.
         * @implements IProQuickSoundRequest
         * @constructor
         * @param {messages.IProQuickSoundRequest=} [properties] Properties to set
         */
        function ProQuickSoundRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProQuickSoundRequest deskId.
         * @member {number} deskId
         * @memberof messages.ProQuickSoundRequest
         * @instance
         */
        ProQuickSoundRequest.prototype.deskId = 0;

        /**
         * ProQuickSoundRequest seatId.
         * @member {number} seatId
         * @memberof messages.ProQuickSoundRequest
         * @instance
         */
        ProQuickSoundRequest.prototype.seatId = 0;

        /**
         * ProQuickSoundRequest soundId.
         * @member {number} soundId
         * @memberof messages.ProQuickSoundRequest
         * @instance
         */
        ProQuickSoundRequest.prototype.soundId = 0;

        /**
         * ProQuickSoundRequest text.
         * @member {Uint8Array} text
         * @memberof messages.ProQuickSoundRequest
         * @instance
         */
        ProQuickSoundRequest.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProQuickSoundRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {messages.IProQuickSoundRequest=} [properties] Properties to set
         * @returns {messages.ProQuickSoundRequest} ProQuickSoundRequest instance
         */
        ProQuickSoundRequest.create = function create(properties) {
            return new ProQuickSoundRequest(properties);
        };

        /**
         * Encodes the specified ProQuickSoundRequest message. Does not implicitly {@link messages.ProQuickSoundRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {messages.IProQuickSoundRequest} message ProQuickSoundRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProQuickSoundRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProQuickSoundRequest message, length delimited. Does not implicitly {@link messages.ProQuickSoundRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {messages.IProQuickSoundRequest} message ProQuickSoundRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProQuickSoundRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProQuickSoundRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProQuickSoundRequest} ProQuickSoundRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProQuickSoundRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProQuickSoundRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deskId = reader.int32();
                    break;
                case 3:
                    message.seatId = reader.int32();
                    break;
                case 4:
                    message.soundId = reader.int32();
                    break;
                case 5:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProQuickSoundRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProQuickSoundRequest} ProQuickSoundRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProQuickSoundRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProQuickSoundRequest message.
         * @function verify
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProQuickSoundRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                if (!$util.isInteger(message.soundId))
                    return "soundId: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProQuickSoundRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProQuickSoundRequest} ProQuickSoundRequest
         */
        ProQuickSoundRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProQuickSoundRequest)
                return object;
            var message = new $root.messages.ProQuickSoundRequest();
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            if (object.soundId != null)
                message.soundId = object.soundId | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProQuickSoundRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProQuickSoundRequest
         * @static
         * @param {messages.ProQuickSoundRequest} message ProQuickSoundRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProQuickSoundRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deskId = 0;
                object.seatId = 0;
                object.soundId = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                object.soundId = message.soundId;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProQuickSoundRequest to JSON.
         * @function toJSON
         * @memberof messages.ProQuickSoundRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProQuickSoundRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProQuickSoundRequest.MSGID
         * @enum {string}
         * @property {number} ID=1080 ID value
         */
        ProQuickSoundRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1080] = "ID"] = 1080;
            return values;
        })();

        return ProQuickSoundRequest;
    })();

    messages.ProQuickSoundResponse = (function() {

        /**
         * Properties of a ProQuickSoundResponse.
         * @memberof messages
         * @interface IProQuickSoundResponse
         * @property {number|null} [deskId] ProQuickSoundResponse deskId
         * @property {number|null} [seatId] ProQuickSoundResponse seatId
         * @property {number|null} [soundId] ProQuickSoundResponse soundId
         * @property {Uint8Array|null} [text] ProQuickSoundResponse text
         */

        /**
         * Constructs a new ProQuickSoundResponse.
         * @memberof messages
         * @classdesc Represents a ProQuickSoundResponse.
         * @implements IProQuickSoundResponse
         * @constructor
         * @param {messages.IProQuickSoundResponse=} [properties] Properties to set
         */
        function ProQuickSoundResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProQuickSoundResponse deskId.
         * @member {number} deskId
         * @memberof messages.ProQuickSoundResponse
         * @instance
         */
        ProQuickSoundResponse.prototype.deskId = 0;

        /**
         * ProQuickSoundResponse seatId.
         * @member {number} seatId
         * @memberof messages.ProQuickSoundResponse
         * @instance
         */
        ProQuickSoundResponse.prototype.seatId = 0;

        /**
         * ProQuickSoundResponse soundId.
         * @member {number} soundId
         * @memberof messages.ProQuickSoundResponse
         * @instance
         */
        ProQuickSoundResponse.prototype.soundId = 0;

        /**
         * ProQuickSoundResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProQuickSoundResponse
         * @instance
         */
        ProQuickSoundResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProQuickSoundResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {messages.IProQuickSoundResponse=} [properties] Properties to set
         * @returns {messages.ProQuickSoundResponse} ProQuickSoundResponse instance
         */
        ProQuickSoundResponse.create = function create(properties) {
            return new ProQuickSoundResponse(properties);
        };

        /**
         * Encodes the specified ProQuickSoundResponse message. Does not implicitly {@link messages.ProQuickSoundResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {messages.IProQuickSoundResponse} message ProQuickSoundResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProQuickSoundResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProQuickSoundResponse message, length delimited. Does not implicitly {@link messages.ProQuickSoundResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {messages.IProQuickSoundResponse} message ProQuickSoundResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProQuickSoundResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProQuickSoundResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProQuickSoundResponse} ProQuickSoundResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProQuickSoundResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProQuickSoundResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.deskId = reader.int32();
                    break;
                case 3:
                    message.seatId = reader.int32();
                    break;
                case 4:
                    message.soundId = reader.int32();
                    break;
                case 5:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProQuickSoundResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProQuickSoundResponse} ProQuickSoundResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProQuickSoundResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProQuickSoundResponse message.
         * @function verify
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProQuickSoundResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                if (!$util.isInteger(message.soundId))
                    return "soundId: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProQuickSoundResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProQuickSoundResponse} ProQuickSoundResponse
         */
        ProQuickSoundResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProQuickSoundResponse)
                return object;
            var message = new $root.messages.ProQuickSoundResponse();
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            if (object.soundId != null)
                message.soundId = object.soundId | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProQuickSoundResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProQuickSoundResponse
         * @static
         * @param {messages.ProQuickSoundResponse} message ProQuickSoundResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProQuickSoundResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.deskId = 0;
                object.seatId = 0;
                object.soundId = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            if (message.soundId != null && message.hasOwnProperty("soundId"))
                object.soundId = message.soundId;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProQuickSoundResponse to JSON.
         * @function toJSON
         * @memberof messages.ProQuickSoundResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProQuickSoundResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProQuickSoundResponse.MSGID
         * @enum {string}
         * @property {number} ID=1081 ID value
         */
        ProQuickSoundResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1081] = "ID"] = 1081;
            return values;
        })();

        return ProQuickSoundResponse;
    })();

    messages.ProCleanDeskByMaterRequest = (function() {

        /**
         * Properties of a ProCleanDeskByMaterRequest.
         * @memberof messages
         * @interface IProCleanDeskByMaterRequest
         * @property {number|null} [roomTag] ProCleanDeskByMaterRequest roomTag
         */

        /**
         * Constructs a new ProCleanDeskByMaterRequest.
         * @memberof messages
         * @classdesc Represents a ProCleanDeskByMaterRequest.
         * @implements IProCleanDeskByMaterRequest
         * @constructor
         * @param {messages.IProCleanDeskByMaterRequest=} [properties] Properties to set
         */
        function ProCleanDeskByMaterRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCleanDeskByMaterRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProCleanDeskByMaterRequest
         * @instance
         */
        ProCleanDeskByMaterRequest.prototype.roomTag = 0;

        /**
         * Creates a new ProCleanDeskByMaterRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {messages.IProCleanDeskByMaterRequest=} [properties] Properties to set
         * @returns {messages.ProCleanDeskByMaterRequest} ProCleanDeskByMaterRequest instance
         */
        ProCleanDeskByMaterRequest.create = function create(properties) {
            return new ProCleanDeskByMaterRequest(properties);
        };

        /**
         * Encodes the specified ProCleanDeskByMaterRequest message. Does not implicitly {@link messages.ProCleanDeskByMaterRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {messages.IProCleanDeskByMaterRequest} message ProCleanDeskByMaterRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCleanDeskByMaterRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            return writer;
        };

        /**
         * Encodes the specified ProCleanDeskByMaterRequest message, length delimited. Does not implicitly {@link messages.ProCleanDeskByMaterRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {messages.IProCleanDeskByMaterRequest} message ProCleanDeskByMaterRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCleanDeskByMaterRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCleanDeskByMaterRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCleanDeskByMaterRequest} ProCleanDeskByMaterRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCleanDeskByMaterRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCleanDeskByMaterRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCleanDeskByMaterRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCleanDeskByMaterRequest} ProCleanDeskByMaterRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCleanDeskByMaterRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCleanDeskByMaterRequest message.
         * @function verify
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCleanDeskByMaterRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            return null;
        };

        /**
         * Creates a ProCleanDeskByMaterRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCleanDeskByMaterRequest} ProCleanDeskByMaterRequest
         */
        ProCleanDeskByMaterRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCleanDeskByMaterRequest)
                return object;
            var message = new $root.messages.ProCleanDeskByMaterRequest();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProCleanDeskByMaterRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCleanDeskByMaterRequest
         * @static
         * @param {messages.ProCleanDeskByMaterRequest} message ProCleanDeskByMaterRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCleanDeskByMaterRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.roomTag = 0;
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            return object;
        };

        /**
         * Converts this ProCleanDeskByMaterRequest to JSON.
         * @function toJSON
         * @memberof messages.ProCleanDeskByMaterRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCleanDeskByMaterRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCleanDeskByMaterRequest.MSGID
         * @enum {string}
         * @property {number} ID=1082 ID value
         */
        ProCleanDeskByMaterRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1082] = "ID"] = 1082;
            return values;
        })();

        return ProCleanDeskByMaterRequest;
    })();

    messages.ProCleanDeskByMaterResponse = (function() {

        /**
         * Properties of a ProCleanDeskByMaterResponse.
         * @memberof messages
         * @interface IProCleanDeskByMaterResponse
         * @property {number|null} [roomTag] ProCleanDeskByMaterResponse roomTag
         * @property {number|null} [result] ProCleanDeskByMaterResponse result
         * @property {Uint8Array|null} [text] ProCleanDeskByMaterResponse text
         */

        /**
         * Constructs a new ProCleanDeskByMaterResponse.
         * @memberof messages
         * @classdesc Represents a ProCleanDeskByMaterResponse.
         * @implements IProCleanDeskByMaterResponse
         * @constructor
         * @param {messages.IProCleanDeskByMaterResponse=} [properties] Properties to set
         */
        function ProCleanDeskByMaterResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCleanDeskByMaterResponse roomTag.
         * @member {number} roomTag
         * @memberof messages.ProCleanDeskByMaterResponse
         * @instance
         */
        ProCleanDeskByMaterResponse.prototype.roomTag = 0;

        /**
         * ProCleanDeskByMaterResponse result.
         * @member {number} result
         * @memberof messages.ProCleanDeskByMaterResponse
         * @instance
         */
        ProCleanDeskByMaterResponse.prototype.result = 0;

        /**
         * ProCleanDeskByMaterResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProCleanDeskByMaterResponse
         * @instance
         */
        ProCleanDeskByMaterResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProCleanDeskByMaterResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {messages.IProCleanDeskByMaterResponse=} [properties] Properties to set
         * @returns {messages.ProCleanDeskByMaterResponse} ProCleanDeskByMaterResponse instance
         */
        ProCleanDeskByMaterResponse.create = function create(properties) {
            return new ProCleanDeskByMaterResponse(properties);
        };

        /**
         * Encodes the specified ProCleanDeskByMaterResponse message. Does not implicitly {@link messages.ProCleanDeskByMaterResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {messages.IProCleanDeskByMaterResponse} message ProCleanDeskByMaterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCleanDeskByMaterResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProCleanDeskByMaterResponse message, length delimited. Does not implicitly {@link messages.ProCleanDeskByMaterResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {messages.IProCleanDeskByMaterResponse} message ProCleanDeskByMaterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCleanDeskByMaterResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCleanDeskByMaterResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCleanDeskByMaterResponse} ProCleanDeskByMaterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCleanDeskByMaterResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCleanDeskByMaterResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                case 4:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCleanDeskByMaterResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCleanDeskByMaterResponse} ProCleanDeskByMaterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCleanDeskByMaterResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCleanDeskByMaterResponse message.
         * @function verify
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCleanDeskByMaterResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProCleanDeskByMaterResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCleanDeskByMaterResponse} ProCleanDeskByMaterResponse
         */
        ProCleanDeskByMaterResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCleanDeskByMaterResponse)
                return object;
            var message = new $root.messages.ProCleanDeskByMaterResponse();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProCleanDeskByMaterResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCleanDeskByMaterResponse
         * @static
         * @param {messages.ProCleanDeskByMaterResponse} message ProCleanDeskByMaterResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCleanDeskByMaterResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProCleanDeskByMaterResponse to JSON.
         * @function toJSON
         * @memberof messages.ProCleanDeskByMaterResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCleanDeskByMaterResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCleanDeskByMaterResponse.MSGID
         * @enum {string}
         * @property {number} ID=1083 ID value
         */
        ProCleanDeskByMaterResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1083] = "ID"] = 1083;
            return values;
        })();

        return ProCleanDeskByMaterResponse;
    })();

    messages.ProTickByRoomIdRequest = (function() {

        /**
         * Properties of a ProTickByRoomIdRequest.
         * @memberof messages
         * @interface IProTickByRoomIdRequest
         * @property {number|null} [roomTag] ProTickByRoomIdRequest roomTag
         * @property {number|null} [passWord] ProTickByRoomIdRequest passWord
         */

        /**
         * Constructs a new ProTickByRoomIdRequest.
         * @memberof messages
         * @classdesc Represents a ProTickByRoomIdRequest.
         * @implements IProTickByRoomIdRequest
         * @constructor
         * @param {messages.IProTickByRoomIdRequest=} [properties] Properties to set
         */
        function ProTickByRoomIdRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTickByRoomIdRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProTickByRoomIdRequest
         * @instance
         */
        ProTickByRoomIdRequest.prototype.roomTag = 0;

        /**
         * ProTickByRoomIdRequest passWord.
         * @member {number} passWord
         * @memberof messages.ProTickByRoomIdRequest
         * @instance
         */
        ProTickByRoomIdRequest.prototype.passWord = 0;

        /**
         * Creates a new ProTickByRoomIdRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {messages.IProTickByRoomIdRequest=} [properties] Properties to set
         * @returns {messages.ProTickByRoomIdRequest} ProTickByRoomIdRequest instance
         */
        ProTickByRoomIdRequest.create = function create(properties) {
            return new ProTickByRoomIdRequest(properties);
        };

        /**
         * Encodes the specified ProTickByRoomIdRequest message. Does not implicitly {@link messages.ProTickByRoomIdRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {messages.IProTickByRoomIdRequest} message ProTickByRoomIdRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickByRoomIdRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.passWord != null && message.hasOwnProperty("passWord"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.passWord);
            return writer;
        };

        /**
         * Encodes the specified ProTickByRoomIdRequest message, length delimited. Does not implicitly {@link messages.ProTickByRoomIdRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {messages.IProTickByRoomIdRequest} message ProTickByRoomIdRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickByRoomIdRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTickByRoomIdRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTickByRoomIdRequest} ProTickByRoomIdRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickByRoomIdRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTickByRoomIdRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.passWord = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTickByRoomIdRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTickByRoomIdRequest} ProTickByRoomIdRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickByRoomIdRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTickByRoomIdRequest message.
         * @function verify
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTickByRoomIdRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.passWord != null && message.hasOwnProperty("passWord"))
                if (!$util.isInteger(message.passWord))
                    return "passWord: integer expected";
            return null;
        };

        /**
         * Creates a ProTickByRoomIdRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTickByRoomIdRequest} ProTickByRoomIdRequest
         */
        ProTickByRoomIdRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTickByRoomIdRequest)
                return object;
            var message = new $root.messages.ProTickByRoomIdRequest();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.passWord != null)
                message.passWord = object.passWord | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProTickByRoomIdRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTickByRoomIdRequest
         * @static
         * @param {messages.ProTickByRoomIdRequest} message ProTickByRoomIdRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTickByRoomIdRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.passWord = 0;
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.passWord != null && message.hasOwnProperty("passWord"))
                object.passWord = message.passWord;
            return object;
        };

        /**
         * Converts this ProTickByRoomIdRequest to JSON.
         * @function toJSON
         * @memberof messages.ProTickByRoomIdRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTickByRoomIdRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTickByRoomIdRequest.MSGID
         * @enum {string}
         * @property {number} ID=1084 ID value
         */
        ProTickByRoomIdRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1084] = "ID"] = 1084;
            return values;
        })();

        return ProTickByRoomIdRequest;
    })();

    messages.ProTickByRoomIdResponse = (function() {

        /**
         * Properties of a ProTickByRoomIdResponse.
         * @memberof messages
         * @interface IProTickByRoomIdResponse
         * @property {number|null} [roomTag] ProTickByRoomIdResponse roomTag
         * @property {number|null} [result] ProTickByRoomIdResponse result
         * @property {Uint8Array|null} [text] ProTickByRoomIdResponse text
         */

        /**
         * Constructs a new ProTickByRoomIdResponse.
         * @memberof messages
         * @classdesc Represents a ProTickByRoomIdResponse.
         * @implements IProTickByRoomIdResponse
         * @constructor
         * @param {messages.IProTickByRoomIdResponse=} [properties] Properties to set
         */
        function ProTickByRoomIdResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTickByRoomIdResponse roomTag.
         * @member {number} roomTag
         * @memberof messages.ProTickByRoomIdResponse
         * @instance
         */
        ProTickByRoomIdResponse.prototype.roomTag = 0;

        /**
         * ProTickByRoomIdResponse result.
         * @member {number} result
         * @memberof messages.ProTickByRoomIdResponse
         * @instance
         */
        ProTickByRoomIdResponse.prototype.result = 0;

        /**
         * ProTickByRoomIdResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProTickByRoomIdResponse
         * @instance
         */
        ProTickByRoomIdResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProTickByRoomIdResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {messages.IProTickByRoomIdResponse=} [properties] Properties to set
         * @returns {messages.ProTickByRoomIdResponse} ProTickByRoomIdResponse instance
         */
        ProTickByRoomIdResponse.create = function create(properties) {
            return new ProTickByRoomIdResponse(properties);
        };

        /**
         * Encodes the specified ProTickByRoomIdResponse message. Does not implicitly {@link messages.ProTickByRoomIdResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {messages.IProTickByRoomIdResponse} message ProTickByRoomIdResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickByRoomIdResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProTickByRoomIdResponse message, length delimited. Does not implicitly {@link messages.ProTickByRoomIdResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {messages.IProTickByRoomIdResponse} message ProTickByRoomIdResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickByRoomIdResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTickByRoomIdResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTickByRoomIdResponse} ProTickByRoomIdResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickByRoomIdResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTickByRoomIdResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                case 4:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTickByRoomIdResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTickByRoomIdResponse} ProTickByRoomIdResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickByRoomIdResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTickByRoomIdResponse message.
         * @function verify
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTickByRoomIdResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProTickByRoomIdResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTickByRoomIdResponse} ProTickByRoomIdResponse
         */
        ProTickByRoomIdResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTickByRoomIdResponse)
                return object;
            var message = new $root.messages.ProTickByRoomIdResponse();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProTickByRoomIdResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTickByRoomIdResponse
         * @static
         * @param {messages.ProTickByRoomIdResponse} message ProTickByRoomIdResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTickByRoomIdResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProTickByRoomIdResponse to JSON.
         * @function toJSON
         * @memberof messages.ProTickByRoomIdResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTickByRoomIdResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTickByRoomIdResponse.MSGID
         * @enum {string}
         * @property {number} ID=1085 ID value
         */
        ProTickByRoomIdResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1085] = "ID"] = 1085;
            return values;
        })();

        return ProTickByRoomIdResponse;
    })();

    messages.ProTickUserByMasterRequest = (function() {

        /**
         * Properties of a ProTickUserByMasterRequest.
         * @memberof messages
         * @interface IProTickUserByMasterRequest
         * @property {number|null} [roomTag] ProTickUserByMasterRequest roomTag
         * @property {number|null} [masterId] ProTickUserByMasterRequest masterId
         * @property {number|null} [userId] ProTickUserByMasterRequest userId
         */

        /**
         * Constructs a new ProTickUserByMasterRequest.
         * @memberof messages
         * @classdesc Represents a ProTickUserByMasterRequest.
         * @implements IProTickUserByMasterRequest
         * @constructor
         * @param {messages.IProTickUserByMasterRequest=} [properties] Properties to set
         */
        function ProTickUserByMasterRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTickUserByMasterRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProTickUserByMasterRequest
         * @instance
         */
        ProTickUserByMasterRequest.prototype.roomTag = 0;

        /**
         * ProTickUserByMasterRequest masterId.
         * @member {number} masterId
         * @memberof messages.ProTickUserByMasterRequest
         * @instance
         */
        ProTickUserByMasterRequest.prototype.masterId = 0;

        /**
         * ProTickUserByMasterRequest userId.
         * @member {number} userId
         * @memberof messages.ProTickUserByMasterRequest
         * @instance
         */
        ProTickUserByMasterRequest.prototype.userId = 0;

        /**
         * Creates a new ProTickUserByMasterRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {messages.IProTickUserByMasterRequest=} [properties] Properties to set
         * @returns {messages.ProTickUserByMasterRequest} ProTickUserByMasterRequest instance
         */
        ProTickUserByMasterRequest.create = function create(properties) {
            return new ProTickUserByMasterRequest(properties);
        };

        /**
         * Encodes the specified ProTickUserByMasterRequest message. Does not implicitly {@link messages.ProTickUserByMasterRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {messages.IProTickUserByMasterRequest} message ProTickUserByMasterRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickUserByMasterRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.masterId);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProTickUserByMasterRequest message, length delimited. Does not implicitly {@link messages.ProTickUserByMasterRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {messages.IProTickUserByMasterRequest} message ProTickUserByMasterRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickUserByMasterRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTickUserByMasterRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTickUserByMasterRequest} ProTickUserByMasterRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickUserByMasterRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTickUserByMasterRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.masterId = reader.int32();
                    break;
                case 4:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTickUserByMasterRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTickUserByMasterRequest} ProTickUserByMasterRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickUserByMasterRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTickUserByMasterRequest message.
         * @function verify
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTickUserByMasterRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                if (!$util.isInteger(message.masterId))
                    return "masterId: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProTickUserByMasterRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTickUserByMasterRequest} ProTickUserByMasterRequest
         */
        ProTickUserByMasterRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTickUserByMasterRequest)
                return object;
            var message = new $root.messages.ProTickUserByMasterRequest();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.masterId != null)
                message.masterId = object.masterId | 0;
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProTickUserByMasterRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTickUserByMasterRequest
         * @static
         * @param {messages.ProTickUserByMasterRequest} message ProTickUserByMasterRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTickUserByMasterRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.masterId = 0;
                object.userId = 0;
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                object.masterId = message.masterId;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProTickUserByMasterRequest to JSON.
         * @function toJSON
         * @memberof messages.ProTickUserByMasterRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTickUserByMasterRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTickUserByMasterRequest.MSGID
         * @enum {string}
         * @property {number} ID=1086 ID value
         */
        ProTickUserByMasterRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1086] = "ID"] = 1086;
            return values;
        })();

        return ProTickUserByMasterRequest;
    })();

    messages.ProTickUserByMasterResponse = (function() {

        /**
         * Properties of a ProTickUserByMasterResponse.
         * @memberof messages
         * @interface IProTickUserByMasterResponse
         * @property {number|null} [roomTag] ProTickUserByMasterResponse roomTag
         * @property {number|null} [userId] ProTickUserByMasterResponse userId
         * @property {number|null} [result] ProTickUserByMasterResponse result
         * @property {Uint8Array|null} [text] ProTickUserByMasterResponse text
         */

        /**
         * Constructs a new ProTickUserByMasterResponse.
         * @memberof messages
         * @classdesc Represents a ProTickUserByMasterResponse.
         * @implements IProTickUserByMasterResponse
         * @constructor
         * @param {messages.IProTickUserByMasterResponse=} [properties] Properties to set
         */
        function ProTickUserByMasterResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTickUserByMasterResponse roomTag.
         * @member {number} roomTag
         * @memberof messages.ProTickUserByMasterResponse
         * @instance
         */
        ProTickUserByMasterResponse.prototype.roomTag = 0;

        /**
         * ProTickUserByMasterResponse userId.
         * @member {number} userId
         * @memberof messages.ProTickUserByMasterResponse
         * @instance
         */
        ProTickUserByMasterResponse.prototype.userId = 0;

        /**
         * ProTickUserByMasterResponse result.
         * @member {number} result
         * @memberof messages.ProTickUserByMasterResponse
         * @instance
         */
        ProTickUserByMasterResponse.prototype.result = 0;

        /**
         * ProTickUserByMasterResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProTickUserByMasterResponse
         * @instance
         */
        ProTickUserByMasterResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProTickUserByMasterResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {messages.IProTickUserByMasterResponse=} [properties] Properties to set
         * @returns {messages.ProTickUserByMasterResponse} ProTickUserByMasterResponse instance
         */
        ProTickUserByMasterResponse.create = function create(properties) {
            return new ProTickUserByMasterResponse(properties);
        };

        /**
         * Encodes the specified ProTickUserByMasterResponse message. Does not implicitly {@link messages.ProTickUserByMasterResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {messages.IProTickUserByMasterResponse} message ProTickUserByMasterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickUserByMasterResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.userId);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProTickUserByMasterResponse message, length delimited. Does not implicitly {@link messages.ProTickUserByMasterResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {messages.IProTickUserByMasterResponse} message ProTickUserByMasterResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTickUserByMasterResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTickUserByMasterResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTickUserByMasterResponse} ProTickUserByMasterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickUserByMasterResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTickUserByMasterResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.userId = reader.int32();
                    break;
                case 4:
                    message.result = reader.int32();
                    break;
                case 5:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTickUserByMasterResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTickUserByMasterResponse} ProTickUserByMasterResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTickUserByMasterResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTickUserByMasterResponse message.
         * @function verify
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTickUserByMasterResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProTickUserByMasterResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTickUserByMasterResponse} ProTickUserByMasterResponse
         */
        ProTickUserByMasterResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTickUserByMasterResponse)
                return object;
            var message = new $root.messages.ProTickUserByMasterResponse();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProTickUserByMasterResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTickUserByMasterResponse
         * @static
         * @param {messages.ProTickUserByMasterResponse} message ProTickUserByMasterResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTickUserByMasterResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.userId = 0;
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProTickUserByMasterResponse to JSON.
         * @function toJSON
         * @memberof messages.ProTickUserByMasterResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTickUserByMasterResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTickUserByMasterResponse.MSGID
         * @enum {string}
         * @property {number} ID=1087 ID value
         */
        ProTickUserByMasterResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1087] = "ID"] = 1087;
            return values;
        })();

        return ProTickUserByMasterResponse;
    })();

    messages.ProUserPhoneStatusRequest = (function() {

        /**
         * Properties of a ProUserPhoneStatusRequest.
         * @memberof messages
         * @interface IProUserPhoneStatusRequest
         * @property {number|null} [userId] ProUserPhoneStatusRequest userId
         * @property {number|null} [phonestatus] ProUserPhoneStatusRequest phonestatus
         */

        /**
         * Constructs a new ProUserPhoneStatusRequest.
         * @memberof messages
         * @classdesc Represents a ProUserPhoneStatusRequest.
         * @implements IProUserPhoneStatusRequest
         * @constructor
         * @param {messages.IProUserPhoneStatusRequest=} [properties] Properties to set
         */
        function ProUserPhoneStatusRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserPhoneStatusRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserPhoneStatusRequest
         * @instance
         */
        ProUserPhoneStatusRequest.prototype.userId = 0;

        /**
         * ProUserPhoneStatusRequest phonestatus.
         * @member {number} phonestatus
         * @memberof messages.ProUserPhoneStatusRequest
         * @instance
         */
        ProUserPhoneStatusRequest.prototype.phonestatus = 0;

        /**
         * Creates a new ProUserPhoneStatusRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {messages.IProUserPhoneStatusRequest=} [properties] Properties to set
         * @returns {messages.ProUserPhoneStatusRequest} ProUserPhoneStatusRequest instance
         */
        ProUserPhoneStatusRequest.create = function create(properties) {
            return new ProUserPhoneStatusRequest(properties);
        };

        /**
         * Encodes the specified ProUserPhoneStatusRequest message. Does not implicitly {@link messages.ProUserPhoneStatusRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {messages.IProUserPhoneStatusRequest} message ProUserPhoneStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserPhoneStatusRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.phonestatus);
            return writer;
        };

        /**
         * Encodes the specified ProUserPhoneStatusRequest message, length delimited. Does not implicitly {@link messages.ProUserPhoneStatusRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {messages.IProUserPhoneStatusRequest} message ProUserPhoneStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserPhoneStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserPhoneStatusRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserPhoneStatusRequest} ProUserPhoneStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserPhoneStatusRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserPhoneStatusRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.phonestatus = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserPhoneStatusRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserPhoneStatusRequest} ProUserPhoneStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserPhoneStatusRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserPhoneStatusRequest message.
         * @function verify
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserPhoneStatusRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                if (!$util.isInteger(message.phonestatus))
                    return "phonestatus: integer expected";
            return null;
        };

        /**
         * Creates a ProUserPhoneStatusRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserPhoneStatusRequest} ProUserPhoneStatusRequest
         */
        ProUserPhoneStatusRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserPhoneStatusRequest)
                return object;
            var message = new $root.messages.ProUserPhoneStatusRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.phonestatus != null)
                message.phonestatus = object.phonestatus | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserPhoneStatusRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserPhoneStatusRequest
         * @static
         * @param {messages.ProUserPhoneStatusRequest} message ProUserPhoneStatusRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserPhoneStatusRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.phonestatus = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                object.phonestatus = message.phonestatus;
            return object;
        };

        /**
         * Converts this ProUserPhoneStatusRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserPhoneStatusRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserPhoneStatusRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserPhoneStatusRequest.MSGID
         * @enum {string}
         * @property {number} ID=1088 ID value
         */
        ProUserPhoneStatusRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1088] = "ID"] = 1088;
            return values;
        })();

        return ProUserPhoneStatusRequest;
    })();

    messages.ProUserPhoneStatusResponse = (function() {

        /**
         * Properties of a ProUserPhoneStatusResponse.
         * @memberof messages
         * @interface IProUserPhoneStatusResponse
         * @property {number|null} [userId] ProUserPhoneStatusResponse userId
         * @property {number|null} [phonestatus] ProUserPhoneStatusResponse phonestatus
         */

        /**
         * Constructs a new ProUserPhoneStatusResponse.
         * @memberof messages
         * @classdesc Represents a ProUserPhoneStatusResponse.
         * @implements IProUserPhoneStatusResponse
         * @constructor
         * @param {messages.IProUserPhoneStatusResponse=} [properties] Properties to set
         */
        function ProUserPhoneStatusResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserPhoneStatusResponse userId.
         * @member {number} userId
         * @memberof messages.ProUserPhoneStatusResponse
         * @instance
         */
        ProUserPhoneStatusResponse.prototype.userId = 0;

        /**
         * ProUserPhoneStatusResponse phonestatus.
         * @member {number} phonestatus
         * @memberof messages.ProUserPhoneStatusResponse
         * @instance
         */
        ProUserPhoneStatusResponse.prototype.phonestatus = 0;

        /**
         * Creates a new ProUserPhoneStatusResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {messages.IProUserPhoneStatusResponse=} [properties] Properties to set
         * @returns {messages.ProUserPhoneStatusResponse} ProUserPhoneStatusResponse instance
         */
        ProUserPhoneStatusResponse.create = function create(properties) {
            return new ProUserPhoneStatusResponse(properties);
        };

        /**
         * Encodes the specified ProUserPhoneStatusResponse message. Does not implicitly {@link messages.ProUserPhoneStatusResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {messages.IProUserPhoneStatusResponse} message ProUserPhoneStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserPhoneStatusResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.phonestatus);
            return writer;
        };

        /**
         * Encodes the specified ProUserPhoneStatusResponse message, length delimited. Does not implicitly {@link messages.ProUserPhoneStatusResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {messages.IProUserPhoneStatusResponse} message ProUserPhoneStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserPhoneStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserPhoneStatusResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserPhoneStatusResponse} ProUserPhoneStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserPhoneStatusResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserPhoneStatusResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.phonestatus = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserPhoneStatusResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserPhoneStatusResponse} ProUserPhoneStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserPhoneStatusResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserPhoneStatusResponse message.
         * @function verify
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserPhoneStatusResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                if (!$util.isInteger(message.phonestatus))
                    return "phonestatus: integer expected";
            return null;
        };

        /**
         * Creates a ProUserPhoneStatusResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserPhoneStatusResponse} ProUserPhoneStatusResponse
         */
        ProUserPhoneStatusResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserPhoneStatusResponse)
                return object;
            var message = new $root.messages.ProUserPhoneStatusResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.phonestatus != null)
                message.phonestatus = object.phonestatus | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserPhoneStatusResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserPhoneStatusResponse
         * @static
         * @param {messages.ProUserPhoneStatusResponse} message ProUserPhoneStatusResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserPhoneStatusResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.phonestatus = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus"))
                object.phonestatus = message.phonestatus;
            return object;
        };

        /**
         * Converts this ProUserPhoneStatusResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserPhoneStatusResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserPhoneStatusResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserPhoneStatusResponse.MSGID
         * @enum {string}
         * @property {number} ID=1089 ID value
         */
        ProUserPhoneStatusResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1089] = "ID"] = 1089;
            return values;
        })();

        return ProUserPhoneStatusResponse;
    })();

    messages.ProGetPhoneStatusRequest = (function() {

        /**
         * Properties of a ProGetPhoneStatusRequest.
         * @memberof messages
         * @interface IProGetPhoneStatusRequest
         * @property {number|null} [roomTag] ProGetPhoneStatusRequest roomTag
         * @property {number|null} [userId] ProGetPhoneStatusRequest userId
         */

        /**
         * Constructs a new ProGetPhoneStatusRequest.
         * @memberof messages
         * @classdesc Represents a ProGetPhoneStatusRequest.
         * @implements IProGetPhoneStatusRequest
         * @constructor
         * @param {messages.IProGetPhoneStatusRequest=} [properties] Properties to set
         */
        function ProGetPhoneStatusRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetPhoneStatusRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProGetPhoneStatusRequest
         * @instance
         */
        ProGetPhoneStatusRequest.prototype.roomTag = 0;

        /**
         * ProGetPhoneStatusRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetPhoneStatusRequest
         * @instance
         */
        ProGetPhoneStatusRequest.prototype.userId = 0;

        /**
         * Creates a new ProGetPhoneStatusRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {messages.IProGetPhoneStatusRequest=} [properties] Properties to set
         * @returns {messages.ProGetPhoneStatusRequest} ProGetPhoneStatusRequest instance
         */
        ProGetPhoneStatusRequest.create = function create(properties) {
            return new ProGetPhoneStatusRequest(properties);
        };

        /**
         * Encodes the specified ProGetPhoneStatusRequest message. Does not implicitly {@link messages.ProGetPhoneStatusRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {messages.IProGetPhoneStatusRequest} message ProGetPhoneStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetPhoneStatusRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.userId);
            return writer;
        };

        /**
         * Encodes the specified ProGetPhoneStatusRequest message, length delimited. Does not implicitly {@link messages.ProGetPhoneStatusRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {messages.IProGetPhoneStatusRequest} message ProGetPhoneStatusRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetPhoneStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetPhoneStatusRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetPhoneStatusRequest} ProGetPhoneStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetPhoneStatusRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetPhoneStatusRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.userId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetPhoneStatusRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetPhoneStatusRequest} ProGetPhoneStatusRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetPhoneStatusRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetPhoneStatusRequest message.
         * @function verify
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetPhoneStatusRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetPhoneStatusRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetPhoneStatusRequest} ProGetPhoneStatusRequest
         */
        ProGetPhoneStatusRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetPhoneStatusRequest)
                return object;
            var message = new $root.messages.ProGetPhoneStatusRequest();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.userId != null)
                message.userId = object.userId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetPhoneStatusRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetPhoneStatusRequest
         * @static
         * @param {messages.ProGetPhoneStatusRequest} message ProGetPhoneStatusRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetPhoneStatusRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomTag = 0;
                object.userId = 0;
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            return object;
        };

        /**
         * Converts this ProGetPhoneStatusRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetPhoneStatusRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetPhoneStatusRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetPhoneStatusRequest.MSGID
         * @enum {string}
         * @property {number} ID=1090 ID value
         */
        ProGetPhoneStatusRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1090] = "ID"] = 1090;
            return values;
        })();

        return ProGetPhoneStatusRequest;
    })();

    messages.ProGetPhoneStatusResponse = (function() {

        /**
         * Properties of a ProGetPhoneStatusResponse.
         * @memberof messages
         * @interface IProGetPhoneStatusResponse
         * @property {number|null} [roomTag] ProGetPhoneStatusResponse roomTag
         * @property {number|null} [masterUserId] ProGetPhoneStatusResponse masterUserId
         * @property {Array.<number>|null} [userId] ProGetPhoneStatusResponse userId
         * @property {Array.<number>|null} [phonestatus] ProGetPhoneStatusResponse phonestatus
         */

        /**
         * Constructs a new ProGetPhoneStatusResponse.
         * @memberof messages
         * @classdesc Represents a ProGetPhoneStatusResponse.
         * @implements IProGetPhoneStatusResponse
         * @constructor
         * @param {messages.IProGetPhoneStatusResponse=} [properties] Properties to set
         */
        function ProGetPhoneStatusResponse(properties) {
            this.userId = [];
            this.phonestatus = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetPhoneStatusResponse roomTag.
         * @member {number} roomTag
         * @memberof messages.ProGetPhoneStatusResponse
         * @instance
         */
        ProGetPhoneStatusResponse.prototype.roomTag = 0;

        /**
         * ProGetPhoneStatusResponse masterUserId.
         * @member {number} masterUserId
         * @memberof messages.ProGetPhoneStatusResponse
         * @instance
         */
        ProGetPhoneStatusResponse.prototype.masterUserId = 0;

        /**
         * ProGetPhoneStatusResponse userId.
         * @member {Array.<number>} userId
         * @memberof messages.ProGetPhoneStatusResponse
         * @instance
         */
        ProGetPhoneStatusResponse.prototype.userId = $util.emptyArray;

        /**
         * ProGetPhoneStatusResponse phonestatus.
         * @member {Array.<number>} phonestatus
         * @memberof messages.ProGetPhoneStatusResponse
         * @instance
         */
        ProGetPhoneStatusResponse.prototype.phonestatus = $util.emptyArray;

        /**
         * Creates a new ProGetPhoneStatusResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {messages.IProGetPhoneStatusResponse=} [properties] Properties to set
         * @returns {messages.ProGetPhoneStatusResponse} ProGetPhoneStatusResponse instance
         */
        ProGetPhoneStatusResponse.create = function create(properties) {
            return new ProGetPhoneStatusResponse(properties);
        };

        /**
         * Encodes the specified ProGetPhoneStatusResponse message. Does not implicitly {@link messages.ProGetPhoneStatusResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {messages.IProGetPhoneStatusResponse} message ProGetPhoneStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetPhoneStatusResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomTag);
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.masterUserId);
            if (message.userId != null && message.userId.length)
                for (var i = 0; i < message.userId.length; ++i)
                    writer.uint32(/* id 4, wireType 0 =*/32).int32(message.userId[i]);
            if (message.phonestatus != null && message.phonestatus.length)
                for (var i = 0; i < message.phonestatus.length; ++i)
                    writer.uint32(/* id 5, wireType 0 =*/40).int32(message.phonestatus[i]);
            return writer;
        };

        /**
         * Encodes the specified ProGetPhoneStatusResponse message, length delimited. Does not implicitly {@link messages.ProGetPhoneStatusResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {messages.IProGetPhoneStatusResponse} message ProGetPhoneStatusResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetPhoneStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetPhoneStatusResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetPhoneStatusResponse} ProGetPhoneStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetPhoneStatusResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetPhoneStatusResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomTag = reader.int32();
                    break;
                case 3:
                    message.masterUserId = reader.int32();
                    break;
                case 4:
                    if (!(message.userId && message.userId.length))
                        message.userId = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.userId.push(reader.int32());
                    } else
                        message.userId.push(reader.int32());
                    break;
                case 5:
                    if (!(message.phonestatus && message.phonestatus.length))
                        message.phonestatus = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.phonestatus.push(reader.int32());
                    } else
                        message.phonestatus.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetPhoneStatusResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetPhoneStatusResponse} ProGetPhoneStatusResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetPhoneStatusResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetPhoneStatusResponse message.
         * @function verify
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetPhoneStatusResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                if (!$util.isInteger(message.masterUserId))
                    return "masterUserId: integer expected";
            if (message.userId != null && message.hasOwnProperty("userId")) {
                if (!Array.isArray(message.userId))
                    return "userId: array expected";
                for (var i = 0; i < message.userId.length; ++i)
                    if (!$util.isInteger(message.userId[i]))
                        return "userId: integer[] expected";
            }
            if (message.phonestatus != null && message.hasOwnProperty("phonestatus")) {
                if (!Array.isArray(message.phonestatus))
                    return "phonestatus: array expected";
                for (var i = 0; i < message.phonestatus.length; ++i)
                    if (!$util.isInteger(message.phonestatus[i]))
                        return "phonestatus: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a ProGetPhoneStatusResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetPhoneStatusResponse} ProGetPhoneStatusResponse
         */
        ProGetPhoneStatusResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetPhoneStatusResponse)
                return object;
            var message = new $root.messages.ProGetPhoneStatusResponse();
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.masterUserId != null)
                message.masterUserId = object.masterUserId | 0;
            if (object.userId) {
                if (!Array.isArray(object.userId))
                    throw TypeError(".messages.ProGetPhoneStatusResponse.userId: array expected");
                message.userId = [];
                for (var i = 0; i < object.userId.length; ++i)
                    message.userId[i] = object.userId[i] | 0;
            }
            if (object.phonestatus) {
                if (!Array.isArray(object.phonestatus))
                    throw TypeError(".messages.ProGetPhoneStatusResponse.phonestatus: array expected");
                message.phonestatus = [];
                for (var i = 0; i < object.phonestatus.length; ++i)
                    message.phonestatus[i] = object.phonestatus[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetPhoneStatusResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetPhoneStatusResponse
         * @static
         * @param {messages.ProGetPhoneStatusResponse} message ProGetPhoneStatusResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetPhoneStatusResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults) {
                object.userId = [];
                object.phonestatus = [];
            }
            if (options.defaults) {
                object.roomTag = 0;
                object.masterUserId = 0;
            }
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                object.masterUserId = message.masterUserId;
            if (message.userId && message.userId.length) {
                object.userId = [];
                for (var j = 0; j < message.userId.length; ++j)
                    object.userId[j] = message.userId[j];
            }
            if (message.phonestatus && message.phonestatus.length) {
                object.phonestatus = [];
                for (var j = 0; j < message.phonestatus.length; ++j)
                    object.phonestatus[j] = message.phonestatus[j];
            }
            return object;
        };

        /**
         * Converts this ProGetPhoneStatusResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetPhoneStatusResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetPhoneStatusResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetPhoneStatusResponse.MSGID
         * @enum {string}
         * @property {number} ID=1091 ID value
         */
        ProGetPhoneStatusResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1091] = "ID"] = 1091;
            return values;
        })();

        return ProGetPhoneStatusResponse;
    })();

    messages.ProUserLoginOutRoomNofify = (function() {

        /**
         * Properties of a ProUserLoginOutRoomNofify.
         * @memberof messages
         * @interface IProUserLoginOutRoomNofify
         * @property {number|null} [userId] ProUserLoginOutRoomNofify userId
         * @property {Uint8Array|null} [info] ProUserLoginOutRoomNofify info
         */

        /**
         * Constructs a new ProUserLoginOutRoomNofify.
         * @memberof messages
         * @classdesc Represents a ProUserLoginOutRoomNofify.
         * @implements IProUserLoginOutRoomNofify
         * @constructor
         * @param {messages.IProUserLoginOutRoomNofify=} [properties] Properties to set
         */
        function ProUserLoginOutRoomNofify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserLoginOutRoomNofify userId.
         * @member {number} userId
         * @memberof messages.ProUserLoginOutRoomNofify
         * @instance
         */
        ProUserLoginOutRoomNofify.prototype.userId = 0;

        /**
         * ProUserLoginOutRoomNofify info.
         * @member {Uint8Array} info
         * @memberof messages.ProUserLoginOutRoomNofify
         * @instance
         */
        ProUserLoginOutRoomNofify.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProUserLoginOutRoomNofify instance using the specified properties.
         * @function create
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {messages.IProUserLoginOutRoomNofify=} [properties] Properties to set
         * @returns {messages.ProUserLoginOutRoomNofify} ProUserLoginOutRoomNofify instance
         */
        ProUserLoginOutRoomNofify.create = function create(properties) {
            return new ProUserLoginOutRoomNofify(properties);
        };

        /**
         * Encodes the specified ProUserLoginOutRoomNofify message. Does not implicitly {@link messages.ProUserLoginOutRoomNofify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {messages.IProUserLoginOutRoomNofify} message ProUserLoginOutRoomNofify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginOutRoomNofify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProUserLoginOutRoomNofify message, length delimited. Does not implicitly {@link messages.ProUserLoginOutRoomNofify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {messages.IProUserLoginOutRoomNofify} message ProUserLoginOutRoomNofify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginOutRoomNofify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserLoginOutRoomNofify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserLoginOutRoomNofify} ProUserLoginOutRoomNofify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginOutRoomNofify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserLoginOutRoomNofify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserLoginOutRoomNofify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserLoginOutRoomNofify} ProUserLoginOutRoomNofify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginOutRoomNofify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserLoginOutRoomNofify message.
         * @function verify
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserLoginOutRoomNofify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserLoginOutRoomNofify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserLoginOutRoomNofify} ProUserLoginOutRoomNofify
         */
        ProUserLoginOutRoomNofify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserLoginOutRoomNofify)
                return object;
            var message = new $root.messages.ProUserLoginOutRoomNofify();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProUserLoginOutRoomNofify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserLoginOutRoomNofify
         * @static
         * @param {messages.ProUserLoginOutRoomNofify} message ProUserLoginOutRoomNofify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserLoginOutRoomNofify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProUserLoginOutRoomNofify to JSON.
         * @function toJSON
         * @memberof messages.ProUserLoginOutRoomNofify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserLoginOutRoomNofify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserLoginOutRoomNofify.MSGID
         * @enum {string}
         * @property {number} ID=1092 ID value
         */
        ProUserLoginOutRoomNofify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1092] = "ID"] = 1092;
            return values;
        })();

        return ProUserLoginOutRoomNofify;
    })();

    messages.User = (function() {

        /**
         * Properties of a User.
         * @memberof messages
         * @interface IUser
         * @property {number|null} [userId] User userId
         * @property {messages.IUserBaseInfo|null} [base] User base
         * @property {messages.IUserVIPInfo|null} [vip] User vip
         * @property {messages.IUserCoinInfo|null} [coin] User coin
         * @property {Array.<messages.IUserGameLevelInfo>|null} [gameLevel] User gameLevel
         * @property {messages.IUserGameSeatInfo|null} [seat] User seat
         * @property {messages.UserState|null} [userState] User userState
         * @property {Uint8Array|null} [loginIp] User loginIp
         * @property {messages.IUserGameCountInfo|null} [countInfo] User countInfo
         * @property {number|null} [connectsrvId] User connectsrvId
         */

        /**
         * Constructs a new User.
         * @memberof messages
         * @classdesc Represents a User.
         * @implements IUser
         * @constructor
         * @param {messages.IUser=} [properties] Properties to set
         */
        function User(properties) {
            this.gameLevel = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * User userId.
         * @member {number} userId
         * @memberof messages.User
         * @instance
         */
        User.prototype.userId = 0;

        /**
         * User base.
         * @member {messages.IUserBaseInfo|null|undefined} base
         * @memberof messages.User
         * @instance
         */
        User.prototype.base = null;

        /**
         * User vip.
         * @member {messages.IUserVIPInfo|null|undefined} vip
         * @memberof messages.User
         * @instance
         */
        User.prototype.vip = null;

        /**
         * User coin.
         * @member {messages.IUserCoinInfo|null|undefined} coin
         * @memberof messages.User
         * @instance
         */
        User.prototype.coin = null;

        /**
         * User gameLevel.
         * @member {Array.<messages.IUserGameLevelInfo>} gameLevel
         * @memberof messages.User
         * @instance
         */
        User.prototype.gameLevel = $util.emptyArray;

        /**
         * User seat.
         * @member {messages.IUserGameSeatInfo|null|undefined} seat
         * @memberof messages.User
         * @instance
         */
        User.prototype.seat = null;

        /**
         * User userState.
         * @member {messages.UserState} userState
         * @memberof messages.User
         * @instance
         */
        User.prototype.userState = 0;

        /**
         * User loginIp.
         * @member {Uint8Array} loginIp
         * @memberof messages.User
         * @instance
         */
        User.prototype.loginIp = $util.newBuffer([]);

        /**
         * User countInfo.
         * @member {messages.IUserGameCountInfo|null|undefined} countInfo
         * @memberof messages.User
         * @instance
         */
        User.prototype.countInfo = null;

        /**
         * User connectsrvId.
         * @member {number} connectsrvId
         * @memberof messages.User
         * @instance
         */
        User.prototype.connectsrvId = 0;

        /**
         * Creates a new User instance using the specified properties.
         * @function create
         * @memberof messages.User
         * @static
         * @param {messages.IUser=} [properties] Properties to set
         * @returns {messages.User} User instance
         */
        User.create = function create(properties) {
            return new User(properties);
        };

        /**
         * Encodes the specified User message. Does not implicitly {@link messages.User.verify|verify} messages.
         * @function encode
         * @memberof messages.User
         * @static
         * @param {messages.IUser} message User message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        User.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);
            if (message.base != null && message.hasOwnProperty("base"))
                $root.messages.UserBaseInfo.encode(message.base, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.vip != null && message.hasOwnProperty("vip"))
                $root.messages.UserVIPInfo.encode(message.vip, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.coin != null && message.hasOwnProperty("coin"))
                $root.messages.UserCoinInfo.encode(message.coin, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.gameLevel != null && message.gameLevel.length)
                for (var i = 0; i < message.gameLevel.length; ++i)
                    $root.messages.UserGameLevelInfo.encode(message.gameLevel[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
            if (message.seat != null && message.hasOwnProperty("seat"))
                $root.messages.UserGameSeatInfo.encode(message.seat, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.userState != null && message.hasOwnProperty("userState"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.userState);
            if (message.loginIp != null && message.hasOwnProperty("loginIp"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.loginIp);
            if (message.countInfo != null && message.hasOwnProperty("countInfo"))
                $root.messages.UserGameCountInfo.encode(message.countInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.connectsrvId);
            return writer;
        };

        /**
         * Encodes the specified User message, length delimited. Does not implicitly {@link messages.User.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.User
         * @static
         * @param {messages.IUser} message User message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        User.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a User message from the specified reader or buffer.
         * @function decode
         * @memberof messages.User
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.User} User
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        User.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.User();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 1:
                    message.userId = reader.int32();
                    break;
                case 2:
                    message.base = $root.messages.UserBaseInfo.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.vip = $root.messages.UserVIPInfo.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.coin = $root.messages.UserCoinInfo.decode(reader, reader.uint32());
                    break;
                case 5:
                    if (!(message.gameLevel && message.gameLevel.length))
                        message.gameLevel = [];
                    message.gameLevel.push($root.messages.UserGameLevelInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.seat = $root.messages.UserGameSeatInfo.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.userState = reader.int32();
                    break;
                case 8:
                    message.loginIp = reader.bytes();
                    break;
                case 9:
                    message.countInfo = $root.messages.UserGameCountInfo.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.connectsrvId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a User message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.User
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.User} User
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        User.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a User message.
         * @function verify
         * @memberof messages.User
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        User.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.base != null && message.hasOwnProperty("base")) {
                var error = $root.messages.UserBaseInfo.verify(message.base);
                if (error)
                    return "base." + error;
            }
            if (message.vip != null && message.hasOwnProperty("vip")) {
                var error = $root.messages.UserVIPInfo.verify(message.vip);
                if (error)
                    return "vip." + error;
            }
            if (message.coin != null && message.hasOwnProperty("coin")) {
                var error = $root.messages.UserCoinInfo.verify(message.coin);
                if (error)
                    return "coin." + error;
            }
            if (message.gameLevel != null && message.hasOwnProperty("gameLevel")) {
                if (!Array.isArray(message.gameLevel))
                    return "gameLevel: array expected";
                for (var i = 0; i < message.gameLevel.length; ++i) {
                    var error = $root.messages.UserGameLevelInfo.verify(message.gameLevel[i]);
                    if (error)
                        return "gameLevel." + error;
                }
            }
            if (message.seat != null && message.hasOwnProperty("seat")) {
                var error = $root.messages.UserGameSeatInfo.verify(message.seat);
                if (error)
                    return "seat." + error;
            }
            if (message.userState != null && message.hasOwnProperty("userState"))
                switch (message.userState) {
                default:
                    return "userState: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 20:
                case 21:
                    break;
                }
            if (message.loginIp != null && message.hasOwnProperty("loginIp"))
                if (!(message.loginIp && typeof message.loginIp.length === "number" || $util.isString(message.loginIp)))
                    return "loginIp: buffer expected";
            if (message.countInfo != null && message.hasOwnProperty("countInfo")) {
                var error = $root.messages.UserGameCountInfo.verify(message.countInfo);
                if (error)
                    return "countInfo." + error;
            }
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                if (!$util.isInteger(message.connectsrvId))
                    return "connectsrvId: integer expected";
            return null;
        };

        /**
         * Creates a User message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.User
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.User} User
         */
        User.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.User)
                return object;
            var message = new $root.messages.User();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.base != null) {
                if (typeof object.base !== "object")
                    throw TypeError(".messages.User.base: object expected");
                message.base = $root.messages.UserBaseInfo.fromObject(object.base);
            }
            if (object.vip != null) {
                if (typeof object.vip !== "object")
                    throw TypeError(".messages.User.vip: object expected");
                message.vip = $root.messages.UserVIPInfo.fromObject(object.vip);
            }
            if (object.coin != null) {
                if (typeof object.coin !== "object")
                    throw TypeError(".messages.User.coin: object expected");
                message.coin = $root.messages.UserCoinInfo.fromObject(object.coin);
            }
            if (object.gameLevel) {
                if (!Array.isArray(object.gameLevel))
                    throw TypeError(".messages.User.gameLevel: array expected");
                message.gameLevel = [];
                for (var i = 0; i < object.gameLevel.length; ++i) {
                    if (typeof object.gameLevel[i] !== "object")
                        throw TypeError(".messages.User.gameLevel: object expected");
                    message.gameLevel[i] = $root.messages.UserGameLevelInfo.fromObject(object.gameLevel[i]);
                }
            }
            if (object.seat != null) {
                if (typeof object.seat !== "object")
                    throw TypeError(".messages.User.seat: object expected");
                message.seat = $root.messages.UserGameSeatInfo.fromObject(object.seat);
            }
            switch (object.userState) {
            case "USER_NONE":
            case 0:
                message.userState = 0;
                break;
            case "USER_IDLE":
            case 1:
                message.userState = 1;
                break;
            case "USER_SEAT_HOLD":
            case 2:
                message.userState = 2;
                break;
            case "USER_SIT":
            case 3:
                message.userState = 3;
                break;
            case "USER_READY":
            case 4:
                message.userState = 4;
                break;
            case "USER_WATCH":
            case 5:
                message.userState = 5;
                break;
            case "USER_OFFLINE":
            case 20:
                message.userState = 20;
                break;
            case "USER_PLAY":
            case 21:
                message.userState = 21;
                break;
            }
            if (object.loginIp != null)
                if (typeof object.loginIp === "string")
                    $util.base64.decode(object.loginIp, message.loginIp = $util.newBuffer($util.base64.length(object.loginIp)), 0);
                else if (object.loginIp.length)
                    message.loginIp = object.loginIp;
            if (object.countInfo != null) {
                if (typeof object.countInfo !== "object")
                    throw TypeError(".messages.User.countInfo: object expected");
                message.countInfo = $root.messages.UserGameCountInfo.fromObject(object.countInfo);
            }
            if (object.connectsrvId != null)
                message.connectsrvId = object.connectsrvId | 0;
            return message;
        };

        /**
         * Creates a plain object from a User message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.User
         * @static
         * @param {messages.User} message User
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        User.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.gameLevel = [];
            if (options.defaults) {
                object.userId = 0;
                object.base = null;
                object.vip = null;
                object.coin = null;
                object.seat = null;
                object.userState = options.enums === String ? "USER_NONE" : 0;
                object.loginIp = options.bytes === String ? "" : [];
                object.countInfo = null;
                object.connectsrvId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.base != null && message.hasOwnProperty("base"))
                object.base = $root.messages.UserBaseInfo.toObject(message.base, options);
            if (message.vip != null && message.hasOwnProperty("vip"))
                object.vip = $root.messages.UserVIPInfo.toObject(message.vip, options);
            if (message.coin != null && message.hasOwnProperty("coin"))
                object.coin = $root.messages.UserCoinInfo.toObject(message.coin, options);
            if (message.gameLevel && message.gameLevel.length) {
                object.gameLevel = [];
                for (var j = 0; j < message.gameLevel.length; ++j)
                    object.gameLevel[j] = $root.messages.UserGameLevelInfo.toObject(message.gameLevel[j], options);
            }
            if (message.seat != null && message.hasOwnProperty("seat"))
                object.seat = $root.messages.UserGameSeatInfo.toObject(message.seat, options);
            if (message.userState != null && message.hasOwnProperty("userState"))
                object.userState = options.enums === String ? $root.messages.UserState[message.userState] : message.userState;
            if (message.loginIp != null && message.hasOwnProperty("loginIp"))
                object.loginIp = options.bytes === String ? $util.base64.encode(message.loginIp, 0, message.loginIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginIp) : message.loginIp;
            if (message.countInfo != null && message.hasOwnProperty("countInfo"))
                object.countInfo = $root.messages.UserGameCountInfo.toObject(message.countInfo, options);
            if (message.connectsrvId != null && message.hasOwnProperty("connectsrvId"))
                object.connectsrvId = message.connectsrvId;
            return object;
        };

        /**
         * Converts this User to JSON.
         * @function toJSON
         * @memberof messages.User
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        User.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return User;
    })();

    messages.UserBaseInfo = (function() {

        /**
         * Properties of a UserBaseInfo.
         * @memberof messages
         * @interface IUserBaseInfo
         * @property {Uint8Array|null} [loginName] UserBaseInfo loginName
         * @property {Uint8Array|null} [nickname] UserBaseInfo nickname
         * @property {boolean|null} [gender] UserBaseInfo gender
         * @property {boolean|null} [isRobot] UserBaseInfo isRobot
         * @property {messages.UserBaseInfo.AvatarType|null} [avatarType] UserBaseInfo avatarType
         * @property {Uint8Array|null} [avatarFile] UserBaseInfo avatarFile
         * @property {Uint8Array|null} [secretToken] UserBaseInfo secretToken
         * @property {messages.UserBaseInfo.AccountType|null} [accountType] UserBaseInfo accountType
         * @property {number|Long|null} [regDate] UserBaseInfo regDate
         * @property {Uint8Array|null} [source] UserBaseInfo source
         */

        /**
         * Constructs a new UserBaseInfo.
         * @memberof messages
         * @classdesc Represents a UserBaseInfo.
         * @implements IUserBaseInfo
         * @constructor
         * @param {messages.IUserBaseInfo=} [properties] Properties to set
         */
        function UserBaseInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserBaseInfo loginName.
         * @member {Uint8Array} loginName
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.loginName = $util.newBuffer([]);

        /**
         * UserBaseInfo nickname.
         * @member {Uint8Array} nickname
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.nickname = $util.newBuffer([]);

        /**
         * UserBaseInfo gender.
         * @member {boolean} gender
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.gender = false;

        /**
         * UserBaseInfo isRobot.
         * @member {boolean} isRobot
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.isRobot = false;

        /**
         * UserBaseInfo avatarType.
         * @member {messages.UserBaseInfo.AvatarType} avatarType
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.avatarType = 1;

        /**
         * UserBaseInfo avatarFile.
         * @member {Uint8Array} avatarFile
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.avatarFile = $util.newBuffer([]);

        /**
         * UserBaseInfo secretToken.
         * @member {Uint8Array} secretToken
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.secretToken = $util.newBuffer([]);

        /**
         * UserBaseInfo accountType.
         * @member {messages.UserBaseInfo.AccountType} accountType
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.accountType = 1;

        /**
         * UserBaseInfo regDate.
         * @member {number|Long} regDate
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.regDate = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserBaseInfo source.
         * @member {Uint8Array} source
         * @memberof messages.UserBaseInfo
         * @instance
         */
        UserBaseInfo.prototype.source = $util.newBuffer([]);

        /**
         * Creates a new UserBaseInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserBaseInfo
         * @static
         * @param {messages.IUserBaseInfo=} [properties] Properties to set
         * @returns {messages.UserBaseInfo} UserBaseInfo instance
         */
        UserBaseInfo.create = function create(properties) {
            return new UserBaseInfo(properties);
        };

        /**
         * Encodes the specified UserBaseInfo message. Does not implicitly {@link messages.UserBaseInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserBaseInfo
         * @static
         * @param {messages.IUserBaseInfo} message UserBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBaseInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.loginName);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.nickname);
            if (message.gender != null && message.hasOwnProperty("gender"))
                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.gender);
            if (message.isRobot != null && message.hasOwnProperty("isRobot"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isRobot);
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.avatarType);
            if (message.avatarFile != null && message.hasOwnProperty("avatarFile"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.avatarFile);
            if (message.secretToken != null && message.hasOwnProperty("secretToken"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.secretToken);
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.accountType);
            if (message.regDate != null && message.hasOwnProperty("regDate"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.regDate);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.source);
            return writer;
        };

        /**
         * Encodes the specified UserBaseInfo message, length delimited. Does not implicitly {@link messages.UserBaseInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserBaseInfo
         * @static
         * @param {messages.IUserBaseInfo} message UserBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserBaseInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserBaseInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserBaseInfo} UserBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBaseInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserBaseInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.loginName = reader.bytes();
                    break;
                case 3:
                    message.nickname = reader.bytes();
                    break;
                case 4:
                    message.gender = reader.bool();
                    break;
                case 5:
                    message.isRobot = reader.bool();
                    break;
                case 6:
                    message.avatarType = reader.int32();
                    break;
                case 7:
                    message.avatarFile = reader.bytes();
                    break;
                case 8:
                    message.secretToken = reader.bytes();
                    break;
                case 9:
                    message.accountType = reader.int32();
                    break;
                case 10:
                    message.regDate = reader.int64();
                    break;
                case 11:
                    message.source = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserBaseInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserBaseInfo} UserBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserBaseInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserBaseInfo message.
         * @function verify
         * @memberof messages.UserBaseInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserBaseInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                if (!(message.loginName && typeof message.loginName.length === "number" || $util.isString(message.loginName)))
                    return "loginName: buffer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!(message.nickname && typeof message.nickname.length === "number" || $util.isString(message.nickname)))
                    return "nickname: buffer expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (typeof message.gender !== "boolean")
                    return "gender: boolean expected";
            if (message.isRobot != null && message.hasOwnProperty("isRobot"))
                if (typeof message.isRobot !== "boolean")
                    return "isRobot: boolean expected";
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                switch (message.avatarType) {
                default:
                    return "avatarType: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.avatarFile != null && message.hasOwnProperty("avatarFile"))
                if (!(message.avatarFile && typeof message.avatarFile.length === "number" || $util.isString(message.avatarFile)))
                    return "avatarFile: buffer expected";
            if (message.secretToken != null && message.hasOwnProperty("secretToken"))
                if (!(message.secretToken && typeof message.secretToken.length === "number" || $util.isString(message.secretToken)))
                    return "secretToken: buffer expected";
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                switch (message.accountType) {
                default:
                    return "accountType: enum value expected";
                case 1:
                case 2:
                case 9:
                    break;
                }
            if (message.regDate != null && message.hasOwnProperty("regDate"))
                if (!$util.isInteger(message.regDate) && !(message.regDate && $util.isInteger(message.regDate.low) && $util.isInteger(message.regDate.high)))
                    return "regDate: integer|Long expected";
            if (message.source != null && message.hasOwnProperty("source"))
                if (!(message.source && typeof message.source.length === "number" || $util.isString(message.source)))
                    return "source: buffer expected";
            return null;
        };

        /**
         * Creates a UserBaseInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserBaseInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserBaseInfo} UserBaseInfo
         */
        UserBaseInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserBaseInfo)
                return object;
            var message = new $root.messages.UserBaseInfo();
            if (object.loginName != null)
                if (typeof object.loginName === "string")
                    $util.base64.decode(object.loginName, message.loginName = $util.newBuffer($util.base64.length(object.loginName)), 0);
                else if (object.loginName.length)
                    message.loginName = object.loginName;
            if (object.nickname != null)
                if (typeof object.nickname === "string")
                    $util.base64.decode(object.nickname, message.nickname = $util.newBuffer($util.base64.length(object.nickname)), 0);
                else if (object.nickname.length)
                    message.nickname = object.nickname;
            if (object.gender != null)
                message.gender = Boolean(object.gender);
            if (object.isRobot != null)
                message.isRobot = Boolean(object.isRobot);
            switch (object.avatarType) {
            case "AVATAR_DEFAULT":
            case 1:
                message.avatarType = 1;
                break;
            case "AVATAR_UPLOAD":
            case 2:
                message.avatarType = 2;
                break;
            }
            if (object.avatarFile != null)
                if (typeof object.avatarFile === "string")
                    $util.base64.decode(object.avatarFile, message.avatarFile = $util.newBuffer($util.base64.length(object.avatarFile)), 0);
                else if (object.avatarFile.length)
                    message.avatarFile = object.avatarFile;
            if (object.secretToken != null)
                if (typeof object.secretToken === "string")
                    $util.base64.decode(object.secretToken, message.secretToken = $util.newBuffer($util.base64.length(object.secretToken)), 0);
                else if (object.secretToken.length)
                    message.secretToken = object.secretToken;
            switch (object.accountType) {
            case "ACCOUNT_ANONYMOUS":
            case 1:
                message.accountType = 1;
                break;
            case "ACCOUNT_MOBILE":
            case 2:
                message.accountType = 2;
                break;
            case "ACCOUNT_OTHER":
            case 9:
                message.accountType = 9;
                break;
            }
            if (object.regDate != null)
                if ($util.Long)
                    (message.regDate = $util.Long.fromValue(object.regDate)).unsigned = false;
                else if (typeof object.regDate === "string")
                    message.regDate = parseInt(object.regDate, 10);
                else if (typeof object.regDate === "number")
                    message.regDate = object.regDate;
                else if (typeof object.regDate === "object")
                    message.regDate = new $util.LongBits(object.regDate.low >>> 0, object.regDate.high >>> 0).toNumber();
            if (object.source != null)
                if (typeof object.source === "string")
                    $util.base64.decode(object.source, message.source = $util.newBuffer($util.base64.length(object.source)), 0);
                else if (object.source.length)
                    message.source = object.source;
            return message;
        };

        /**
         * Creates a plain object from a UserBaseInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserBaseInfo
         * @static
         * @param {messages.UserBaseInfo} message UserBaseInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserBaseInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.loginName = options.bytes === String ? "" : [];
                object.nickname = options.bytes === String ? "" : [];
                object.gender = false;
                object.isRobot = false;
                object.avatarType = options.enums === String ? "AVATAR_DEFAULT" : 1;
                object.avatarFile = options.bytes === String ? "" : [];
                object.secretToken = options.bytes === String ? "" : [];
                object.accountType = options.enums === String ? "ACCOUNT_ANONYMOUS" : 1;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.regDate = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.regDate = options.longs === String ? "0" : 0;
                object.source = options.bytes === String ? "" : [];
            }
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                object.loginName = options.bytes === String ? $util.base64.encode(message.loginName, 0, message.loginName.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginName) : message.loginName;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = options.bytes === String ? $util.base64.encode(message.nickname, 0, message.nickname.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickname) : message.nickname;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.isRobot != null && message.hasOwnProperty("isRobot"))
                object.isRobot = message.isRobot;
            if (message.avatarType != null && message.hasOwnProperty("avatarType"))
                object.avatarType = options.enums === String ? $root.messages.UserBaseInfo.AvatarType[message.avatarType] : message.avatarType;
            if (message.avatarFile != null && message.hasOwnProperty("avatarFile"))
                object.avatarFile = options.bytes === String ? $util.base64.encode(message.avatarFile, 0, message.avatarFile.length) : options.bytes === Array ? Array.prototype.slice.call(message.avatarFile) : message.avatarFile;
            if (message.secretToken != null && message.hasOwnProperty("secretToken"))
                object.secretToken = options.bytes === String ? $util.base64.encode(message.secretToken, 0, message.secretToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.secretToken) : message.secretToken;
            if (message.accountType != null && message.hasOwnProperty("accountType"))
                object.accountType = options.enums === String ? $root.messages.UserBaseInfo.AccountType[message.accountType] : message.accountType;
            if (message.regDate != null && message.hasOwnProperty("regDate"))
                if (typeof message.regDate === "number")
                    object.regDate = options.longs === String ? String(message.regDate) : message.regDate;
                else
                    object.regDate = options.longs === String ? $util.Long.prototype.toString.call(message.regDate) : options.longs === Number ? new $util.LongBits(message.regDate.low >>> 0, message.regDate.high >>> 0).toNumber() : message.regDate;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.bytes === String ? $util.base64.encode(message.source, 0, message.source.length) : options.bytes === Array ? Array.prototype.slice.call(message.source) : message.source;
            return object;
        };

        /**
         * Converts this UserBaseInfo to JSON.
         * @function toJSON
         * @memberof messages.UserBaseInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserBaseInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * AvatarType enum.
         * @name messages.UserBaseInfo.AvatarType
         * @enum {string}
         * @property {number} AVATAR_DEFAULT=1 AVATAR_DEFAULT value
         * @property {number} AVATAR_UPLOAD=2 AVATAR_UPLOAD value
         */
        UserBaseInfo.AvatarType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "AVATAR_DEFAULT"] = 1;
            values[valuesById[2] = "AVATAR_UPLOAD"] = 2;
            return values;
        })();

        /**
         * AccountType enum.
         * @name messages.UserBaseInfo.AccountType
         * @enum {string}
         * @property {number} ACCOUNT_ANONYMOUS=1 ACCOUNT_ANONYMOUS value
         * @property {number} ACCOUNT_MOBILE=2 ACCOUNT_MOBILE value
         * @property {number} ACCOUNT_OTHER=9 ACCOUNT_OTHER value
         */
        UserBaseInfo.AccountType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ACCOUNT_ANONYMOUS"] = 1;
            values[valuesById[2] = "ACCOUNT_MOBILE"] = 2;
            values[valuesById[9] = "ACCOUNT_OTHER"] = 9;
            return values;
        })();

        return UserBaseInfo;
    })();

    messages.UserVIPInfo = (function() {

        /**
         * Properties of a UserVIPInfo.
         * @memberof messages
         * @interface IUserVIPInfo
         * @property {number|null} [vipLevel] UserVIPInfo vipLevel
         * @property {number|null} [vipExpireTime] UserVIPInfo vipExpireTime
         */

        /**
         * Constructs a new UserVIPInfo.
         * @memberof messages
         * @classdesc Represents a UserVIPInfo.
         * @implements IUserVIPInfo
         * @constructor
         * @param {messages.IUserVIPInfo=} [properties] Properties to set
         */
        function UserVIPInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserVIPInfo vipLevel.
         * @member {number} vipLevel
         * @memberof messages.UserVIPInfo
         * @instance
         */
        UserVIPInfo.prototype.vipLevel = 0;

        /**
         * UserVIPInfo vipExpireTime.
         * @member {number} vipExpireTime
         * @memberof messages.UserVIPInfo
         * @instance
         */
        UserVIPInfo.prototype.vipExpireTime = 0;

        /**
         * Creates a new UserVIPInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserVIPInfo
         * @static
         * @param {messages.IUserVIPInfo=} [properties] Properties to set
         * @returns {messages.UserVIPInfo} UserVIPInfo instance
         */
        UserVIPInfo.create = function create(properties) {
            return new UserVIPInfo(properties);
        };

        /**
         * Encodes the specified UserVIPInfo message. Does not implicitly {@link messages.UserVIPInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserVIPInfo
         * @static
         * @param {messages.IUserVIPInfo} message UserVIPInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserVIPInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.vipLevel);
            if (message.vipExpireTime != null && message.hasOwnProperty("vipExpireTime"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.vipExpireTime);
            return writer;
        };

        /**
         * Encodes the specified UserVIPInfo message, length delimited. Does not implicitly {@link messages.UserVIPInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserVIPInfo
         * @static
         * @param {messages.IUserVIPInfo} message UserVIPInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserVIPInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserVIPInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserVIPInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserVIPInfo} UserVIPInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserVIPInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserVIPInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.vipLevel = reader.int32();
                    break;
                case 3:
                    message.vipExpireTime = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserVIPInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserVIPInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserVIPInfo} UserVIPInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserVIPInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserVIPInfo message.
         * @function verify
         * @memberof messages.UserVIPInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserVIPInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                if (!$util.isInteger(message.vipLevel))
                    return "vipLevel: integer expected";
            if (message.vipExpireTime != null && message.hasOwnProperty("vipExpireTime"))
                if (!$util.isInteger(message.vipExpireTime))
                    return "vipExpireTime: integer expected";
            return null;
        };

        /**
         * Creates a UserVIPInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserVIPInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserVIPInfo} UserVIPInfo
         */
        UserVIPInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserVIPInfo)
                return object;
            var message = new $root.messages.UserVIPInfo();
            if (object.vipLevel != null)
                message.vipLevel = object.vipLevel | 0;
            if (object.vipExpireTime != null)
                message.vipExpireTime = object.vipExpireTime | 0;
            return message;
        };

        /**
         * Creates a plain object from a UserVIPInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserVIPInfo
         * @static
         * @param {messages.UserVIPInfo} message UserVIPInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserVIPInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.vipLevel = 0;
                object.vipExpireTime = 0;
            }
            if (message.vipLevel != null && message.hasOwnProperty("vipLevel"))
                object.vipLevel = message.vipLevel;
            if (message.vipExpireTime != null && message.hasOwnProperty("vipExpireTime"))
                object.vipExpireTime = message.vipExpireTime;
            return object;
        };

        /**
         * Converts this UserVIPInfo to JSON.
         * @function toJSON
         * @memberof messages.UserVIPInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserVIPInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserVIPInfo;
    })();

    messages.UserCoinInfo = (function() {

        /**
         * Properties of a UserCoinInfo.
         * @memberof messages
         * @interface IUserCoinInfo
         * @property {number|Long|null} [goldcoin] UserCoinInfo goldcoin
         * @property {number|Long|null} [bankcoin] UserCoinInfo bankcoin
         * @property {number|Long|null} [tmcoin] UserCoinInfo tmcoin
         * @property {number|Long|null} [lotteryNums] UserCoinInfo lotteryNums
         */

        /**
         * Constructs a new UserCoinInfo.
         * @memberof messages
         * @classdesc Represents a UserCoinInfo.
         * @implements IUserCoinInfo
         * @constructor
         * @param {messages.IUserCoinInfo=} [properties] Properties to set
         */
        function UserCoinInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserCoinInfo goldcoin.
         * @member {number|Long} goldcoin
         * @memberof messages.UserCoinInfo
         * @instance
         */
        UserCoinInfo.prototype.goldcoin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserCoinInfo bankcoin.
         * @member {number|Long} bankcoin
         * @memberof messages.UserCoinInfo
         * @instance
         */
        UserCoinInfo.prototype.bankcoin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserCoinInfo tmcoin.
         * @member {number|Long} tmcoin
         * @memberof messages.UserCoinInfo
         * @instance
         */
        UserCoinInfo.prototype.tmcoin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * UserCoinInfo lotteryNums.
         * @member {number|Long} lotteryNums
         * @memberof messages.UserCoinInfo
         * @instance
         */
        UserCoinInfo.prototype.lotteryNums = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * Creates a new UserCoinInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserCoinInfo
         * @static
         * @param {messages.IUserCoinInfo=} [properties] Properties to set
         * @returns {messages.UserCoinInfo} UserCoinInfo instance
         */
        UserCoinInfo.create = function create(properties) {
            return new UserCoinInfo(properties);
        };

        /**
         * Encodes the specified UserCoinInfo message. Does not implicitly {@link messages.UserCoinInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserCoinInfo
         * @static
         * @param {messages.IUserCoinInfo} message UserCoinInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserCoinInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.goldcoin != null && message.hasOwnProperty("goldcoin"))
                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.goldcoin);
            if (message.bankcoin != null && message.hasOwnProperty("bankcoin"))
                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.bankcoin);
            if (message.tmcoin != null && message.hasOwnProperty("tmcoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int64(message.tmcoin);
            if (message.lotteryNums != null && message.hasOwnProperty("lotteryNums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.lotteryNums);
            return writer;
        };

        /**
         * Encodes the specified UserCoinInfo message, length delimited. Does not implicitly {@link messages.UserCoinInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserCoinInfo
         * @static
         * @param {messages.IUserCoinInfo} message UserCoinInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserCoinInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserCoinInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserCoinInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserCoinInfo} UserCoinInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserCoinInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserCoinInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.goldcoin = reader.int64();
                    break;
                case 3:
                    message.bankcoin = reader.int64();
                    break;
                case 4:
                    message.tmcoin = reader.int64();
                    break;
                case 5:
                    message.lotteryNums = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserCoinInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserCoinInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserCoinInfo} UserCoinInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserCoinInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserCoinInfo message.
         * @function verify
         * @memberof messages.UserCoinInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserCoinInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.goldcoin != null && message.hasOwnProperty("goldcoin"))
                if (!$util.isInteger(message.goldcoin) && !(message.goldcoin && $util.isInteger(message.goldcoin.low) && $util.isInteger(message.goldcoin.high)))
                    return "goldcoin: integer|Long expected";
            if (message.bankcoin != null && message.hasOwnProperty("bankcoin"))
                if (!$util.isInteger(message.bankcoin) && !(message.bankcoin && $util.isInteger(message.bankcoin.low) && $util.isInteger(message.bankcoin.high)))
                    return "bankcoin: integer|Long expected";
            if (message.tmcoin != null && message.hasOwnProperty("tmcoin"))
                if (!$util.isInteger(message.tmcoin) && !(message.tmcoin && $util.isInteger(message.tmcoin.low) && $util.isInteger(message.tmcoin.high)))
                    return "tmcoin: integer|Long expected";
            if (message.lotteryNums != null && message.hasOwnProperty("lotteryNums"))
                if (!$util.isInteger(message.lotteryNums) && !(message.lotteryNums && $util.isInteger(message.lotteryNums.low) && $util.isInteger(message.lotteryNums.high)))
                    return "lotteryNums: integer|Long expected";
            return null;
        };

        /**
         * Creates a UserCoinInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserCoinInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserCoinInfo} UserCoinInfo
         */
        UserCoinInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserCoinInfo)
                return object;
            var message = new $root.messages.UserCoinInfo();
            if (object.goldcoin != null)
                if ($util.Long)
                    (message.goldcoin = $util.Long.fromValue(object.goldcoin)).unsigned = false;
                else if (typeof object.goldcoin === "string")
                    message.goldcoin = parseInt(object.goldcoin, 10);
                else if (typeof object.goldcoin === "number")
                    message.goldcoin = object.goldcoin;
                else if (typeof object.goldcoin === "object")
                    message.goldcoin = new $util.LongBits(object.goldcoin.low >>> 0, object.goldcoin.high >>> 0).toNumber();
            if (object.bankcoin != null)
                if ($util.Long)
                    (message.bankcoin = $util.Long.fromValue(object.bankcoin)).unsigned = false;
                else if (typeof object.bankcoin === "string")
                    message.bankcoin = parseInt(object.bankcoin, 10);
                else if (typeof object.bankcoin === "number")
                    message.bankcoin = object.bankcoin;
                else if (typeof object.bankcoin === "object")
                    message.bankcoin = new $util.LongBits(object.bankcoin.low >>> 0, object.bankcoin.high >>> 0).toNumber();
            if (object.tmcoin != null)
                if ($util.Long)
                    (message.tmcoin = $util.Long.fromValue(object.tmcoin)).unsigned = false;
                else if (typeof object.tmcoin === "string")
                    message.tmcoin = parseInt(object.tmcoin, 10);
                else if (typeof object.tmcoin === "number")
                    message.tmcoin = object.tmcoin;
                else if (typeof object.tmcoin === "object")
                    message.tmcoin = new $util.LongBits(object.tmcoin.low >>> 0, object.tmcoin.high >>> 0).toNumber();
            if (object.lotteryNums != null)
                if ($util.Long)
                    (message.lotteryNums = $util.Long.fromValue(object.lotteryNums)).unsigned = false;
                else if (typeof object.lotteryNums === "string")
                    message.lotteryNums = parseInt(object.lotteryNums, 10);
                else if (typeof object.lotteryNums === "number")
                    message.lotteryNums = object.lotteryNums;
                else if (typeof object.lotteryNums === "object")
                    message.lotteryNums = new $util.LongBits(object.lotteryNums.low >>> 0, object.lotteryNums.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a UserCoinInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserCoinInfo
         * @static
         * @param {messages.UserCoinInfo} message UserCoinInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserCoinInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.goldcoin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.goldcoin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.bankcoin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.bankcoin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.tmcoin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.tmcoin = options.longs === String ? "0" : 0;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.lotteryNums = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.lotteryNums = options.longs === String ? "0" : 0;
            }
            if (message.goldcoin != null && message.hasOwnProperty("goldcoin"))
                if (typeof message.goldcoin === "number")
                    object.goldcoin = options.longs === String ? String(message.goldcoin) : message.goldcoin;
                else
                    object.goldcoin = options.longs === String ? $util.Long.prototype.toString.call(message.goldcoin) : options.longs === Number ? new $util.LongBits(message.goldcoin.low >>> 0, message.goldcoin.high >>> 0).toNumber() : message.goldcoin;
            if (message.bankcoin != null && message.hasOwnProperty("bankcoin"))
                if (typeof message.bankcoin === "number")
                    object.bankcoin = options.longs === String ? String(message.bankcoin) : message.bankcoin;
                else
                    object.bankcoin = options.longs === String ? $util.Long.prototype.toString.call(message.bankcoin) : options.longs === Number ? new $util.LongBits(message.bankcoin.low >>> 0, message.bankcoin.high >>> 0).toNumber() : message.bankcoin;
            if (message.tmcoin != null && message.hasOwnProperty("tmcoin"))
                if (typeof message.tmcoin === "number")
                    object.tmcoin = options.longs === String ? String(message.tmcoin) : message.tmcoin;
                else
                    object.tmcoin = options.longs === String ? $util.Long.prototype.toString.call(message.tmcoin) : options.longs === Number ? new $util.LongBits(message.tmcoin.low >>> 0, message.tmcoin.high >>> 0).toNumber() : message.tmcoin;
            if (message.lotteryNums != null && message.hasOwnProperty("lotteryNums"))
                if (typeof message.lotteryNums === "number")
                    object.lotteryNums = options.longs === String ? String(message.lotteryNums) : message.lotteryNums;
                else
                    object.lotteryNums = options.longs === String ? $util.Long.prototype.toString.call(message.lotteryNums) : options.longs === Number ? new $util.LongBits(message.lotteryNums.low >>> 0, message.lotteryNums.high >>> 0).toNumber() : message.lotteryNums;
            return object;
        };

        /**
         * Converts this UserCoinInfo to JSON.
         * @function toJSON
         * @memberof messages.UserCoinInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserCoinInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserCoinInfo;
    })();

    messages.UserGameLevelInfo = (function() {

        /**
         * Properties of a UserGameLevelInfo.
         * @memberof messages
         * @interface IUserGameLevelInfo
         * @property {number|null} [gameId] UserGameLevelInfo gameId
         * @property {number|null} [gameExp] UserGameLevelInfo gameExp
         * @property {number|null} [gameLevel] UserGameLevelInfo gameLevel
         * @property {number|null} [winNums] UserGameLevelInfo winNums
         * @property {number|null} [loseNums] UserGameLevelInfo loseNums
         * @property {number|null} [heNums] UserGameLevelInfo heNums
         */

        /**
         * Constructs a new UserGameLevelInfo.
         * @memberof messages
         * @classdesc Represents a UserGameLevelInfo.
         * @implements IUserGameLevelInfo
         * @constructor
         * @param {messages.IUserGameLevelInfo=} [properties] Properties to set
         */
        function UserGameLevelInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserGameLevelInfo gameId.
         * @member {number} gameId
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.gameId = 0;

        /**
         * UserGameLevelInfo gameExp.
         * @member {number} gameExp
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.gameExp = 0;

        /**
         * UserGameLevelInfo gameLevel.
         * @member {number} gameLevel
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.gameLevel = 0;

        /**
         * UserGameLevelInfo winNums.
         * @member {number} winNums
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.winNums = 0;

        /**
         * UserGameLevelInfo loseNums.
         * @member {number} loseNums
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.loseNums = 0;

        /**
         * UserGameLevelInfo heNums.
         * @member {number} heNums
         * @memberof messages.UserGameLevelInfo
         * @instance
         */
        UserGameLevelInfo.prototype.heNums = 0;

        /**
         * Creates a new UserGameLevelInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {messages.IUserGameLevelInfo=} [properties] Properties to set
         * @returns {messages.UserGameLevelInfo} UserGameLevelInfo instance
         */
        UserGameLevelInfo.create = function create(properties) {
            return new UserGameLevelInfo(properties);
        };

        /**
         * Encodes the specified UserGameLevelInfo message. Does not implicitly {@link messages.UserGameLevelInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {messages.IUserGameLevelInfo} message UserGameLevelInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameLevelInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.gameExp != null && message.hasOwnProperty("gameExp"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameExp);
            if (message.gameLevel != null && message.hasOwnProperty("gameLevel"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gameLevel);
            if (message.winNums != null && message.hasOwnProperty("winNums"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.winNums);
            if (message.loseNums != null && message.hasOwnProperty("loseNums"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.loseNums);
            if (message.heNums != null && message.hasOwnProperty("heNums"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.heNums);
            return writer;
        };

        /**
         * Encodes the specified UserGameLevelInfo message, length delimited. Does not implicitly {@link messages.UserGameLevelInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {messages.IUserGameLevelInfo} message UserGameLevelInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameLevelInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserGameLevelInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserGameLevelInfo} UserGameLevelInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameLevelInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserGameLevelInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.gameExp = reader.int32();
                    break;
                case 4:
                    message.gameLevel = reader.int32();
                    break;
                case 5:
                    message.winNums = reader.int32();
                    break;
                case 6:
                    message.loseNums = reader.int32();
                    break;
                case 7:
                    message.heNums = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserGameLevelInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserGameLevelInfo} UserGameLevelInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameLevelInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserGameLevelInfo message.
         * @function verify
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserGameLevelInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.gameExp != null && message.hasOwnProperty("gameExp"))
                if (!$util.isInteger(message.gameExp))
                    return "gameExp: integer expected";
            if (message.gameLevel != null && message.hasOwnProperty("gameLevel"))
                if (!$util.isInteger(message.gameLevel))
                    return "gameLevel: integer expected";
            if (message.winNums != null && message.hasOwnProperty("winNums"))
                if (!$util.isInteger(message.winNums))
                    return "winNums: integer expected";
            if (message.loseNums != null && message.hasOwnProperty("loseNums"))
                if (!$util.isInteger(message.loseNums))
                    return "loseNums: integer expected";
            if (message.heNums != null && message.hasOwnProperty("heNums"))
                if (!$util.isInteger(message.heNums))
                    return "heNums: integer expected";
            return null;
        };

        /**
         * Creates a UserGameLevelInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserGameLevelInfo} UserGameLevelInfo
         */
        UserGameLevelInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserGameLevelInfo)
                return object;
            var message = new $root.messages.UserGameLevelInfo();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.gameExp != null)
                message.gameExp = object.gameExp | 0;
            if (object.gameLevel != null)
                message.gameLevel = object.gameLevel | 0;
            if (object.winNums != null)
                message.winNums = object.winNums | 0;
            if (object.loseNums != null)
                message.loseNums = object.loseNums | 0;
            if (object.heNums != null)
                message.heNums = object.heNums | 0;
            return message;
        };

        /**
         * Creates a plain object from a UserGameLevelInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserGameLevelInfo
         * @static
         * @param {messages.UserGameLevelInfo} message UserGameLevelInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserGameLevelInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.gameExp = 0;
                object.gameLevel = 0;
                object.winNums = 0;
                object.loseNums = 0;
                object.heNums = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.gameExp != null && message.hasOwnProperty("gameExp"))
                object.gameExp = message.gameExp;
            if (message.gameLevel != null && message.hasOwnProperty("gameLevel"))
                object.gameLevel = message.gameLevel;
            if (message.winNums != null && message.hasOwnProperty("winNums"))
                object.winNums = message.winNums;
            if (message.loseNums != null && message.hasOwnProperty("loseNums"))
                object.loseNums = message.loseNums;
            if (message.heNums != null && message.hasOwnProperty("heNums"))
                object.heNums = message.heNums;
            return object;
        };

        /**
         * Converts this UserGameLevelInfo to JSON.
         * @function toJSON
         * @memberof messages.UserGameLevelInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserGameLevelInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserGameLevelInfo;
    })();

    messages.UserGameSeatInfo = (function() {

        /**
         * Properties of a UserGameSeatInfo.
         * @memberof messages
         * @interface IUserGameSeatInfo
         * @property {number|null} [gameId] UserGameSeatInfo gameId
         * @property {number|null} [roomId] UserGameSeatInfo roomId
         * @property {number|null} [deskId] UserGameSeatInfo deskId
         * @property {number|null} [seatId] UserGameSeatInfo seatId
         */

        /**
         * Constructs a new UserGameSeatInfo.
         * @memberof messages
         * @classdesc Represents a UserGameSeatInfo.
         * @implements IUserGameSeatInfo
         * @constructor
         * @param {messages.IUserGameSeatInfo=} [properties] Properties to set
         */
        function UserGameSeatInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserGameSeatInfo gameId.
         * @member {number} gameId
         * @memberof messages.UserGameSeatInfo
         * @instance
         */
        UserGameSeatInfo.prototype.gameId = -1;

        /**
         * UserGameSeatInfo roomId.
         * @member {number} roomId
         * @memberof messages.UserGameSeatInfo
         * @instance
         */
        UserGameSeatInfo.prototype.roomId = -1;

        /**
         * UserGameSeatInfo deskId.
         * @member {number} deskId
         * @memberof messages.UserGameSeatInfo
         * @instance
         */
        UserGameSeatInfo.prototype.deskId = -1;

        /**
         * UserGameSeatInfo seatId.
         * @member {number} seatId
         * @memberof messages.UserGameSeatInfo
         * @instance
         */
        UserGameSeatInfo.prototype.seatId = -1;

        /**
         * Creates a new UserGameSeatInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {messages.IUserGameSeatInfo=} [properties] Properties to set
         * @returns {messages.UserGameSeatInfo} UserGameSeatInfo instance
         */
        UserGameSeatInfo.create = function create(properties) {
            return new UserGameSeatInfo(properties);
        };

        /**
         * Encodes the specified UserGameSeatInfo message. Does not implicitly {@link messages.UserGameSeatInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {messages.IUserGameSeatInfo} message UserGameSeatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameSeatInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.deskId);
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.seatId);
            return writer;
        };

        /**
         * Encodes the specified UserGameSeatInfo message, length delimited. Does not implicitly {@link messages.UserGameSeatInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {messages.IUserGameSeatInfo} message UserGameSeatInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameSeatInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserGameSeatInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserGameSeatInfo} UserGameSeatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameSeatInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserGameSeatInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.roomId = reader.int32();
                    break;
                case 5:
                    message.deskId = reader.int32();
                    break;
                case 6:
                    message.seatId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserGameSeatInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserGameSeatInfo} UserGameSeatInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameSeatInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserGameSeatInfo message.
         * @function verify
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserGameSeatInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                if (!$util.isInteger(message.deskId))
                    return "deskId: integer expected";
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                if (!$util.isInteger(message.seatId))
                    return "seatId: integer expected";
            return null;
        };

        /**
         * Creates a UserGameSeatInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserGameSeatInfo} UserGameSeatInfo
         */
        UserGameSeatInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserGameSeatInfo)
                return object;
            var message = new $root.messages.UserGameSeatInfo();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            if (object.deskId != null)
                message.deskId = object.deskId | 0;
            if (object.seatId != null)
                message.seatId = object.seatId | 0;
            return message;
        };

        /**
         * Creates a plain object from a UserGameSeatInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserGameSeatInfo
         * @static
         * @param {messages.UserGameSeatInfo} message UserGameSeatInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserGameSeatInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = -1;
                object.roomId = -1;
                object.deskId = -1;
                object.seatId = -1;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.deskId != null && message.hasOwnProperty("deskId"))
                object.deskId = message.deskId;
            if (message.seatId != null && message.hasOwnProperty("seatId"))
                object.seatId = message.seatId;
            return object;
        };

        /**
         * Converts this UserGameSeatInfo to JSON.
         * @function toJSON
         * @memberof messages.UserGameSeatInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserGameSeatInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserGameSeatInfo;
    })();

    messages.UserGameCountInfo = (function() {

        /**
         * Properties of a UserGameCountInfo.
         * @memberof messages
         * @interface IUserGameCountInfo
         * @property {number|null} [countCoin] UserGameCountInfo countCoin
         * @property {number|null} [countRounds] UserGameCountInfo countRounds
         */

        /**
         * Constructs a new UserGameCountInfo.
         * @memberof messages
         * @classdesc Represents a UserGameCountInfo.
         * @implements IUserGameCountInfo
         * @constructor
         * @param {messages.IUserGameCountInfo=} [properties] Properties to set
         */
        function UserGameCountInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * UserGameCountInfo countCoin.
         * @member {number} countCoin
         * @memberof messages.UserGameCountInfo
         * @instance
         */
        UserGameCountInfo.prototype.countCoin = 0;

        /**
         * UserGameCountInfo countRounds.
         * @member {number} countRounds
         * @memberof messages.UserGameCountInfo
         * @instance
         */
        UserGameCountInfo.prototype.countRounds = 0;

        /**
         * Creates a new UserGameCountInfo instance using the specified properties.
         * @function create
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {messages.IUserGameCountInfo=} [properties] Properties to set
         * @returns {messages.UserGameCountInfo} UserGameCountInfo instance
         */
        UserGameCountInfo.create = function create(properties) {
            return new UserGameCountInfo(properties);
        };

        /**
         * Encodes the specified UserGameCountInfo message. Does not implicitly {@link messages.UserGameCountInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {messages.IUserGameCountInfo} message UserGameCountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameCountInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.countCoin != null && message.hasOwnProperty("countCoin"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.countCoin);
            if (message.countRounds != null && message.hasOwnProperty("countRounds"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.countRounds);
            return writer;
        };

        /**
         * Encodes the specified UserGameCountInfo message, length delimited. Does not implicitly {@link messages.UserGameCountInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {messages.IUserGameCountInfo} message UserGameCountInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        UserGameCountInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a UserGameCountInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.UserGameCountInfo} UserGameCountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameCountInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.UserGameCountInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.countCoin = reader.int32();
                    break;
                case 3:
                    message.countRounds = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a UserGameCountInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.UserGameCountInfo} UserGameCountInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        UserGameCountInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a UserGameCountInfo message.
         * @function verify
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        UserGameCountInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.countCoin != null && message.hasOwnProperty("countCoin"))
                if (!$util.isInteger(message.countCoin))
                    return "countCoin: integer expected";
            if (message.countRounds != null && message.hasOwnProperty("countRounds"))
                if (!$util.isInteger(message.countRounds))
                    return "countRounds: integer expected";
            return null;
        };

        /**
         * Creates a UserGameCountInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.UserGameCountInfo} UserGameCountInfo
         */
        UserGameCountInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.UserGameCountInfo)
                return object;
            var message = new $root.messages.UserGameCountInfo();
            if (object.countCoin != null)
                message.countCoin = object.countCoin | 0;
            if (object.countRounds != null)
                message.countRounds = object.countRounds | 0;
            return message;
        };

        /**
         * Creates a plain object from a UserGameCountInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.UserGameCountInfo
         * @static
         * @param {messages.UserGameCountInfo} message UserGameCountInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        UserGameCountInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.countCoin = 0;
                object.countRounds = 0;
            }
            if (message.countCoin != null && message.hasOwnProperty("countCoin"))
                object.countCoin = message.countCoin;
            if (message.countRounds != null && message.hasOwnProperty("countRounds"))
                object.countRounds = message.countRounds;
            return object;
        };

        /**
         * Converts this UserGameCountInfo to JSON.
         * @function toJSON
         * @memberof messages.UserGameCountInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        UserGameCountInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return UserGameCountInfo;
    })();

    messages.ProUserSaltRequest = (function() {

        /**
         * Properties of a ProUserSaltRequest.
         * @memberof messages
         * @interface IProUserSaltRequest
         * @property {Uint8Array|null} [loginName] ProUserSaltRequest loginName
         */

        /**
         * Constructs a new ProUserSaltRequest.
         * @memberof messages
         * @classdesc Represents a ProUserSaltRequest.
         * @implements IProUserSaltRequest
         * @constructor
         * @param {messages.IProUserSaltRequest=} [properties] Properties to set
         */
        function ProUserSaltRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserSaltRequest loginName.
         * @member {Uint8Array} loginName
         * @memberof messages.ProUserSaltRequest
         * @instance
         */
        ProUserSaltRequest.prototype.loginName = $util.newBuffer([]);

        /**
         * Creates a new ProUserSaltRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {messages.IProUserSaltRequest=} [properties] Properties to set
         * @returns {messages.ProUserSaltRequest} ProUserSaltRequest instance
         */
        ProUserSaltRequest.create = function create(properties) {
            return new ProUserSaltRequest(properties);
        };

        /**
         * Encodes the specified ProUserSaltRequest message. Does not implicitly {@link messages.ProUserSaltRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {messages.IProUserSaltRequest} message ProUserSaltRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserSaltRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.loginName);
            return writer;
        };

        /**
         * Encodes the specified ProUserSaltRequest message, length delimited. Does not implicitly {@link messages.ProUserSaltRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {messages.IProUserSaltRequest} message ProUserSaltRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserSaltRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserSaltRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserSaltRequest} ProUserSaltRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserSaltRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserSaltRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.loginName = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserSaltRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserSaltRequest} ProUserSaltRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserSaltRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserSaltRequest message.
         * @function verify
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserSaltRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                if (!(message.loginName && typeof message.loginName.length === "number" || $util.isString(message.loginName)))
                    return "loginName: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserSaltRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserSaltRequest} ProUserSaltRequest
         */
        ProUserSaltRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserSaltRequest)
                return object;
            var message = new $root.messages.ProUserSaltRequest();
            if (object.loginName != null)
                if (typeof object.loginName === "string")
                    $util.base64.decode(object.loginName, message.loginName = $util.newBuffer($util.base64.length(object.loginName)), 0);
                else if (object.loginName.length)
                    message.loginName = object.loginName;
            return message;
        };

        /**
         * Creates a plain object from a ProUserSaltRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserSaltRequest
         * @static
         * @param {messages.ProUserSaltRequest} message ProUserSaltRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserSaltRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.loginName = options.bytes === String ? "" : [];
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                object.loginName = options.bytes === String ? $util.base64.encode(message.loginName, 0, message.loginName.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginName) : message.loginName;
            return object;
        };

        /**
         * Converts this ProUserSaltRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserSaltRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserSaltRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserSaltRequest.MSGID
         * @enum {string}
         * @property {number} ID=100 ID value
         */
        ProUserSaltRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[100] = "ID"] = 100;
            return values;
        })();

        return ProUserSaltRequest;
    })();

    messages.ProUserSaltResponse = (function() {

        /**
         * Properties of a ProUserSaltResponse.
         * @memberof messages
         * @interface IProUserSaltResponse
         * @property {Uint8Array|null} [salt] ProUserSaltResponse salt
         */

        /**
         * Constructs a new ProUserSaltResponse.
         * @memberof messages
         * @classdesc Represents a ProUserSaltResponse.
         * @implements IProUserSaltResponse
         * @constructor
         * @param {messages.IProUserSaltResponse=} [properties] Properties to set
         */
        function ProUserSaltResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserSaltResponse salt.
         * @member {Uint8Array} salt
         * @memberof messages.ProUserSaltResponse
         * @instance
         */
        ProUserSaltResponse.prototype.salt = $util.newBuffer([]);

        /**
         * Creates a new ProUserSaltResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {messages.IProUserSaltResponse=} [properties] Properties to set
         * @returns {messages.ProUserSaltResponse} ProUserSaltResponse instance
         */
        ProUserSaltResponse.create = function create(properties) {
            return new ProUserSaltResponse(properties);
        };

        /**
         * Encodes the specified ProUserSaltResponse message. Does not implicitly {@link messages.ProUserSaltResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {messages.IProUserSaltResponse} message ProUserSaltResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserSaltResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.salt != null && message.hasOwnProperty("salt"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.salt);
            return writer;
        };

        /**
         * Encodes the specified ProUserSaltResponse message, length delimited. Does not implicitly {@link messages.ProUserSaltResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {messages.IProUserSaltResponse} message ProUserSaltResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserSaltResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserSaltResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserSaltResponse} ProUserSaltResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserSaltResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserSaltResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.salt = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserSaltResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserSaltResponse} ProUserSaltResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserSaltResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserSaltResponse message.
         * @function verify
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserSaltResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.salt != null && message.hasOwnProperty("salt"))
                if (!(message.salt && typeof message.salt.length === "number" || $util.isString(message.salt)))
                    return "salt: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserSaltResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserSaltResponse} ProUserSaltResponse
         */
        ProUserSaltResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserSaltResponse)
                return object;
            var message = new $root.messages.ProUserSaltResponse();
            if (object.salt != null)
                if (typeof object.salt === "string")
                    $util.base64.decode(object.salt, message.salt = $util.newBuffer($util.base64.length(object.salt)), 0);
                else if (object.salt.length)
                    message.salt = object.salt;
            return message;
        };

        /**
         * Creates a plain object from a ProUserSaltResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserSaltResponse
         * @static
         * @param {messages.ProUserSaltResponse} message ProUserSaltResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserSaltResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.salt = options.bytes === String ? "" : [];
            if (message.salt != null && message.hasOwnProperty("salt"))
                object.salt = options.bytes === String ? $util.base64.encode(message.salt, 0, message.salt.length) : options.bytes === Array ? Array.prototype.slice.call(message.salt) : message.salt;
            return object;
        };

        /**
         * Converts this ProUserSaltResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserSaltResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserSaltResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserSaltResponse.MSGID
         * @enum {string}
         * @property {number} ID=101 ID value
         */
        ProUserSaltResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[101] = "ID"] = 101;
            return values;
        })();

        return ProUserSaltResponse;
    })();

    messages.ProUserLoginRequest = (function() {

        /**
         * Properties of a ProUserLoginRequest.
         * @memberof messages
         * @interface IProUserLoginRequest
         * @property {Uint8Array|null} [loginName] ProUserLoginRequest loginName
         * @property {Uint8Array|null} [loginPassword] ProUserLoginRequest loginPassword
         * @property {Uint8Array|null} [source] ProUserLoginRequest source
         * @property {number|null} [gameId] ProUserLoginRequest gameId
         * @property {messages.MarketType|null} [marketType] ProUserLoginRequest marketType
         * @property {Uint8Array|null} [uuid] ProUserLoginRequest uuid
         * @property {Uint8Array|null} [sourceIp] ProUserLoginRequest sourceIp
         */

        /**
         * Constructs a new ProUserLoginRequest.
         * @memberof messages
         * @classdesc Represents a ProUserLoginRequest.
         * @implements IProUserLoginRequest
         * @constructor
         * @param {messages.IProUserLoginRequest=} [properties] Properties to set
         */
        function ProUserLoginRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserLoginRequest loginName.
         * @member {Uint8Array} loginName
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.loginName = $util.newBuffer([]);

        /**
         * ProUserLoginRequest loginPassword.
         * @member {Uint8Array} loginPassword
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.loginPassword = $util.newBuffer([]);

        /**
         * ProUserLoginRequest source.
         * @member {Uint8Array} source
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.source = $util.newBuffer([]);

        /**
         * ProUserLoginRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.gameId = 3;

        /**
         * ProUserLoginRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.marketType = 100;

        /**
         * ProUserLoginRequest uuid.
         * @member {Uint8Array} uuid
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.uuid = $util.newBuffer([]);

        /**
         * ProUserLoginRequest sourceIp.
         * @member {Uint8Array} sourceIp
         * @memberof messages.ProUserLoginRequest
         * @instance
         */
        ProUserLoginRequest.prototype.sourceIp = $util.newBuffer([]);

        /**
         * Creates a new ProUserLoginRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {messages.IProUserLoginRequest=} [properties] Properties to set
         * @returns {messages.ProUserLoginRequest} ProUserLoginRequest instance
         */
        ProUserLoginRequest.create = function create(properties) {
            return new ProUserLoginRequest(properties);
        };

        /**
         * Encodes the specified ProUserLoginRequest message. Does not implicitly {@link messages.ProUserLoginRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {messages.IProUserLoginRequest} message ProUserLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.loginName);
            if (message.loginPassword != null && message.hasOwnProperty("loginPassword"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.loginPassword);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.source);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.marketType);
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.uuid);
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.sourceIp);
            return writer;
        };

        /**
         * Encodes the specified ProUserLoginRequest message, length delimited. Does not implicitly {@link messages.ProUserLoginRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {messages.IProUserLoginRequest} message ProUserLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserLoginRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserLoginRequest} ProUserLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserLoginRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.loginName = reader.bytes();
                    break;
                case 3:
                    message.loginPassword = reader.bytes();
                    break;
                case 4:
                    message.source = reader.bytes();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                case 6:
                    message.marketType = reader.int32();
                    break;
                case 7:
                    message.uuid = reader.bytes();
                    break;
                case 8:
                    message.sourceIp = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserLoginRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserLoginRequest} ProUserLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserLoginRequest message.
         * @function verify
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserLoginRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                if (!(message.loginName && typeof message.loginName.length === "number" || $util.isString(message.loginName)))
                    return "loginName: buffer expected";
            if (message.loginPassword != null && message.hasOwnProperty("loginPassword"))
                if (!(message.loginPassword && typeof message.loginPassword.length === "number" || $util.isString(message.loginPassword)))
                    return "loginPassword: buffer expected";
            if (message.source != null && message.hasOwnProperty("source"))
                if (!(message.source && typeof message.source.length === "number" || $util.isString(message.source)))
                    return "source: buffer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                if (!(message.uuid && typeof message.uuid.length === "number" || $util.isString(message.uuid)))
                    return "uuid: buffer expected";
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                if (!(message.sourceIp && typeof message.sourceIp.length === "number" || $util.isString(message.sourceIp)))
                    return "sourceIp: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserLoginRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserLoginRequest} ProUserLoginRequest
         */
        ProUserLoginRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserLoginRequest)
                return object;
            var message = new $root.messages.ProUserLoginRequest();
            if (object.loginName != null)
                if (typeof object.loginName === "string")
                    $util.base64.decode(object.loginName, message.loginName = $util.newBuffer($util.base64.length(object.loginName)), 0);
                else if (object.loginName.length)
                    message.loginName = object.loginName;
            if (object.loginPassword != null)
                if (typeof object.loginPassword === "string")
                    $util.base64.decode(object.loginPassword, message.loginPassword = $util.newBuffer($util.base64.length(object.loginPassword)), 0);
                else if (object.loginPassword.length)
                    message.loginPassword = object.loginPassword;
            if (object.source != null)
                if (typeof object.source === "string")
                    $util.base64.decode(object.source, message.source = $util.newBuffer($util.base64.length(object.source)), 0);
                else if (object.source.length)
                    message.source = object.source;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.uuid != null)
                if (typeof object.uuid === "string")
                    $util.base64.decode(object.uuid, message.uuid = $util.newBuffer($util.base64.length(object.uuid)), 0);
                else if (object.uuid.length)
                    message.uuid = object.uuid;
            if (object.sourceIp != null)
                if (typeof object.sourceIp === "string")
                    $util.base64.decode(object.sourceIp, message.sourceIp = $util.newBuffer($util.base64.length(object.sourceIp)), 0);
                else if (object.sourceIp.length)
                    message.sourceIp = object.sourceIp;
            return message;
        };

        /**
         * Creates a plain object from a ProUserLoginRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserLoginRequest
         * @static
         * @param {messages.ProUserLoginRequest} message ProUserLoginRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserLoginRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.loginName = options.bytes === String ? "" : [];
                object.loginPassword = options.bytes === String ? "" : [];
                object.source = options.bytes === String ? "" : [];
                object.gameId = 3;
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.uuid = options.bytes === String ? "" : [];
                object.sourceIp = options.bytes === String ? "" : [];
            }
            if (message.loginName != null && message.hasOwnProperty("loginName"))
                object.loginName = options.bytes === String ? $util.base64.encode(message.loginName, 0, message.loginName.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginName) : message.loginName;
            if (message.loginPassword != null && message.hasOwnProperty("loginPassword"))
                object.loginPassword = options.bytes === String ? $util.base64.encode(message.loginPassword, 0, message.loginPassword.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginPassword) : message.loginPassword;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.bytes === String ? $util.base64.encode(message.source, 0, message.source.length) : options.bytes === Array ? Array.prototype.slice.call(message.source) : message.source;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                object.uuid = options.bytes === String ? $util.base64.encode(message.uuid, 0, message.uuid.length) : options.bytes === Array ? Array.prototype.slice.call(message.uuid) : message.uuid;
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                object.sourceIp = options.bytes === String ? $util.base64.encode(message.sourceIp, 0, message.sourceIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.sourceIp) : message.sourceIp;
            return object;
        };

        /**
         * Converts this ProUserLoginRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserLoginRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserLoginRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserLoginRequest.MSGID
         * @enum {string}
         * @property {number} ID=102 ID value
         */
        ProUserLoginRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[102] = "ID"] = 102;
            return values;
        })();

        return ProUserLoginRequest;
    })();

    messages.ProLoginErrorResponse = (function() {

        /**
         * Properties of a ProLoginErrorResponse.
         * @memberof messages
         * @interface IProLoginErrorResponse
         * @property {messages.ProLoginErrorResponse.LoginErrorNo|null} [errorNo] ProLoginErrorResponse errorNo
         * @property {Uint8Array|null} [errorMsg] ProLoginErrorResponse errorMsg
         */

        /**
         * Constructs a new ProLoginErrorResponse.
         * @memberof messages
         * @classdesc Represents a ProLoginErrorResponse.
         * @implements IProLoginErrorResponse
         * @constructor
         * @param {messages.IProLoginErrorResponse=} [properties] Properties to set
         */
        function ProLoginErrorResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProLoginErrorResponse errorNo.
         * @member {messages.ProLoginErrorResponse.LoginErrorNo} errorNo
         * @memberof messages.ProLoginErrorResponse
         * @instance
         */
        ProLoginErrorResponse.prototype.errorNo = 1;

        /**
         * ProLoginErrorResponse errorMsg.
         * @member {Uint8Array} errorMsg
         * @memberof messages.ProLoginErrorResponse
         * @instance
         */
        ProLoginErrorResponse.prototype.errorMsg = $util.newBuffer([]);

        /**
         * Creates a new ProLoginErrorResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {messages.IProLoginErrorResponse=} [properties] Properties to set
         * @returns {messages.ProLoginErrorResponse} ProLoginErrorResponse instance
         */
        ProLoginErrorResponse.create = function create(properties) {
            return new ProLoginErrorResponse(properties);
        };

        /**
         * Encodes the specified ProLoginErrorResponse message. Does not implicitly {@link messages.ProLoginErrorResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {messages.IProLoginErrorResponse} message ProLoginErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoginErrorResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.errorNo);
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.errorMsg);
            return writer;
        };

        /**
         * Encodes the specified ProLoginErrorResponse message, length delimited. Does not implicitly {@link messages.ProLoginErrorResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {messages.IProLoginErrorResponse} message ProLoginErrorResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoginErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProLoginErrorResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProLoginErrorResponse} ProLoginErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoginErrorResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProLoginErrorResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    message.errorNo = reader.int32();
                    break;
                case 4:
                    message.errorMsg = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProLoginErrorResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProLoginErrorResponse} ProLoginErrorResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoginErrorResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProLoginErrorResponse message.
         * @function verify
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProLoginErrorResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                switch (message.errorNo) {
                default:
                    return "errorNo: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                    break;
                }
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                    return "errorMsg: buffer expected";
            return null;
        };

        /**
         * Creates a ProLoginErrorResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProLoginErrorResponse} ProLoginErrorResponse
         */
        ProLoginErrorResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProLoginErrorResponse)
                return object;
            var message = new $root.messages.ProLoginErrorResponse();
            switch (object.errorNo) {
            case "ERR_UNKOWN":
            case 1:
                message.errorNo = 1;
                break;
            case "ERR_USER_NOTFOUND":
            case 2:
                message.errorNo = 2;
                break;
            case "ERR_USER_PASSWORD":
            case 3:
                message.errorNo = 3;
                break;
            case "ERR_USER_UNAVAILABLE":
            case 4:
                message.errorNo = 4;
                break;
            case "ERR_LOGIN_TOKEN":
            case 5:
                message.errorNo = 5;
                break;
            case "ERR_ANONYMOUS_REG":
            case 6:
                message.errorNo = 6;
                break;
            }
            if (object.errorMsg != null)
                if (typeof object.errorMsg === "string")
                    $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
                else if (object.errorMsg.length)
                    message.errorMsg = object.errorMsg;
            return message;
        };

        /**
         * Creates a plain object from a ProLoginErrorResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProLoginErrorResponse
         * @static
         * @param {messages.ProLoginErrorResponse} message ProLoginErrorResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProLoginErrorResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = options.enums === String ? "ERR_UNKOWN" : 1;
                object.errorMsg = options.bytes === String ? "" : [];
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = options.enums === String ? $root.messages.ProLoginErrorResponse.LoginErrorNo[message.errorNo] : message.errorNo;
            if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
                object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
            return object;
        };

        /**
         * Converts this ProLoginErrorResponse to JSON.
         * @function toJSON
         * @memberof messages.ProLoginErrorResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProLoginErrorResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProLoginErrorResponse.MSGID
         * @enum {string}
         * @property {number} ID=103 ID value
         */
        ProLoginErrorResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[103] = "ID"] = 103;
            return values;
        })();

        /**
         * LoginErrorNo enum.
         * @name messages.ProLoginErrorResponse.LoginErrorNo
         * @enum {string}
         * @property {number} ERR_UNKOWN=1 ERR_UNKOWN value
         * @property {number} ERR_USER_NOTFOUND=2 ERR_USER_NOTFOUND value
         * @property {number} ERR_USER_PASSWORD=3 ERR_USER_PASSWORD value
         * @property {number} ERR_USER_UNAVAILABLE=4 ERR_USER_UNAVAILABLE value
         * @property {number} ERR_LOGIN_TOKEN=5 ERR_LOGIN_TOKEN value
         * @property {number} ERR_ANONYMOUS_REG=6 ERR_ANONYMOUS_REG value
         */
        ProLoginErrorResponse.LoginErrorNo = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "ERR_UNKOWN"] = 1;
            values[valuesById[2] = "ERR_USER_NOTFOUND"] = 2;
            values[valuesById[3] = "ERR_USER_PASSWORD"] = 3;
            values[valuesById[4] = "ERR_USER_UNAVAILABLE"] = 4;
            values[valuesById[5] = "ERR_LOGIN_TOKEN"] = 5;
            values[valuesById[6] = "ERR_ANONYMOUS_REG"] = 6;
            return values;
        })();

        return ProLoginErrorResponse;
    })();

    messages.ProLoginSuccessResponse = (function() {

        /**
         * Properties of a ProLoginSuccessResponse.
         * @memberof messages
         * @interface IProLoginSuccessResponse
         * @property {messages.IUser|null} [user] ProLoginSuccessResponse user
         * @property {number|null} [status] ProLoginSuccessResponse status
         */

        /**
         * Constructs a new ProLoginSuccessResponse.
         * @memberof messages
         * @classdesc Represents a ProLoginSuccessResponse.
         * @implements IProLoginSuccessResponse
         * @constructor
         * @param {messages.IProLoginSuccessResponse=} [properties] Properties to set
         */
        function ProLoginSuccessResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProLoginSuccessResponse user.
         * @member {messages.IUser|null|undefined} user
         * @memberof messages.ProLoginSuccessResponse
         * @instance
         */
        ProLoginSuccessResponse.prototype.user = null;

        /**
         * ProLoginSuccessResponse status.
         * @member {number} status
         * @memberof messages.ProLoginSuccessResponse
         * @instance
         */
        ProLoginSuccessResponse.prototype.status = 0;

        /**
         * Creates a new ProLoginSuccessResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {messages.IProLoginSuccessResponse=} [properties] Properties to set
         * @returns {messages.ProLoginSuccessResponse} ProLoginSuccessResponse instance
         */
        ProLoginSuccessResponse.create = function create(properties) {
            return new ProLoginSuccessResponse(properties);
        };

        /**
         * Encodes the specified ProLoginSuccessResponse message. Does not implicitly {@link messages.ProLoginSuccessResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {messages.IProLoginSuccessResponse} message ProLoginSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoginSuccessResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.user != null && message.hasOwnProperty("user"))
                $root.messages.User.encode(message.user, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.status != null && message.hasOwnProperty("status"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.status);
            return writer;
        };

        /**
         * Encodes the specified ProLoginSuccessResponse message, length delimited. Does not implicitly {@link messages.ProLoginSuccessResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {messages.IProLoginSuccessResponse} message ProLoginSuccessResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoginSuccessResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProLoginSuccessResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProLoginSuccessResponse} ProLoginSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoginSuccessResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProLoginSuccessResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.user = $root.messages.User.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.status = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProLoginSuccessResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProLoginSuccessResponse} ProLoginSuccessResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoginSuccessResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProLoginSuccessResponse message.
         * @function verify
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProLoginSuccessResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.user != null && message.hasOwnProperty("user")) {
                var error = $root.messages.User.verify(message.user);
                if (error)
                    return "user." + error;
            }
            if (message.status != null && message.hasOwnProperty("status"))
                if (!$util.isInteger(message.status))
                    return "status: integer expected";
            return null;
        };

        /**
         * Creates a ProLoginSuccessResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProLoginSuccessResponse} ProLoginSuccessResponse
         */
        ProLoginSuccessResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProLoginSuccessResponse)
                return object;
            var message = new $root.messages.ProLoginSuccessResponse();
            if (object.user != null) {
                if (typeof object.user !== "object")
                    throw TypeError(".messages.ProLoginSuccessResponse.user: object expected");
                message.user = $root.messages.User.fromObject(object.user);
            }
            if (object.status != null)
                message.status = object.status | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProLoginSuccessResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProLoginSuccessResponse
         * @static
         * @param {messages.ProLoginSuccessResponse} message ProLoginSuccessResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProLoginSuccessResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.user = null;
                object.status = 0;
            }
            if (message.user != null && message.hasOwnProperty("user"))
                object.user = $root.messages.User.toObject(message.user, options);
            if (message.status != null && message.hasOwnProperty("status"))
                object.status = message.status;
            return object;
        };

        /**
         * Converts this ProLoginSuccessResponse to JSON.
         * @function toJSON
         * @memberof messages.ProLoginSuccessResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProLoginSuccessResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProLoginSuccessResponse.MSGID
         * @enum {string}
         * @property {number} ID=104 ID value
         */
        ProLoginSuccessResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[104] = "ID"] = 104;
            return values;
        })();

        return ProLoginSuccessResponse;
    })();

    messages.ProUserObtainLoginTokenRequest = (function() {

        /**
         * Properties of a ProUserObtainLoginTokenRequest.
         * @memberof messages
         * @interface IProUserObtainLoginTokenRequest
         */

        /**
         * Constructs a new ProUserObtainLoginTokenRequest.
         * @memberof messages
         * @classdesc Represents a ProUserObtainLoginTokenRequest.
         * @implements IProUserObtainLoginTokenRequest
         * @constructor
         * @param {messages.IProUserObtainLoginTokenRequest=} [properties] Properties to set
         */
        function ProUserObtainLoginTokenRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Creates a new ProUserObtainLoginTokenRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {messages.IProUserObtainLoginTokenRequest=} [properties] Properties to set
         * @returns {messages.ProUserObtainLoginTokenRequest} ProUserObtainLoginTokenRequest instance
         */
        ProUserObtainLoginTokenRequest.create = function create(properties) {
            return new ProUserObtainLoginTokenRequest(properties);
        };

        /**
         * Encodes the specified ProUserObtainLoginTokenRequest message. Does not implicitly {@link messages.ProUserObtainLoginTokenRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {messages.IProUserObtainLoginTokenRequest} message ProUserObtainLoginTokenRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserObtainLoginTokenRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            return writer;
        };

        /**
         * Encodes the specified ProUserObtainLoginTokenRequest message, length delimited. Does not implicitly {@link messages.ProUserObtainLoginTokenRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {messages.IProUserObtainLoginTokenRequest} message ProUserObtainLoginTokenRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserObtainLoginTokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserObtainLoginTokenRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserObtainLoginTokenRequest} ProUserObtainLoginTokenRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserObtainLoginTokenRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserObtainLoginTokenRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserObtainLoginTokenRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserObtainLoginTokenRequest} ProUserObtainLoginTokenRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserObtainLoginTokenRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserObtainLoginTokenRequest message.
         * @function verify
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserObtainLoginTokenRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            return null;
        };

        /**
         * Creates a ProUserObtainLoginTokenRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserObtainLoginTokenRequest} ProUserObtainLoginTokenRequest
         */
        ProUserObtainLoginTokenRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserObtainLoginTokenRequest)
                return object;
            return new $root.messages.ProUserObtainLoginTokenRequest();
        };

        /**
         * Creates a plain object from a ProUserObtainLoginTokenRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @static
         * @param {messages.ProUserObtainLoginTokenRequest} message ProUserObtainLoginTokenRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserObtainLoginTokenRequest.toObject = function toObject() {
            return {};
        };

        /**
         * Converts this ProUserObtainLoginTokenRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserObtainLoginTokenRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserObtainLoginTokenRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserObtainLoginTokenRequest.MSGID
         * @enum {string}
         * @property {number} ID=105 ID value
         */
        ProUserObtainLoginTokenRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[105] = "ID"] = 105;
            return values;
        })();

        return ProUserObtainLoginTokenRequest;
    })();

    messages.ProUserObtainLoginTokenResponse = (function() {

        /**
         * Properties of a ProUserObtainLoginTokenResponse.
         * @memberof messages
         * @interface IProUserObtainLoginTokenResponse
         * @property {Uint8Array|null} [loginToken] ProUserObtainLoginTokenResponse loginToken
         * @property {Uint8Array|null} [source] ProUserObtainLoginTokenResponse source
         */

        /**
         * Constructs a new ProUserObtainLoginTokenResponse.
         * @memberof messages
         * @classdesc Represents a ProUserObtainLoginTokenResponse.
         * @implements IProUserObtainLoginTokenResponse
         * @constructor
         * @param {messages.IProUserObtainLoginTokenResponse=} [properties] Properties to set
         */
        function ProUserObtainLoginTokenResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserObtainLoginTokenResponse loginToken.
         * @member {Uint8Array} loginToken
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @instance
         */
        ProUserObtainLoginTokenResponse.prototype.loginToken = $util.newBuffer([]);

        /**
         * ProUserObtainLoginTokenResponse source.
         * @member {Uint8Array} source
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @instance
         */
        ProUserObtainLoginTokenResponse.prototype.source = $util.newBuffer([]);

        /**
         * Creates a new ProUserObtainLoginTokenResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {messages.IProUserObtainLoginTokenResponse=} [properties] Properties to set
         * @returns {messages.ProUserObtainLoginTokenResponse} ProUserObtainLoginTokenResponse instance
         */
        ProUserObtainLoginTokenResponse.create = function create(properties) {
            return new ProUserObtainLoginTokenResponse(properties);
        };

        /**
         * Encodes the specified ProUserObtainLoginTokenResponse message. Does not implicitly {@link messages.ProUserObtainLoginTokenResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {messages.IProUserObtainLoginTokenResponse} message ProUserObtainLoginTokenResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserObtainLoginTokenResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.loginToken);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.source);
            return writer;
        };

        /**
         * Encodes the specified ProUserObtainLoginTokenResponse message, length delimited. Does not implicitly {@link messages.ProUserObtainLoginTokenResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {messages.IProUserObtainLoginTokenResponse} message ProUserObtainLoginTokenResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserObtainLoginTokenResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserObtainLoginTokenResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserObtainLoginTokenResponse} ProUserObtainLoginTokenResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserObtainLoginTokenResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserObtainLoginTokenResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.loginToken = reader.bytes();
                    break;
                case 3:
                    message.source = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserObtainLoginTokenResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserObtainLoginTokenResponse} ProUserObtainLoginTokenResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserObtainLoginTokenResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserObtainLoginTokenResponse message.
         * @function verify
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserObtainLoginTokenResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                if (!(message.loginToken && typeof message.loginToken.length === "number" || $util.isString(message.loginToken)))
                    return "loginToken: buffer expected";
            if (message.source != null && message.hasOwnProperty("source"))
                if (!(message.source && typeof message.source.length === "number" || $util.isString(message.source)))
                    return "source: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserObtainLoginTokenResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserObtainLoginTokenResponse} ProUserObtainLoginTokenResponse
         */
        ProUserObtainLoginTokenResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserObtainLoginTokenResponse)
                return object;
            var message = new $root.messages.ProUserObtainLoginTokenResponse();
            if (object.loginToken != null)
                if (typeof object.loginToken === "string")
                    $util.base64.decode(object.loginToken, message.loginToken = $util.newBuffer($util.base64.length(object.loginToken)), 0);
                else if (object.loginToken.length)
                    message.loginToken = object.loginToken;
            if (object.source != null)
                if (typeof object.source === "string")
                    $util.base64.decode(object.source, message.source = $util.newBuffer($util.base64.length(object.source)), 0);
                else if (object.source.length)
                    message.source = object.source;
            return message;
        };

        /**
         * Creates a plain object from a ProUserObtainLoginTokenResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @static
         * @param {messages.ProUserObtainLoginTokenResponse} message ProUserObtainLoginTokenResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserObtainLoginTokenResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.loginToken = options.bytes === String ? "" : [];
                object.source = options.bytes === String ? "" : [];
            }
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                object.loginToken = options.bytes === String ? $util.base64.encode(message.loginToken, 0, message.loginToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginToken) : message.loginToken;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.bytes === String ? $util.base64.encode(message.source, 0, message.source.length) : options.bytes === Array ? Array.prototype.slice.call(message.source) : message.source;
            return object;
        };

        /**
         * Converts this ProUserObtainLoginTokenResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserObtainLoginTokenResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserObtainLoginTokenResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserObtainLoginTokenResponse.MSGID
         * @enum {string}
         * @property {number} ID=106 ID value
         */
        ProUserObtainLoginTokenResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[106] = "ID"] = 106;
            return values;
        })();

        return ProUserObtainLoginTokenResponse;
    })();

    messages.ProUserTokenLoginRequest = (function() {

        /**
         * Properties of a ProUserTokenLoginRequest.
         * @memberof messages
         * @interface IProUserTokenLoginRequest
         * @property {number|null} [userId] ProUserTokenLoginRequest userId
         * @property {Uint8Array|null} [loginToken] ProUserTokenLoginRequest loginToken
         * @property {Uint8Array|null} [sign] ProUserTokenLoginRequest sign
         * @property {number|null} [gameId] ProUserTokenLoginRequest gameId
         */

        /**
         * Constructs a new ProUserTokenLoginRequest.
         * @memberof messages
         * @classdesc Represents a ProUserTokenLoginRequest.
         * @implements IProUserTokenLoginRequest
         * @constructor
         * @param {messages.IProUserTokenLoginRequest=} [properties] Properties to set
         */
        function ProUserTokenLoginRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserTokenLoginRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserTokenLoginRequest
         * @instance
         */
        ProUserTokenLoginRequest.prototype.userId = 0;

        /**
         * ProUserTokenLoginRequest loginToken.
         * @member {Uint8Array} loginToken
         * @memberof messages.ProUserTokenLoginRequest
         * @instance
         */
        ProUserTokenLoginRequest.prototype.loginToken = $util.newBuffer([]);

        /**
         * ProUserTokenLoginRequest sign.
         * @member {Uint8Array} sign
         * @memberof messages.ProUserTokenLoginRequest
         * @instance
         */
        ProUserTokenLoginRequest.prototype.sign = $util.newBuffer([]);

        /**
         * ProUserTokenLoginRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserTokenLoginRequest
         * @instance
         */
        ProUserTokenLoginRequest.prototype.gameId = 3;

        /**
         * Creates a new ProUserTokenLoginRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {messages.IProUserTokenLoginRequest=} [properties] Properties to set
         * @returns {messages.ProUserTokenLoginRequest} ProUserTokenLoginRequest instance
         */
        ProUserTokenLoginRequest.create = function create(properties) {
            return new ProUserTokenLoginRequest(properties);
        };

        /**
         * Encodes the specified ProUserTokenLoginRequest message. Does not implicitly {@link messages.ProUserTokenLoginRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {messages.IProUserTokenLoginRequest} message ProUserTokenLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTokenLoginRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.loginToken);
            if (message.sign != null && message.hasOwnProperty("sign"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.sign);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUserTokenLoginRequest message, length delimited. Does not implicitly {@link messages.ProUserTokenLoginRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {messages.IProUserTokenLoginRequest} message ProUserTokenLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTokenLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserTokenLoginRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserTokenLoginRequest} ProUserTokenLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTokenLoginRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserTokenLoginRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.loginToken = reader.bytes();
                    break;
                case 4:
                    message.sign = reader.bytes();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserTokenLoginRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserTokenLoginRequest} ProUserTokenLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTokenLoginRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserTokenLoginRequest message.
         * @function verify
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserTokenLoginRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                if (!(message.loginToken && typeof message.loginToken.length === "number" || $util.isString(message.loginToken)))
                    return "loginToken: buffer expected";
            if (message.sign != null && message.hasOwnProperty("sign"))
                if (!(message.sign && typeof message.sign.length === "number" || $util.isString(message.sign)))
                    return "sign: buffer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserTokenLoginRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserTokenLoginRequest} ProUserTokenLoginRequest
         */
        ProUserTokenLoginRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserTokenLoginRequest)
                return object;
            var message = new $root.messages.ProUserTokenLoginRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.loginToken != null)
                if (typeof object.loginToken === "string")
                    $util.base64.decode(object.loginToken, message.loginToken = $util.newBuffer($util.base64.length(object.loginToken)), 0);
                else if (object.loginToken.length)
                    message.loginToken = object.loginToken;
            if (object.sign != null)
                if (typeof object.sign === "string")
                    $util.base64.decode(object.sign, message.sign = $util.newBuffer($util.base64.length(object.sign)), 0);
                else if (object.sign.length)
                    message.sign = object.sign;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserTokenLoginRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserTokenLoginRequest
         * @static
         * @param {messages.ProUserTokenLoginRequest} message ProUserTokenLoginRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserTokenLoginRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.loginToken = options.bytes === String ? "" : [];
                object.sign = options.bytes === String ? "" : [];
                object.gameId = 3;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.loginToken != null && message.hasOwnProperty("loginToken"))
                object.loginToken = options.bytes === String ? $util.base64.encode(message.loginToken, 0, message.loginToken.length) : options.bytes === Array ? Array.prototype.slice.call(message.loginToken) : message.loginToken;
            if (message.sign != null && message.hasOwnProperty("sign"))
                object.sign = options.bytes === String ? $util.base64.encode(message.sign, 0, message.sign.length) : options.bytes === Array ? Array.prototype.slice.call(message.sign) : message.sign;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUserTokenLoginRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserTokenLoginRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserTokenLoginRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserTokenLoginRequest.MSGID
         * @enum {string}
         * @property {number} ID=107 ID value
         */
        ProUserTokenLoginRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[107] = "ID"] = 107;
            return values;
        })();

        return ProUserTokenLoginRequest;
    })();

    messages.ProUserAnonymousLoginRequest = (function() {

        /**
         * Properties of a ProUserAnonymousLoginRequest.
         * @memberof messages
         * @interface IProUserAnonymousLoginRequest
         * @property {Uint8Array|null} [uuid] ProUserAnonymousLoginRequest uuid
         * @property {messages.MarketType|null} [marketType] ProUserAnonymousLoginRequest marketType
         * @property {Uint8Array|null} [source] ProUserAnonymousLoginRequest source
         * @property {number|null} [gameId] ProUserAnonymousLoginRequest gameId
         * @property {Uint8Array|null} [sourceIp] ProUserAnonymousLoginRequest sourceIp
         */

        /**
         * Constructs a new ProUserAnonymousLoginRequest.
         * @memberof messages
         * @classdesc Represents a ProUserAnonymousLoginRequest.
         * @implements IProUserAnonymousLoginRequest
         * @constructor
         * @param {messages.IProUserAnonymousLoginRequest=} [properties] Properties to set
         */
        function ProUserAnonymousLoginRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserAnonymousLoginRequest uuid.
         * @member {Uint8Array} uuid
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         */
        ProUserAnonymousLoginRequest.prototype.uuid = $util.newBuffer([]);

        /**
         * ProUserAnonymousLoginRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         */
        ProUserAnonymousLoginRequest.prototype.marketType = 100;

        /**
         * ProUserAnonymousLoginRequest source.
         * @member {Uint8Array} source
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         */
        ProUserAnonymousLoginRequest.prototype.source = $util.newBuffer([]);

        /**
         * ProUserAnonymousLoginRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         */
        ProUserAnonymousLoginRequest.prototype.gameId = 3;

        /**
         * ProUserAnonymousLoginRequest sourceIp.
         * @member {Uint8Array} sourceIp
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         */
        ProUserAnonymousLoginRequest.prototype.sourceIp = $util.newBuffer([]);

        /**
         * Creates a new ProUserAnonymousLoginRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {messages.IProUserAnonymousLoginRequest=} [properties] Properties to set
         * @returns {messages.ProUserAnonymousLoginRequest} ProUserAnonymousLoginRequest instance
         */
        ProUserAnonymousLoginRequest.create = function create(properties) {
            return new ProUserAnonymousLoginRequest(properties);
        };

        /**
         * Encodes the specified ProUserAnonymousLoginRequest message. Does not implicitly {@link messages.ProUserAnonymousLoginRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {messages.IProUserAnonymousLoginRequest} message ProUserAnonymousLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserAnonymousLoginRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.uuid);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.marketType);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.source);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.sourceIp);
            return writer;
        };

        /**
         * Encodes the specified ProUserAnonymousLoginRequest message, length delimited. Does not implicitly {@link messages.ProUserAnonymousLoginRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {messages.IProUserAnonymousLoginRequest} message ProUserAnonymousLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserAnonymousLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserAnonymousLoginRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserAnonymousLoginRequest} ProUserAnonymousLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserAnonymousLoginRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserAnonymousLoginRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.uuid = reader.bytes();
                    break;
                case 3:
                    message.marketType = reader.int32();
                    break;
                case 4:
                    message.source = reader.bytes();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                case 6:
                    message.sourceIp = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserAnonymousLoginRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserAnonymousLoginRequest} ProUserAnonymousLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserAnonymousLoginRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserAnonymousLoginRequest message.
         * @function verify
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserAnonymousLoginRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                if (!(message.uuid && typeof message.uuid.length === "number" || $util.isString(message.uuid)))
                    return "uuid: buffer expected";
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.source != null && message.hasOwnProperty("source"))
                if (!(message.source && typeof message.source.length === "number" || $util.isString(message.source)))
                    return "source: buffer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                if (!(message.sourceIp && typeof message.sourceIp.length === "number" || $util.isString(message.sourceIp)))
                    return "sourceIp: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserAnonymousLoginRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserAnonymousLoginRequest} ProUserAnonymousLoginRequest
         */
        ProUserAnonymousLoginRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserAnonymousLoginRequest)
                return object;
            var message = new $root.messages.ProUserAnonymousLoginRequest();
            if (object.uuid != null)
                if (typeof object.uuid === "string")
                    $util.base64.decode(object.uuid, message.uuid = $util.newBuffer($util.base64.length(object.uuid)), 0);
                else if (object.uuid.length)
                    message.uuid = object.uuid;
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.source != null)
                if (typeof object.source === "string")
                    $util.base64.decode(object.source, message.source = $util.newBuffer($util.base64.length(object.source)), 0);
                else if (object.source.length)
                    message.source = object.source;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.sourceIp != null)
                if (typeof object.sourceIp === "string")
                    $util.base64.decode(object.sourceIp, message.sourceIp = $util.newBuffer($util.base64.length(object.sourceIp)), 0);
                else if (object.sourceIp.length)
                    message.sourceIp = object.sourceIp;
            return message;
        };

        /**
         * Creates a plain object from a ProUserAnonymousLoginRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserAnonymousLoginRequest
         * @static
         * @param {messages.ProUserAnonymousLoginRequest} message ProUserAnonymousLoginRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserAnonymousLoginRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uuid = options.bytes === String ? "" : [];
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.source = options.bytes === String ? "" : [];
                object.gameId = 3;
                object.sourceIp = options.bytes === String ? "" : [];
            }
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                object.uuid = options.bytes === String ? $util.base64.encode(message.uuid, 0, message.uuid.length) : options.bytes === Array ? Array.prototype.slice.call(message.uuid) : message.uuid;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.bytes === String ? $util.base64.encode(message.source, 0, message.source.length) : options.bytes === Array ? Array.prototype.slice.call(message.source) : message.source;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                object.sourceIp = options.bytes === String ? $util.base64.encode(message.sourceIp, 0, message.sourceIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.sourceIp) : message.sourceIp;
            return object;
        };

        /**
         * Converts this ProUserAnonymousLoginRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserAnonymousLoginRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserAnonymousLoginRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserAnonymousLoginRequest.MSGID
         * @enum {string}
         * @property {number} ID=108 ID value
         */
        ProUserAnonymousLoginRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[108] = "ID"] = 108;
            return values;
        })();

        return ProUserAnonymousLoginRequest;
    })();

    messages.ProUserThirdpartyLoginRequest = (function() {

        /**
         * Properties of a ProUserThirdpartyLoginRequest.
         * @memberof messages
         * @interface IProUserThirdpartyLoginRequest
         * @property {Uint8Array|null} [uuid] ProUserThirdpartyLoginRequest uuid
         * @property {messages.MarketType|null} [marketType] ProUserThirdpartyLoginRequest marketType
         * @property {Uint8Array|null} [source] ProUserThirdpartyLoginRequest source
         * @property {number|null} [gameId] ProUserThirdpartyLoginRequest gameId
         * @property {Uint8Array|null} [sourceIp] ProUserThirdpartyLoginRequest sourceIp
         * @property {number|null} [gender] ProUserThirdpartyLoginRequest gender
         * @property {Uint8Array|null} [thirdpartyNickname] ProUserThirdpartyLoginRequest thirdpartyNickname
         * @property {Uint8Array|null} [thirdpartyAvatar] ProUserThirdpartyLoginRequest thirdpartyAvatar
         */

        /**
         * Constructs a new ProUserThirdpartyLoginRequest.
         * @memberof messages
         * @classdesc Represents a ProUserThirdpartyLoginRequest.
         * @implements IProUserThirdpartyLoginRequest
         * @constructor
         * @param {messages.IProUserThirdpartyLoginRequest=} [properties] Properties to set
         */
        function ProUserThirdpartyLoginRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserThirdpartyLoginRequest uuid.
         * @member {Uint8Array} uuid
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.uuid = $util.newBuffer([]);

        /**
         * ProUserThirdpartyLoginRequest marketType.
         * @member {messages.MarketType} marketType
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.marketType = 100;

        /**
         * ProUserThirdpartyLoginRequest source.
         * @member {Uint8Array} source
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.source = $util.newBuffer([]);

        /**
         * ProUserThirdpartyLoginRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.gameId = 3;

        /**
         * ProUserThirdpartyLoginRequest sourceIp.
         * @member {Uint8Array} sourceIp
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.sourceIp = $util.newBuffer([]);

        /**
         * ProUserThirdpartyLoginRequest gender.
         * @member {number} gender
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.gender = 0;

        /**
         * ProUserThirdpartyLoginRequest thirdpartyNickname.
         * @member {Uint8Array} thirdpartyNickname
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.thirdpartyNickname = $util.newBuffer([]);

        /**
         * ProUserThirdpartyLoginRequest thirdpartyAvatar.
         * @member {Uint8Array} thirdpartyAvatar
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         */
        ProUserThirdpartyLoginRequest.prototype.thirdpartyAvatar = $util.newBuffer([]);

        /**
         * Creates a new ProUserThirdpartyLoginRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {messages.IProUserThirdpartyLoginRequest=} [properties] Properties to set
         * @returns {messages.ProUserThirdpartyLoginRequest} ProUserThirdpartyLoginRequest instance
         */
        ProUserThirdpartyLoginRequest.create = function create(properties) {
            return new ProUserThirdpartyLoginRequest(properties);
        };

        /**
         * Encodes the specified ProUserThirdpartyLoginRequest message. Does not implicitly {@link messages.ProUserThirdpartyLoginRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {messages.IProUserThirdpartyLoginRequest} message ProUserThirdpartyLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserThirdpartyLoginRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.uuid);
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.marketType);
            if (message.source != null && message.hasOwnProperty("source"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.source);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.sourceIp);
            if (message.gender != null && message.hasOwnProperty("gender"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.gender);
            if (message.thirdpartyNickname != null && message.hasOwnProperty("thirdpartyNickname"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.thirdpartyNickname);
            if (message.thirdpartyAvatar != null && message.hasOwnProperty("thirdpartyAvatar"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.thirdpartyAvatar);
            return writer;
        };

        /**
         * Encodes the specified ProUserThirdpartyLoginRequest message, length delimited. Does not implicitly {@link messages.ProUserThirdpartyLoginRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {messages.IProUserThirdpartyLoginRequest} message ProUserThirdpartyLoginRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserThirdpartyLoginRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserThirdpartyLoginRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserThirdpartyLoginRequest} ProUserThirdpartyLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserThirdpartyLoginRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserThirdpartyLoginRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.uuid = reader.bytes();
                    break;
                case 3:
                    message.marketType = reader.int32();
                    break;
                case 4:
                    message.source = reader.bytes();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                case 6:
                    message.sourceIp = reader.bytes();
                    break;
                case 7:
                    message.gender = reader.int32();
                    break;
                case 8:
                    message.thirdpartyNickname = reader.bytes();
                    break;
                case 9:
                    message.thirdpartyAvatar = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserThirdpartyLoginRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserThirdpartyLoginRequest} ProUserThirdpartyLoginRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserThirdpartyLoginRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserThirdpartyLoginRequest message.
         * @function verify
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserThirdpartyLoginRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                if (!(message.uuid && typeof message.uuid.length === "number" || $util.isString(message.uuid)))
                    return "uuid: buffer expected";
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                switch (message.marketType) {
                default:
                    return "marketType: enum value expected";
                case 100:
                case 200:
                case 300:
                case 301:
                case 302:
                case 303:
                case 304:
                case 400:
                case 500:
                case 600:
                case 700:
                case 9900:
                    break;
                }
            if (message.source != null && message.hasOwnProperty("source"))
                if (!(message.source && typeof message.source.length === "number" || $util.isString(message.source)))
                    return "source: buffer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                if (!(message.sourceIp && typeof message.sourceIp.length === "number" || $util.isString(message.sourceIp)))
                    return "sourceIp: buffer expected";
            if (message.gender != null && message.hasOwnProperty("gender"))
                if (!$util.isInteger(message.gender))
                    return "gender: integer expected";
            if (message.thirdpartyNickname != null && message.hasOwnProperty("thirdpartyNickname"))
                if (!(message.thirdpartyNickname && typeof message.thirdpartyNickname.length === "number" || $util.isString(message.thirdpartyNickname)))
                    return "thirdpartyNickname: buffer expected";
            if (message.thirdpartyAvatar != null && message.hasOwnProperty("thirdpartyAvatar"))
                if (!(message.thirdpartyAvatar && typeof message.thirdpartyAvatar.length === "number" || $util.isString(message.thirdpartyAvatar)))
                    return "thirdpartyAvatar: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserThirdpartyLoginRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserThirdpartyLoginRequest} ProUserThirdpartyLoginRequest
         */
        ProUserThirdpartyLoginRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserThirdpartyLoginRequest)
                return object;
            var message = new $root.messages.ProUserThirdpartyLoginRequest();
            if (object.uuid != null)
                if (typeof object.uuid === "string")
                    $util.base64.decode(object.uuid, message.uuid = $util.newBuffer($util.base64.length(object.uuid)), 0);
                else if (object.uuid.length)
                    message.uuid = object.uuid;
            switch (object.marketType) {
            case "MARKET_APPLE_STORE":
            case 100:
                message.marketType = 100;
                break;
            case "MARKET_APPLE_ENTERPRISE":
            case 200:
                message.marketType = 200;
                break;
            case "MARKET_ANDROID_PHONE":
            case 300:
                message.marketType = 300;
                break;
            case "MARKET_ANDROID_PHONE_TENCET":
            case 301:
                message.marketType = 301;
                break;
            case "MARKET_ANDROID_PHONE_360":
            case 302:
                message.marketType = 302;
                break;
            case "MARKET_ANDROID_PHONE_BAIDU":
            case 303:
                message.marketType = 303;
                break;
            case "MARKET_ANDROID_PHONE_91":
            case 304:
                message.marketType = 304;
                break;
            case "MARKET_ANDROID_PAD":
            case 400:
                message.marketType = 400;
                break;
            case "MARKET_WIN_PHONE":
            case 500:
                message.marketType = 500;
                break;
            case "MARKET_WIN_PC":
            case 600:
                message.marketType = 600;
                break;
            case "MARKET_WIN_PAD":
            case 700:
                message.marketType = 700;
                break;
            case "MARKET_OTHER":
            case 9900:
                message.marketType = 9900;
                break;
            }
            if (object.source != null)
                if (typeof object.source === "string")
                    $util.base64.decode(object.source, message.source = $util.newBuffer($util.base64.length(object.source)), 0);
                else if (object.source.length)
                    message.source = object.source;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.sourceIp != null)
                if (typeof object.sourceIp === "string")
                    $util.base64.decode(object.sourceIp, message.sourceIp = $util.newBuffer($util.base64.length(object.sourceIp)), 0);
                else if (object.sourceIp.length)
                    message.sourceIp = object.sourceIp;
            if (object.gender != null)
                message.gender = object.gender | 0;
            if (object.thirdpartyNickname != null)
                if (typeof object.thirdpartyNickname === "string")
                    $util.base64.decode(object.thirdpartyNickname, message.thirdpartyNickname = $util.newBuffer($util.base64.length(object.thirdpartyNickname)), 0);
                else if (object.thirdpartyNickname.length)
                    message.thirdpartyNickname = object.thirdpartyNickname;
            if (object.thirdpartyAvatar != null)
                if (typeof object.thirdpartyAvatar === "string")
                    $util.base64.decode(object.thirdpartyAvatar, message.thirdpartyAvatar = $util.newBuffer($util.base64.length(object.thirdpartyAvatar)), 0);
                else if (object.thirdpartyAvatar.length)
                    message.thirdpartyAvatar = object.thirdpartyAvatar;
            return message;
        };

        /**
         * Creates a plain object from a ProUserThirdpartyLoginRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @static
         * @param {messages.ProUserThirdpartyLoginRequest} message ProUserThirdpartyLoginRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserThirdpartyLoginRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.uuid = options.bytes === String ? "" : [];
                object.marketType = options.enums === String ? "MARKET_APPLE_STORE" : 100;
                object.source = options.bytes === String ? "" : [];
                object.gameId = 3;
                object.sourceIp = options.bytes === String ? "" : [];
                object.gender = 0;
                object.thirdpartyNickname = options.bytes === String ? "" : [];
                object.thirdpartyAvatar = options.bytes === String ? "" : [];
            }
            if (message.uuid != null && message.hasOwnProperty("uuid"))
                object.uuid = options.bytes === String ? $util.base64.encode(message.uuid, 0, message.uuid.length) : options.bytes === Array ? Array.prototype.slice.call(message.uuid) : message.uuid;
            if (message.marketType != null && message.hasOwnProperty("marketType"))
                object.marketType = options.enums === String ? $root.messages.MarketType[message.marketType] : message.marketType;
            if (message.source != null && message.hasOwnProperty("source"))
                object.source = options.bytes === String ? $util.base64.encode(message.source, 0, message.source.length) : options.bytes === Array ? Array.prototype.slice.call(message.source) : message.source;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.sourceIp != null && message.hasOwnProperty("sourceIp"))
                object.sourceIp = options.bytes === String ? $util.base64.encode(message.sourceIp, 0, message.sourceIp.length) : options.bytes === Array ? Array.prototype.slice.call(message.sourceIp) : message.sourceIp;
            if (message.gender != null && message.hasOwnProperty("gender"))
                object.gender = message.gender;
            if (message.thirdpartyNickname != null && message.hasOwnProperty("thirdpartyNickname"))
                object.thirdpartyNickname = options.bytes === String ? $util.base64.encode(message.thirdpartyNickname, 0, message.thirdpartyNickname.length) : options.bytes === Array ? Array.prototype.slice.call(message.thirdpartyNickname) : message.thirdpartyNickname;
            if (message.thirdpartyAvatar != null && message.hasOwnProperty("thirdpartyAvatar"))
                object.thirdpartyAvatar = options.bytes === String ? $util.base64.encode(message.thirdpartyAvatar, 0, message.thirdpartyAvatar.length) : options.bytes === Array ? Array.prototype.slice.call(message.thirdpartyAvatar) : message.thirdpartyAvatar;
            return object;
        };

        /**
         * Converts this ProUserThirdpartyLoginRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserThirdpartyLoginRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserThirdpartyLoginRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserThirdpartyLoginRequest.MSGID
         * @enum {string}
         * @property {number} ID=109 ID value
         */
        ProUserThirdpartyLoginRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[109] = "ID"] = 109;
            return values;
        })();

        return ProUserThirdpartyLoginRequest;
    })();

    /**
     * OrganizeState enum.
     * @name messages.OrganizeState
     * @enum {string}
     * @property {number} ORGANIZE_NONE=1 ORGANIZE_NONE value
     * @property {number} ORGANIZE_WAIT_CREATE=2 ORGANIZE_WAIT_CREATE value
     * @property {number} ORGANIZE_WAIT_JOIN=3 ORGANIZE_WAIT_JOIN value
     * @property {number} ORGANIZE_JOIN_IN=4 ORGANIZE_JOIN_IN value
     */
    messages.OrganizeState = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "ORGANIZE_NONE"] = 1;
        values[valuesById[2] = "ORGANIZE_WAIT_CREATE"] = 2;
        values[valuesById[3] = "ORGANIZE_WAIT_JOIN"] = 3;
        values[valuesById[4] = "ORGANIZE_JOIN_IN"] = 4;
        return values;
    })();

    /**
     * DealType enum.
     * @name messages.DealType
     * @enum {string}
     * @property {number} DEALTYPE_AGREE=1 DEALTYPE_AGREE value
     * @property {number} DEALTYPE_REJECT=2 DEALTYPE_REJECT value
     */
    messages.DealType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "DEALTYPE_AGREE"] = 1;
        values[valuesById[2] = "DEALTYPE_REJECT"] = 2;
        return values;
    })();

    messages.CommonUserInfo = (function() {

        /**
         * Properties of a CommonUserInfo.
         * @memberof messages
         * @interface ICommonUserInfo
         * @property {number|null} [userId] CommonUserInfo userId
         * @property {Uint8Array|null} [nickName] CommonUserInfo nickName
         * @property {Uint8Array|null} [filePath] CommonUserInfo filePath
         * @property {number|null} [dealId] CommonUserInfo dealId
         * @property {Uint8Array|null} [joinDate] CommonUserInfo joinDate
         * @property {Uint8Array|null} [otherName] CommonUserInfo otherName
         */

        /**
         * Constructs a new CommonUserInfo.
         * @memberof messages
         * @classdesc Represents a CommonUserInfo.
         * @implements ICommonUserInfo
         * @constructor
         * @param {messages.ICommonUserInfo=} [properties] Properties to set
         */
        function CommonUserInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * CommonUserInfo userId.
         * @member {number} userId
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.userId = 0;

        /**
         * CommonUserInfo nickName.
         * @member {Uint8Array} nickName
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.nickName = $util.newBuffer([]);

        /**
         * CommonUserInfo filePath.
         * @member {Uint8Array} filePath
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.filePath = $util.newBuffer([]);

        /**
         * CommonUserInfo dealId.
         * @member {number} dealId
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.dealId = 0;

        /**
         * CommonUserInfo joinDate.
         * @member {Uint8Array} joinDate
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.joinDate = $util.newBuffer([]);

        /**
         * CommonUserInfo otherName.
         * @member {Uint8Array} otherName
         * @memberof messages.CommonUserInfo
         * @instance
         */
        CommonUserInfo.prototype.otherName = $util.newBuffer([]);

        /**
         * Creates a new CommonUserInfo instance using the specified properties.
         * @function create
         * @memberof messages.CommonUserInfo
         * @static
         * @param {messages.ICommonUserInfo=} [properties] Properties to set
         * @returns {messages.CommonUserInfo} CommonUserInfo instance
         */
        CommonUserInfo.create = function create(properties) {
            return new CommonUserInfo(properties);
        };

        /**
         * Encodes the specified CommonUserInfo message. Does not implicitly {@link messages.CommonUserInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.CommonUserInfo
         * @static
         * @param {messages.ICommonUserInfo} message CommonUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommonUserInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.nickName);
            if (message.filePath != null && message.hasOwnProperty("filePath"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.filePath);
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.dealId);
            if (message.joinDate != null && message.hasOwnProperty("joinDate"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.joinDate);
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.otherName);
            return writer;
        };

        /**
         * Encodes the specified CommonUserInfo message, length delimited. Does not implicitly {@link messages.CommonUserInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.CommonUserInfo
         * @static
         * @param {messages.ICommonUserInfo} message CommonUserInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        CommonUserInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a CommonUserInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.CommonUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.CommonUserInfo} CommonUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommonUserInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.CommonUserInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.nickName = reader.bytes();
                    break;
                case 4:
                    message.filePath = reader.bytes();
                    break;
                case 5:
                    message.dealId = reader.int32();
                    break;
                case 6:
                    message.joinDate = reader.bytes();
                    break;
                case 7:
                    message.otherName = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a CommonUserInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.CommonUserInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.CommonUserInfo} CommonUserInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        CommonUserInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a CommonUserInfo message.
         * @function verify
         * @memberof messages.CommonUserInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        CommonUserInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                if (!(message.nickName && typeof message.nickName.length === "number" || $util.isString(message.nickName)))
                    return "nickName: buffer expected";
            if (message.filePath != null && message.hasOwnProperty("filePath"))
                if (!(message.filePath && typeof message.filePath.length === "number" || $util.isString(message.filePath)))
                    return "filePath: buffer expected";
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                if (!$util.isInteger(message.dealId))
                    return "dealId: integer expected";
            if (message.joinDate != null && message.hasOwnProperty("joinDate"))
                if (!(message.joinDate && typeof message.joinDate.length === "number" || $util.isString(message.joinDate)))
                    return "joinDate: buffer expected";
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                if (!(message.otherName && typeof message.otherName.length === "number" || $util.isString(message.otherName)))
                    return "otherName: buffer expected";
            return null;
        };

        /**
         * Creates a CommonUserInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.CommonUserInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.CommonUserInfo} CommonUserInfo
         */
        CommonUserInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.CommonUserInfo)
                return object;
            var message = new $root.messages.CommonUserInfo();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.nickName != null)
                if (typeof object.nickName === "string")
                    $util.base64.decode(object.nickName, message.nickName = $util.newBuffer($util.base64.length(object.nickName)), 0);
                else if (object.nickName.length)
                    message.nickName = object.nickName;
            if (object.filePath != null)
                if (typeof object.filePath === "string")
                    $util.base64.decode(object.filePath, message.filePath = $util.newBuffer($util.base64.length(object.filePath)), 0);
                else if (object.filePath.length)
                    message.filePath = object.filePath;
            if (object.dealId != null)
                message.dealId = object.dealId | 0;
            if (object.joinDate != null)
                if (typeof object.joinDate === "string")
                    $util.base64.decode(object.joinDate, message.joinDate = $util.newBuffer($util.base64.length(object.joinDate)), 0);
                else if (object.joinDate.length)
                    message.joinDate = object.joinDate;
            if (object.otherName != null)
                if (typeof object.otherName === "string")
                    $util.base64.decode(object.otherName, message.otherName = $util.newBuffer($util.base64.length(object.otherName)), 0);
                else if (object.otherName.length)
                    message.otherName = object.otherName;
            return message;
        };

        /**
         * Creates a plain object from a CommonUserInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.CommonUserInfo
         * @static
         * @param {messages.CommonUserInfo} message CommonUserInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        CommonUserInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.nickName = options.bytes === String ? "" : [];
                object.filePath = options.bytes === String ? "" : [];
                object.dealId = 0;
                object.joinDate = options.bytes === String ? "" : [];
                object.otherName = options.bytes === String ? "" : [];
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                object.nickName = options.bytes === String ? $util.base64.encode(message.nickName, 0, message.nickName.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName) : message.nickName;
            if (message.filePath != null && message.hasOwnProperty("filePath"))
                object.filePath = options.bytes === String ? $util.base64.encode(message.filePath, 0, message.filePath.length) : options.bytes === Array ? Array.prototype.slice.call(message.filePath) : message.filePath;
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                object.dealId = message.dealId;
            if (message.joinDate != null && message.hasOwnProperty("joinDate"))
                object.joinDate = options.bytes === String ? $util.base64.encode(message.joinDate, 0, message.joinDate.length) : options.bytes === Array ? Array.prototype.slice.call(message.joinDate) : message.joinDate;
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                object.otherName = options.bytes === String ? $util.base64.encode(message.otherName, 0, message.otherName.length) : options.bytes === Array ? Array.prototype.slice.call(message.otherName) : message.otherName;
            return object;
        };

        /**
         * Converts this CommonUserInfo to JSON.
         * @function toJSON
         * @memberof messages.CommonUserInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        CommonUserInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return CommonUserInfo;
    })();

    messages.OrganizeInfo = (function() {

        /**
         * Properties of an OrganizeInfo.
         * @memberof messages
         * @interface IOrganizeInfo
         * @property {number|null} [organizeId] OrganizeInfo organizeId
         * @property {number|null} [gameId] OrganizeInfo gameId
         * @property {Uint8Array|null} [organizeName] OrganizeInfo organizeName
         * @property {number|null} [masterId] OrganizeInfo masterId
         * @property {Uint8Array|null} [phoneNum] OrganizeInfo phoneNum
         * @property {number|null} [roomcardNum] OrganizeInfo roomcardNum
         * @property {Uint8Array|null} [nickName] OrganizeInfo nickName
         * @property {Uint8Array|null} [info] OrganizeInfo info
         * @property {number|null} [applyFlag] OrganizeInfo applyFlag
         * @property {Uint8Array|null} [ruleType] OrganizeInfo ruleType
         * @property {number|null} [gameType] OrganizeInfo gameType
         */

        /**
         * Constructs a new OrganizeInfo.
         * @memberof messages
         * @classdesc Represents an OrganizeInfo.
         * @implements IOrganizeInfo
         * @constructor
         * @param {messages.IOrganizeInfo=} [properties] Properties to set
         */
        function OrganizeInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * OrganizeInfo organizeId.
         * @member {number} organizeId
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.organizeId = 0;

        /**
         * OrganizeInfo gameId.
         * @member {number} gameId
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.gameId = 0;

        /**
         * OrganizeInfo organizeName.
         * @member {Uint8Array} organizeName
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.organizeName = $util.newBuffer([]);

        /**
         * OrganizeInfo masterId.
         * @member {number} masterId
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.masterId = 0;

        /**
         * OrganizeInfo phoneNum.
         * @member {Uint8Array} phoneNum
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.phoneNum = $util.newBuffer([]);

        /**
         * OrganizeInfo roomcardNum.
         * @member {number} roomcardNum
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.roomcardNum = 0;

        /**
         * OrganizeInfo nickName.
         * @member {Uint8Array} nickName
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.nickName = $util.newBuffer([]);

        /**
         * OrganizeInfo info.
         * @member {Uint8Array} info
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.info = $util.newBuffer([]);

        /**
         * OrganizeInfo applyFlag.
         * @member {number} applyFlag
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.applyFlag = 0;

        /**
         * OrganizeInfo ruleType.
         * @member {Uint8Array} ruleType
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.ruleType = $util.newBuffer([]);

        /**
         * OrganizeInfo gameType.
         * @member {number} gameType
         * @memberof messages.OrganizeInfo
         * @instance
         */
        OrganizeInfo.prototype.gameType = 0;

        /**
         * Creates a new OrganizeInfo instance using the specified properties.
         * @function create
         * @memberof messages.OrganizeInfo
         * @static
         * @param {messages.IOrganizeInfo=} [properties] Properties to set
         * @returns {messages.OrganizeInfo} OrganizeInfo instance
         */
        OrganizeInfo.create = function create(properties) {
            return new OrganizeInfo(properties);
        };

        /**
         * Encodes the specified OrganizeInfo message. Does not implicitly {@link messages.OrganizeInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.OrganizeInfo
         * @static
         * @param {messages.IOrganizeInfo} message OrganizeInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OrganizeInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.organizeName);
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.masterId);
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.phoneNum);
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.roomcardNum);
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.nickName);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.info);
            if (message.applyFlag != null && message.hasOwnProperty("applyFlag"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.applyFlag);
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                writer.uint32(/* id 11, wireType 2 =*/90).bytes(message.ruleType);
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.gameType);
            return writer;
        };

        /**
         * Encodes the specified OrganizeInfo message, length delimited. Does not implicitly {@link messages.OrganizeInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.OrganizeInfo
         * @static
         * @param {messages.IOrganizeInfo} message OrganizeInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        OrganizeInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an OrganizeInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.OrganizeInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.OrganizeInfo} OrganizeInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OrganizeInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.OrganizeInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeName = reader.bytes();
                    break;
                case 5:
                    message.masterId = reader.int32();
                    break;
                case 6:
                    message.phoneNum = reader.bytes();
                    break;
                case 7:
                    message.roomcardNum = reader.int32();
                    break;
                case 8:
                    message.nickName = reader.bytes();
                    break;
                case 9:
                    message.info = reader.bytes();
                    break;
                case 10:
                    message.applyFlag = reader.int32();
                    break;
                case 11:
                    message.ruleType = reader.bytes();
                    break;
                case 12:
                    message.gameType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an OrganizeInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.OrganizeInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.OrganizeInfo} OrganizeInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        OrganizeInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an OrganizeInfo message.
         * @function verify
         * @memberof messages.OrganizeInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        OrganizeInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                if (!(message.organizeName && typeof message.organizeName.length === "number" || $util.isString(message.organizeName)))
                    return "organizeName: buffer expected";
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                if (!$util.isInteger(message.masterId))
                    return "masterId: integer expected";
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                if (!(message.phoneNum && typeof message.phoneNum.length === "number" || $util.isString(message.phoneNum)))
                    return "phoneNum: buffer expected";
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                if (!$util.isInteger(message.roomcardNum))
                    return "roomcardNum: integer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                if (!(message.nickName && typeof message.nickName.length === "number" || $util.isString(message.nickName)))
                    return "nickName: buffer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            if (message.applyFlag != null && message.hasOwnProperty("applyFlag"))
                if (!$util.isInteger(message.applyFlag))
                    return "applyFlag: integer expected";
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                if (!(message.ruleType && typeof message.ruleType.length === "number" || $util.isString(message.ruleType)))
                    return "ruleType: buffer expected";
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                if (!$util.isInteger(message.gameType))
                    return "gameType: integer expected";
            return null;
        };

        /**
         * Creates an OrganizeInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.OrganizeInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.OrganizeInfo} OrganizeInfo
         */
        OrganizeInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.OrganizeInfo)
                return object;
            var message = new $root.messages.OrganizeInfo();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeName != null)
                if (typeof object.organizeName === "string")
                    $util.base64.decode(object.organizeName, message.organizeName = $util.newBuffer($util.base64.length(object.organizeName)), 0);
                else if (object.organizeName.length)
                    message.organizeName = object.organizeName;
            if (object.masterId != null)
                message.masterId = object.masterId | 0;
            if (object.phoneNum != null)
                if (typeof object.phoneNum === "string")
                    $util.base64.decode(object.phoneNum, message.phoneNum = $util.newBuffer($util.base64.length(object.phoneNum)), 0);
                else if (object.phoneNum.length)
                    message.phoneNum = object.phoneNum;
            if (object.roomcardNum != null)
                message.roomcardNum = object.roomcardNum | 0;
            if (object.nickName != null)
                if (typeof object.nickName === "string")
                    $util.base64.decode(object.nickName, message.nickName = $util.newBuffer($util.base64.length(object.nickName)), 0);
                else if (object.nickName.length)
                    message.nickName = object.nickName;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            if (object.applyFlag != null)
                message.applyFlag = object.applyFlag | 0;
            if (object.ruleType != null)
                if (typeof object.ruleType === "string")
                    $util.base64.decode(object.ruleType, message.ruleType = $util.newBuffer($util.base64.length(object.ruleType)), 0);
                else if (object.ruleType.length)
                    message.ruleType = object.ruleType;
            if (object.gameType != null)
                message.gameType = object.gameType | 0;
            return message;
        };

        /**
         * Creates a plain object from an OrganizeInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.OrganizeInfo
         * @static
         * @param {messages.OrganizeInfo} message OrganizeInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        OrganizeInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.gameId = 0;
                object.organizeName = options.bytes === String ? "" : [];
                object.masterId = 0;
                object.phoneNum = options.bytes === String ? "" : [];
                object.roomcardNum = 0;
                object.nickName = options.bytes === String ? "" : [];
                object.info = options.bytes === String ? "" : [];
                object.applyFlag = 0;
                object.ruleType = options.bytes === String ? "" : [];
                object.gameType = 0;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                object.organizeName = options.bytes === String ? $util.base64.encode(message.organizeName, 0, message.organizeName.length) : options.bytes === Array ? Array.prototype.slice.call(message.organizeName) : message.organizeName;
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                object.masterId = message.masterId;
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                object.phoneNum = options.bytes === String ? $util.base64.encode(message.phoneNum, 0, message.phoneNum.length) : options.bytes === Array ? Array.prototype.slice.call(message.phoneNum) : message.phoneNum;
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                object.roomcardNum = message.roomcardNum;
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                object.nickName = options.bytes === String ? $util.base64.encode(message.nickName, 0, message.nickName.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName) : message.nickName;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            if (message.applyFlag != null && message.hasOwnProperty("applyFlag"))
                object.applyFlag = message.applyFlag;
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                object.ruleType = options.bytes === String ? $util.base64.encode(message.ruleType, 0, message.ruleType.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleType) : message.ruleType;
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                object.gameType = message.gameType;
            return object;
        };

        /**
         * Converts this OrganizeInfo to JSON.
         * @function toJSON
         * @memberof messages.OrganizeInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        OrganizeInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return OrganizeInfo;
    })();

    messages.InviteOrganizeInfo = (function() {

        /**
         * Properties of an InviteOrganizeInfo.
         * @memberof messages
         * @interface IInviteOrganizeInfo
         * @property {number|null} [organizeId] InviteOrganizeInfo organizeId
         * @property {Uint8Array|null} [organizeName] InviteOrganizeInfo organizeName
         * @property {Uint8Array|null} [nickName] InviteOrganizeInfo nickName
         * @property {number|null} [recordId] InviteOrganizeInfo recordId
         */

        /**
         * Constructs a new InviteOrganizeInfo.
         * @memberof messages
         * @classdesc Represents an InviteOrganizeInfo.
         * @implements IInviteOrganizeInfo
         * @constructor
         * @param {messages.IInviteOrganizeInfo=} [properties] Properties to set
         */
        function InviteOrganizeInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * InviteOrganizeInfo organizeId.
         * @member {number} organizeId
         * @memberof messages.InviteOrganizeInfo
         * @instance
         */
        InviteOrganizeInfo.prototype.organizeId = 0;

        /**
         * InviteOrganizeInfo organizeName.
         * @member {Uint8Array} organizeName
         * @memberof messages.InviteOrganizeInfo
         * @instance
         */
        InviteOrganizeInfo.prototype.organizeName = $util.newBuffer([]);

        /**
         * InviteOrganizeInfo nickName.
         * @member {Uint8Array} nickName
         * @memberof messages.InviteOrganizeInfo
         * @instance
         */
        InviteOrganizeInfo.prototype.nickName = $util.newBuffer([]);

        /**
         * InviteOrganizeInfo recordId.
         * @member {number} recordId
         * @memberof messages.InviteOrganizeInfo
         * @instance
         */
        InviteOrganizeInfo.prototype.recordId = 0;

        /**
         * Creates a new InviteOrganizeInfo instance using the specified properties.
         * @function create
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {messages.IInviteOrganizeInfo=} [properties] Properties to set
         * @returns {messages.InviteOrganizeInfo} InviteOrganizeInfo instance
         */
        InviteOrganizeInfo.create = function create(properties) {
            return new InviteOrganizeInfo(properties);
        };

        /**
         * Encodes the specified InviteOrganizeInfo message. Does not implicitly {@link messages.InviteOrganizeInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {messages.IInviteOrganizeInfo} message InviteOrganizeInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InviteOrganizeInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.organizeName);
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.nickName);
            if (message.recordId != null && message.hasOwnProperty("recordId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.recordId);
            return writer;
        };

        /**
         * Encodes the specified InviteOrganizeInfo message, length delimited. Does not implicitly {@link messages.InviteOrganizeInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {messages.IInviteOrganizeInfo} message InviteOrganizeInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        InviteOrganizeInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes an InviteOrganizeInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.InviteOrganizeInfo} InviteOrganizeInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InviteOrganizeInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.InviteOrganizeInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.organizeName = reader.bytes();
                    break;
                case 4:
                    message.nickName = reader.bytes();
                    break;
                case 5:
                    message.recordId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes an InviteOrganizeInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.InviteOrganizeInfo} InviteOrganizeInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        InviteOrganizeInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies an InviteOrganizeInfo message.
         * @function verify
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        InviteOrganizeInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                if (!(message.organizeName && typeof message.organizeName.length === "number" || $util.isString(message.organizeName)))
                    return "organizeName: buffer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                if (!(message.nickName && typeof message.nickName.length === "number" || $util.isString(message.nickName)))
                    return "nickName: buffer expected";
            if (message.recordId != null && message.hasOwnProperty("recordId"))
                if (!$util.isInteger(message.recordId))
                    return "recordId: integer expected";
            return null;
        };

        /**
         * Creates an InviteOrganizeInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.InviteOrganizeInfo} InviteOrganizeInfo
         */
        InviteOrganizeInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.InviteOrganizeInfo)
                return object;
            var message = new $root.messages.InviteOrganizeInfo();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.organizeName != null)
                if (typeof object.organizeName === "string")
                    $util.base64.decode(object.organizeName, message.organizeName = $util.newBuffer($util.base64.length(object.organizeName)), 0);
                else if (object.organizeName.length)
                    message.organizeName = object.organizeName;
            if (object.nickName != null)
                if (typeof object.nickName === "string")
                    $util.base64.decode(object.nickName, message.nickName = $util.newBuffer($util.base64.length(object.nickName)), 0);
                else if (object.nickName.length)
                    message.nickName = object.nickName;
            if (object.recordId != null)
                message.recordId = object.recordId | 0;
            return message;
        };

        /**
         * Creates a plain object from an InviteOrganizeInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.InviteOrganizeInfo
         * @static
         * @param {messages.InviteOrganizeInfo} message InviteOrganizeInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        InviteOrganizeInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.organizeName = options.bytes === String ? "" : [];
                object.nickName = options.bytes === String ? "" : [];
                object.recordId = 0;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                object.organizeName = options.bytes === String ? $util.base64.encode(message.organizeName, 0, message.organizeName.length) : options.bytes === Array ? Array.prototype.slice.call(message.organizeName) : message.organizeName;
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                object.nickName = options.bytes === String ? $util.base64.encode(message.nickName, 0, message.nickName.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName) : message.nickName;
            if (message.recordId != null && message.hasOwnProperty("recordId"))
                object.recordId = message.recordId;
            return object;
        };

        /**
         * Converts this InviteOrganizeInfo to JSON.
         * @function toJSON
         * @memberof messages.InviteOrganizeInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        InviteOrganizeInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return InviteOrganizeInfo;
    })();

    messages.ProCreateOrganizeRequest = (function() {

        /**
         * Properties of a ProCreateOrganizeRequest.
         * @memberof messages
         * @interface IProCreateOrganizeRequest
         * @property {number|null} [userId] ProCreateOrganizeRequest userId
         * @property {number|null} [gameId] ProCreateOrganizeRequest gameId
         * @property {Uint8Array|null} [organizeName] ProCreateOrganizeRequest organizeName
         * @property {Uint8Array|null} [info] ProCreateOrganizeRequest info
         * @property {Uint8Array|null} [nickName] ProCreateOrganizeRequest nickName
         * @property {Uint8Array|null} [phoneNum] ProCreateOrganizeRequest phoneNum
         * @property {number|null} [roomcardType] ProCreateOrganizeRequest roomcardType
         * @property {Uint8Array|null} [ruleType] ProCreateOrganizeRequest ruleType
         * @property {number|null} [gameType] ProCreateOrganizeRequest gameType
         */

        /**
         * Constructs a new ProCreateOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProCreateOrganizeRequest.
         * @implements IProCreateOrganizeRequest
         * @constructor
         * @param {messages.IProCreateOrganizeRequest=} [properties] Properties to set
         */
        function ProCreateOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCreateOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.userId = 0;

        /**
         * ProCreateOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.gameId = 0;

        /**
         * ProCreateOrganizeRequest organizeName.
         * @member {Uint8Array} organizeName
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.organizeName = $util.newBuffer([]);

        /**
         * ProCreateOrganizeRequest info.
         * @member {Uint8Array} info
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.info = $util.newBuffer([]);

        /**
         * ProCreateOrganizeRequest nickName.
         * @member {Uint8Array} nickName
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.nickName = $util.newBuffer([]);

        /**
         * ProCreateOrganizeRequest phoneNum.
         * @member {Uint8Array} phoneNum
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.phoneNum = $util.newBuffer([]);

        /**
         * ProCreateOrganizeRequest roomcardType.
         * @member {number} roomcardType
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.roomcardType = 0;

        /**
         * ProCreateOrganizeRequest ruleType.
         * @member {Uint8Array} ruleType
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.ruleType = $util.newBuffer([]);

        /**
         * ProCreateOrganizeRequest gameType.
         * @member {number} gameType
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         */
        ProCreateOrganizeRequest.prototype.gameType = -1;

        /**
         * Creates a new ProCreateOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {messages.IProCreateOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProCreateOrganizeRequest} ProCreateOrganizeRequest instance
         */
        ProCreateOrganizeRequest.create = function create(properties) {
            return new ProCreateOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProCreateOrganizeRequest message. Does not implicitly {@link messages.ProCreateOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {messages.IProCreateOrganizeRequest} message ProCreateOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.organizeName);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.info);
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.nickName);
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.phoneNum);
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.roomcardType);
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.ruleType);
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.gameType);
            return writer;
        };

        /**
         * Encodes the specified ProCreateOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProCreateOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {messages.IProCreateOrganizeRequest} message ProCreateOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCreateOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCreateOrganizeRequest} ProCreateOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCreateOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeName = reader.bytes();
                    break;
                case 5:
                    message.info = reader.bytes();
                    break;
                case 6:
                    message.nickName = reader.bytes();
                    break;
                case 7:
                    message.phoneNum = reader.bytes();
                    break;
                case 8:
                    message.roomcardType = reader.int32();
                    break;
                case 9:
                    message.ruleType = reader.bytes();
                    break;
                case 10:
                    message.gameType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCreateOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCreateOrganizeRequest} ProCreateOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCreateOrganizeRequest message.
         * @function verify
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCreateOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                if (!(message.organizeName && typeof message.organizeName.length === "number" || $util.isString(message.organizeName)))
                    return "organizeName: buffer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                if (!(message.nickName && typeof message.nickName.length === "number" || $util.isString(message.nickName)))
                    return "nickName: buffer expected";
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                if (!(message.phoneNum && typeof message.phoneNum.length === "number" || $util.isString(message.phoneNum)))
                    return "phoneNum: buffer expected";
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                if (!$util.isInteger(message.roomcardType))
                    return "roomcardType: integer expected";
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                if (!(message.ruleType && typeof message.ruleType.length === "number" || $util.isString(message.ruleType)))
                    return "ruleType: buffer expected";
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                if (!$util.isInteger(message.gameType))
                    return "gameType: integer expected";
            return null;
        };

        /**
         * Creates a ProCreateOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCreateOrganizeRequest} ProCreateOrganizeRequest
         */
        ProCreateOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCreateOrganizeRequest)
                return object;
            var message = new $root.messages.ProCreateOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeName != null)
                if (typeof object.organizeName === "string")
                    $util.base64.decode(object.organizeName, message.organizeName = $util.newBuffer($util.base64.length(object.organizeName)), 0);
                else if (object.organizeName.length)
                    message.organizeName = object.organizeName;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            if (object.nickName != null)
                if (typeof object.nickName === "string")
                    $util.base64.decode(object.nickName, message.nickName = $util.newBuffer($util.base64.length(object.nickName)), 0);
                else if (object.nickName.length)
                    message.nickName = object.nickName;
            if (object.phoneNum != null)
                if (typeof object.phoneNum === "string")
                    $util.base64.decode(object.phoneNum, message.phoneNum = $util.newBuffer($util.base64.length(object.phoneNum)), 0);
                else if (object.phoneNum.length)
                    message.phoneNum = object.phoneNum;
            if (object.roomcardType != null)
                message.roomcardType = object.roomcardType | 0;
            if (object.ruleType != null)
                if (typeof object.ruleType === "string")
                    $util.base64.decode(object.ruleType, message.ruleType = $util.newBuffer($util.base64.length(object.ruleType)), 0);
                else if (object.ruleType.length)
                    message.ruleType = object.ruleType;
            if (object.gameType != null)
                message.gameType = object.gameType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProCreateOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCreateOrganizeRequest
         * @static
         * @param {messages.ProCreateOrganizeRequest} message ProCreateOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCreateOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeName = options.bytes === String ? "" : [];
                object.info = options.bytes === String ? "" : [];
                object.nickName = options.bytes === String ? "" : [];
                object.phoneNum = options.bytes === String ? "" : [];
                object.roomcardType = 0;
                object.ruleType = options.bytes === String ? "" : [];
                object.gameType = -1;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                object.organizeName = options.bytes === String ? $util.base64.encode(message.organizeName, 0, message.organizeName.length) : options.bytes === Array ? Array.prototype.slice.call(message.organizeName) : message.organizeName;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                object.nickName = options.bytes === String ? $util.base64.encode(message.nickName, 0, message.nickName.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName) : message.nickName;
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                object.phoneNum = options.bytes === String ? $util.base64.encode(message.phoneNum, 0, message.phoneNum.length) : options.bytes === Array ? Array.prototype.slice.call(message.phoneNum) : message.phoneNum;
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                object.roomcardType = message.roomcardType;
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                object.ruleType = options.bytes === String ? $util.base64.encode(message.ruleType, 0, message.ruleType.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleType) : message.ruleType;
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                object.gameType = message.gameType;
            return object;
        };

        /**
         * Converts this ProCreateOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProCreateOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCreateOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCreateOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=900 ID value
         */
        ProCreateOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[900] = "ID"] = 900;
            return values;
        })();

        return ProCreateOrganizeRequest;
    })();

    messages.ProCreateOrganizeResponse = (function() {

        /**
         * Properties of a ProCreateOrganizeResponse.
         * @memberof messages
         * @interface IProCreateOrganizeResponse
         * @property {number|null} [result] ProCreateOrganizeResponse result
         * @property {Uint8Array|null} [info] ProCreateOrganizeResponse info
         */

        /**
         * Constructs a new ProCreateOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProCreateOrganizeResponse.
         * @implements IProCreateOrganizeResponse
         * @constructor
         * @param {messages.IProCreateOrganizeResponse=} [properties] Properties to set
         */
        function ProCreateOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCreateOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProCreateOrganizeResponse
         * @instance
         */
        ProCreateOrganizeResponse.prototype.result = 0;

        /**
         * ProCreateOrganizeResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProCreateOrganizeResponse
         * @instance
         */
        ProCreateOrganizeResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProCreateOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {messages.IProCreateOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProCreateOrganizeResponse} ProCreateOrganizeResponse instance
         */
        ProCreateOrganizeResponse.create = function create(properties) {
            return new ProCreateOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProCreateOrganizeResponse message. Does not implicitly {@link messages.ProCreateOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {messages.IProCreateOrganizeResponse} message ProCreateOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProCreateOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProCreateOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {messages.IProCreateOrganizeResponse} message ProCreateOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCreateOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCreateOrganizeResponse} ProCreateOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCreateOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCreateOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCreateOrganizeResponse} ProCreateOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCreateOrganizeResponse message.
         * @function verify
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCreateOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProCreateOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCreateOrganizeResponse} ProCreateOrganizeResponse
         */
        ProCreateOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCreateOrganizeResponse)
                return object;
            var message = new $root.messages.ProCreateOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProCreateOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCreateOrganizeResponse
         * @static
         * @param {messages.ProCreateOrganizeResponse} message ProCreateOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCreateOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProCreateOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProCreateOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCreateOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCreateOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=901 ID value
         */
        ProCreateOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[901] = "ID"] = 901;
            return values;
        })();

        return ProCreateOrganizeResponse;
    })();

    messages.ProApplyJoinOrganizeRequest = (function() {

        /**
         * Properties of a ProApplyJoinOrganizeRequest.
         * @memberof messages
         * @interface IProApplyJoinOrganizeRequest
         * @property {number|null} [userId] ProApplyJoinOrganizeRequest userId
         * @property {number|null} [gameId] ProApplyJoinOrganizeRequest gameId
         * @property {number|null} [organizeId] ProApplyJoinOrganizeRequest organizeId
         * @property {Uint8Array|null} [nickName] ProApplyJoinOrganizeRequest nickName
         */

        /**
         * Constructs a new ProApplyJoinOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProApplyJoinOrganizeRequest.
         * @implements IProApplyJoinOrganizeRequest
         * @constructor
         * @param {messages.IProApplyJoinOrganizeRequest=} [properties] Properties to set
         */
        function ProApplyJoinOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyJoinOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @instance
         */
        ProApplyJoinOrganizeRequest.prototype.userId = 0;

        /**
         * ProApplyJoinOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @instance
         */
        ProApplyJoinOrganizeRequest.prototype.gameId = 0;

        /**
         * ProApplyJoinOrganizeRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @instance
         */
        ProApplyJoinOrganizeRequest.prototype.organizeId = 0;

        /**
         * ProApplyJoinOrganizeRequest nickName.
         * @member {Uint8Array} nickName
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @instance
         */
        ProApplyJoinOrganizeRequest.prototype.nickName = $util.newBuffer([]);

        /**
         * Creates a new ProApplyJoinOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {messages.IProApplyJoinOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProApplyJoinOrganizeRequest} ProApplyJoinOrganizeRequest instance
         */
        ProApplyJoinOrganizeRequest.create = function create(properties) {
            return new ProApplyJoinOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProApplyJoinOrganizeRequest message. Does not implicitly {@link messages.ProApplyJoinOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {messages.IProApplyJoinOrganizeRequest} message ProApplyJoinOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyJoinOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.nickName);
            return writer;
        };

        /**
         * Encodes the specified ProApplyJoinOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProApplyJoinOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {messages.IProApplyJoinOrganizeRequest} message ProApplyJoinOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyJoinOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyJoinOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyJoinOrganizeRequest} ProApplyJoinOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyJoinOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyJoinOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                case 5:
                    message.nickName = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyJoinOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyJoinOrganizeRequest} ProApplyJoinOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyJoinOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyJoinOrganizeRequest message.
         * @function verify
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyJoinOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                if (!(message.nickName && typeof message.nickName.length === "number" || $util.isString(message.nickName)))
                    return "nickName: buffer expected";
            return null;
        };

        /**
         * Creates a ProApplyJoinOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyJoinOrganizeRequest} ProApplyJoinOrganizeRequest
         */
        ProApplyJoinOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyJoinOrganizeRequest)
                return object;
            var message = new $root.messages.ProApplyJoinOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.nickName != null)
                if (typeof object.nickName === "string")
                    $util.base64.decode(object.nickName, message.nickName = $util.newBuffer($util.base64.length(object.nickName)), 0);
                else if (object.nickName.length)
                    message.nickName = object.nickName;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyJoinOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @static
         * @param {messages.ProApplyJoinOrganizeRequest} message ProApplyJoinOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyJoinOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeId = 0;
                object.nickName = options.bytes === String ? "" : [];
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.nickName != null && message.hasOwnProperty("nickName"))
                object.nickName = options.bytes === String ? $util.base64.encode(message.nickName, 0, message.nickName.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickName) : message.nickName;
            return object;
        };

        /**
         * Converts this ProApplyJoinOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProApplyJoinOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyJoinOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyJoinOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=902 ID value
         */
        ProApplyJoinOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[902] = "ID"] = 902;
            return values;
        })();

        return ProApplyJoinOrganizeRequest;
    })();

    messages.ProApplyJoinOrganizeResponse = (function() {

        /**
         * Properties of a ProApplyJoinOrganizeResponse.
         * @memberof messages
         * @interface IProApplyJoinOrganizeResponse
         * @property {number|null} [result] ProApplyJoinOrganizeResponse result
         * @property {Uint8Array|null} [info] ProApplyJoinOrganizeResponse info
         */

        /**
         * Constructs a new ProApplyJoinOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProApplyJoinOrganizeResponse.
         * @implements IProApplyJoinOrganizeResponse
         * @constructor
         * @param {messages.IProApplyJoinOrganizeResponse=} [properties] Properties to set
         */
        function ProApplyJoinOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyJoinOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @instance
         */
        ProApplyJoinOrganizeResponse.prototype.result = 0;

        /**
         * ProApplyJoinOrganizeResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @instance
         */
        ProApplyJoinOrganizeResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProApplyJoinOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {messages.IProApplyJoinOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProApplyJoinOrganizeResponse} ProApplyJoinOrganizeResponse instance
         */
        ProApplyJoinOrganizeResponse.create = function create(properties) {
            return new ProApplyJoinOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProApplyJoinOrganizeResponse message. Does not implicitly {@link messages.ProApplyJoinOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {messages.IProApplyJoinOrganizeResponse} message ProApplyJoinOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyJoinOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProApplyJoinOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProApplyJoinOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {messages.IProApplyJoinOrganizeResponse} message ProApplyJoinOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyJoinOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyJoinOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyJoinOrganizeResponse} ProApplyJoinOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyJoinOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyJoinOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyJoinOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyJoinOrganizeResponse} ProApplyJoinOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyJoinOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyJoinOrganizeResponse message.
         * @function verify
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyJoinOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProApplyJoinOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyJoinOrganizeResponse} ProApplyJoinOrganizeResponse
         */
        ProApplyJoinOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyJoinOrganizeResponse)
                return object;
            var message = new $root.messages.ProApplyJoinOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyJoinOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @static
         * @param {messages.ProApplyJoinOrganizeResponse} message ProApplyJoinOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyJoinOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProApplyJoinOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProApplyJoinOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyJoinOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyJoinOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=903 ID value
         */
        ProApplyJoinOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[903] = "ID"] = 903;
            return values;
        })();

        return ProApplyJoinOrganizeResponse;
    })();

    messages.ProGetOrganizeInfoRequest = (function() {

        /**
         * Properties of a ProGetOrganizeInfoRequest.
         * @memberof messages
         * @interface IProGetOrganizeInfoRequest
         * @property {number|null} [userId] ProGetOrganizeInfoRequest userId
         * @property {number|null} [gameId] ProGetOrganizeInfoRequest gameId
         */

        /**
         * Constructs a new ProGetOrganizeInfoRequest.
         * @memberof messages
         * @classdesc Represents a ProGetOrganizeInfoRequest.
         * @implements IProGetOrganizeInfoRequest
         * @constructor
         * @param {messages.IProGetOrganizeInfoRequest=} [properties] Properties to set
         */
        function ProGetOrganizeInfoRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetOrganizeInfoRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetOrganizeInfoRequest
         * @instance
         */
        ProGetOrganizeInfoRequest.prototype.userId = 0;

        /**
         * ProGetOrganizeInfoRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetOrganizeInfoRequest
         * @instance
         */
        ProGetOrganizeInfoRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetOrganizeInfoRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {messages.IProGetOrganizeInfoRequest=} [properties] Properties to set
         * @returns {messages.ProGetOrganizeInfoRequest} ProGetOrganizeInfoRequest instance
         */
        ProGetOrganizeInfoRequest.create = function create(properties) {
            return new ProGetOrganizeInfoRequest(properties);
        };

        /**
         * Encodes the specified ProGetOrganizeInfoRequest message. Does not implicitly {@link messages.ProGetOrganizeInfoRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {messages.IProGetOrganizeInfoRequest} message ProGetOrganizeInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizeInfoRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetOrganizeInfoRequest message, length delimited. Does not implicitly {@link messages.ProGetOrganizeInfoRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {messages.IProGetOrganizeInfoRequest} message ProGetOrganizeInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizeInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetOrganizeInfoRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetOrganizeInfoRequest} ProGetOrganizeInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizeInfoRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetOrganizeInfoRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetOrganizeInfoRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetOrganizeInfoRequest} ProGetOrganizeInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizeInfoRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetOrganizeInfoRequest message.
         * @function verify
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetOrganizeInfoRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetOrganizeInfoRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetOrganizeInfoRequest} ProGetOrganizeInfoRequest
         */
        ProGetOrganizeInfoRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetOrganizeInfoRequest)
                return object;
            var message = new $root.messages.ProGetOrganizeInfoRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetOrganizeInfoRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetOrganizeInfoRequest
         * @static
         * @param {messages.ProGetOrganizeInfoRequest} message ProGetOrganizeInfoRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetOrganizeInfoRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetOrganizeInfoRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetOrganizeInfoRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetOrganizeInfoRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetOrganizeInfoRequest.MSGID
         * @enum {string}
         * @property {number} ID=904 ID value
         */
        ProGetOrganizeInfoRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[904] = "ID"] = 904;
            return values;
        })();

        return ProGetOrganizeInfoRequest;
    })();

    messages.ProGetOrganizeInfoResponse = (function() {

        /**
         * Properties of a ProGetOrganizeInfoResponse.
         * @memberof messages
         * @interface IProGetOrganizeInfoResponse
         * @property {number|null} [joinNum] ProGetOrganizeInfoResponse joinNum
         * @property {number|null} [createNum] ProGetOrganizeInfoResponse createNum
         * @property {Array.<messages.IOrganizeInfo>|null} [info] ProGetOrganizeInfoResponse info
         * @property {number|null} [result] ProGetOrganizeInfoResponse result
         * @property {Uint8Array|null} [text] ProGetOrganizeInfoResponse text
         */

        /**
         * Constructs a new ProGetOrganizeInfoResponse.
         * @memberof messages
         * @classdesc Represents a ProGetOrganizeInfoResponse.
         * @implements IProGetOrganizeInfoResponse
         * @constructor
         * @param {messages.IProGetOrganizeInfoResponse=} [properties] Properties to set
         */
        function ProGetOrganizeInfoResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetOrganizeInfoResponse joinNum.
         * @member {number} joinNum
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         */
        ProGetOrganizeInfoResponse.prototype.joinNum = 0;

        /**
         * ProGetOrganizeInfoResponse createNum.
         * @member {number} createNum
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         */
        ProGetOrganizeInfoResponse.prototype.createNum = 0;

        /**
         * ProGetOrganizeInfoResponse info.
         * @member {Array.<messages.IOrganizeInfo>} info
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         */
        ProGetOrganizeInfoResponse.prototype.info = $util.emptyArray;

        /**
         * ProGetOrganizeInfoResponse result.
         * @member {number} result
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         */
        ProGetOrganizeInfoResponse.prototype.result = 0;

        /**
         * ProGetOrganizeInfoResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         */
        ProGetOrganizeInfoResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProGetOrganizeInfoResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {messages.IProGetOrganizeInfoResponse=} [properties] Properties to set
         * @returns {messages.ProGetOrganizeInfoResponse} ProGetOrganizeInfoResponse instance
         */
        ProGetOrganizeInfoResponse.create = function create(properties) {
            return new ProGetOrganizeInfoResponse(properties);
        };

        /**
         * Encodes the specified ProGetOrganizeInfoResponse message. Does not implicitly {@link messages.ProGetOrganizeInfoResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {messages.IProGetOrganizeInfoResponse} message ProGetOrganizeInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizeInfoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.joinNum != null && message.hasOwnProperty("joinNum"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.joinNum);
            if (message.createNum != null && message.hasOwnProperty("createNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.createNum);
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.OrganizeInfo.encode(message.info[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProGetOrganizeInfoResponse message, length delimited. Does not implicitly {@link messages.ProGetOrganizeInfoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {messages.IProGetOrganizeInfoResponse} message ProGetOrganizeInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizeInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetOrganizeInfoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetOrganizeInfoResponse} ProGetOrganizeInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizeInfoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetOrganizeInfoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.joinNum = reader.int32();
                    break;
                case 3:
                    message.createNum = reader.int32();
                    break;
                case 4:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.OrganizeInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.result = reader.int32();
                    break;
                case 6:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetOrganizeInfoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetOrganizeInfoResponse} ProGetOrganizeInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizeInfoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetOrganizeInfoResponse message.
         * @function verify
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetOrganizeInfoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.joinNum != null && message.hasOwnProperty("joinNum"))
                if (!$util.isInteger(message.joinNum))
                    return "joinNum: integer expected";
            if (message.createNum != null && message.hasOwnProperty("createNum"))
                if (!$util.isInteger(message.createNum))
                    return "createNum: integer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.OrganizeInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProGetOrganizeInfoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetOrganizeInfoResponse} ProGetOrganizeInfoResponse
         */
        ProGetOrganizeInfoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetOrganizeInfoResponse)
                return object;
            var message = new $root.messages.ProGetOrganizeInfoResponse();
            if (object.joinNum != null)
                message.joinNum = object.joinNum | 0;
            if (object.createNum != null)
                message.createNum = object.createNum | 0;
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProGetOrganizeInfoResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProGetOrganizeInfoResponse.info: object expected");
                    message.info[i] = $root.messages.OrganizeInfo.fromObject(object.info[i]);
                }
            }
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProGetOrganizeInfoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetOrganizeInfoResponse
         * @static
         * @param {messages.ProGetOrganizeInfoResponse} message ProGetOrganizeInfoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetOrganizeInfoResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults) {
                object.joinNum = 0;
                object.createNum = 0;
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.joinNum != null && message.hasOwnProperty("joinNum"))
                object.joinNum = message.joinNum;
            if (message.createNum != null && message.hasOwnProperty("createNum"))
                object.createNum = message.createNum;
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.OrganizeInfo.toObject(message.info[j], options);
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProGetOrganizeInfoResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetOrganizeInfoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetOrganizeInfoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetOrganizeInfoResponse.MSGID
         * @enum {string}
         * @property {number} ID=905 ID value
         */
        ProGetOrganizeInfoResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[905] = "ID"] = 905;
            return values;
        })();

        return ProGetOrganizeInfoResponse;
    })();

    messages.ProBuildDeskOrganizeByRequest = (function() {

        /**
         * Properties of a ProBuildDeskOrganizeByRequest.
         * @memberof messages
         * @interface IProBuildDeskOrganizeByRequest
         * @property {number|null} [gameId] ProBuildDeskOrganizeByRequest gameId
         * @property {number|null} [needRoomcard] ProBuildDeskOrganizeByRequest needRoomcard
         * @property {number|null} [playFlag] ProBuildDeskOrganizeByRequest playFlag
         * @property {number|null} [roomTag] ProBuildDeskOrganizeByRequest roomTag
         * @property {number|null} [aeraId] ProBuildDeskOrganizeByRequest aeraId
         * @property {number|null} [deskSeat] ProBuildDeskOrganizeByRequest deskSeat
         * @property {Uint8Array|null} [ruleFlag] ProBuildDeskOrganizeByRequest ruleFlag
         * @property {number|null} [organizeId] ProBuildDeskOrganizeByRequest organizeId
         * @property {number|null} [masterUserId] ProBuildDeskOrganizeByRequest masterUserId
         */

        /**
         * Constructs a new ProBuildDeskOrganizeByRequest.
         * @memberof messages
         * @classdesc Represents a ProBuildDeskOrganizeByRequest.
         * @implements IProBuildDeskOrganizeByRequest
         * @constructor
         * @param {messages.IProBuildDeskOrganizeByRequest=} [properties] Properties to set
         */
        function ProBuildDeskOrganizeByRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildDeskOrganizeByRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.gameId = 0;

        /**
         * ProBuildDeskOrganizeByRequest needRoomcard.
         * @member {number} needRoomcard
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.needRoomcard = 0;

        /**
         * ProBuildDeskOrganizeByRequest playFlag.
         * @member {number} playFlag
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.playFlag = 0;

        /**
         * ProBuildDeskOrganizeByRequest roomTag.
         * @member {number} roomTag
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.roomTag = 0;

        /**
         * ProBuildDeskOrganizeByRequest aeraId.
         * @member {number} aeraId
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.aeraId = 0;

        /**
         * ProBuildDeskOrganizeByRequest deskSeat.
         * @member {number} deskSeat
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.deskSeat = 0;

        /**
         * ProBuildDeskOrganizeByRequest ruleFlag.
         * @member {Uint8Array} ruleFlag
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.ruleFlag = $util.newBuffer([]);

        /**
         * ProBuildDeskOrganizeByRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.organizeId = 0;

        /**
         * ProBuildDeskOrganizeByRequest masterUserId.
         * @member {number} masterUserId
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         */
        ProBuildDeskOrganizeByRequest.prototype.masterUserId = 0;

        /**
         * Creates a new ProBuildDeskOrganizeByRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {messages.IProBuildDeskOrganizeByRequest=} [properties] Properties to set
         * @returns {messages.ProBuildDeskOrganizeByRequest} ProBuildDeskOrganizeByRequest instance
         */
        ProBuildDeskOrganizeByRequest.create = function create(properties) {
            return new ProBuildDeskOrganizeByRequest(properties);
        };

        /**
         * Encodes the specified ProBuildDeskOrganizeByRequest message. Does not implicitly {@link messages.ProBuildDeskOrganizeByRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {messages.IProBuildDeskOrganizeByRequest} message ProBuildDeskOrganizeByRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskOrganizeByRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.needRoomcard);
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.playFlag);
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.roomTag);
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.aeraId);
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.deskSeat);
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                writer.uint32(/* id 8, wireType 2 =*/66).bytes(message.ruleFlag);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.organizeId);
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.masterUserId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildDeskOrganizeByRequest message, length delimited. Does not implicitly {@link messages.ProBuildDeskOrganizeByRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {messages.IProBuildDeskOrganizeByRequest} message ProBuildDeskOrganizeByRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskOrganizeByRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildDeskOrganizeByRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildDeskOrganizeByRequest} ProBuildDeskOrganizeByRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskOrganizeByRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildDeskOrganizeByRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                case 3:
                    message.needRoomcard = reader.int32();
                    break;
                case 4:
                    message.playFlag = reader.int32();
                    break;
                case 5:
                    message.roomTag = reader.int32();
                    break;
                case 6:
                    message.aeraId = reader.int32();
                    break;
                case 7:
                    message.deskSeat = reader.int32();
                    break;
                case 8:
                    message.ruleFlag = reader.bytes();
                    break;
                case 9:
                    message.organizeId = reader.int32();
                    break;
                case 10:
                    message.masterUserId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildDeskOrganizeByRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildDeskOrganizeByRequest} ProBuildDeskOrganizeByRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskOrganizeByRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildDeskOrganizeByRequest message.
         * @function verify
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildDeskOrganizeByRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                if (!$util.isInteger(message.needRoomcard))
                    return "needRoomcard: integer expected";
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                if (!$util.isInteger(message.playFlag))
                    return "playFlag: integer expected";
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                if (!$util.isInteger(message.roomTag))
                    return "roomTag: integer expected";
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                if (!$util.isInteger(message.aeraId))
                    return "aeraId: integer expected";
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                if (!$util.isInteger(message.deskSeat))
                    return "deskSeat: integer expected";
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                if (!(message.ruleFlag && typeof message.ruleFlag.length === "number" || $util.isString(message.ruleFlag)))
                    return "ruleFlag: buffer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                if (!$util.isInteger(message.masterUserId))
                    return "masterUserId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildDeskOrganizeByRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildDeskOrganizeByRequest} ProBuildDeskOrganizeByRequest
         */
        ProBuildDeskOrganizeByRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildDeskOrganizeByRequest)
                return object;
            var message = new $root.messages.ProBuildDeskOrganizeByRequest();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.needRoomcard != null)
                message.needRoomcard = object.needRoomcard | 0;
            if (object.playFlag != null)
                message.playFlag = object.playFlag | 0;
            if (object.roomTag != null)
                message.roomTag = object.roomTag | 0;
            if (object.aeraId != null)
                message.aeraId = object.aeraId | 0;
            if (object.deskSeat != null)
                message.deskSeat = object.deskSeat | 0;
            if (object.ruleFlag != null)
                if (typeof object.ruleFlag === "string")
                    $util.base64.decode(object.ruleFlag, message.ruleFlag = $util.newBuffer($util.base64.length(object.ruleFlag)), 0);
                else if (object.ruleFlag.length)
                    message.ruleFlag = object.ruleFlag;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.masterUserId != null)
                message.masterUserId = object.masterUserId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildDeskOrganizeByRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @static
         * @param {messages.ProBuildDeskOrganizeByRequest} message ProBuildDeskOrganizeByRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildDeskOrganizeByRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.gameId = 0;
                object.needRoomcard = 0;
                object.playFlag = 0;
                object.roomTag = 0;
                object.aeraId = 0;
                object.deskSeat = 0;
                object.ruleFlag = options.bytes === String ? "" : [];
                object.organizeId = 0;
                object.masterUserId = 0;
            }
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.needRoomcard != null && message.hasOwnProperty("needRoomcard"))
                object.needRoomcard = message.needRoomcard;
            if (message.playFlag != null && message.hasOwnProperty("playFlag"))
                object.playFlag = message.playFlag;
            if (message.roomTag != null && message.hasOwnProperty("roomTag"))
                object.roomTag = message.roomTag;
            if (message.aeraId != null && message.hasOwnProperty("aeraId"))
                object.aeraId = message.aeraId;
            if (message.deskSeat != null && message.hasOwnProperty("deskSeat"))
                object.deskSeat = message.deskSeat;
            if (message.ruleFlag != null && message.hasOwnProperty("ruleFlag"))
                object.ruleFlag = options.bytes === String ? $util.base64.encode(message.ruleFlag, 0, message.ruleFlag.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleFlag) : message.ruleFlag;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.masterUserId != null && message.hasOwnProperty("masterUserId"))
                object.masterUserId = message.masterUserId;
            return object;
        };

        /**
         * Converts this ProBuildDeskOrganizeByRequest to JSON.
         * @function toJSON
         * @memberof messages.ProBuildDeskOrganizeByRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildDeskOrganizeByRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildDeskOrganizeByRequest.MSGID
         * @enum {string}
         * @property {number} ID=906 ID value
         */
        ProBuildDeskOrganizeByRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[906] = "ID"] = 906;
            return values;
        })();

        return ProBuildDeskOrganizeByRequest;
    })();

    messages.ProBuildDeskByOrganizeResponse = (function() {

        /**
         * Properties of a ProBuildDeskByOrganizeResponse.
         * @memberof messages
         * @interface IProBuildDeskByOrganizeResponse
         * @property {number|null} [errorNo] ProBuildDeskByOrganizeResponse errorNo
         * @property {Uint8Array|null} [errorInfo] ProBuildDeskByOrganizeResponse errorInfo
         * @property {messages.IRoomCardDeskInfo|null} [roomInfo] ProBuildDeskByOrganizeResponse roomInfo
         */

        /**
         * Constructs a new ProBuildDeskByOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProBuildDeskByOrganizeResponse.
         * @implements IProBuildDeskByOrganizeResponse
         * @constructor
         * @param {messages.IProBuildDeskByOrganizeResponse=} [properties] Properties to set
         */
        function ProBuildDeskByOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildDeskByOrganizeResponse errorNo.
         * @member {number} errorNo
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @instance
         */
        ProBuildDeskByOrganizeResponse.prototype.errorNo = 0;

        /**
         * ProBuildDeskByOrganizeResponse errorInfo.
         * @member {Uint8Array} errorInfo
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @instance
         */
        ProBuildDeskByOrganizeResponse.prototype.errorInfo = $util.newBuffer([]);

        /**
         * ProBuildDeskByOrganizeResponse roomInfo.
         * @member {messages.IRoomCardDeskInfo|null|undefined} roomInfo
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @instance
         */
        ProBuildDeskByOrganizeResponse.prototype.roomInfo = null;

        /**
         * Creates a new ProBuildDeskByOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {messages.IProBuildDeskByOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProBuildDeskByOrganizeResponse} ProBuildDeskByOrganizeResponse instance
         */
        ProBuildDeskByOrganizeResponse.create = function create(properties) {
            return new ProBuildDeskByOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProBuildDeskByOrganizeResponse message. Does not implicitly {@link messages.ProBuildDeskByOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {messages.IProBuildDeskByOrganizeResponse} message ProBuildDeskByOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorInfo);
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo"))
                $root.messages.RoomCardDeskInfo.encode(message.roomInfo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProBuildDeskByOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProBuildDeskByOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {messages.IProBuildDeskByOrganizeResponse} message ProBuildDeskByOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildDeskByOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildDeskByOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildDeskByOrganizeResponse} ProBuildDeskByOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildDeskByOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.errorNo = reader.int32();
                    break;
                case 3:
                    message.errorInfo = reader.bytes();
                    break;
                case 4:
                    message.roomInfo = $root.messages.RoomCardDeskInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildDeskByOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildDeskByOrganizeResponse} ProBuildDeskByOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildDeskByOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildDeskByOrganizeResponse message.
         * @function verify
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildDeskByOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                if (!$util.isInteger(message.errorNo))
                    return "errorNo: integer expected";
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                if (!(message.errorInfo && typeof message.errorInfo.length === "number" || $util.isString(message.errorInfo)))
                    return "errorInfo: buffer expected";
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo")) {
                var error = $root.messages.RoomCardDeskInfo.verify(message.roomInfo);
                if (error)
                    return "roomInfo." + error;
            }
            return null;
        };

        /**
         * Creates a ProBuildDeskByOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildDeskByOrganizeResponse} ProBuildDeskByOrganizeResponse
         */
        ProBuildDeskByOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildDeskByOrganizeResponse)
                return object;
            var message = new $root.messages.ProBuildDeskByOrganizeResponse();
            if (object.errorNo != null)
                message.errorNo = object.errorNo | 0;
            if (object.errorInfo != null)
                if (typeof object.errorInfo === "string")
                    $util.base64.decode(object.errorInfo, message.errorInfo = $util.newBuffer($util.base64.length(object.errorInfo)), 0);
                else if (object.errorInfo.length)
                    message.errorInfo = object.errorInfo;
            if (object.roomInfo != null) {
                if (typeof object.roomInfo !== "object")
                    throw TypeError(".messages.ProBuildDeskByOrganizeResponse.roomInfo: object expected");
                message.roomInfo = $root.messages.RoomCardDeskInfo.fromObject(object.roomInfo);
            }
            return message;
        };

        /**
         * Creates a plain object from a ProBuildDeskByOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @static
         * @param {messages.ProBuildDeskByOrganizeResponse} message ProBuildDeskByOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildDeskByOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.errorNo = 0;
                object.errorInfo = options.bytes === String ? "" : [];
                object.roomInfo = null;
            }
            if (message.errorNo != null && message.hasOwnProperty("errorNo"))
                object.errorNo = message.errorNo;
            if (message.errorInfo != null && message.hasOwnProperty("errorInfo"))
                object.errorInfo = options.bytes === String ? $util.base64.encode(message.errorInfo, 0, message.errorInfo.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorInfo) : message.errorInfo;
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo"))
                object.roomInfo = $root.messages.RoomCardDeskInfo.toObject(message.roomInfo, options);
            return object;
        };

        /**
         * Converts this ProBuildDeskByOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProBuildDeskByOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildDeskByOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildDeskByOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=907 ID value
         */
        ProBuildDeskByOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[907] = "ID"] = 907;
            return values;
        })();

        return ProBuildDeskByOrganizeResponse;
    })();

    messages.ProBuildByOrganizeDeskListRequest = (function() {

        /**
         * Properties of a ProBuildByOrganizeDeskListRequest.
         * @memberof messages
         * @interface IProBuildByOrganizeDeskListRequest
         * @property {number|null} [userId] ProBuildByOrganizeDeskListRequest userId
         * @property {number|null} [gameId] ProBuildByOrganizeDeskListRequest gameId
         * @property {number|null} [organizeId] ProBuildByOrganizeDeskListRequest organizeId
         */

        /**
         * Constructs a new ProBuildByOrganizeDeskListRequest.
         * @memberof messages
         * @classdesc Represents a ProBuildByOrganizeDeskListRequest.
         * @implements IProBuildByOrganizeDeskListRequest
         * @constructor
         * @param {messages.IProBuildByOrganizeDeskListRequest=} [properties] Properties to set
         */
        function ProBuildByOrganizeDeskListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildByOrganizeDeskListRequest userId.
         * @member {number} userId
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @instance
         */
        ProBuildByOrganizeDeskListRequest.prototype.userId = 0;

        /**
         * ProBuildByOrganizeDeskListRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @instance
         */
        ProBuildByOrganizeDeskListRequest.prototype.gameId = 0;

        /**
         * ProBuildByOrganizeDeskListRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @instance
         */
        ProBuildByOrganizeDeskListRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProBuildByOrganizeDeskListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {messages.IProBuildByOrganizeDeskListRequest=} [properties] Properties to set
         * @returns {messages.ProBuildByOrganizeDeskListRequest} ProBuildByOrganizeDeskListRequest instance
         */
        ProBuildByOrganizeDeskListRequest.create = function create(properties) {
            return new ProBuildByOrganizeDeskListRequest(properties);
        };

        /**
         * Encodes the specified ProBuildByOrganizeDeskListRequest message. Does not implicitly {@link messages.ProBuildByOrganizeDeskListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {messages.IProBuildByOrganizeDeskListRequest} message ProBuildByOrganizeDeskListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOrganizeDeskListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildByOrganizeDeskListRequest message, length delimited. Does not implicitly {@link messages.ProBuildByOrganizeDeskListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {messages.IProBuildByOrganizeDeskListRequest} message ProBuildByOrganizeDeskListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOrganizeDeskListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildByOrganizeDeskListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildByOrganizeDeskListRequest} ProBuildByOrganizeDeskListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOrganizeDeskListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildByOrganizeDeskListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildByOrganizeDeskListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildByOrganizeDeskListRequest} ProBuildByOrganizeDeskListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOrganizeDeskListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildByOrganizeDeskListRequest message.
         * @function verify
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildByOrganizeDeskListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildByOrganizeDeskListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildByOrganizeDeskListRequest} ProBuildByOrganizeDeskListRequest
         */
        ProBuildByOrganizeDeskListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildByOrganizeDeskListRequest)
                return object;
            var message = new $root.messages.ProBuildByOrganizeDeskListRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildByOrganizeDeskListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @static
         * @param {messages.ProBuildByOrganizeDeskListRequest} message ProBuildByOrganizeDeskListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildByOrganizeDeskListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProBuildByOrganizeDeskListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProBuildByOrganizeDeskListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildByOrganizeDeskListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildByOrganizeDeskListRequest.MSGID
         * @enum {string}
         * @property {number} ID=908 ID value
         */
        ProBuildByOrganizeDeskListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[908] = "ID"] = 908;
            return values;
        })();

        return ProBuildByOrganizeDeskListRequest;
    })();

    messages.ProBuildByOrganizeDeskListResponse = (function() {

        /**
         * Properties of a ProBuildByOrganizeDeskListResponse.
         * @memberof messages
         * @interface IProBuildByOrganizeDeskListResponse
         * @property {number|null} [currentTime] ProBuildByOrganizeDeskListResponse currentTime
         * @property {number|null} [roomNum] ProBuildByOrganizeDeskListResponse roomNum
         * @property {Array.<messages.IRoomCardDeskInfo>|null} [roomInfo] ProBuildByOrganizeDeskListResponse roomInfo
         * @property {number|null} [organizeId] ProBuildByOrganizeDeskListResponse organizeId
         */

        /**
         * Constructs a new ProBuildByOrganizeDeskListResponse.
         * @memberof messages
         * @classdesc Represents a ProBuildByOrganizeDeskListResponse.
         * @implements IProBuildByOrganizeDeskListResponse
         * @constructor
         * @param {messages.IProBuildByOrganizeDeskListResponse=} [properties] Properties to set
         */
        function ProBuildByOrganizeDeskListResponse(properties) {
            this.roomInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProBuildByOrganizeDeskListResponse currentTime.
         * @member {number} currentTime
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @instance
         */
        ProBuildByOrganizeDeskListResponse.prototype.currentTime = 0;

        /**
         * ProBuildByOrganizeDeskListResponse roomNum.
         * @member {number} roomNum
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @instance
         */
        ProBuildByOrganizeDeskListResponse.prototype.roomNum = 0;

        /**
         * ProBuildByOrganizeDeskListResponse roomInfo.
         * @member {Array.<messages.IRoomCardDeskInfo>} roomInfo
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @instance
         */
        ProBuildByOrganizeDeskListResponse.prototype.roomInfo = $util.emptyArray;

        /**
         * ProBuildByOrganizeDeskListResponse organizeId.
         * @member {number} organizeId
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @instance
         */
        ProBuildByOrganizeDeskListResponse.prototype.organizeId = 0;

        /**
         * Creates a new ProBuildByOrganizeDeskListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {messages.IProBuildByOrganizeDeskListResponse=} [properties] Properties to set
         * @returns {messages.ProBuildByOrganizeDeskListResponse} ProBuildByOrganizeDeskListResponse instance
         */
        ProBuildByOrganizeDeskListResponse.create = function create(properties) {
            return new ProBuildByOrganizeDeskListResponse(properties);
        };

        /**
         * Encodes the specified ProBuildByOrganizeDeskListResponse message. Does not implicitly {@link messages.ProBuildByOrganizeDeskListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {messages.IProBuildByOrganizeDeskListResponse} message ProBuildByOrganizeDeskListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOrganizeDeskListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.currentTime);
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.roomNum);
            if (message.roomInfo != null && message.roomInfo.length)
                for (var i = 0; i < message.roomInfo.length; ++i)
                    $root.messages.RoomCardDeskInfo.encode(message.roomInfo[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProBuildByOrganizeDeskListResponse message, length delimited. Does not implicitly {@link messages.ProBuildByOrganizeDeskListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {messages.IProBuildByOrganizeDeskListResponse} message ProBuildByOrganizeDeskListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProBuildByOrganizeDeskListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProBuildByOrganizeDeskListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProBuildByOrganizeDeskListResponse} ProBuildByOrganizeDeskListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOrganizeDeskListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProBuildByOrganizeDeskListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.currentTime = reader.int32();
                    break;
                case 3:
                    message.roomNum = reader.int32();
                    break;
                case 4:
                    if (!(message.roomInfo && message.roomInfo.length))
                        message.roomInfo = [];
                    message.roomInfo.push($root.messages.RoomCardDeskInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProBuildByOrganizeDeskListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProBuildByOrganizeDeskListResponse} ProBuildByOrganizeDeskListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProBuildByOrganizeDeskListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProBuildByOrganizeDeskListResponse message.
         * @function verify
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProBuildByOrganizeDeskListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                if (!$util.isInteger(message.currentTime))
                    return "currentTime: integer expected";
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                if (!$util.isInteger(message.roomNum))
                    return "roomNum: integer expected";
            if (message.roomInfo != null && message.hasOwnProperty("roomInfo")) {
                if (!Array.isArray(message.roomInfo))
                    return "roomInfo: array expected";
                for (var i = 0; i < message.roomInfo.length; ++i) {
                    var error = $root.messages.RoomCardDeskInfo.verify(message.roomInfo[i]);
                    if (error)
                        return "roomInfo." + error;
                }
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProBuildByOrganizeDeskListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProBuildByOrganizeDeskListResponse} ProBuildByOrganizeDeskListResponse
         */
        ProBuildByOrganizeDeskListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProBuildByOrganizeDeskListResponse)
                return object;
            var message = new $root.messages.ProBuildByOrganizeDeskListResponse();
            if (object.currentTime != null)
                message.currentTime = object.currentTime | 0;
            if (object.roomNum != null)
                message.roomNum = object.roomNum | 0;
            if (object.roomInfo) {
                if (!Array.isArray(object.roomInfo))
                    throw TypeError(".messages.ProBuildByOrganizeDeskListResponse.roomInfo: array expected");
                message.roomInfo = [];
                for (var i = 0; i < object.roomInfo.length; ++i) {
                    if (typeof object.roomInfo[i] !== "object")
                        throw TypeError(".messages.ProBuildByOrganizeDeskListResponse.roomInfo: object expected");
                    message.roomInfo[i] = $root.messages.RoomCardDeskInfo.fromObject(object.roomInfo[i]);
                }
            }
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProBuildByOrganizeDeskListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @static
         * @param {messages.ProBuildByOrganizeDeskListResponse} message ProBuildByOrganizeDeskListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProBuildByOrganizeDeskListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.roomInfo = [];
            if (options.defaults) {
                object.currentTime = 0;
                object.roomNum = 0;
                object.organizeId = 0;
            }
            if (message.currentTime != null && message.hasOwnProperty("currentTime"))
                object.currentTime = message.currentTime;
            if (message.roomNum != null && message.hasOwnProperty("roomNum"))
                object.roomNum = message.roomNum;
            if (message.roomInfo && message.roomInfo.length) {
                object.roomInfo = [];
                for (var j = 0; j < message.roomInfo.length; ++j)
                    object.roomInfo[j] = $root.messages.RoomCardDeskInfo.toObject(message.roomInfo[j], options);
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProBuildByOrganizeDeskListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProBuildByOrganizeDeskListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProBuildByOrganizeDeskListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProBuildByOrganizeDeskListResponse.MSGID
         * @enum {string}
         * @property {number} ID=909 ID value
         */
        ProBuildByOrganizeDeskListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[909] = "ID"] = 909;
            return values;
        })();

        return ProBuildByOrganizeDeskListResponse;
    })();

    messages.ProApplyQuitOrganizeRequest = (function() {

        /**
         * Properties of a ProApplyQuitOrganizeRequest.
         * @memberof messages
         * @interface IProApplyQuitOrganizeRequest
         * @property {number|null} [userId] ProApplyQuitOrganizeRequest userId
         * @property {number|null} [gameId] ProApplyQuitOrganizeRequest gameId
         * @property {number|null} [organizeId] ProApplyQuitOrganizeRequest organizeId
         */

        /**
         * Constructs a new ProApplyQuitOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProApplyQuitOrganizeRequest.
         * @implements IProApplyQuitOrganizeRequest
         * @constructor
         * @param {messages.IProApplyQuitOrganizeRequest=} [properties] Properties to set
         */
        function ProApplyQuitOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyQuitOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @instance
         */
        ProApplyQuitOrganizeRequest.prototype.userId = 0;

        /**
         * ProApplyQuitOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @instance
         */
        ProApplyQuitOrganizeRequest.prototype.gameId = 0;

        /**
         * ProApplyQuitOrganizeRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @instance
         */
        ProApplyQuitOrganizeRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProApplyQuitOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {messages.IProApplyQuitOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProApplyQuitOrganizeRequest} ProApplyQuitOrganizeRequest instance
         */
        ProApplyQuitOrganizeRequest.create = function create(properties) {
            return new ProApplyQuitOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProApplyQuitOrganizeRequest message. Does not implicitly {@link messages.ProApplyQuitOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {messages.IProApplyQuitOrganizeRequest} message ProApplyQuitOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyQuitOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProApplyQuitOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProApplyQuitOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {messages.IProApplyQuitOrganizeRequest} message ProApplyQuitOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyQuitOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyQuitOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyQuitOrganizeRequest} ProApplyQuitOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyQuitOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyQuitOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyQuitOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyQuitOrganizeRequest} ProApplyQuitOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyQuitOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyQuitOrganizeRequest message.
         * @function verify
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyQuitOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProApplyQuitOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyQuitOrganizeRequest} ProApplyQuitOrganizeRequest
         */
        ProApplyQuitOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyQuitOrganizeRequest)
                return object;
            var message = new $root.messages.ProApplyQuitOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyQuitOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @static
         * @param {messages.ProApplyQuitOrganizeRequest} message ProApplyQuitOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyQuitOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProApplyQuitOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProApplyQuitOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyQuitOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyQuitOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=910 ID value
         */
        ProApplyQuitOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[910] = "ID"] = 910;
            return values;
        })();

        return ProApplyQuitOrganizeRequest;
    })();

    messages.ProApplyQuitOrganizeResponse = (function() {

        /**
         * Properties of a ProApplyQuitOrganizeResponse.
         * @memberof messages
         * @interface IProApplyQuitOrganizeResponse
         * @property {number|null} [result] ProApplyQuitOrganizeResponse result
         * @property {Uint8Array|null} [info] ProApplyQuitOrganizeResponse info
         */

        /**
         * Constructs a new ProApplyQuitOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProApplyQuitOrganizeResponse.
         * @implements IProApplyQuitOrganizeResponse
         * @constructor
         * @param {messages.IProApplyQuitOrganizeResponse=} [properties] Properties to set
         */
        function ProApplyQuitOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyQuitOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @instance
         */
        ProApplyQuitOrganizeResponse.prototype.result = 0;

        /**
         * ProApplyQuitOrganizeResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @instance
         */
        ProApplyQuitOrganizeResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProApplyQuitOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {messages.IProApplyQuitOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProApplyQuitOrganizeResponse} ProApplyQuitOrganizeResponse instance
         */
        ProApplyQuitOrganizeResponse.create = function create(properties) {
            return new ProApplyQuitOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProApplyQuitOrganizeResponse message. Does not implicitly {@link messages.ProApplyQuitOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {messages.IProApplyQuitOrganizeResponse} message ProApplyQuitOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyQuitOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProApplyQuitOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProApplyQuitOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {messages.IProApplyQuitOrganizeResponse} message ProApplyQuitOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyQuitOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyQuitOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyQuitOrganizeResponse} ProApplyQuitOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyQuitOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyQuitOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyQuitOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyQuitOrganizeResponse} ProApplyQuitOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyQuitOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyQuitOrganizeResponse message.
         * @function verify
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyQuitOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProApplyQuitOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyQuitOrganizeResponse} ProApplyQuitOrganizeResponse
         */
        ProApplyQuitOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyQuitOrganizeResponse)
                return object;
            var message = new $root.messages.ProApplyQuitOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyQuitOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @static
         * @param {messages.ProApplyQuitOrganizeResponse} message ProApplyQuitOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyQuitOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProApplyQuitOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProApplyQuitOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyQuitOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyQuitOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=911 ID value
         */
        ProApplyQuitOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[911] = "ID"] = 911;
            return values;
        })();

        return ProApplyQuitOrganizeResponse;
    })();

    messages.ProDealApplyRequest = (function() {

        /**
         * Properties of a ProDealApplyRequest.
         * @memberof messages
         * @interface IProDealApplyRequest
         * @property {number|null} [dealId] ProDealApplyRequest dealId
         * @property {messages.DealType|null} [result] ProDealApplyRequest result
         * @property {number|null} [userId] ProDealApplyRequest userId
         * @property {number|null} [gameId] ProDealApplyRequest gameId
         */

        /**
         * Constructs a new ProDealApplyRequest.
         * @memberof messages
         * @classdesc Represents a ProDealApplyRequest.
         * @implements IProDealApplyRequest
         * @constructor
         * @param {messages.IProDealApplyRequest=} [properties] Properties to set
         */
        function ProDealApplyRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealApplyRequest dealId.
         * @member {number} dealId
         * @memberof messages.ProDealApplyRequest
         * @instance
         */
        ProDealApplyRequest.prototype.dealId = 0;

        /**
         * ProDealApplyRequest result.
         * @member {messages.DealType} result
         * @memberof messages.ProDealApplyRequest
         * @instance
         */
        ProDealApplyRequest.prototype.result = 1;

        /**
         * ProDealApplyRequest userId.
         * @member {number} userId
         * @memberof messages.ProDealApplyRequest
         * @instance
         */
        ProDealApplyRequest.prototype.userId = 0;

        /**
         * ProDealApplyRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProDealApplyRequest
         * @instance
         */
        ProDealApplyRequest.prototype.gameId = 0;

        /**
         * Creates a new ProDealApplyRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {messages.IProDealApplyRequest=} [properties] Properties to set
         * @returns {messages.ProDealApplyRequest} ProDealApplyRequest instance
         */
        ProDealApplyRequest.create = function create(properties) {
            return new ProDealApplyRequest(properties);
        };

        /**
         * Encodes the specified ProDealApplyRequest message. Does not implicitly {@link messages.ProDealApplyRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {messages.IProDealApplyRequest} message ProDealApplyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealApplyRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dealId);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProDealApplyRequest message, length delimited. Does not implicitly {@link messages.ProDealApplyRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {messages.IProDealApplyRequest} message ProDealApplyRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealApplyRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealApplyRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealApplyRequest} ProDealApplyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealApplyRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealApplyRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.dealId = reader.int32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                case 4:
                    message.userId = reader.int32();
                    break;
                case 5:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealApplyRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealApplyRequest} ProDealApplyRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealApplyRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealApplyRequest message.
         * @function verify
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealApplyRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                if (!$util.isInteger(message.dealId))
                    return "dealId: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                switch (message.result) {
                default:
                    return "result: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProDealApplyRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealApplyRequest} ProDealApplyRequest
         */
        ProDealApplyRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealApplyRequest)
                return object;
            var message = new $root.messages.ProDealApplyRequest();
            if (object.dealId != null)
                message.dealId = object.dealId | 0;
            switch (object.result) {
            case "DEALTYPE_AGREE":
            case 1:
                message.result = 1;
                break;
            case "DEALTYPE_REJECT":
            case 2:
                message.result = 2;
                break;
            }
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProDealApplyRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealApplyRequest
         * @static
         * @param {messages.ProDealApplyRequest} message ProDealApplyRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealApplyRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.dealId = 0;
                object.result = options.enums === String ? "DEALTYPE_AGREE" : 1;
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                object.dealId = message.dealId;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = options.enums === String ? $root.messages.DealType[message.result] : message.result;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProDealApplyRequest to JSON.
         * @function toJSON
         * @memberof messages.ProDealApplyRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealApplyRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealApplyRequest.MSGID
         * @enum {string}
         * @property {number} ID=912 ID value
         */
        ProDealApplyRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[912] = "ID"] = 912;
            return values;
        })();

        return ProDealApplyRequest;
    })();

    messages.ProDealApplyResponse = (function() {

        /**
         * Properties of a ProDealApplyResponse.
         * @memberof messages
         * @interface IProDealApplyResponse
         * @property {number|null} [result] ProDealApplyResponse result
         * @property {Uint8Array|null} [info] ProDealApplyResponse info
         */

        /**
         * Constructs a new ProDealApplyResponse.
         * @memberof messages
         * @classdesc Represents a ProDealApplyResponse.
         * @implements IProDealApplyResponse
         * @constructor
         * @param {messages.IProDealApplyResponse=} [properties] Properties to set
         */
        function ProDealApplyResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealApplyResponse result.
         * @member {number} result
         * @memberof messages.ProDealApplyResponse
         * @instance
         */
        ProDealApplyResponse.prototype.result = 0;

        /**
         * ProDealApplyResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProDealApplyResponse
         * @instance
         */
        ProDealApplyResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProDealApplyResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {messages.IProDealApplyResponse=} [properties] Properties to set
         * @returns {messages.ProDealApplyResponse} ProDealApplyResponse instance
         */
        ProDealApplyResponse.create = function create(properties) {
            return new ProDealApplyResponse(properties);
        };

        /**
         * Encodes the specified ProDealApplyResponse message. Does not implicitly {@link messages.ProDealApplyResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {messages.IProDealApplyResponse} message ProDealApplyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealApplyResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProDealApplyResponse message, length delimited. Does not implicitly {@link messages.ProDealApplyResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {messages.IProDealApplyResponse} message ProDealApplyResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealApplyResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealApplyResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealApplyResponse} ProDealApplyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealApplyResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealApplyResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealApplyResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealApplyResponse} ProDealApplyResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealApplyResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealApplyResponse message.
         * @function verify
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealApplyResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProDealApplyResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealApplyResponse} ProDealApplyResponse
         */
        ProDealApplyResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealApplyResponse)
                return object;
            var message = new $root.messages.ProDealApplyResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProDealApplyResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealApplyResponse
         * @static
         * @param {messages.ProDealApplyResponse} message ProDealApplyResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealApplyResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProDealApplyResponse to JSON.
         * @function toJSON
         * @memberof messages.ProDealApplyResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealApplyResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealApplyResponse.MSGID
         * @enum {string}
         * @property {number} ID=913 ID value
         */
        ProDealApplyResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[913] = "ID"] = 913;
            return values;
        })();

        return ProDealApplyResponse;
    })();

    messages.ProApplyListRequest = (function() {

        /**
         * Properties of a ProApplyListRequest.
         * @memberof messages
         * @interface IProApplyListRequest
         * @property {number|null} [organizeId] ProApplyListRequest organizeId
         */

        /**
         * Constructs a new ProApplyListRequest.
         * @memberof messages
         * @classdesc Represents a ProApplyListRequest.
         * @implements IProApplyListRequest
         * @constructor
         * @param {messages.IProApplyListRequest=} [properties] Properties to set
         */
        function ProApplyListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyListRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProApplyListRequest
         * @instance
         */
        ProApplyListRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProApplyListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {messages.IProApplyListRequest=} [properties] Properties to set
         * @returns {messages.ProApplyListRequest} ProApplyListRequest instance
         */
        ProApplyListRequest.create = function create(properties) {
            return new ProApplyListRequest(properties);
        };

        /**
         * Encodes the specified ProApplyListRequest message. Does not implicitly {@link messages.ProApplyListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {messages.IProApplyListRequest} message ProApplyListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProApplyListRequest message, length delimited. Does not implicitly {@link messages.ProApplyListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {messages.IProApplyListRequest} message ProApplyListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyListRequest} ProApplyListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyListRequest} ProApplyListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyListRequest message.
         * @function verify
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProApplyListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyListRequest} ProApplyListRequest
         */
        ProApplyListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyListRequest)
                return object;
            var message = new $root.messages.ProApplyListRequest();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyListRequest
         * @static
         * @param {messages.ProApplyListRequest} message ProApplyListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.organizeId = 0;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProApplyListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProApplyListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyListRequest.MSGID
         * @enum {string}
         * @property {number} ID=914 ID value
         */
        ProApplyListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[914] = "ID"] = 914;
            return values;
        })();

        return ProApplyListRequest;
    })();

    messages.ProApplyListResponse = (function() {

        /**
         * Properties of a ProApplyListResponse.
         * @memberof messages
         * @interface IProApplyListResponse
         * @property {Array.<messages.ICommonUserInfo>|null} [info] ProApplyListResponse info
         * @property {Uint8Array|null} [text] ProApplyListResponse text
         */

        /**
         * Constructs a new ProApplyListResponse.
         * @memberof messages
         * @classdesc Represents a ProApplyListResponse.
         * @implements IProApplyListResponse
         * @constructor
         * @param {messages.IProApplyListResponse=} [properties] Properties to set
         */
        function ProApplyListResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProApplyListResponse info.
         * @member {Array.<messages.ICommonUserInfo>} info
         * @memberof messages.ProApplyListResponse
         * @instance
         */
        ProApplyListResponse.prototype.info = $util.emptyArray;

        /**
         * ProApplyListResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProApplyListResponse
         * @instance
         */
        ProApplyListResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProApplyListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {messages.IProApplyListResponse=} [properties] Properties to set
         * @returns {messages.ProApplyListResponse} ProApplyListResponse instance
         */
        ProApplyListResponse.create = function create(properties) {
            return new ProApplyListResponse(properties);
        };

        /**
         * Encodes the specified ProApplyListResponse message. Does not implicitly {@link messages.ProApplyListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {messages.IProApplyListResponse} message ProApplyListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.CommonUserInfo.encode(message.info[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProApplyListResponse message, length delimited. Does not implicitly {@link messages.ProApplyListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {messages.IProApplyListResponse} message ProApplyListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProApplyListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProApplyListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProApplyListResponse} ProApplyListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProApplyListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.CommonUserInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProApplyListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProApplyListResponse} ProApplyListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProApplyListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProApplyListResponse message.
         * @function verify
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProApplyListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.CommonUserInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProApplyListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProApplyListResponse} ProApplyListResponse
         */
        ProApplyListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProApplyListResponse)
                return object;
            var message = new $root.messages.ProApplyListResponse();
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProApplyListResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProApplyListResponse.info: object expected");
                    message.info[i] = $root.messages.CommonUserInfo.fromObject(object.info[i]);
                }
            }
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProApplyListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProApplyListResponse
         * @static
         * @param {messages.ProApplyListResponse} message ProApplyListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProApplyListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults)
                object.text = options.bytes === String ? "" : [];
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.CommonUserInfo.toObject(message.info[j], options);
            }
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProApplyListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProApplyListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProApplyListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProApplyListResponse.MSGID
         * @enum {string}
         * @property {number} ID=915 ID value
         */
        ProApplyListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[915] = "ID"] = 915;
            return values;
        })();

        return ProApplyListResponse;
    })();

    messages.ProGetCommonUserInfoRequest = (function() {

        /**
         * Properties of a ProGetCommonUserInfoRequest.
         * @memberof messages
         * @interface IProGetCommonUserInfoRequest
         * @property {Array.<number>|null} [userId] ProGetCommonUserInfoRequest userId
         */

        /**
         * Constructs a new ProGetCommonUserInfoRequest.
         * @memberof messages
         * @classdesc Represents a ProGetCommonUserInfoRequest.
         * @implements IProGetCommonUserInfoRequest
         * @constructor
         * @param {messages.IProGetCommonUserInfoRequest=} [properties] Properties to set
         */
        function ProGetCommonUserInfoRequest(properties) {
            this.userId = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetCommonUserInfoRequest userId.
         * @member {Array.<number>} userId
         * @memberof messages.ProGetCommonUserInfoRequest
         * @instance
         */
        ProGetCommonUserInfoRequest.prototype.userId = $util.emptyArray;

        /**
         * Creates a new ProGetCommonUserInfoRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {messages.IProGetCommonUserInfoRequest=} [properties] Properties to set
         * @returns {messages.ProGetCommonUserInfoRequest} ProGetCommonUserInfoRequest instance
         */
        ProGetCommonUserInfoRequest.create = function create(properties) {
            return new ProGetCommonUserInfoRequest(properties);
        };

        /**
         * Encodes the specified ProGetCommonUserInfoRequest message. Does not implicitly {@link messages.ProGetCommonUserInfoRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {messages.IProGetCommonUserInfoRequest} message ProGetCommonUserInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetCommonUserInfoRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.userId.length)
                for (var i = 0; i < message.userId.length; ++i)
                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId[i]);
            return writer;
        };

        /**
         * Encodes the specified ProGetCommonUserInfoRequest message, length delimited. Does not implicitly {@link messages.ProGetCommonUserInfoRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {messages.IProGetCommonUserInfoRequest} message ProGetCommonUserInfoRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetCommonUserInfoRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetCommonUserInfoRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetCommonUserInfoRequest} ProGetCommonUserInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetCommonUserInfoRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetCommonUserInfoRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.userId && message.userId.length))
                        message.userId = [];
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2)
                            message.userId.push(reader.int32());
                    } else
                        message.userId.push(reader.int32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetCommonUserInfoRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetCommonUserInfoRequest} ProGetCommonUserInfoRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetCommonUserInfoRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetCommonUserInfoRequest message.
         * @function verify
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetCommonUserInfoRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId")) {
                if (!Array.isArray(message.userId))
                    return "userId: array expected";
                for (var i = 0; i < message.userId.length; ++i)
                    if (!$util.isInteger(message.userId[i]))
                        return "userId: integer[] expected";
            }
            return null;
        };

        /**
         * Creates a ProGetCommonUserInfoRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetCommonUserInfoRequest} ProGetCommonUserInfoRequest
         */
        ProGetCommonUserInfoRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetCommonUserInfoRequest)
                return object;
            var message = new $root.messages.ProGetCommonUserInfoRequest();
            if (object.userId) {
                if (!Array.isArray(object.userId))
                    throw TypeError(".messages.ProGetCommonUserInfoRequest.userId: array expected");
                message.userId = [];
                for (var i = 0; i < object.userId.length; ++i)
                    message.userId[i] = object.userId[i] | 0;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetCommonUserInfoRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetCommonUserInfoRequest
         * @static
         * @param {messages.ProGetCommonUserInfoRequest} message ProGetCommonUserInfoRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetCommonUserInfoRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.userId = [];
            if (message.userId && message.userId.length) {
                object.userId = [];
                for (var j = 0; j < message.userId.length; ++j)
                    object.userId[j] = message.userId[j];
            }
            return object;
        };

        /**
         * Converts this ProGetCommonUserInfoRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetCommonUserInfoRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetCommonUserInfoRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetCommonUserInfoRequest.MSGID
         * @enum {string}
         * @property {number} ID=916 ID value
         */
        ProGetCommonUserInfoRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[916] = "ID"] = 916;
            return values;
        })();

        return ProGetCommonUserInfoRequest;
    })();

    messages.ProGetCommonUserInfoResponse = (function() {

        /**
         * Properties of a ProGetCommonUserInfoResponse.
         * @memberof messages
         * @interface IProGetCommonUserInfoResponse
         * @property {Array.<messages.ICommonUserInfo>|null} [info] ProGetCommonUserInfoResponse info
         * @property {Uint8Array|null} [text] ProGetCommonUserInfoResponse text
         */

        /**
         * Constructs a new ProGetCommonUserInfoResponse.
         * @memberof messages
         * @classdesc Represents a ProGetCommonUserInfoResponse.
         * @implements IProGetCommonUserInfoResponse
         * @constructor
         * @param {messages.IProGetCommonUserInfoResponse=} [properties] Properties to set
         */
        function ProGetCommonUserInfoResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetCommonUserInfoResponse info.
         * @member {Array.<messages.ICommonUserInfo>} info
         * @memberof messages.ProGetCommonUserInfoResponse
         * @instance
         */
        ProGetCommonUserInfoResponse.prototype.info = $util.emptyArray;

        /**
         * ProGetCommonUserInfoResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProGetCommonUserInfoResponse
         * @instance
         */
        ProGetCommonUserInfoResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProGetCommonUserInfoResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {messages.IProGetCommonUserInfoResponse=} [properties] Properties to set
         * @returns {messages.ProGetCommonUserInfoResponse} ProGetCommonUserInfoResponse instance
         */
        ProGetCommonUserInfoResponse.create = function create(properties) {
            return new ProGetCommonUserInfoResponse(properties);
        };

        /**
         * Encodes the specified ProGetCommonUserInfoResponse message. Does not implicitly {@link messages.ProGetCommonUserInfoResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {messages.IProGetCommonUserInfoResponse} message ProGetCommonUserInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetCommonUserInfoResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.CommonUserInfo.encode(message.info[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProGetCommonUserInfoResponse message, length delimited. Does not implicitly {@link messages.ProGetCommonUserInfoResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {messages.IProGetCommonUserInfoResponse} message ProGetCommonUserInfoResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetCommonUserInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetCommonUserInfoResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetCommonUserInfoResponse} ProGetCommonUserInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetCommonUserInfoResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetCommonUserInfoResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.CommonUserInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetCommonUserInfoResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetCommonUserInfoResponse} ProGetCommonUserInfoResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetCommonUserInfoResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetCommonUserInfoResponse message.
         * @function verify
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetCommonUserInfoResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.CommonUserInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProGetCommonUserInfoResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetCommonUserInfoResponse} ProGetCommonUserInfoResponse
         */
        ProGetCommonUserInfoResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetCommonUserInfoResponse)
                return object;
            var message = new $root.messages.ProGetCommonUserInfoResponse();
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProGetCommonUserInfoResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProGetCommonUserInfoResponse.info: object expected");
                    message.info[i] = $root.messages.CommonUserInfo.fromObject(object.info[i]);
                }
            }
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProGetCommonUserInfoResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetCommonUserInfoResponse
         * @static
         * @param {messages.ProGetCommonUserInfoResponse} message ProGetCommonUserInfoResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetCommonUserInfoResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults)
                object.text = options.bytes === String ? "" : [];
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.CommonUserInfo.toObject(message.info[j], options);
            }
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProGetCommonUserInfoResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetCommonUserInfoResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetCommonUserInfoResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetCommonUserInfoResponse.MSGID
         * @enum {string}
         * @property {number} ID=917 ID value
         */
        ProGetCommonUserInfoResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[917] = "ID"] = 917;
            return values;
        })();

        return ProGetCommonUserInfoResponse;
    })();

    messages.ProCreateListRequest = (function() {

        /**
         * Properties of a ProCreateListRequest.
         * @memberof messages
         * @interface IProCreateListRequest
         * @property {number|null} [organizeId] ProCreateListRequest organizeId
         */

        /**
         * Constructs a new ProCreateListRequest.
         * @memberof messages
         * @classdesc Represents a ProCreateListRequest.
         * @implements IProCreateListRequest
         * @constructor
         * @param {messages.IProCreateListRequest=} [properties] Properties to set
         */
        function ProCreateListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCreateListRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProCreateListRequest
         * @instance
         */
        ProCreateListRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProCreateListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {messages.IProCreateListRequest=} [properties] Properties to set
         * @returns {messages.ProCreateListRequest} ProCreateListRequest instance
         */
        ProCreateListRequest.create = function create(properties) {
            return new ProCreateListRequest(properties);
        };

        /**
         * Encodes the specified ProCreateListRequest message. Does not implicitly {@link messages.ProCreateListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {messages.IProCreateListRequest} message ProCreateListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProCreateListRequest message, length delimited. Does not implicitly {@link messages.ProCreateListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {messages.IProCreateListRequest} message ProCreateListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCreateListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCreateListRequest} ProCreateListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCreateListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCreateListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCreateListRequest} ProCreateListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCreateListRequest message.
         * @function verify
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCreateListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProCreateListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCreateListRequest} ProCreateListRequest
         */
        ProCreateListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCreateListRequest)
                return object;
            var message = new $root.messages.ProCreateListRequest();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProCreateListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCreateListRequest
         * @static
         * @param {messages.ProCreateListRequest} message ProCreateListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCreateListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.organizeId = 0;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProCreateListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProCreateListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCreateListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCreateListRequest.MSGID
         * @enum {string}
         * @property {number} ID=918 ID value
         */
        ProCreateListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[918] = "ID"] = 918;
            return values;
        })();

        return ProCreateListRequest;
    })();

    messages.ProCreateListResponse = (function() {

        /**
         * Properties of a ProCreateListResponse.
         * @memberof messages
         * @interface IProCreateListResponse
         * @property {Array.<messages.ICommonUserInfo>|null} [info] ProCreateListResponse info
         * @property {Uint8Array|null} [text] ProCreateListResponse text
         */

        /**
         * Constructs a new ProCreateListResponse.
         * @memberof messages
         * @classdesc Represents a ProCreateListResponse.
         * @implements IProCreateListResponse
         * @constructor
         * @param {messages.IProCreateListResponse=} [properties] Properties to set
         */
        function ProCreateListResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCreateListResponse info.
         * @member {Array.<messages.ICommonUserInfo>} info
         * @memberof messages.ProCreateListResponse
         * @instance
         */
        ProCreateListResponse.prototype.info = $util.emptyArray;

        /**
         * ProCreateListResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProCreateListResponse
         * @instance
         */
        ProCreateListResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProCreateListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {messages.IProCreateListResponse=} [properties] Properties to set
         * @returns {messages.ProCreateListResponse} ProCreateListResponse instance
         */
        ProCreateListResponse.create = function create(properties) {
            return new ProCreateListResponse(properties);
        };

        /**
         * Encodes the specified ProCreateListResponse message. Does not implicitly {@link messages.ProCreateListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {messages.IProCreateListResponse} message ProCreateListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.CommonUserInfo.encode(message.info[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProCreateListResponse message, length delimited. Does not implicitly {@link messages.ProCreateListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {messages.IProCreateListResponse} message ProCreateListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCreateListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCreateListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCreateListResponse} ProCreateListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCreateListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.CommonUserInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCreateListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCreateListResponse} ProCreateListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCreateListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCreateListResponse message.
         * @function verify
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCreateListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.CommonUserInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProCreateListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCreateListResponse} ProCreateListResponse
         */
        ProCreateListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCreateListResponse)
                return object;
            var message = new $root.messages.ProCreateListResponse();
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProCreateListResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProCreateListResponse.info: object expected");
                    message.info[i] = $root.messages.CommonUserInfo.fromObject(object.info[i]);
                }
            }
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProCreateListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCreateListResponse
         * @static
         * @param {messages.ProCreateListResponse} message ProCreateListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCreateListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults)
                object.text = options.bytes === String ? "" : [];
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.CommonUserInfo.toObject(message.info[j], options);
            }
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProCreateListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProCreateListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCreateListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCreateListResponse.MSGID
         * @enum {string}
         * @property {number} ID=919 ID value
         */
        ProCreateListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[919] = "ID"] = 919;
            return values;
        })();

        return ProCreateListResponse;
    })();

    messages.ProMemberListRequest = (function() {

        /**
         * Properties of a ProMemberListRequest.
         * @memberof messages
         * @interface IProMemberListRequest
         * @property {number|null} [organizeId] ProMemberListRequest organizeId
         * @property {number|null} [gameId] ProMemberListRequest gameId
         */

        /**
         * Constructs a new ProMemberListRequest.
         * @memberof messages
         * @classdesc Represents a ProMemberListRequest.
         * @implements IProMemberListRequest
         * @constructor
         * @param {messages.IProMemberListRequest=} [properties] Properties to set
         */
        function ProMemberListRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProMemberListRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProMemberListRequest
         * @instance
         */
        ProMemberListRequest.prototype.organizeId = 0;

        /**
         * ProMemberListRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProMemberListRequest
         * @instance
         */
        ProMemberListRequest.prototype.gameId = 0;

        /**
         * Creates a new ProMemberListRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {messages.IProMemberListRequest=} [properties] Properties to set
         * @returns {messages.ProMemberListRequest} ProMemberListRequest instance
         */
        ProMemberListRequest.create = function create(properties) {
            return new ProMemberListRequest(properties);
        };

        /**
         * Encodes the specified ProMemberListRequest message. Does not implicitly {@link messages.ProMemberListRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {messages.IProMemberListRequest} message ProMemberListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMemberListRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProMemberListRequest message, length delimited. Does not implicitly {@link messages.ProMemberListRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {messages.IProMemberListRequest} message ProMemberListRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMemberListRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProMemberListRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProMemberListRequest} ProMemberListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMemberListRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProMemberListRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProMemberListRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProMemberListRequest} ProMemberListRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMemberListRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProMemberListRequest message.
         * @function verify
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProMemberListRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProMemberListRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProMemberListRequest} ProMemberListRequest
         */
        ProMemberListRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProMemberListRequest)
                return object;
            var message = new $root.messages.ProMemberListRequest();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProMemberListRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProMemberListRequest
         * @static
         * @param {messages.ProMemberListRequest} message ProMemberListRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProMemberListRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.gameId = 0;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProMemberListRequest to JSON.
         * @function toJSON
         * @memberof messages.ProMemberListRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProMemberListRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProMemberListRequest.MSGID
         * @enum {string}
         * @property {number} ID=920 ID value
         */
        ProMemberListRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[920] = "ID"] = 920;
            return values;
        })();

        return ProMemberListRequest;
    })();

    messages.ProMemberListResponse = (function() {

        /**
         * Properties of a ProMemberListResponse.
         * @memberof messages
         * @interface IProMemberListResponse
         * @property {Array.<messages.ICommonUserInfo>|null} [info] ProMemberListResponse info
         * @property {Uint8Array|null} [text] ProMemberListResponse text
         * @property {number|null} [totalNum] ProMemberListResponse totalNum
         * @property {number|null} [limitNum] ProMemberListResponse limitNum
         */

        /**
         * Constructs a new ProMemberListResponse.
         * @memberof messages
         * @classdesc Represents a ProMemberListResponse.
         * @implements IProMemberListResponse
         * @constructor
         * @param {messages.IProMemberListResponse=} [properties] Properties to set
         */
        function ProMemberListResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProMemberListResponse info.
         * @member {Array.<messages.ICommonUserInfo>} info
         * @memberof messages.ProMemberListResponse
         * @instance
         */
        ProMemberListResponse.prototype.info = $util.emptyArray;

        /**
         * ProMemberListResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProMemberListResponse
         * @instance
         */
        ProMemberListResponse.prototype.text = $util.newBuffer([]);

        /**
         * ProMemberListResponse totalNum.
         * @member {number} totalNum
         * @memberof messages.ProMemberListResponse
         * @instance
         */
        ProMemberListResponse.prototype.totalNum = 0;

        /**
         * ProMemberListResponse limitNum.
         * @member {number} limitNum
         * @memberof messages.ProMemberListResponse
         * @instance
         */
        ProMemberListResponse.prototype.limitNum = 0;

        /**
         * Creates a new ProMemberListResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {messages.IProMemberListResponse=} [properties] Properties to set
         * @returns {messages.ProMemberListResponse} ProMemberListResponse instance
         */
        ProMemberListResponse.create = function create(properties) {
            return new ProMemberListResponse(properties);
        };

        /**
         * Encodes the specified ProMemberListResponse message. Does not implicitly {@link messages.ProMemberListResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {messages.IProMemberListResponse} message ProMemberListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMemberListResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.CommonUserInfo.encode(message.info[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.totalNum);
            if (message.limitNum != null && message.hasOwnProperty("limitNum"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.limitNum);
            return writer;
        };

        /**
         * Encodes the specified ProMemberListResponse message, length delimited. Does not implicitly {@link messages.ProMemberListResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {messages.IProMemberListResponse} message ProMemberListResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProMemberListResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProMemberListResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProMemberListResponse} ProMemberListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMemberListResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProMemberListResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.CommonUserInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                case 4:
                    message.totalNum = reader.int32();
                    break;
                case 5:
                    message.limitNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProMemberListResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProMemberListResponse} ProMemberListResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProMemberListResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProMemberListResponse message.
         * @function verify
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProMemberListResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.CommonUserInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                if (!$util.isInteger(message.totalNum))
                    return "totalNum: integer expected";
            if (message.limitNum != null && message.hasOwnProperty("limitNum"))
                if (!$util.isInteger(message.limitNum))
                    return "limitNum: integer expected";
            return null;
        };

        /**
         * Creates a ProMemberListResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProMemberListResponse} ProMemberListResponse
         */
        ProMemberListResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProMemberListResponse)
                return object;
            var message = new $root.messages.ProMemberListResponse();
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProMemberListResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProMemberListResponse.info: object expected");
                    message.info[i] = $root.messages.CommonUserInfo.fromObject(object.info[i]);
                }
            }
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            if (object.totalNum != null)
                message.totalNum = object.totalNum | 0;
            if (object.limitNum != null)
                message.limitNum = object.limitNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProMemberListResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProMemberListResponse
         * @static
         * @param {messages.ProMemberListResponse} message ProMemberListResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProMemberListResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults) {
                object.text = options.bytes === String ? "" : [];
                object.totalNum = 0;
                object.limitNum = 0;
            }
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.CommonUserInfo.toObject(message.info[j], options);
            }
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            if (message.totalNum != null && message.hasOwnProperty("totalNum"))
                object.totalNum = message.totalNum;
            if (message.limitNum != null && message.hasOwnProperty("limitNum"))
                object.limitNum = message.limitNum;
            return object;
        };

        /**
         * Converts this ProMemberListResponse to JSON.
         * @function toJSON
         * @memberof messages.ProMemberListResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProMemberListResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProMemberListResponse.MSGID
         * @enum {string}
         * @property {number} ID=921 ID value
         */
        ProMemberListResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[921] = "ID"] = 921;
            return values;
        })();

        return ProMemberListResponse;
    })();

    messages.ProDealOrganizeMemberRequest = (function() {

        /**
         * Properties of a ProDealOrganizeMemberRequest.
         * @memberof messages
         * @interface IProDealOrganizeMemberRequest
         * @property {number|null} [userId] ProDealOrganizeMemberRequest userId
         * @property {number|null} [gameId] ProDealOrganizeMemberRequest gameId
         * @property {number|null} [organizeId] ProDealOrganizeMemberRequest organizeId
         * @property {number|null} [dealUserId] ProDealOrganizeMemberRequest dealUserId
         * @property {number|null} [dealType] ProDealOrganizeMemberRequest dealType
         * @property {Uint8Array|null} [otherName] ProDealOrganizeMemberRequest otherName
         */

        /**
         * Constructs a new ProDealOrganizeMemberRequest.
         * @memberof messages
         * @classdesc Represents a ProDealOrganizeMemberRequest.
         * @implements IProDealOrganizeMemberRequest
         * @constructor
         * @param {messages.IProDealOrganizeMemberRequest=} [properties] Properties to set
         */
        function ProDealOrganizeMemberRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealOrganizeMemberRequest userId.
         * @member {number} userId
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.userId = 0;

        /**
         * ProDealOrganizeMemberRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.gameId = 0;

        /**
         * ProDealOrganizeMemberRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.organizeId = 0;

        /**
         * ProDealOrganizeMemberRequest dealUserId.
         * @member {number} dealUserId
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.dealUserId = 0;

        /**
         * ProDealOrganizeMemberRequest dealType.
         * @member {number} dealType
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.dealType = 0;

        /**
         * ProDealOrganizeMemberRequest otherName.
         * @member {Uint8Array} otherName
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         */
        ProDealOrganizeMemberRequest.prototype.otherName = $util.newBuffer([]);

        /**
         * Creates a new ProDealOrganizeMemberRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {messages.IProDealOrganizeMemberRequest=} [properties] Properties to set
         * @returns {messages.ProDealOrganizeMemberRequest} ProDealOrganizeMemberRequest instance
         */
        ProDealOrganizeMemberRequest.create = function create(properties) {
            return new ProDealOrganizeMemberRequest(properties);
        };

        /**
         * Encodes the specified ProDealOrganizeMemberRequest message. Does not implicitly {@link messages.ProDealOrganizeMemberRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {messages.IProDealOrganizeMemberRequest} message ProDealOrganizeMemberRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealOrganizeMemberRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            if (message.dealUserId != null && message.hasOwnProperty("dealUserId"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.dealUserId);
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.dealType);
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.otherName);
            return writer;
        };

        /**
         * Encodes the specified ProDealOrganizeMemberRequest message, length delimited. Does not implicitly {@link messages.ProDealOrganizeMemberRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {messages.IProDealOrganizeMemberRequest} message ProDealOrganizeMemberRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealOrganizeMemberRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealOrganizeMemberRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealOrganizeMemberRequest} ProDealOrganizeMemberRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealOrganizeMemberRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealOrganizeMemberRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                case 5:
                    message.dealUserId = reader.int32();
                    break;
                case 6:
                    message.dealType = reader.int32();
                    break;
                case 7:
                    message.otherName = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealOrganizeMemberRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealOrganizeMemberRequest} ProDealOrganizeMemberRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealOrganizeMemberRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealOrganizeMemberRequest message.
         * @function verify
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealOrganizeMemberRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.dealUserId != null && message.hasOwnProperty("dealUserId"))
                if (!$util.isInteger(message.dealUserId))
                    return "dealUserId: integer expected";
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                if (!$util.isInteger(message.dealType))
                    return "dealType: integer expected";
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                if (!(message.otherName && typeof message.otherName.length === "number" || $util.isString(message.otherName)))
                    return "otherName: buffer expected";
            return null;
        };

        /**
         * Creates a ProDealOrganizeMemberRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealOrganizeMemberRequest} ProDealOrganizeMemberRequest
         */
        ProDealOrganizeMemberRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealOrganizeMemberRequest)
                return object;
            var message = new $root.messages.ProDealOrganizeMemberRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.dealUserId != null)
                message.dealUserId = object.dealUserId | 0;
            if (object.dealType != null)
                message.dealType = object.dealType | 0;
            if (object.otherName != null)
                if (typeof object.otherName === "string")
                    $util.base64.decode(object.otherName, message.otherName = $util.newBuffer($util.base64.length(object.otherName)), 0);
                else if (object.otherName.length)
                    message.otherName = object.otherName;
            return message;
        };

        /**
         * Creates a plain object from a ProDealOrganizeMemberRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealOrganizeMemberRequest
         * @static
         * @param {messages.ProDealOrganizeMemberRequest} message ProDealOrganizeMemberRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealOrganizeMemberRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeId = 0;
                object.dealUserId = 0;
                object.dealType = 0;
                object.otherName = options.bytes === String ? "" : [];
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.dealUserId != null && message.hasOwnProperty("dealUserId"))
                object.dealUserId = message.dealUserId;
            if (message.dealType != null && message.hasOwnProperty("dealType"))
                object.dealType = message.dealType;
            if (message.otherName != null && message.hasOwnProperty("otherName"))
                object.otherName = options.bytes === String ? $util.base64.encode(message.otherName, 0, message.otherName.length) : options.bytes === Array ? Array.prototype.slice.call(message.otherName) : message.otherName;
            return object;
        };

        /**
         * Converts this ProDealOrganizeMemberRequest to JSON.
         * @function toJSON
         * @memberof messages.ProDealOrganizeMemberRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealOrganizeMemberRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealOrganizeMemberRequest.MSGID
         * @enum {string}
         * @property {number} ID=922 ID value
         */
        ProDealOrganizeMemberRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[922] = "ID"] = 922;
            return values;
        })();

        return ProDealOrganizeMemberRequest;
    })();

    messages.ProDealOrganizeMemberResponse = (function() {

        /**
         * Properties of a ProDealOrganizeMemberResponse.
         * @memberof messages
         * @interface IProDealOrganizeMemberResponse
         * @property {number|null} [result] ProDealOrganizeMemberResponse result
         * @property {Uint8Array|null} [info] ProDealOrganizeMemberResponse info
         */

        /**
         * Constructs a new ProDealOrganizeMemberResponse.
         * @memberof messages
         * @classdesc Represents a ProDealOrganizeMemberResponse.
         * @implements IProDealOrganizeMemberResponse
         * @constructor
         * @param {messages.IProDealOrganizeMemberResponse=} [properties] Properties to set
         */
        function ProDealOrganizeMemberResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealOrganizeMemberResponse result.
         * @member {number} result
         * @memberof messages.ProDealOrganizeMemberResponse
         * @instance
         */
        ProDealOrganizeMemberResponse.prototype.result = 0;

        /**
         * ProDealOrganizeMemberResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProDealOrganizeMemberResponse
         * @instance
         */
        ProDealOrganizeMemberResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProDealOrganizeMemberResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {messages.IProDealOrganizeMemberResponse=} [properties] Properties to set
         * @returns {messages.ProDealOrganizeMemberResponse} ProDealOrganizeMemberResponse instance
         */
        ProDealOrganizeMemberResponse.create = function create(properties) {
            return new ProDealOrganizeMemberResponse(properties);
        };

        /**
         * Encodes the specified ProDealOrganizeMemberResponse message. Does not implicitly {@link messages.ProDealOrganizeMemberResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {messages.IProDealOrganizeMemberResponse} message ProDealOrganizeMemberResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealOrganizeMemberResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProDealOrganizeMemberResponse message, length delimited. Does not implicitly {@link messages.ProDealOrganizeMemberResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {messages.IProDealOrganizeMemberResponse} message ProDealOrganizeMemberResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealOrganizeMemberResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealOrganizeMemberResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealOrganizeMemberResponse} ProDealOrganizeMemberResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealOrganizeMemberResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealOrganizeMemberResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealOrganizeMemberResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealOrganizeMemberResponse} ProDealOrganizeMemberResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealOrganizeMemberResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealOrganizeMemberResponse message.
         * @function verify
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealOrganizeMemberResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProDealOrganizeMemberResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealOrganizeMemberResponse} ProDealOrganizeMemberResponse
         */
        ProDealOrganizeMemberResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealOrganizeMemberResponse)
                return object;
            var message = new $root.messages.ProDealOrganizeMemberResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProDealOrganizeMemberResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealOrganizeMemberResponse
         * @static
         * @param {messages.ProDealOrganizeMemberResponse} message ProDealOrganizeMemberResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealOrganizeMemberResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProDealOrganizeMemberResponse to JSON.
         * @function toJSON
         * @memberof messages.ProDealOrganizeMemberResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealOrganizeMemberResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealOrganizeMemberResponse.MSGID
         * @enum {string}
         * @property {number} ID=923 ID value
         */
        ProDealOrganizeMemberResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[923] = "ID"] = 923;
            return values;
        })();

        return ProDealOrganizeMemberResponse;
    })();

    messages.ProDealAddRoomCardRequest = (function() {

        /**
         * Properties of a ProDealAddRoomCardRequest.
         * @memberof messages
         * @interface IProDealAddRoomCardRequest
         * @property {number|null} [userId] ProDealAddRoomCardRequest userId
         * @property {number|null} [organizeId] ProDealAddRoomCardRequest organizeId
         * @property {number|null} [count] ProDealAddRoomCardRequest count
         * @property {number|null} [type] ProDealAddRoomCardRequest type
         * @property {number|null} [gameId] ProDealAddRoomCardRequest gameId
         */

        /**
         * Constructs a new ProDealAddRoomCardRequest.
         * @memberof messages
         * @classdesc Represents a ProDealAddRoomCardRequest.
         * @implements IProDealAddRoomCardRequest
         * @constructor
         * @param {messages.IProDealAddRoomCardRequest=} [properties] Properties to set
         */
        function ProDealAddRoomCardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealAddRoomCardRequest userId.
         * @member {number} userId
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         */
        ProDealAddRoomCardRequest.prototype.userId = 0;

        /**
         * ProDealAddRoomCardRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         */
        ProDealAddRoomCardRequest.prototype.organizeId = 0;

        /**
         * ProDealAddRoomCardRequest count.
         * @member {number} count
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         */
        ProDealAddRoomCardRequest.prototype.count = 0;

        /**
         * ProDealAddRoomCardRequest type.
         * @member {number} type
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         */
        ProDealAddRoomCardRequest.prototype.type = 0;

        /**
         * ProDealAddRoomCardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         */
        ProDealAddRoomCardRequest.prototype.gameId = 0;

        /**
         * Creates a new ProDealAddRoomCardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {messages.IProDealAddRoomCardRequest=} [properties] Properties to set
         * @returns {messages.ProDealAddRoomCardRequest} ProDealAddRoomCardRequest instance
         */
        ProDealAddRoomCardRequest.create = function create(properties) {
            return new ProDealAddRoomCardRequest(properties);
        };

        /**
         * Encodes the specified ProDealAddRoomCardRequest message. Does not implicitly {@link messages.ProDealAddRoomCardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {messages.IProDealAddRoomCardRequest} message ProDealAddRoomCardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealAddRoomCardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.organizeId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProDealAddRoomCardRequest message, length delimited. Does not implicitly {@link messages.ProDealAddRoomCardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {messages.IProDealAddRoomCardRequest} message ProDealAddRoomCardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealAddRoomCardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealAddRoomCardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealAddRoomCardRequest} ProDealAddRoomCardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealAddRoomCardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealAddRoomCardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.organizeId = reader.int32();
                    break;
                case 4:
                    message.count = reader.int32();
                    break;
                case 5:
                    message.type = reader.int32();
                    break;
                case 6:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealAddRoomCardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealAddRoomCardRequest} ProDealAddRoomCardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealAddRoomCardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealAddRoomCardRequest message.
         * @function verify
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealAddRoomCardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProDealAddRoomCardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealAddRoomCardRequest} ProDealAddRoomCardRequest
         */
        ProDealAddRoomCardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealAddRoomCardRequest)
                return object;
            var message = new $root.messages.ProDealAddRoomCardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.type != null)
                message.type = object.type | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProDealAddRoomCardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealAddRoomCardRequest
         * @static
         * @param {messages.ProDealAddRoomCardRequest} message ProDealAddRoomCardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealAddRoomCardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.organizeId = 0;
                object.count = 0;
                object.type = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProDealAddRoomCardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProDealAddRoomCardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealAddRoomCardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealAddRoomCardRequest.MSGID
         * @enum {string}
         * @property {number} ID=924 ID value
         */
        ProDealAddRoomCardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[924] = "ID"] = 924;
            return values;
        })();

        return ProDealAddRoomCardRequest;
    })();

    messages.ProDealAddRoomCardResponse = (function() {

        /**
         * Properties of a ProDealAddRoomCardResponse.
         * @memberof messages
         * @interface IProDealAddRoomCardResponse
         * @property {number|null} [result] ProDealAddRoomCardResponse result
         * @property {Uint8Array|null} [info] ProDealAddRoomCardResponse info
         */

        /**
         * Constructs a new ProDealAddRoomCardResponse.
         * @memberof messages
         * @classdesc Represents a ProDealAddRoomCardResponse.
         * @implements IProDealAddRoomCardResponse
         * @constructor
         * @param {messages.IProDealAddRoomCardResponse=} [properties] Properties to set
         */
        function ProDealAddRoomCardResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealAddRoomCardResponse result.
         * @member {number} result
         * @memberof messages.ProDealAddRoomCardResponse
         * @instance
         */
        ProDealAddRoomCardResponse.prototype.result = 0;

        /**
         * ProDealAddRoomCardResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProDealAddRoomCardResponse
         * @instance
         */
        ProDealAddRoomCardResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProDealAddRoomCardResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {messages.IProDealAddRoomCardResponse=} [properties] Properties to set
         * @returns {messages.ProDealAddRoomCardResponse} ProDealAddRoomCardResponse instance
         */
        ProDealAddRoomCardResponse.create = function create(properties) {
            return new ProDealAddRoomCardResponse(properties);
        };

        /**
         * Encodes the specified ProDealAddRoomCardResponse message. Does not implicitly {@link messages.ProDealAddRoomCardResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {messages.IProDealAddRoomCardResponse} message ProDealAddRoomCardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealAddRoomCardResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProDealAddRoomCardResponse message, length delimited. Does not implicitly {@link messages.ProDealAddRoomCardResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {messages.IProDealAddRoomCardResponse} message ProDealAddRoomCardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealAddRoomCardResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealAddRoomCardResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealAddRoomCardResponse} ProDealAddRoomCardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealAddRoomCardResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealAddRoomCardResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealAddRoomCardResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealAddRoomCardResponse} ProDealAddRoomCardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealAddRoomCardResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealAddRoomCardResponse message.
         * @function verify
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealAddRoomCardResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProDealAddRoomCardResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealAddRoomCardResponse} ProDealAddRoomCardResponse
         */
        ProDealAddRoomCardResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealAddRoomCardResponse)
                return object;
            var message = new $root.messages.ProDealAddRoomCardResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProDealAddRoomCardResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealAddRoomCardResponse
         * @static
         * @param {messages.ProDealAddRoomCardResponse} message ProDealAddRoomCardResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealAddRoomCardResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProDealAddRoomCardResponse to JSON.
         * @function toJSON
         * @memberof messages.ProDealAddRoomCardResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealAddRoomCardResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealAddRoomCardResponse.MSGID
         * @enum {string}
         * @property {number} ID=925 ID value
         */
        ProDealAddRoomCardResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[925] = "ID"] = 925;
            return values;
        })();

        return ProDealAddRoomCardResponse;
    })();

    messages.ProGetInviteOrganizeRequest = (function() {

        /**
         * Properties of a ProGetInviteOrganizeRequest.
         * @memberof messages
         * @interface IProGetInviteOrganizeRequest
         * @property {number|null} [userId] ProGetInviteOrganizeRequest userId
         * @property {number|null} [gameId] ProGetInviteOrganizeRequest gameId
         */

        /**
         * Constructs a new ProGetInviteOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProGetInviteOrganizeRequest.
         * @implements IProGetInviteOrganizeRequest
         * @constructor
         * @param {messages.IProGetInviteOrganizeRequest=} [properties] Properties to set
         */
        function ProGetInviteOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetInviteOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetInviteOrganizeRequest
         * @instance
         */
        ProGetInviteOrganizeRequest.prototype.userId = 0;

        /**
         * ProGetInviteOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetInviteOrganizeRequest
         * @instance
         */
        ProGetInviteOrganizeRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetInviteOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {messages.IProGetInviteOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProGetInviteOrganizeRequest} ProGetInviteOrganizeRequest instance
         */
        ProGetInviteOrganizeRequest.create = function create(properties) {
            return new ProGetInviteOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProGetInviteOrganizeRequest message. Does not implicitly {@link messages.ProGetInviteOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {messages.IProGetInviteOrganizeRequest} message ProGetInviteOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetInviteOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetInviteOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProGetInviteOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {messages.IProGetInviteOrganizeRequest} message ProGetInviteOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetInviteOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetInviteOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetInviteOrganizeRequest} ProGetInviteOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetInviteOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetInviteOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetInviteOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetInviteOrganizeRequest} ProGetInviteOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetInviteOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetInviteOrganizeRequest message.
         * @function verify
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetInviteOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetInviteOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetInviteOrganizeRequest} ProGetInviteOrganizeRequest
         */
        ProGetInviteOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetInviteOrganizeRequest)
                return object;
            var message = new $root.messages.ProGetInviteOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetInviteOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetInviteOrganizeRequest
         * @static
         * @param {messages.ProGetInviteOrganizeRequest} message ProGetInviteOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetInviteOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetInviteOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetInviteOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetInviteOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetInviteOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=926 ID value
         */
        ProGetInviteOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[926] = "ID"] = 926;
            return values;
        })();

        return ProGetInviteOrganizeRequest;
    })();

    messages.ProGetInviteOrganizeResponse = (function() {

        /**
         * Properties of a ProGetInviteOrganizeResponse.
         * @memberof messages
         * @interface IProGetInviteOrganizeResponse
         * @property {number|null} [result] ProGetInviteOrganizeResponse result
         * @property {Uint8Array|null} [text] ProGetInviteOrganizeResponse text
         * @property {Array.<messages.IInviteOrganizeInfo>|null} [info] ProGetInviteOrganizeResponse info
         */

        /**
         * Constructs a new ProGetInviteOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProGetInviteOrganizeResponse.
         * @implements IProGetInviteOrganizeResponse
         * @constructor
         * @param {messages.IProGetInviteOrganizeResponse=} [properties] Properties to set
         */
        function ProGetInviteOrganizeResponse(properties) {
            this.info = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetInviteOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProGetInviteOrganizeResponse
         * @instance
         */
        ProGetInviteOrganizeResponse.prototype.result = 0;

        /**
         * ProGetInviteOrganizeResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProGetInviteOrganizeResponse
         * @instance
         */
        ProGetInviteOrganizeResponse.prototype.text = $util.newBuffer([]);

        /**
         * ProGetInviteOrganizeResponse info.
         * @member {Array.<messages.IInviteOrganizeInfo>} info
         * @memberof messages.ProGetInviteOrganizeResponse
         * @instance
         */
        ProGetInviteOrganizeResponse.prototype.info = $util.emptyArray;

        /**
         * Creates a new ProGetInviteOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {messages.IProGetInviteOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProGetInviteOrganizeResponse} ProGetInviteOrganizeResponse instance
         */
        ProGetInviteOrganizeResponse.create = function create(properties) {
            return new ProGetInviteOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProGetInviteOrganizeResponse message. Does not implicitly {@link messages.ProGetInviteOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {messages.IProGetInviteOrganizeResponse} message ProGetInviteOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetInviteOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            if (message.info != null && message.info.length)
                for (var i = 0; i < message.info.length; ++i)
                    $root.messages.InviteOrganizeInfo.encode(message.info[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGetInviteOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProGetInviteOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {messages.IProGetInviteOrganizeResponse} message ProGetInviteOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetInviteOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetInviteOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetInviteOrganizeResponse} ProGetInviteOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetInviteOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetInviteOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                case 4:
                    if (!(message.info && message.info.length))
                        message.info = [];
                    message.info.push($root.messages.InviteOrganizeInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetInviteOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetInviteOrganizeResponse} ProGetInviteOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetInviteOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetInviteOrganizeResponse message.
         * @function verify
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetInviteOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            if (message.info != null && message.hasOwnProperty("info")) {
                if (!Array.isArray(message.info))
                    return "info: array expected";
                for (var i = 0; i < message.info.length; ++i) {
                    var error = $root.messages.InviteOrganizeInfo.verify(message.info[i]);
                    if (error)
                        return "info." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGetInviteOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetInviteOrganizeResponse} ProGetInviteOrganizeResponse
         */
        ProGetInviteOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetInviteOrganizeResponse)
                return object;
            var message = new $root.messages.ProGetInviteOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            if (object.info) {
                if (!Array.isArray(object.info))
                    throw TypeError(".messages.ProGetInviteOrganizeResponse.info: array expected");
                message.info = [];
                for (var i = 0; i < object.info.length; ++i) {
                    if (typeof object.info[i] !== "object")
                        throw TypeError(".messages.ProGetInviteOrganizeResponse.info: object expected");
                    message.info[i] = $root.messages.InviteOrganizeInfo.fromObject(object.info[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetInviteOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetInviteOrganizeResponse
         * @static
         * @param {messages.ProGetInviteOrganizeResponse} message ProGetInviteOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetInviteOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.info = [];
            if (options.defaults) {
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            if (message.info && message.info.length) {
                object.info = [];
                for (var j = 0; j < message.info.length; ++j)
                    object.info[j] = $root.messages.InviteOrganizeInfo.toObject(message.info[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGetInviteOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetInviteOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetInviteOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetInviteOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=927 ID value
         */
        ProGetInviteOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[927] = "ID"] = 927;
            return values;
        })();

        return ProGetInviteOrganizeResponse;
    })();

    messages.ProDealInviteOrganizeRequest = (function() {

        /**
         * Properties of a ProDealInviteOrganizeRequest.
         * @memberof messages
         * @interface IProDealInviteOrganizeRequest
         * @property {number|null} [userId] ProDealInviteOrganizeRequest userId
         * @property {number|null} [gameId] ProDealInviteOrganizeRequest gameId
         * @property {number|null} [dealId] ProDealInviteOrganizeRequest dealId
         * @property {number|null} [result] ProDealInviteOrganizeRequest result
         */

        /**
         * Constructs a new ProDealInviteOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProDealInviteOrganizeRequest.
         * @implements IProDealInviteOrganizeRequest
         * @constructor
         * @param {messages.IProDealInviteOrganizeRequest=} [properties] Properties to set
         */
        function ProDealInviteOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealInviteOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProDealInviteOrganizeRequest
         * @instance
         */
        ProDealInviteOrganizeRequest.prototype.userId = 0;

        /**
         * ProDealInviteOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProDealInviteOrganizeRequest
         * @instance
         */
        ProDealInviteOrganizeRequest.prototype.gameId = 0;

        /**
         * ProDealInviteOrganizeRequest dealId.
         * @member {number} dealId
         * @memberof messages.ProDealInviteOrganizeRequest
         * @instance
         */
        ProDealInviteOrganizeRequest.prototype.dealId = 0;

        /**
         * ProDealInviteOrganizeRequest result.
         * @member {number} result
         * @memberof messages.ProDealInviteOrganizeRequest
         * @instance
         */
        ProDealInviteOrganizeRequest.prototype.result = 0;

        /**
         * Creates a new ProDealInviteOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {messages.IProDealInviteOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProDealInviteOrganizeRequest} ProDealInviteOrganizeRequest instance
         */
        ProDealInviteOrganizeRequest.create = function create(properties) {
            return new ProDealInviteOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProDealInviteOrganizeRequest message. Does not implicitly {@link messages.ProDealInviteOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {messages.IProDealInviteOrganizeRequest} message ProDealInviteOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealInviteOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dealId);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProDealInviteOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProDealInviteOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {messages.IProDealInviteOrganizeRequest} message ProDealInviteOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealInviteOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealInviteOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealInviteOrganizeRequest} ProDealInviteOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealInviteOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealInviteOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.dealId = reader.int32();
                    break;
                case 5:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealInviteOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealInviteOrganizeRequest} ProDealInviteOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealInviteOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealInviteOrganizeRequest message.
         * @function verify
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealInviteOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                if (!$util.isInteger(message.dealId))
                    return "dealId: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProDealInviteOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealInviteOrganizeRequest} ProDealInviteOrganizeRequest
         */
        ProDealInviteOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealInviteOrganizeRequest)
                return object;
            var message = new $root.messages.ProDealInviteOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.dealId != null)
                message.dealId = object.dealId | 0;
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProDealInviteOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealInviteOrganizeRequest
         * @static
         * @param {messages.ProDealInviteOrganizeRequest} message ProDealInviteOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealInviteOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.dealId = 0;
                object.result = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.dealId != null && message.hasOwnProperty("dealId"))
                object.dealId = message.dealId;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProDealInviteOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProDealInviteOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealInviteOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealInviteOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=928 ID value
         */
        ProDealInviteOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[928] = "ID"] = 928;
            return values;
        })();

        return ProDealInviteOrganizeRequest;
    })();

    messages.ProDealInviteOrganizeResponse = (function() {

        /**
         * Properties of a ProDealInviteOrganizeResponse.
         * @memberof messages
         * @interface IProDealInviteOrganizeResponse
         * @property {number|null} [result] ProDealInviteOrganizeResponse result
         * @property {Uint8Array|null} [text] ProDealInviteOrganizeResponse text
         */

        /**
         * Constructs a new ProDealInviteOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProDealInviteOrganizeResponse.
         * @implements IProDealInviteOrganizeResponse
         * @constructor
         * @param {messages.IProDealInviteOrganizeResponse=} [properties] Properties to set
         */
        function ProDealInviteOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProDealInviteOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProDealInviteOrganizeResponse
         * @instance
         */
        ProDealInviteOrganizeResponse.prototype.result = 0;

        /**
         * ProDealInviteOrganizeResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProDealInviteOrganizeResponse
         * @instance
         */
        ProDealInviteOrganizeResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProDealInviteOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {messages.IProDealInviteOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProDealInviteOrganizeResponse} ProDealInviteOrganizeResponse instance
         */
        ProDealInviteOrganizeResponse.create = function create(properties) {
            return new ProDealInviteOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProDealInviteOrganizeResponse message. Does not implicitly {@link messages.ProDealInviteOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {messages.IProDealInviteOrganizeResponse} message ProDealInviteOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealInviteOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProDealInviteOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProDealInviteOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {messages.IProDealInviteOrganizeResponse} message ProDealInviteOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProDealInviteOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProDealInviteOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProDealInviteOrganizeResponse} ProDealInviteOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealInviteOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProDealInviteOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProDealInviteOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProDealInviteOrganizeResponse} ProDealInviteOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProDealInviteOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProDealInviteOrganizeResponse message.
         * @function verify
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProDealInviteOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProDealInviteOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProDealInviteOrganizeResponse} ProDealInviteOrganizeResponse
         */
        ProDealInviteOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProDealInviteOrganizeResponse)
                return object;
            var message = new $root.messages.ProDealInviteOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProDealInviteOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProDealInviteOrganizeResponse
         * @static
         * @param {messages.ProDealInviteOrganizeResponse} message ProDealInviteOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProDealInviteOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProDealInviteOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProDealInviteOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProDealInviteOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProDealInviteOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=929 ID value
         */
        ProDealInviteOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[929] = "ID"] = 929;
            return values;
        })();

        return ProDealInviteOrganizeResponse;
    })();

    messages.ProCheckUserInOrganizeRequest = (function() {

        /**
         * Properties of a ProCheckUserInOrganizeRequest.
         * @memberof messages
         * @interface IProCheckUserInOrganizeRequest
         * @property {number|null} [userId] ProCheckUserInOrganizeRequest userId
         * @property {number|null} [organizeId] ProCheckUserInOrganizeRequest organizeId
         */

        /**
         * Constructs a new ProCheckUserInOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProCheckUserInOrganizeRequest.
         * @implements IProCheckUserInOrganizeRequest
         * @constructor
         * @param {messages.IProCheckUserInOrganizeRequest=} [properties] Properties to set
         */
        function ProCheckUserInOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCheckUserInOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @instance
         */
        ProCheckUserInOrganizeRequest.prototype.userId = 0;

        /**
         * ProCheckUserInOrganizeRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @instance
         */
        ProCheckUserInOrganizeRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProCheckUserInOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {messages.IProCheckUserInOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProCheckUserInOrganizeRequest} ProCheckUserInOrganizeRequest instance
         */
        ProCheckUserInOrganizeRequest.create = function create(properties) {
            return new ProCheckUserInOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProCheckUserInOrganizeRequest message. Does not implicitly {@link messages.ProCheckUserInOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {messages.IProCheckUserInOrganizeRequest} message ProCheckUserInOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCheckUserInOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProCheckUserInOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProCheckUserInOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {messages.IProCheckUserInOrganizeRequest} message ProCheckUserInOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCheckUserInOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCheckUserInOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCheckUserInOrganizeRequest} ProCheckUserInOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCheckUserInOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCheckUserInOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCheckUserInOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCheckUserInOrganizeRequest} ProCheckUserInOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCheckUserInOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCheckUserInOrganizeRequest message.
         * @function verify
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCheckUserInOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProCheckUserInOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCheckUserInOrganizeRequest} ProCheckUserInOrganizeRequest
         */
        ProCheckUserInOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCheckUserInOrganizeRequest)
                return object;
            var message = new $root.messages.ProCheckUserInOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProCheckUserInOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @static
         * @param {messages.ProCheckUserInOrganizeRequest} message ProCheckUserInOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCheckUserInOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.organizeId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProCheckUserInOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProCheckUserInOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCheckUserInOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCheckUserInOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=930 ID value
         */
        ProCheckUserInOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[930] = "ID"] = 930;
            return values;
        })();

        return ProCheckUserInOrganizeRequest;
    })();

    messages.ProCheckUserInOrganizeResponse = (function() {

        /**
         * Properties of a ProCheckUserInOrganizeResponse.
         * @memberof messages
         * @interface IProCheckUserInOrganizeResponse
         * @property {number|null} [result] ProCheckUserInOrganizeResponse result
         */

        /**
         * Constructs a new ProCheckUserInOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProCheckUserInOrganizeResponse.
         * @implements IProCheckUserInOrganizeResponse
         * @constructor
         * @param {messages.IProCheckUserInOrganizeResponse=} [properties] Properties to set
         */
        function ProCheckUserInOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProCheckUserInOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @instance
         */
        ProCheckUserInOrganizeResponse.prototype.result = 0;

        /**
         * Creates a new ProCheckUserInOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {messages.IProCheckUserInOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProCheckUserInOrganizeResponse} ProCheckUserInOrganizeResponse instance
         */
        ProCheckUserInOrganizeResponse.create = function create(properties) {
            return new ProCheckUserInOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProCheckUserInOrganizeResponse message. Does not implicitly {@link messages.ProCheckUserInOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {messages.IProCheckUserInOrganizeResponse} message ProCheckUserInOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCheckUserInOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProCheckUserInOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProCheckUserInOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {messages.IProCheckUserInOrganizeResponse} message ProCheckUserInOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProCheckUserInOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProCheckUserInOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProCheckUserInOrganizeResponse} ProCheckUserInOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCheckUserInOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProCheckUserInOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProCheckUserInOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProCheckUserInOrganizeResponse} ProCheckUserInOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProCheckUserInOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProCheckUserInOrganizeResponse message.
         * @function verify
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProCheckUserInOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProCheckUserInOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProCheckUserInOrganizeResponse} ProCheckUserInOrganizeResponse
         */
        ProCheckUserInOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProCheckUserInOrganizeResponse)
                return object;
            var message = new $root.messages.ProCheckUserInOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProCheckUserInOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @static
         * @param {messages.ProCheckUserInOrganizeResponse} message ProCheckUserInOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProCheckUserInOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.result = 0;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProCheckUserInOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProCheckUserInOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProCheckUserInOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProCheckUserInOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=931 ID value
         */
        ProCheckUserInOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[931] = "ID"] = 931;
            return values;
        })();

        return ProCheckUserInOrganizeResponse;
    })();

    messages.ProModifyOrganizeRequest = (function() {

        /**
         * Properties of a ProModifyOrganizeRequest.
         * @memberof messages
         * @interface IProModifyOrganizeRequest
         * @property {number|null} [userId] ProModifyOrganizeRequest userId
         * @property {number|null} [gameId] ProModifyOrganizeRequest gameId
         * @property {number|null} [organizeId] ProModifyOrganizeRequest organizeId
         * @property {Uint8Array|null} [organizeName] ProModifyOrganizeRequest organizeName
         * @property {Uint8Array|null} [info] ProModifyOrganizeRequest info
         * @property {Uint8Array|null} [phoneNum] ProModifyOrganizeRequest phoneNum
         * @property {number|null} [roomcardType] ProModifyOrganizeRequest roomcardType
         * @property {Uint8Array|null} [ruleType] ProModifyOrganizeRequest ruleType
         * @property {number|null} [gameType] ProModifyOrganizeRequest gameType
         */

        /**
         * Constructs a new ProModifyOrganizeRequest.
         * @memberof messages
         * @classdesc Represents a ProModifyOrganizeRequest.
         * @implements IProModifyOrganizeRequest
         * @constructor
         * @param {messages.IProModifyOrganizeRequest=} [properties] Properties to set
         */
        function ProModifyOrganizeRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProModifyOrganizeRequest userId.
         * @member {number} userId
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.userId = 0;

        /**
         * ProModifyOrganizeRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.gameId = 0;

        /**
         * ProModifyOrganizeRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.organizeId = 0;

        /**
         * ProModifyOrganizeRequest organizeName.
         * @member {Uint8Array} organizeName
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.organizeName = $util.newBuffer([]);

        /**
         * ProModifyOrganizeRequest info.
         * @member {Uint8Array} info
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.info = $util.newBuffer([]);

        /**
         * ProModifyOrganizeRequest phoneNum.
         * @member {Uint8Array} phoneNum
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.phoneNum = $util.newBuffer([]);

        /**
         * ProModifyOrganizeRequest roomcardType.
         * @member {number} roomcardType
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.roomcardType = 0;

        /**
         * ProModifyOrganizeRequest ruleType.
         * @member {Uint8Array} ruleType
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.ruleType = $util.newBuffer([]);

        /**
         * ProModifyOrganizeRequest gameType.
         * @member {number} gameType
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         */
        ProModifyOrganizeRequest.prototype.gameType = -1;

        /**
         * Creates a new ProModifyOrganizeRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {messages.IProModifyOrganizeRequest=} [properties] Properties to set
         * @returns {messages.ProModifyOrganizeRequest} ProModifyOrganizeRequest instance
         */
        ProModifyOrganizeRequest.create = function create(properties) {
            return new ProModifyOrganizeRequest(properties);
        };

        /**
         * Encodes the specified ProModifyOrganizeRequest message. Does not implicitly {@link messages.ProModifyOrganizeRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {messages.IProModifyOrganizeRequest} message ProModifyOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProModifyOrganizeRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.organizeName);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.info);
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.phoneNum);
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.roomcardType);
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.ruleType);
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.gameType);
            return writer;
        };

        /**
         * Encodes the specified ProModifyOrganizeRequest message, length delimited. Does not implicitly {@link messages.ProModifyOrganizeRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {messages.IProModifyOrganizeRequest} message ProModifyOrganizeRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProModifyOrganizeRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProModifyOrganizeRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProModifyOrganizeRequest} ProModifyOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProModifyOrganizeRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProModifyOrganizeRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                case 5:
                    message.organizeName = reader.bytes();
                    break;
                case 6:
                    message.info = reader.bytes();
                    break;
                case 7:
                    message.phoneNum = reader.bytes();
                    break;
                case 8:
                    message.roomcardType = reader.int32();
                    break;
                case 9:
                    message.ruleType = reader.bytes();
                    break;
                case 10:
                    message.gameType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProModifyOrganizeRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProModifyOrganizeRequest} ProModifyOrganizeRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProModifyOrganizeRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProModifyOrganizeRequest message.
         * @function verify
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProModifyOrganizeRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                if (!(message.organizeName && typeof message.organizeName.length === "number" || $util.isString(message.organizeName)))
                    return "organizeName: buffer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                if (!(message.phoneNum && typeof message.phoneNum.length === "number" || $util.isString(message.phoneNum)))
                    return "phoneNum: buffer expected";
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                if (!$util.isInteger(message.roomcardType))
                    return "roomcardType: integer expected";
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                if (!(message.ruleType && typeof message.ruleType.length === "number" || $util.isString(message.ruleType)))
                    return "ruleType: buffer expected";
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                if (!$util.isInteger(message.gameType))
                    return "gameType: integer expected";
            return null;
        };

        /**
         * Creates a ProModifyOrganizeRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProModifyOrganizeRequest} ProModifyOrganizeRequest
         */
        ProModifyOrganizeRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProModifyOrganizeRequest)
                return object;
            var message = new $root.messages.ProModifyOrganizeRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.organizeName != null)
                if (typeof object.organizeName === "string")
                    $util.base64.decode(object.organizeName, message.organizeName = $util.newBuffer($util.base64.length(object.organizeName)), 0);
                else if (object.organizeName.length)
                    message.organizeName = object.organizeName;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            if (object.phoneNum != null)
                if (typeof object.phoneNum === "string")
                    $util.base64.decode(object.phoneNum, message.phoneNum = $util.newBuffer($util.base64.length(object.phoneNum)), 0);
                else if (object.phoneNum.length)
                    message.phoneNum = object.phoneNum;
            if (object.roomcardType != null)
                message.roomcardType = object.roomcardType | 0;
            if (object.ruleType != null)
                if (typeof object.ruleType === "string")
                    $util.base64.decode(object.ruleType, message.ruleType = $util.newBuffer($util.base64.length(object.ruleType)), 0);
                else if (object.ruleType.length)
                    message.ruleType = object.ruleType;
            if (object.gameType != null)
                message.gameType = object.gameType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProModifyOrganizeRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProModifyOrganizeRequest
         * @static
         * @param {messages.ProModifyOrganizeRequest} message ProModifyOrganizeRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProModifyOrganizeRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.organizeId = 0;
                object.organizeName = options.bytes === String ? "" : [];
                object.info = options.bytes === String ? "" : [];
                object.phoneNum = options.bytes === String ? "" : [];
                object.roomcardType = 0;
                object.ruleType = options.bytes === String ? "" : [];
                object.gameType = -1;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.organizeName != null && message.hasOwnProperty("organizeName"))
                object.organizeName = options.bytes === String ? $util.base64.encode(message.organizeName, 0, message.organizeName.length) : options.bytes === Array ? Array.prototype.slice.call(message.organizeName) : message.organizeName;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            if (message.phoneNum != null && message.hasOwnProperty("phoneNum"))
                object.phoneNum = options.bytes === String ? $util.base64.encode(message.phoneNum, 0, message.phoneNum.length) : options.bytes === Array ? Array.prototype.slice.call(message.phoneNum) : message.phoneNum;
            if (message.roomcardType != null && message.hasOwnProperty("roomcardType"))
                object.roomcardType = message.roomcardType;
            if (message.ruleType != null && message.hasOwnProperty("ruleType"))
                object.ruleType = options.bytes === String ? $util.base64.encode(message.ruleType, 0, message.ruleType.length) : options.bytes === Array ? Array.prototype.slice.call(message.ruleType) : message.ruleType;
            if (message.gameType != null && message.hasOwnProperty("gameType"))
                object.gameType = message.gameType;
            return object;
        };

        /**
         * Converts this ProModifyOrganizeRequest to JSON.
         * @function toJSON
         * @memberof messages.ProModifyOrganizeRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProModifyOrganizeRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProModifyOrganizeRequest.MSGID
         * @enum {string}
         * @property {number} ID=932 ID value
         */
        ProModifyOrganizeRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[932] = "ID"] = 932;
            return values;
        })();

        return ProModifyOrganizeRequest;
    })();

    messages.ProModifyOrganizeResponse = (function() {

        /**
         * Properties of a ProModifyOrganizeResponse.
         * @memberof messages
         * @interface IProModifyOrganizeResponse
         * @property {number|null} [result] ProModifyOrganizeResponse result
         * @property {Uint8Array|null} [info] ProModifyOrganizeResponse info
         */

        /**
         * Constructs a new ProModifyOrganizeResponse.
         * @memberof messages
         * @classdesc Represents a ProModifyOrganizeResponse.
         * @implements IProModifyOrganizeResponse
         * @constructor
         * @param {messages.IProModifyOrganizeResponse=} [properties] Properties to set
         */
        function ProModifyOrganizeResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProModifyOrganizeResponse result.
         * @member {number} result
         * @memberof messages.ProModifyOrganizeResponse
         * @instance
         */
        ProModifyOrganizeResponse.prototype.result = 0;

        /**
         * ProModifyOrganizeResponse info.
         * @member {Uint8Array} info
         * @memberof messages.ProModifyOrganizeResponse
         * @instance
         */
        ProModifyOrganizeResponse.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProModifyOrganizeResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {messages.IProModifyOrganizeResponse=} [properties] Properties to set
         * @returns {messages.ProModifyOrganizeResponse} ProModifyOrganizeResponse instance
         */
        ProModifyOrganizeResponse.create = function create(properties) {
            return new ProModifyOrganizeResponse(properties);
        };

        /**
         * Encodes the specified ProModifyOrganizeResponse message. Does not implicitly {@link messages.ProModifyOrganizeResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {messages.IProModifyOrganizeResponse} message ProModifyOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProModifyOrganizeResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProModifyOrganizeResponse message, length delimited. Does not implicitly {@link messages.ProModifyOrganizeResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {messages.IProModifyOrganizeResponse} message ProModifyOrganizeResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProModifyOrganizeResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProModifyOrganizeResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProModifyOrganizeResponse} ProModifyOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProModifyOrganizeResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProModifyOrganizeResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                case 3:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProModifyOrganizeResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProModifyOrganizeResponse} ProModifyOrganizeResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProModifyOrganizeResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProModifyOrganizeResponse message.
         * @function verify
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProModifyOrganizeResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProModifyOrganizeResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProModifyOrganizeResponse} ProModifyOrganizeResponse
         */
        ProModifyOrganizeResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProModifyOrganizeResponse)
                return object;
            var message = new $root.messages.ProModifyOrganizeResponse();
            if (object.result != null)
                message.result = object.result | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProModifyOrganizeResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProModifyOrganizeResponse
         * @static
         * @param {messages.ProModifyOrganizeResponse} message ProModifyOrganizeResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProModifyOrganizeResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.result = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProModifyOrganizeResponse to JSON.
         * @function toJSON
         * @memberof messages.ProModifyOrganizeResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProModifyOrganizeResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProModifyOrganizeResponse.MSGID
         * @enum {string}
         * @property {number} ID=933 ID value
         */
        ProModifyOrganizeResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[933] = "ID"] = 933;
            return values;
        })();

        return ProModifyOrganizeResponse;
    })();

    messages.ProUserOrganizeNotify = (function() {

        /**
         * Properties of a ProUserOrganizeNotify.
         * @memberof messages
         * @interface IProUserOrganizeNotify
         * @property {number|null} [userId] ProUserOrganizeNotify userId
         * @property {number|null} [organizeId] ProUserOrganizeNotify organizeId
         * @property {Uint8Array|null} [info] ProUserOrganizeNotify info
         */

        /**
         * Constructs a new ProUserOrganizeNotify.
         * @memberof messages
         * @classdesc Represents a ProUserOrganizeNotify.
         * @implements IProUserOrganizeNotify
         * @constructor
         * @param {messages.IProUserOrganizeNotify=} [properties] Properties to set
         */
        function ProUserOrganizeNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserOrganizeNotify userId.
         * @member {number} userId
         * @memberof messages.ProUserOrganizeNotify
         * @instance
         */
        ProUserOrganizeNotify.prototype.userId = 0;

        /**
         * ProUserOrganizeNotify organizeId.
         * @member {number} organizeId
         * @memberof messages.ProUserOrganizeNotify
         * @instance
         */
        ProUserOrganizeNotify.prototype.organizeId = 0;

        /**
         * ProUserOrganizeNotify info.
         * @member {Uint8Array} info
         * @memberof messages.ProUserOrganizeNotify
         * @instance
         */
        ProUserOrganizeNotify.prototype.info = $util.newBuffer([]);

        /**
         * Creates a new ProUserOrganizeNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {messages.IProUserOrganizeNotify=} [properties] Properties to set
         * @returns {messages.ProUserOrganizeNotify} ProUserOrganizeNotify instance
         */
        ProUserOrganizeNotify.create = function create(properties) {
            return new ProUserOrganizeNotify(properties);
        };

        /**
         * Encodes the specified ProUserOrganizeNotify message. Does not implicitly {@link messages.ProUserOrganizeNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {messages.IProUserOrganizeNotify} message ProUserOrganizeNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserOrganizeNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.organizeId);
            if (message.info != null && message.hasOwnProperty("info"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.info);
            return writer;
        };

        /**
         * Encodes the specified ProUserOrganizeNotify message, length delimited. Does not implicitly {@link messages.ProUserOrganizeNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {messages.IProUserOrganizeNotify} message ProUserOrganizeNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserOrganizeNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserOrganizeNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserOrganizeNotify} ProUserOrganizeNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserOrganizeNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserOrganizeNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.organizeId = reader.int32();
                    break;
                case 4:
                    message.info = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserOrganizeNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserOrganizeNotify} ProUserOrganizeNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserOrganizeNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserOrganizeNotify message.
         * @function verify
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserOrganizeNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.info != null && message.hasOwnProperty("info"))
                if (!(message.info && typeof message.info.length === "number" || $util.isString(message.info)))
                    return "info: buffer expected";
            return null;
        };

        /**
         * Creates a ProUserOrganizeNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserOrganizeNotify} ProUserOrganizeNotify
         */
        ProUserOrganizeNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserOrganizeNotify)
                return object;
            var message = new $root.messages.ProUserOrganizeNotify();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.info != null)
                if (typeof object.info === "string")
                    $util.base64.decode(object.info, message.info = $util.newBuffer($util.base64.length(object.info)), 0);
                else if (object.info.length)
                    message.info = object.info;
            return message;
        };

        /**
         * Creates a plain object from a ProUserOrganizeNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserOrganizeNotify
         * @static
         * @param {messages.ProUserOrganizeNotify} message ProUserOrganizeNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserOrganizeNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.organizeId = 0;
                object.info = options.bytes === String ? "" : [];
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.info != null && message.hasOwnProperty("info"))
                object.info = options.bytes === String ? $util.base64.encode(message.info, 0, message.info.length) : options.bytes === Array ? Array.prototype.slice.call(message.info) : message.info;
            return object;
        };

        /**
         * Converts this ProUserOrganizeNotify to JSON.
         * @function toJSON
         * @memberof messages.ProUserOrganizeNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserOrganizeNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserOrganizeNotify.MSGID
         * @enum {string}
         * @property {number} ID=934 ID value
         */
        ProUserOrganizeNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[934] = "ID"] = 934;
            return values;
        })();

        return ProUserOrganizeNotify;
    })();

    /**
     * propType enum.
     * @name messages.propType
     * @enum {string}
     * @property {number} PROPTYPE_TRUMPET=1 PROPTYPE_TRUMPET value
     * @property {number} PROPTYPE_FILL_IN=2 PROPTYPE_FILL_IN value
     * @property {number} PROPTYPE_GOLD_COIN=3 PROPTYPE_GOLD_COIN value
     * @property {number} PROPTYPE_TM_COIN=4 PROPTYPE_TM_COIN value
     * @property {number} PROPTYPE_LOTTERY=5 PROPTYPE_LOTTERY value
     * @property {number} PROPTYPE_MOUTHCARD=6 PROPTYPE_MOUTHCARD value
     * @property {number} PROPTYPE_ROOMCARD=7 PROPTYPE_ROOMCARD value
     * @property {number} PROPTYPE_LIMIT_ROOMCARD=8 PROPTYPE_LIMIT_ROOMCARD value
     * @property {number} PROPTYPE_MATCH_TICKET=9 PROPTYPE_MATCH_TICKET value
     * @property {number} PROPTYPE_ORGINIZE_ROOMCARD=10 PROPTYPE_ORGINIZE_ROOMCARD value
     */
    messages.propType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "PROPTYPE_TRUMPET"] = 1;
        values[valuesById[2] = "PROPTYPE_FILL_IN"] = 2;
        values[valuesById[3] = "PROPTYPE_GOLD_COIN"] = 3;
        values[valuesById[4] = "PROPTYPE_TM_COIN"] = 4;
        values[valuesById[5] = "PROPTYPE_LOTTERY"] = 5;
        values[valuesById[6] = "PROPTYPE_MOUTHCARD"] = 6;
        values[valuesById[7] = "PROPTYPE_ROOMCARD"] = 7;
        values[valuesById[8] = "PROPTYPE_LIMIT_ROOMCARD"] = 8;
        values[valuesById[9] = "PROPTYPE_MATCH_TICKET"] = 9;
        values[valuesById[10] = "PROPTYPE_ORGINIZE_ROOMCARD"] = 10;
        return values;
    })();

    messages.propBaseInfo = (function() {

        /**
         * Properties of a propBaseInfo.
         * @memberof messages
         * @interface IpropBaseInfo
         * @property {number} id propBaseInfo id
         * @property {string|null} [name] propBaseInfo name
         * @property {string|null} [explain] propBaseInfo explain
         * @property {number|null} [count] propBaseInfo count
         * @property {messages.propType|null} [type] propBaseInfo type
         * @property {number|null} [totalday] propBaseInfo totalday
         * @property {number|null} [useday] propBaseInfo useday
         */

        /**
         * Constructs a new propBaseInfo.
         * @memberof messages
         * @classdesc Represents a propBaseInfo.
         * @implements IpropBaseInfo
         * @constructor
         * @param {messages.IpropBaseInfo=} [properties] Properties to set
         */
        function propBaseInfo(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * propBaseInfo id.
         * @member {number} id
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.id = 0;

        /**
         * propBaseInfo name.
         * @member {string} name
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.name = "";

        /**
         * propBaseInfo explain.
         * @member {string} explain
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.explain = "";

        /**
         * propBaseInfo count.
         * @member {number} count
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.count = 0;

        /**
         * propBaseInfo type.
         * @member {messages.propType} type
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.type = 1;

        /**
         * propBaseInfo totalday.
         * @member {number} totalday
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.totalday = 0;

        /**
         * propBaseInfo useday.
         * @member {number} useday
         * @memberof messages.propBaseInfo
         * @instance
         */
        propBaseInfo.prototype.useday = 0;

        /**
         * Creates a new propBaseInfo instance using the specified properties.
         * @function create
         * @memberof messages.propBaseInfo
         * @static
         * @param {messages.IpropBaseInfo=} [properties] Properties to set
         * @returns {messages.propBaseInfo} propBaseInfo instance
         */
        propBaseInfo.create = function create(properties) {
            return new propBaseInfo(properties);
        };

        /**
         * Encodes the specified propBaseInfo message. Does not implicitly {@link messages.propBaseInfo.verify|verify} messages.
         * @function encode
         * @memberof messages.propBaseInfo
         * @static
         * @param {messages.IpropBaseInfo} message propBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        propBaseInfo.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.id);
            if (message.name != null && message.hasOwnProperty("name"))
                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);
            if (message.explain != null && message.hasOwnProperty("explain"))
                writer.uint32(/* id 4, wireType 2 =*/34).string(message.explain);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.count);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.type);
            if (message.totalday != null && message.hasOwnProperty("totalday"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.totalday);
            if (message.useday != null && message.hasOwnProperty("useday"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.useday);
            return writer;
        };

        /**
         * Encodes the specified propBaseInfo message, length delimited. Does not implicitly {@link messages.propBaseInfo.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.propBaseInfo
         * @static
         * @param {messages.IpropBaseInfo} message propBaseInfo message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        propBaseInfo.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a propBaseInfo message from the specified reader or buffer.
         * @function decode
         * @memberof messages.propBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.propBaseInfo} propBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        propBaseInfo.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.propBaseInfo();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.id = reader.int32();
                    break;
                case 3:
                    message.name = reader.string();
                    break;
                case 4:
                    message.explain = reader.string();
                    break;
                case 5:
                    message.count = reader.int32();
                    break;
                case 6:
                    message.type = reader.int32();
                    break;
                case 7:
                    message.totalday = reader.int32();
                    break;
                case 8:
                    message.useday = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("id"))
                throw $util.ProtocolError("missing required 'id'", { instance: message });
            return message;
        };

        /**
         * Decodes a propBaseInfo message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.propBaseInfo
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.propBaseInfo} propBaseInfo
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        propBaseInfo.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a propBaseInfo message.
         * @function verify
         * @memberof messages.propBaseInfo
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        propBaseInfo.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (!$util.isInteger(message.id))
                return "id: integer expected";
            if (message.name != null && message.hasOwnProperty("name"))
                if (!$util.isString(message.name))
                    return "name: string expected";
            if (message.explain != null && message.hasOwnProperty("explain"))
                if (!$util.isString(message.explain))
                    return "explain: string expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            if (message.totalday != null && message.hasOwnProperty("totalday"))
                if (!$util.isInteger(message.totalday))
                    return "totalday: integer expected";
            if (message.useday != null && message.hasOwnProperty("useday"))
                if (!$util.isInteger(message.useday))
                    return "useday: integer expected";
            return null;
        };

        /**
         * Creates a propBaseInfo message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.propBaseInfo
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.propBaseInfo} propBaseInfo
         */
        propBaseInfo.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.propBaseInfo)
                return object;
            var message = new $root.messages.propBaseInfo();
            if (object.id != null)
                message.id = object.id | 0;
            if (object.name != null)
                message.name = String(object.name);
            if (object.explain != null)
                message.explain = String(object.explain);
            if (object.count != null)
                message.count = object.count | 0;
            switch (object.type) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.type = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.type = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.type = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.type = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.type = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.type = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.type = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.type = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.type = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.type = 10;
                break;
            }
            if (object.totalday != null)
                message.totalday = object.totalday | 0;
            if (object.useday != null)
                message.useday = object.useday | 0;
            return message;
        };

        /**
         * Creates a plain object from a propBaseInfo message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.propBaseInfo
         * @static
         * @param {messages.propBaseInfo} message propBaseInfo
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        propBaseInfo.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.id = 0;
                object.name = "";
                object.explain = "";
                object.count = 0;
                object.type = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
                object.totalday = 0;
                object.useday = 0;
            }
            if (message.id != null && message.hasOwnProperty("id"))
                object.id = message.id;
            if (message.name != null && message.hasOwnProperty("name"))
                object.name = message.name;
            if (message.explain != null && message.hasOwnProperty("explain"))
                object.explain = message.explain;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.messages.propType[message.type] : message.type;
            if (message.totalday != null && message.hasOwnProperty("totalday"))
                object.totalday = message.totalday;
            if (message.useday != null && message.hasOwnProperty("useday"))
                object.useday = message.useday;
            return object;
        };

        /**
         * Converts this propBaseInfo to JSON.
         * @function toJSON
         * @memberof messages.propBaseInfo
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        propBaseInfo.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return propBaseInfo;
    })();

    messages.ProUsePropRequest = (function() {

        /**
         * Properties of a ProUsePropRequest.
         * @memberof messages
         * @interface IProUsePropRequest
         * @property {messages.propType} propType ProUsePropRequest propType
         * @property {number|null} [userId] ProUsePropRequest userId
         * @property {number|null} [gameId] ProUsePropRequest gameId
         * @property {number|null} [count] ProUsePropRequest count
         * @property {Uint8Array|null} [nickname] ProUsePropRequest nickname
         * @property {Uint8Array|null} [content] ProUsePropRequest content
         * @property {number|null} [roomcardId] ProUsePropRequest roomcardId
         * @property {number|null} [areaId] ProUsePropRequest areaId
         * @property {number|null} [masterUser] ProUsePropRequest masterUser
         * @property {number|null} [organizeId] ProUsePropRequest organizeId
         */

        /**
         * Constructs a new ProUsePropRequest.
         * @memberof messages
         * @classdesc Represents a ProUsePropRequest.
         * @implements IProUsePropRequest
         * @constructor
         * @param {messages.IProUsePropRequest=} [properties] Properties to set
         */
        function ProUsePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUsePropRequest propType.
         * @member {messages.propType} propType
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.propType = 1;

        /**
         * ProUsePropRequest userId.
         * @member {number} userId
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.userId = 0;

        /**
         * ProUsePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.gameId = 0;

        /**
         * ProUsePropRequest count.
         * @member {number} count
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.count = 0;

        /**
         * ProUsePropRequest nickname.
         * @member {Uint8Array} nickname
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.nickname = $util.newBuffer([]);

        /**
         * ProUsePropRequest content.
         * @member {Uint8Array} content
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.content = $util.newBuffer([]);

        /**
         * ProUsePropRequest roomcardId.
         * @member {number} roomcardId
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.roomcardId = 0;

        /**
         * ProUsePropRequest areaId.
         * @member {number} areaId
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.areaId = -1;

        /**
         * ProUsePropRequest masterUser.
         * @member {number} masterUser
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.masterUser = 0;

        /**
         * ProUsePropRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProUsePropRequest
         * @instance
         */
        ProUsePropRequest.prototype.organizeId = 0;

        /**
         * Creates a new ProUsePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {messages.IProUsePropRequest=} [properties] Properties to set
         * @returns {messages.ProUsePropRequest} ProUsePropRequest instance
         */
        ProUsePropRequest.create = function create(properties) {
            return new ProUsePropRequest(properties);
        };

        /**
         * Encodes the specified ProUsePropRequest message. Does not implicitly {@link messages.ProUsePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {messages.IProUsePropRequest} message ProUsePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUsePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.propType);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gameId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.count);
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.nickname);
            if (message.content != null && message.hasOwnProperty("content"))
                writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.content);
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.roomcardId);
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.areaId);
            if (message.masterUser != null && message.hasOwnProperty("masterUser"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.masterUser);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProUsePropRequest message, length delimited. Does not implicitly {@link messages.ProUsePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {messages.IProUsePropRequest} message ProUsePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUsePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUsePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUsePropRequest} ProUsePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUsePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUsePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.propType = reader.int32();
                    break;
                case 3:
                    message.userId = reader.int32();
                    break;
                case 4:
                    message.gameId = reader.int32();
                    break;
                case 5:
                    message.count = reader.int32();
                    break;
                case 6:
                    message.nickname = reader.bytes();
                    break;
                case 7:
                    message.content = reader.bytes();
                    break;
                case 8:
                    message.roomcardId = reader.int32();
                    break;
                case 9:
                    message.areaId = reader.int32();
                    break;
                case 10:
                    message.masterUser = reader.int32();
                    break;
                case 11:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("propType"))
                throw $util.ProtocolError("missing required 'propType'", { instance: message });
            return message;
        };

        /**
         * Decodes a ProUsePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUsePropRequest} ProUsePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUsePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUsePropRequest message.
         * @function verify
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUsePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.propType) {
            default:
                return "propType: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                if (!(message.nickname && typeof message.nickname.length === "number" || $util.isString(message.nickname)))
                    return "nickname: buffer expected";
            if (message.content != null && message.hasOwnProperty("content"))
                if (!(message.content && typeof message.content.length === "number" || $util.isString(message.content)))
                    return "content: buffer expected";
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                if (!$util.isInteger(message.roomcardId))
                    return "roomcardId: integer expected";
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                if (!$util.isInteger(message.areaId))
                    return "areaId: integer expected";
            if (message.masterUser != null && message.hasOwnProperty("masterUser"))
                if (!$util.isInteger(message.masterUser))
                    return "masterUser: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProUsePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUsePropRequest} ProUsePropRequest
         */
        ProUsePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUsePropRequest)
                return object;
            var message = new $root.messages.ProUsePropRequest();
            switch (object.propType) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.propType = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.propType = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.propType = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.propType = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.propType = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.propType = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.propType = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.propType = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.propType = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.propType = 10;
                break;
            }
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.nickname != null)
                if (typeof object.nickname === "string")
                    $util.base64.decode(object.nickname, message.nickname = $util.newBuffer($util.base64.length(object.nickname)), 0);
                else if (object.nickname.length)
                    message.nickname = object.nickname;
            if (object.content != null)
                if (typeof object.content === "string")
                    $util.base64.decode(object.content, message.content = $util.newBuffer($util.base64.length(object.content)), 0);
                else if (object.content.length)
                    message.content = object.content;
            if (object.roomcardId != null)
                message.roomcardId = object.roomcardId | 0;
            if (object.areaId != null)
                message.areaId = object.areaId | 0;
            if (object.masterUser != null)
                message.masterUser = object.masterUser | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUsePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUsePropRequest
         * @static
         * @param {messages.ProUsePropRequest} message ProUsePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUsePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.propType = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
                object.userId = 0;
                object.gameId = 0;
                object.count = 0;
                object.nickname = options.bytes === String ? "" : [];
                object.content = options.bytes === String ? "" : [];
                object.roomcardId = 0;
                object.areaId = -1;
                object.masterUser = 0;
                object.organizeId = 0;
            }
            if (message.propType != null && message.hasOwnProperty("propType"))
                object.propType = options.enums === String ? $root.messages.propType[message.propType] : message.propType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.nickname != null && message.hasOwnProperty("nickname"))
                object.nickname = options.bytes === String ? $util.base64.encode(message.nickname, 0, message.nickname.length) : options.bytes === Array ? Array.prototype.slice.call(message.nickname) : message.nickname;
            if (message.content != null && message.hasOwnProperty("content"))
                object.content = options.bytes === String ? $util.base64.encode(message.content, 0, message.content.length) : options.bytes === Array ? Array.prototype.slice.call(message.content) : message.content;
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                object.roomcardId = message.roomcardId;
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                object.areaId = message.areaId;
            if (message.masterUser != null && message.hasOwnProperty("masterUser"))
                object.masterUser = message.masterUser;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProUsePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUsePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUsePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUsePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=750 ID value
         */
        ProUsePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[750] = "ID"] = 750;
            return values;
        })();

        return ProUsePropRequest;
    })();

    messages.ProGetUserPropRequest = (function() {

        /**
         * Properties of a ProGetUserPropRequest.
         * @memberof messages
         * @interface IProGetUserPropRequest
         * @property {number|null} [userId] ProGetUserPropRequest userId
         * @property {number|null} [gameId] ProGetUserPropRequest gameId
         */

        /**
         * Constructs a new ProGetUserPropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserPropRequest.
         * @implements IProGetUserPropRequest
         * @constructor
         * @param {messages.IProGetUserPropRequest=} [properties] Properties to set
         */
        function ProGetUserPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserPropRequest
         * @instance
         */
        ProGetUserPropRequest.prototype.userId = 0;

        /**
         * ProGetUserPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetUserPropRequest
         * @instance
         */
        ProGetUserPropRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetUserPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {messages.IProGetUserPropRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserPropRequest} ProGetUserPropRequest instance
         */
        ProGetUserPropRequest.create = function create(properties) {
            return new ProGetUserPropRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserPropRequest message. Does not implicitly {@link messages.ProGetUserPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {messages.IProGetUserPropRequest} message ProGetUserPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserPropRequest message, length delimited. Does not implicitly {@link messages.ProGetUserPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {messages.IProGetUserPropRequest} message ProGetUserPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserPropRequest} ProGetUserPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserPropRequest} ProGetUserPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserPropRequest message.
         * @function verify
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserPropRequest} ProGetUserPropRequest
         */
        ProGetUserPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserPropRequest)
                return object;
            var message = new $root.messages.ProGetUserPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserPropRequest
         * @static
         * @param {messages.ProGetUserPropRequest} message ProGetUserPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetUserPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=751 ID value
         */
        ProGetUserPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[751] = "ID"] = 751;
            return values;
        })();

        return ProGetUserPropRequest;
    })();

    messages.ProGetUserPropResponse = (function() {

        /**
         * Properties of a ProGetUserPropResponse.
         * @memberof messages
         * @interface IProGetUserPropResponse
         * @property {Array.<messages.IpropBaseInfo>|null} [propInfo] ProGetUserPropResponse propInfo
         */

        /**
         * Constructs a new ProGetUserPropResponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserPropResponse.
         * @implements IProGetUserPropResponse
         * @constructor
         * @param {messages.IProGetUserPropResponse=} [properties] Properties to set
         */
        function ProGetUserPropResponse(properties) {
            this.propInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserPropResponse propInfo.
         * @member {Array.<messages.IpropBaseInfo>} propInfo
         * @memberof messages.ProGetUserPropResponse
         * @instance
         */
        ProGetUserPropResponse.prototype.propInfo = $util.emptyArray;

        /**
         * Creates a new ProGetUserPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {messages.IProGetUserPropResponse=} [properties] Properties to set
         * @returns {messages.ProGetUserPropResponse} ProGetUserPropResponse instance
         */
        ProGetUserPropResponse.create = function create(properties) {
            return new ProGetUserPropResponse(properties);
        };

        /**
         * Encodes the specified ProGetUserPropResponse message. Does not implicitly {@link messages.ProGetUserPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {messages.IProGetUserPropResponse} message ProGetUserPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.propInfo != null && message.propInfo.length)
                for (var i = 0; i < message.propInfo.length; ++i)
                    $root.messages.propBaseInfo.encode(message.propInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGetUserPropResponse message, length delimited. Does not implicitly {@link messages.ProGetUserPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {messages.IProGetUserPropResponse} message ProGetUserPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserPropResponse} ProGetUserPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    if (!(message.propInfo && message.propInfo.length))
                        message.propInfo = [];
                    message.propInfo.push($root.messages.propBaseInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserPropResponse} ProGetUserPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserPropResponse message.
         * @function verify
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.propInfo != null && message.hasOwnProperty("propInfo")) {
                if (!Array.isArray(message.propInfo))
                    return "propInfo: array expected";
                for (var i = 0; i < message.propInfo.length; ++i) {
                    var error = $root.messages.propBaseInfo.verify(message.propInfo[i]);
                    if (error)
                        return "propInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGetUserPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserPropResponse} ProGetUserPropResponse
         */
        ProGetUserPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserPropResponse)
                return object;
            var message = new $root.messages.ProGetUserPropResponse();
            if (object.propInfo) {
                if (!Array.isArray(object.propInfo))
                    throw TypeError(".messages.ProGetUserPropResponse.propInfo: array expected");
                message.propInfo = [];
                for (var i = 0; i < object.propInfo.length; ++i) {
                    if (typeof object.propInfo[i] !== "object")
                        throw TypeError(".messages.ProGetUserPropResponse.propInfo: object expected");
                    message.propInfo[i] = $root.messages.propBaseInfo.fromObject(object.propInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserPropResponse
         * @static
         * @param {messages.ProGetUserPropResponse} message ProGetUserPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.propInfo = [];
            if (message.propInfo && message.propInfo.length) {
                object.propInfo = [];
                for (var j = 0; j < message.propInfo.length; ++j)
                    object.propInfo[j] = $root.messages.propBaseInfo.toObject(message.propInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGetUserPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=752 ID value
         */
        ProGetUserPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[752] = "ID"] = 752;
            return values;
        })();

        return ProGetUserPropResponse;
    })();

    messages.ProAddUserPropRequest = (function() {

        /**
         * Properties of a ProAddUserPropRequest.
         * @memberof messages
         * @interface IProAddUserPropRequest
         * @property {number|null} [userId] ProAddUserPropRequest userId
         * @property {number|null} [storeId] ProAddUserPropRequest storeId
         * @property {number|null} [payType] ProAddUserPropRequest payType
         */

        /**
         * Constructs a new ProAddUserPropRequest.
         * @memberof messages
         * @classdesc Represents a ProAddUserPropRequest.
         * @implements IProAddUserPropRequest
         * @constructor
         * @param {messages.IProAddUserPropRequest=} [properties] Properties to set
         */
        function ProAddUserPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProAddUserPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProAddUserPropRequest
         * @instance
         */
        ProAddUserPropRequest.prototype.userId = 0;

        /**
         * ProAddUserPropRequest storeId.
         * @member {number} storeId
         * @memberof messages.ProAddUserPropRequest
         * @instance
         */
        ProAddUserPropRequest.prototype.storeId = 0;

        /**
         * ProAddUserPropRequest payType.
         * @member {number} payType
         * @memberof messages.ProAddUserPropRequest
         * @instance
         */
        ProAddUserPropRequest.prototype.payType = 0;

        /**
         * Creates a new ProAddUserPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {messages.IProAddUserPropRequest=} [properties] Properties to set
         * @returns {messages.ProAddUserPropRequest} ProAddUserPropRequest instance
         */
        ProAddUserPropRequest.create = function create(properties) {
            return new ProAddUserPropRequest(properties);
        };

        /**
         * Encodes the specified ProAddUserPropRequest message. Does not implicitly {@link messages.ProAddUserPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {messages.IProAddUserPropRequest} message ProAddUserPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.storeId != null && message.hasOwnProperty("storeId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.storeId);
            if (message.payType != null && message.hasOwnProperty("payType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.payType);
            return writer;
        };

        /**
         * Encodes the specified ProAddUserPropRequest message, length delimited. Does not implicitly {@link messages.ProAddUserPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {messages.IProAddUserPropRequest} message ProAddUserPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProAddUserPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProAddUserPropRequest} ProAddUserPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProAddUserPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.storeId = reader.int32();
                    break;
                case 4:
                    message.payType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProAddUserPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProAddUserPropRequest} ProAddUserPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProAddUserPropRequest message.
         * @function verify
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProAddUserPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.storeId != null && message.hasOwnProperty("storeId"))
                if (!$util.isInteger(message.storeId))
                    return "storeId: integer expected";
            if (message.payType != null && message.hasOwnProperty("payType"))
                if (!$util.isInteger(message.payType))
                    return "payType: integer expected";
            return null;
        };

        /**
         * Creates a ProAddUserPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProAddUserPropRequest} ProAddUserPropRequest
         */
        ProAddUserPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProAddUserPropRequest)
                return object;
            var message = new $root.messages.ProAddUserPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.storeId != null)
                message.storeId = object.storeId | 0;
            if (object.payType != null)
                message.payType = object.payType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProAddUserPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProAddUserPropRequest
         * @static
         * @param {messages.ProAddUserPropRequest} message ProAddUserPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProAddUserPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.storeId = 0;
                object.payType = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.storeId != null && message.hasOwnProperty("storeId"))
                object.storeId = message.storeId;
            if (message.payType != null && message.hasOwnProperty("payType"))
                object.payType = message.payType;
            return object;
        };

        /**
         * Converts this ProAddUserPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProAddUserPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProAddUserPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProAddUserPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=753 ID value
         */
        ProAddUserPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[753] = "ID"] = 753;
            return values;
        })();

        return ProAddUserPropRequest;
    })();

    messages.ProAddUserPropResponse = (function() {

        /**
         * Properties of a ProAddUserPropResponse.
         * @memberof messages
         * @interface IProAddUserPropResponse
         * @property {number|null} [result] ProAddUserPropResponse result
         */

        /**
         * Constructs a new ProAddUserPropResponse.
         * @memberof messages
         * @classdesc Represents a ProAddUserPropResponse.
         * @implements IProAddUserPropResponse
         * @constructor
         * @param {messages.IProAddUserPropResponse=} [properties] Properties to set
         */
        function ProAddUserPropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProAddUserPropResponse result.
         * @member {number} result
         * @memberof messages.ProAddUserPropResponse
         * @instance
         */
        ProAddUserPropResponse.prototype.result = 0;

        /**
         * Creates a new ProAddUserPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {messages.IProAddUserPropResponse=} [properties] Properties to set
         * @returns {messages.ProAddUserPropResponse} ProAddUserPropResponse instance
         */
        ProAddUserPropResponse.create = function create(properties) {
            return new ProAddUserPropResponse(properties);
        };

        /**
         * Encodes the specified ProAddUserPropResponse message. Does not implicitly {@link messages.ProAddUserPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {messages.IProAddUserPropResponse} message ProAddUserPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProAddUserPropResponse message, length delimited. Does not implicitly {@link messages.ProAddUserPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {messages.IProAddUserPropResponse} message ProAddUserPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProAddUserPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProAddUserPropResponse} ProAddUserPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProAddUserPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProAddUserPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProAddUserPropResponse} ProAddUserPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProAddUserPropResponse message.
         * @function verify
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProAddUserPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProAddUserPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProAddUserPropResponse} ProAddUserPropResponse
         */
        ProAddUserPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProAddUserPropResponse)
                return object;
            var message = new $root.messages.ProAddUserPropResponse();
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProAddUserPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProAddUserPropResponse
         * @static
         * @param {messages.ProAddUserPropResponse} message ProAddUserPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProAddUserPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.result = 0;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProAddUserPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProAddUserPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProAddUserPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProAddUserPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=756 ID value
         */
        ProAddUserPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[756] = "ID"] = 756;
            return values;
        })();

        return ProAddUserPropResponse;
    })();

    messages.ProGetUserActivityRequest = (function() {

        /**
         * Properties of a ProGetUserActivityRequest.
         * @memberof messages
         * @interface IProGetUserActivityRequest
         * @property {number|null} [userId] ProGetUserActivityRequest userId
         * @property {number|null} [activityId] ProGetUserActivityRequest activityId
         */

        /**
         * Constructs a new ProGetUserActivityRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserActivityRequest.
         * @implements IProGetUserActivityRequest
         * @constructor
         * @param {messages.IProGetUserActivityRequest=} [properties] Properties to set
         */
        function ProGetUserActivityRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserActivityRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserActivityRequest
         * @instance
         */
        ProGetUserActivityRequest.prototype.userId = 0;

        /**
         * ProGetUserActivityRequest activityId.
         * @member {number} activityId
         * @memberof messages.ProGetUserActivityRequest
         * @instance
         */
        ProGetUserActivityRequest.prototype.activityId = 0;

        /**
         * Creates a new ProGetUserActivityRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {messages.IProGetUserActivityRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserActivityRequest} ProGetUserActivityRequest instance
         */
        ProGetUserActivityRequest.create = function create(properties) {
            return new ProGetUserActivityRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserActivityRequest message. Does not implicitly {@link messages.ProGetUserActivityRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {messages.IProGetUserActivityRequest} message ProGetUserActivityRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserActivityRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.activityId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserActivityRequest message, length delimited. Does not implicitly {@link messages.ProGetUserActivityRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {messages.IProGetUserActivityRequest} message ProGetUserActivityRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserActivityRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserActivityRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserActivityRequest} ProGetUserActivityRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserActivityRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserActivityRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.activityId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserActivityRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserActivityRequest} ProGetUserActivityRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserActivityRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserActivityRequest message.
         * @function verify
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserActivityRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                if (!$util.isInteger(message.activityId))
                    return "activityId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserActivityRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserActivityRequest} ProGetUserActivityRequest
         */
        ProGetUserActivityRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserActivityRequest)
                return object;
            var message = new $root.messages.ProGetUserActivityRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.activityId != null)
                message.activityId = object.activityId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserActivityRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserActivityRequest
         * @static
         * @param {messages.ProGetUserActivityRequest} message ProGetUserActivityRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserActivityRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.activityId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                object.activityId = message.activityId;
            return object;
        };

        /**
         * Converts this ProGetUserActivityRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserActivityRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserActivityRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserActivityRequest.MSGID
         * @enum {string}
         * @property {number} ID=754 ID value
         */
        ProGetUserActivityRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[754] = "ID"] = 754;
            return values;
        })();

        return ProGetUserActivityRequest;
    })();

    messages.ProGetUserActivityResponse = (function() {

        /**
         * Properties of a ProGetUserActivityResponse.
         * @memberof messages
         * @interface IProGetUserActivityResponse
         * @property {number|null} [times] ProGetUserActivityResponse times
         * @property {number|null} [inviteTimes] ProGetUserActivityResponse inviteTimes
         * @property {number|null} [activityId] ProGetUserActivityResponse activityId
         */

        /**
         * Constructs a new ProGetUserActivityResponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserActivityResponse.
         * @implements IProGetUserActivityResponse
         * @constructor
         * @param {messages.IProGetUserActivityResponse=} [properties] Properties to set
         */
        function ProGetUserActivityResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserActivityResponse times.
         * @member {number} times
         * @memberof messages.ProGetUserActivityResponse
         * @instance
         */
        ProGetUserActivityResponse.prototype.times = 0;

        /**
         * ProGetUserActivityResponse inviteTimes.
         * @member {number} inviteTimes
         * @memberof messages.ProGetUserActivityResponse
         * @instance
         */
        ProGetUserActivityResponse.prototype.inviteTimes = 0;

        /**
         * ProGetUserActivityResponse activityId.
         * @member {number} activityId
         * @memberof messages.ProGetUserActivityResponse
         * @instance
         */
        ProGetUserActivityResponse.prototype.activityId = 0;

        /**
         * Creates a new ProGetUserActivityResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {messages.IProGetUserActivityResponse=} [properties] Properties to set
         * @returns {messages.ProGetUserActivityResponse} ProGetUserActivityResponse instance
         */
        ProGetUserActivityResponse.create = function create(properties) {
            return new ProGetUserActivityResponse(properties);
        };

        /**
         * Encodes the specified ProGetUserActivityResponse message. Does not implicitly {@link messages.ProGetUserActivityResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {messages.IProGetUserActivityResponse} message ProGetUserActivityResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserActivityResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.times != null && message.hasOwnProperty("times"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.times);
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.activityId);
            if (message.inviteTimes != null && message.hasOwnProperty("inviteTimes"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.inviteTimes);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserActivityResponse message, length delimited. Does not implicitly {@link messages.ProGetUserActivityResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {messages.IProGetUserActivityResponse} message ProGetUserActivityResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserActivityResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserActivityResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserActivityResponse} ProGetUserActivityResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserActivityResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserActivityResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.times = reader.int32();
                    break;
                case 4:
                    message.inviteTimes = reader.int32();
                    break;
                case 3:
                    message.activityId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserActivityResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserActivityResponse} ProGetUserActivityResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserActivityResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserActivityResponse message.
         * @function verify
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserActivityResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.times != null && message.hasOwnProperty("times"))
                if (!$util.isInteger(message.times))
                    return "times: integer expected";
            if (message.inviteTimes != null && message.hasOwnProperty("inviteTimes"))
                if (!$util.isInteger(message.inviteTimes))
                    return "inviteTimes: integer expected";
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                if (!$util.isInteger(message.activityId))
                    return "activityId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserActivityResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserActivityResponse} ProGetUserActivityResponse
         */
        ProGetUserActivityResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserActivityResponse)
                return object;
            var message = new $root.messages.ProGetUserActivityResponse();
            if (object.times != null)
                message.times = object.times | 0;
            if (object.inviteTimes != null)
                message.inviteTimes = object.inviteTimes | 0;
            if (object.activityId != null)
                message.activityId = object.activityId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserActivityResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserActivityResponse
         * @static
         * @param {messages.ProGetUserActivityResponse} message ProGetUserActivityResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserActivityResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.times = 0;
                object.activityId = 0;
                object.inviteTimes = 0;
            }
            if (message.times != null && message.hasOwnProperty("times"))
                object.times = message.times;
            if (message.activityId != null && message.hasOwnProperty("activityId"))
                object.activityId = message.activityId;
            if (message.inviteTimes != null && message.hasOwnProperty("inviteTimes"))
                object.inviteTimes = message.inviteTimes;
            return object;
        };

        /**
         * Converts this ProGetUserActivityResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserActivityResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserActivityResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserActivityResponse.MSGID
         * @enum {string}
         * @property {number} ID=755 ID value
         */
        ProGetUserActivityResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[755] = "ID"] = 755;
            return values;
        })();

        return ProGetUserActivityResponse;
    })();

    messages.ProGetUserRoomCardPropRequest = (function() {

        /**
         * Properties of a ProGetUserRoomCardPropRequest.
         * @memberof messages
         * @interface IProGetUserRoomCardPropRequest
         * @property {number|null} [userId] ProGetUserRoomCardPropRequest userId
         * @property {number|null} [gameId] ProGetUserRoomCardPropRequest gameId
         */

        /**
         * Constructs a new ProGetUserRoomCardPropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserRoomCardPropRequest.
         * @implements IProGetUserRoomCardPropRequest
         * @constructor
         * @param {messages.IProGetUserRoomCardPropRequest=} [properties] Properties to set
         */
        function ProGetUserRoomCardPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserRoomCardPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @instance
         */
        ProGetUserRoomCardPropRequest.prototype.userId = 0;

        /**
         * ProGetUserRoomCardPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @instance
         */
        ProGetUserRoomCardPropRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetUserRoomCardPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {messages.IProGetUserRoomCardPropRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserRoomCardPropRequest} ProGetUserRoomCardPropRequest instance
         */
        ProGetUserRoomCardPropRequest.create = function create(properties) {
            return new ProGetUserRoomCardPropRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserRoomCardPropRequest message. Does not implicitly {@link messages.ProGetUserRoomCardPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {messages.IProGetUserRoomCardPropRequest} message ProGetUserRoomCardPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserRoomCardPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserRoomCardPropRequest message, length delimited. Does not implicitly {@link messages.ProGetUserRoomCardPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {messages.IProGetUserRoomCardPropRequest} message ProGetUserRoomCardPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserRoomCardPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserRoomCardPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserRoomCardPropRequest} ProGetUserRoomCardPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserRoomCardPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserRoomCardPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserRoomCardPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserRoomCardPropRequest} ProGetUserRoomCardPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserRoomCardPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserRoomCardPropRequest message.
         * @function verify
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserRoomCardPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserRoomCardPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserRoomCardPropRequest} ProGetUserRoomCardPropRequest
         */
        ProGetUserRoomCardPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserRoomCardPropRequest)
                return object;
            var message = new $root.messages.ProGetUserRoomCardPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserRoomCardPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @static
         * @param {messages.ProGetUserRoomCardPropRequest} message ProGetUserRoomCardPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserRoomCardPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetUserRoomCardPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserRoomCardPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserRoomCardPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserRoomCardPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=756 ID value
         */
        ProGetUserRoomCardPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[756] = "ID"] = 756;
            return values;
        })();

        return ProGetUserRoomCardPropRequest;
    })();

    messages.ProGetUserRoomCardPropResponse = (function() {

        /**
         * Properties of a ProGetUserRoomCardPropResponse.
         * @memberof messages
         * @interface IProGetUserRoomCardPropResponse
         * @property {number|null} [roomcardNum] ProGetUserRoomCardPropResponse roomcardNum
         * @property {number|null} [limitRoomcardNum] ProGetUserRoomCardPropResponse limitRoomcardNum
         */

        /**
         * Constructs a new ProGetUserRoomCardPropResponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserRoomCardPropResponse.
         * @implements IProGetUserRoomCardPropResponse
         * @constructor
         * @param {messages.IProGetUserRoomCardPropResponse=} [properties] Properties to set
         */
        function ProGetUserRoomCardPropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserRoomCardPropResponse roomcardNum.
         * @member {number} roomcardNum
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @instance
         */
        ProGetUserRoomCardPropResponse.prototype.roomcardNum = 0;

        /**
         * ProGetUserRoomCardPropResponse limitRoomcardNum.
         * @member {number} limitRoomcardNum
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @instance
         */
        ProGetUserRoomCardPropResponse.prototype.limitRoomcardNum = 0;

        /**
         * Creates a new ProGetUserRoomCardPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {messages.IProGetUserRoomCardPropResponse=} [properties] Properties to set
         * @returns {messages.ProGetUserRoomCardPropResponse} ProGetUserRoomCardPropResponse instance
         */
        ProGetUserRoomCardPropResponse.create = function create(properties) {
            return new ProGetUserRoomCardPropResponse(properties);
        };

        /**
         * Encodes the specified ProGetUserRoomCardPropResponse message. Does not implicitly {@link messages.ProGetUserRoomCardPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {messages.IProGetUserRoomCardPropResponse} message ProGetUserRoomCardPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserRoomCardPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.roomcardNum);
            if (message.limitRoomcardNum != null && message.hasOwnProperty("limitRoomcardNum"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.limitRoomcardNum);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserRoomCardPropResponse message, length delimited. Does not implicitly {@link messages.ProGetUserRoomCardPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {messages.IProGetUserRoomCardPropResponse} message ProGetUserRoomCardPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserRoomCardPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserRoomCardPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserRoomCardPropResponse} ProGetUserRoomCardPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserRoomCardPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserRoomCardPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.roomcardNum = reader.int32();
                    break;
                case 3:
                    message.limitRoomcardNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserRoomCardPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserRoomCardPropResponse} ProGetUserRoomCardPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserRoomCardPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserRoomCardPropResponse message.
         * @function verify
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserRoomCardPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                if (!$util.isInteger(message.roomcardNum))
                    return "roomcardNum: integer expected";
            if (message.limitRoomcardNum != null && message.hasOwnProperty("limitRoomcardNum"))
                if (!$util.isInteger(message.limitRoomcardNum))
                    return "limitRoomcardNum: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserRoomCardPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserRoomCardPropResponse} ProGetUserRoomCardPropResponse
         */
        ProGetUserRoomCardPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserRoomCardPropResponse)
                return object;
            var message = new $root.messages.ProGetUserRoomCardPropResponse();
            if (object.roomcardNum != null)
                message.roomcardNum = object.roomcardNum | 0;
            if (object.limitRoomcardNum != null)
                message.limitRoomcardNum = object.limitRoomcardNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserRoomCardPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @static
         * @param {messages.ProGetUserRoomCardPropResponse} message ProGetUserRoomCardPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserRoomCardPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.roomcardNum = 0;
                object.limitRoomcardNum = 0;
            }
            if (message.roomcardNum != null && message.hasOwnProperty("roomcardNum"))
                object.roomcardNum = message.roomcardNum;
            if (message.limitRoomcardNum != null && message.hasOwnProperty("limitRoomcardNum"))
                object.limitRoomcardNum = message.limitRoomcardNum;
            return object;
        };

        /**
         * Converts this ProGetUserRoomCardPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserRoomCardPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserRoomCardPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserRoomCardPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=757 ID value
         */
        ProGetUserRoomCardPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[757] = "ID"] = 757;
            return values;
        })();

        return ProGetUserRoomCardPropResponse;
    })();

    messages.ProAddUserRoomCardPropRequest = (function() {

        /**
         * Properties of a ProAddUserRoomCardPropRequest.
         * @memberof messages
         * @interface IProAddUserRoomCardPropRequest
         * @property {number|null} [userId] ProAddUserRoomCardPropRequest userId
         * @property {number|null} [gameId] ProAddUserRoomCardPropRequest gameId
         * @property {number|null} [count] ProAddUserRoomCardPropRequest count
         * @property {boolean|null} [isfree] ProAddUserRoomCardPropRequest isfree
         * @property {number|null} [agentId] ProAddUserRoomCardPropRequest agentId
         * @property {number|null} [limitCardType] ProAddUserRoomCardPropRequest limitCardType
         * @property {number|Long|null} [dueTime] ProAddUserRoomCardPropRequest dueTime
         */

        /**
         * Constructs a new ProAddUserRoomCardPropRequest.
         * @memberof messages
         * @classdesc Represents a ProAddUserRoomCardPropRequest.
         * @implements IProAddUserRoomCardPropRequest
         * @constructor
         * @param {messages.IProAddUserRoomCardPropRequest=} [properties] Properties to set
         */
        function ProAddUserRoomCardPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProAddUserRoomCardPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.userId = 0;

        /**
         * ProAddUserRoomCardPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.gameId = 0;

        /**
         * ProAddUserRoomCardPropRequest count.
         * @member {number} count
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.count = 0;

        /**
         * ProAddUserRoomCardPropRequest isfree.
         * @member {boolean} isfree
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.isfree = false;

        /**
         * ProAddUserRoomCardPropRequest agentId.
         * @member {number} agentId
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.agentId = 0;

        /**
         * ProAddUserRoomCardPropRequest limitCardType.
         * @member {number} limitCardType
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.limitCardType = 0;

        /**
         * ProAddUserRoomCardPropRequest dueTime.
         * @member {number|Long} dueTime
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         */
        ProAddUserRoomCardPropRequest.prototype.dueTime = $util.Long ? $util.Long.fromBits(-1,-1,false) : -1;

        /**
         * Creates a new ProAddUserRoomCardPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {messages.IProAddUserRoomCardPropRequest=} [properties] Properties to set
         * @returns {messages.ProAddUserRoomCardPropRequest} ProAddUserRoomCardPropRequest instance
         */
        ProAddUserRoomCardPropRequest.create = function create(properties) {
            return new ProAddUserRoomCardPropRequest(properties);
        };

        /**
         * Encodes the specified ProAddUserRoomCardPropRequest message. Does not implicitly {@link messages.ProAddUserRoomCardPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {messages.IProAddUserRoomCardPropRequest} message ProAddUserRoomCardPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserRoomCardPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);
            if (message.isfree != null && message.hasOwnProperty("isfree"))
                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.isfree);
            if (message.agentId != null && message.hasOwnProperty("agentId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.agentId);
            if (message.limitCardType != null && message.hasOwnProperty("limitCardType"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.limitCardType);
            if (message.dueTime != null && message.hasOwnProperty("dueTime"))
                writer.uint32(/* id 8, wireType 0 =*/64).int64(message.dueTime);
            return writer;
        };

        /**
         * Encodes the specified ProAddUserRoomCardPropRequest message, length delimited. Does not implicitly {@link messages.ProAddUserRoomCardPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {messages.IProAddUserRoomCardPropRequest} message ProAddUserRoomCardPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserRoomCardPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProAddUserRoomCardPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProAddUserRoomCardPropRequest} ProAddUserRoomCardPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserRoomCardPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProAddUserRoomCardPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.count = reader.int32();
                    break;
                case 5:
                    message.isfree = reader.bool();
                    break;
                case 6:
                    message.agentId = reader.int32();
                    break;
                case 7:
                    message.limitCardType = reader.int32();
                    break;
                case 8:
                    message.dueTime = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProAddUserRoomCardPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProAddUserRoomCardPropRequest} ProAddUserRoomCardPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserRoomCardPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProAddUserRoomCardPropRequest message.
         * @function verify
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProAddUserRoomCardPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.isfree != null && message.hasOwnProperty("isfree"))
                if (typeof message.isfree !== "boolean")
                    return "isfree: boolean expected";
            if (message.agentId != null && message.hasOwnProperty("agentId"))
                if (!$util.isInteger(message.agentId))
                    return "agentId: integer expected";
            if (message.limitCardType != null && message.hasOwnProperty("limitCardType"))
                if (!$util.isInteger(message.limitCardType))
                    return "limitCardType: integer expected";
            if (message.dueTime != null && message.hasOwnProperty("dueTime"))
                if (!$util.isInteger(message.dueTime) && !(message.dueTime && $util.isInteger(message.dueTime.low) && $util.isInteger(message.dueTime.high)))
                    return "dueTime: integer|Long expected";
            return null;
        };

        /**
         * Creates a ProAddUserRoomCardPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProAddUserRoomCardPropRequest} ProAddUserRoomCardPropRequest
         */
        ProAddUserRoomCardPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProAddUserRoomCardPropRequest)
                return object;
            var message = new $root.messages.ProAddUserRoomCardPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.isfree != null)
                message.isfree = Boolean(object.isfree);
            if (object.agentId != null)
                message.agentId = object.agentId | 0;
            if (object.limitCardType != null)
                message.limitCardType = object.limitCardType | 0;
            if (object.dueTime != null)
                if ($util.Long)
                    (message.dueTime = $util.Long.fromValue(object.dueTime)).unsigned = false;
                else if (typeof object.dueTime === "string")
                    message.dueTime = parseInt(object.dueTime, 10);
                else if (typeof object.dueTime === "number")
                    message.dueTime = object.dueTime;
                else if (typeof object.dueTime === "object")
                    message.dueTime = new $util.LongBits(object.dueTime.low >>> 0, object.dueTime.high >>> 0).toNumber();
            return message;
        };

        /**
         * Creates a plain object from a ProAddUserRoomCardPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @static
         * @param {messages.ProAddUserRoomCardPropRequest} message ProAddUserRoomCardPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProAddUserRoomCardPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.count = 0;
                object.isfree = false;
                object.agentId = 0;
                object.limitCardType = 0;
                if ($util.Long) {
                    var long = new $util.Long(-1, -1, false);
                    object.dueTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.dueTime = options.longs === String ? "-1" : -1;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.isfree != null && message.hasOwnProperty("isfree"))
                object.isfree = message.isfree;
            if (message.agentId != null && message.hasOwnProperty("agentId"))
                object.agentId = message.agentId;
            if (message.limitCardType != null && message.hasOwnProperty("limitCardType"))
                object.limitCardType = message.limitCardType;
            if (message.dueTime != null && message.hasOwnProperty("dueTime"))
                if (typeof message.dueTime === "number")
                    object.dueTime = options.longs === String ? String(message.dueTime) : message.dueTime;
                else
                    object.dueTime = options.longs === String ? $util.Long.prototype.toString.call(message.dueTime) : options.longs === Number ? new $util.LongBits(message.dueTime.low >>> 0, message.dueTime.high >>> 0).toNumber() : message.dueTime;
            return object;
        };

        /**
         * Converts this ProAddUserRoomCardPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProAddUserRoomCardPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProAddUserRoomCardPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProAddUserRoomCardPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=758 ID value
         */
        ProAddUserRoomCardPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[758] = "ID"] = 758;
            return values;
        })();

        return ProAddUserRoomCardPropRequest;
    })();

    messages.ProAddUserRoomCardPropResponse = (function() {

        /**
         * Properties of a ProAddUserRoomCardPropResponse.
         * @memberof messages
         * @interface IProAddUserRoomCardPropResponse
         * @property {number|null} [result] ProAddUserRoomCardPropResponse result
         */

        /**
         * Constructs a new ProAddUserRoomCardPropResponse.
         * @memberof messages
         * @classdesc Represents a ProAddUserRoomCardPropResponse.
         * @implements IProAddUserRoomCardPropResponse
         * @constructor
         * @param {messages.IProAddUserRoomCardPropResponse=} [properties] Properties to set
         */
        function ProAddUserRoomCardPropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProAddUserRoomCardPropResponse result.
         * @member {number} result
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @instance
         */
        ProAddUserRoomCardPropResponse.prototype.result = 0;

        /**
         * Creates a new ProAddUserRoomCardPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {messages.IProAddUserRoomCardPropResponse=} [properties] Properties to set
         * @returns {messages.ProAddUserRoomCardPropResponse} ProAddUserRoomCardPropResponse instance
         */
        ProAddUserRoomCardPropResponse.create = function create(properties) {
            return new ProAddUserRoomCardPropResponse(properties);
        };

        /**
         * Encodes the specified ProAddUserRoomCardPropResponse message. Does not implicitly {@link messages.ProAddUserRoomCardPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {messages.IProAddUserRoomCardPropResponse} message ProAddUserRoomCardPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserRoomCardPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProAddUserRoomCardPropResponse message, length delimited. Does not implicitly {@link messages.ProAddUserRoomCardPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {messages.IProAddUserRoomCardPropResponse} message ProAddUserRoomCardPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProAddUserRoomCardPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProAddUserRoomCardPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProAddUserRoomCardPropResponse} ProAddUserRoomCardPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserRoomCardPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProAddUserRoomCardPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProAddUserRoomCardPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProAddUserRoomCardPropResponse} ProAddUserRoomCardPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProAddUserRoomCardPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProAddUserRoomCardPropResponse message.
         * @function verify
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProAddUserRoomCardPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProAddUserRoomCardPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProAddUserRoomCardPropResponse} ProAddUserRoomCardPropResponse
         */
        ProAddUserRoomCardPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProAddUserRoomCardPropResponse)
                return object;
            var message = new $root.messages.ProAddUserRoomCardPropResponse();
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProAddUserRoomCardPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @static
         * @param {messages.ProAddUserRoomCardPropResponse} message ProAddUserRoomCardPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProAddUserRoomCardPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.result = 0;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProAddUserRoomCardPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProAddUserRoomCardPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProAddUserRoomCardPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProAddUserRoomCardPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=759 ID value
         */
        ProAddUserRoomCardPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[759] = "ID"] = 759;
            return values;
        })();

        return ProAddUserRoomCardPropResponse;
    })();

    messages.ProLoadRoomCardStrategyNotify = (function() {

        /**
         * Properties of a ProLoadRoomCardStrategyNotify.
         * @memberof messages
         * @interface IProLoadRoomCardStrategyNotify
         * @property {number|null} [gameId] ProLoadRoomCardStrategyNotify gameId
         */

        /**
         * Constructs a new ProLoadRoomCardStrategyNotify.
         * @memberof messages
         * @classdesc Represents a ProLoadRoomCardStrategyNotify.
         * @implements IProLoadRoomCardStrategyNotify
         * @constructor
         * @param {messages.IProLoadRoomCardStrategyNotify=} [properties] Properties to set
         */
        function ProLoadRoomCardStrategyNotify(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProLoadRoomCardStrategyNotify gameId.
         * @member {number} gameId
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @instance
         */
        ProLoadRoomCardStrategyNotify.prototype.gameId = 0;

        /**
         * Creates a new ProLoadRoomCardStrategyNotify instance using the specified properties.
         * @function create
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {messages.IProLoadRoomCardStrategyNotify=} [properties] Properties to set
         * @returns {messages.ProLoadRoomCardStrategyNotify} ProLoadRoomCardStrategyNotify instance
         */
        ProLoadRoomCardStrategyNotify.create = function create(properties) {
            return new ProLoadRoomCardStrategyNotify(properties);
        };

        /**
         * Encodes the specified ProLoadRoomCardStrategyNotify message. Does not implicitly {@link messages.ProLoadRoomCardStrategyNotify.verify|verify} messages.
         * @function encode
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {messages.IProLoadRoomCardStrategyNotify} message ProLoadRoomCardStrategyNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoadRoomCardStrategyNotify.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProLoadRoomCardStrategyNotify message, length delimited. Does not implicitly {@link messages.ProLoadRoomCardStrategyNotify.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {messages.IProLoadRoomCardStrategyNotify} message ProLoadRoomCardStrategyNotify message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProLoadRoomCardStrategyNotify.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProLoadRoomCardStrategyNotify message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProLoadRoomCardStrategyNotify} ProLoadRoomCardStrategyNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoadRoomCardStrategyNotify.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProLoadRoomCardStrategyNotify();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProLoadRoomCardStrategyNotify message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProLoadRoomCardStrategyNotify} ProLoadRoomCardStrategyNotify
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProLoadRoomCardStrategyNotify.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProLoadRoomCardStrategyNotify message.
         * @function verify
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProLoadRoomCardStrategyNotify.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProLoadRoomCardStrategyNotify message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProLoadRoomCardStrategyNotify} ProLoadRoomCardStrategyNotify
         */
        ProLoadRoomCardStrategyNotify.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProLoadRoomCardStrategyNotify)
                return object;
            var message = new $root.messages.ProLoadRoomCardStrategyNotify();
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProLoadRoomCardStrategyNotify message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @static
         * @param {messages.ProLoadRoomCardStrategyNotify} message ProLoadRoomCardStrategyNotify
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProLoadRoomCardStrategyNotify.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.gameId = 0;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProLoadRoomCardStrategyNotify to JSON.
         * @function toJSON
         * @memberof messages.ProLoadRoomCardStrategyNotify
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProLoadRoomCardStrategyNotify.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProLoadRoomCardStrategyNotify.MSGID
         * @enum {string}
         * @property {number} ID=760 ID value
         */
        ProLoadRoomCardStrategyNotify.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[760] = "ID"] = 760;
            return values;
        })();

        return ProLoadRoomCardStrategyNotify;
    })();

    messages.ProGetUserMatchTicketPropRequest = (function() {

        /**
         * Properties of a ProGetUserMatchTicketPropRequest.
         * @memberof messages
         * @interface IProGetUserMatchTicketPropRequest
         * @property {number|null} [userId] ProGetUserMatchTicketPropRequest userId
         * @property {number|null} [gameId] ProGetUserMatchTicketPropRequest gameId
         */

        /**
         * Constructs a new ProGetUserMatchTicketPropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserMatchTicketPropRequest.
         * @implements IProGetUserMatchTicketPropRequest
         * @constructor
         * @param {messages.IProGetUserMatchTicketPropRequest=} [properties] Properties to set
         */
        function ProGetUserMatchTicketPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserMatchTicketPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @instance
         */
        ProGetUserMatchTicketPropRequest.prototype.userId = 0;

        /**
         * ProGetUserMatchTicketPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @instance
         */
        ProGetUserMatchTicketPropRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetUserMatchTicketPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {messages.IProGetUserMatchTicketPropRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserMatchTicketPropRequest} ProGetUserMatchTicketPropRequest instance
         */
        ProGetUserMatchTicketPropRequest.create = function create(properties) {
            return new ProGetUserMatchTicketPropRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserMatchTicketPropRequest message. Does not implicitly {@link messages.ProGetUserMatchTicketPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {messages.IProGetUserMatchTicketPropRequest} message ProGetUserMatchTicketPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserMatchTicketPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserMatchTicketPropRequest message, length delimited. Does not implicitly {@link messages.ProGetUserMatchTicketPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {messages.IProGetUserMatchTicketPropRequest} message ProGetUserMatchTicketPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserMatchTicketPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserMatchTicketPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserMatchTicketPropRequest} ProGetUserMatchTicketPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserMatchTicketPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserMatchTicketPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserMatchTicketPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserMatchTicketPropRequest} ProGetUserMatchTicketPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserMatchTicketPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserMatchTicketPropRequest message.
         * @function verify
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserMatchTicketPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserMatchTicketPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserMatchTicketPropRequest} ProGetUserMatchTicketPropRequest
         */
        ProGetUserMatchTicketPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserMatchTicketPropRequest)
                return object;
            var message = new $root.messages.ProGetUserMatchTicketPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserMatchTicketPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @static
         * @param {messages.ProGetUserMatchTicketPropRequest} message ProGetUserMatchTicketPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserMatchTicketPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetUserMatchTicketPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserMatchTicketPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserMatchTicketPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserMatchTicketPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=761 ID value
         */
        ProGetUserMatchTicketPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[761] = "ID"] = 761;
            return values;
        })();

        return ProGetUserMatchTicketPropRequest;
    })();

    messages.ProGetUserMatchTicketPropResponse = (function() {

        /**
         * Properties of a ProGetUserMatchTicketPropResponse.
         * @memberof messages
         * @interface IProGetUserMatchTicketPropResponse
         * @property {number|null} [matchTicketNum] ProGetUserMatchTicketPropResponse matchTicketNum
         */

        /**
         * Constructs a new ProGetUserMatchTicketPropResponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserMatchTicketPropResponse.
         * @implements IProGetUserMatchTicketPropResponse
         * @constructor
         * @param {messages.IProGetUserMatchTicketPropResponse=} [properties] Properties to set
         */
        function ProGetUserMatchTicketPropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserMatchTicketPropResponse matchTicketNum.
         * @member {number} matchTicketNum
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @instance
         */
        ProGetUserMatchTicketPropResponse.prototype.matchTicketNum = 0;

        /**
         * Creates a new ProGetUserMatchTicketPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {messages.IProGetUserMatchTicketPropResponse=} [properties] Properties to set
         * @returns {messages.ProGetUserMatchTicketPropResponse} ProGetUserMatchTicketPropResponse instance
         */
        ProGetUserMatchTicketPropResponse.create = function create(properties) {
            return new ProGetUserMatchTicketPropResponse(properties);
        };

        /**
         * Encodes the specified ProGetUserMatchTicketPropResponse message. Does not implicitly {@link messages.ProGetUserMatchTicketPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {messages.IProGetUserMatchTicketPropResponse} message ProGetUserMatchTicketPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserMatchTicketPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.matchTicketNum != null && message.hasOwnProperty("matchTicketNum"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.matchTicketNum);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserMatchTicketPropResponse message, length delimited. Does not implicitly {@link messages.ProGetUserMatchTicketPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {messages.IProGetUserMatchTicketPropResponse} message ProGetUserMatchTicketPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserMatchTicketPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserMatchTicketPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserMatchTicketPropResponse} ProGetUserMatchTicketPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserMatchTicketPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserMatchTicketPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.matchTicketNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserMatchTicketPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserMatchTicketPropResponse} ProGetUserMatchTicketPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserMatchTicketPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserMatchTicketPropResponse message.
         * @function verify
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserMatchTicketPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.matchTicketNum != null && message.hasOwnProperty("matchTicketNum"))
                if (!$util.isInteger(message.matchTicketNum))
                    return "matchTicketNum: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserMatchTicketPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserMatchTicketPropResponse} ProGetUserMatchTicketPropResponse
         */
        ProGetUserMatchTicketPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserMatchTicketPropResponse)
                return object;
            var message = new $root.messages.ProGetUserMatchTicketPropResponse();
            if (object.matchTicketNum != null)
                message.matchTicketNum = object.matchTicketNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserMatchTicketPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @static
         * @param {messages.ProGetUserMatchTicketPropResponse} message ProGetUserMatchTicketPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserMatchTicketPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.matchTicketNum = 0;
            if (message.matchTicketNum != null && message.hasOwnProperty("matchTicketNum"))
                object.matchTicketNum = message.matchTicketNum;
            return object;
        };

        /**
         * Converts this ProGetUserMatchTicketPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserMatchTicketPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserMatchTicketPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserMatchTicketPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=762 ID value
         */
        ProGetUserMatchTicketPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[762] = "ID"] = 762;
            return values;
        })();

        return ProGetUserMatchTicketPropResponse;
    })();

    messages.ProGetUserLotteryPropRequest = (function() {

        /**
         * Properties of a ProGetUserLotteryPropRequest.
         * @memberof messages
         * @interface IProGetUserLotteryPropRequest
         * @property {number|null} [userId] ProGetUserLotteryPropRequest userId
         * @property {number|null} [gameId] ProGetUserLotteryPropRequest gameId
         */

        /**
         * Constructs a new ProGetUserLotteryPropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserLotteryPropRequest.
         * @implements IProGetUserLotteryPropRequest
         * @constructor
         * @param {messages.IProGetUserLotteryPropRequest=} [properties] Properties to set
         */
        function ProGetUserLotteryPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserLotteryPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserLotteryPropRequest
         * @instance
         */
        ProGetUserLotteryPropRequest.prototype.userId = 0;

        /**
         * ProGetUserLotteryPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetUserLotteryPropRequest
         * @instance
         */
        ProGetUserLotteryPropRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetUserLotteryPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {messages.IProGetUserLotteryPropRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserLotteryPropRequest} ProGetUserLotteryPropRequest instance
         */
        ProGetUserLotteryPropRequest.create = function create(properties) {
            return new ProGetUserLotteryPropRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserLotteryPropRequest message. Does not implicitly {@link messages.ProGetUserLotteryPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {messages.IProGetUserLotteryPropRequest} message ProGetUserLotteryPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserLotteryPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserLotteryPropRequest message, length delimited. Does not implicitly {@link messages.ProGetUserLotteryPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {messages.IProGetUserLotteryPropRequest} message ProGetUserLotteryPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserLotteryPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserLotteryPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserLotteryPropRequest} ProGetUserLotteryPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserLotteryPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserLotteryPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserLotteryPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserLotteryPropRequest} ProGetUserLotteryPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserLotteryPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserLotteryPropRequest message.
         * @function verify
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserLotteryPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserLotteryPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserLotteryPropRequest} ProGetUserLotteryPropRequest
         */
        ProGetUserLotteryPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserLotteryPropRequest)
                return object;
            var message = new $root.messages.ProGetUserLotteryPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserLotteryPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserLotteryPropRequest
         * @static
         * @param {messages.ProGetUserLotteryPropRequest} message ProGetUserLotteryPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserLotteryPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetUserLotteryPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserLotteryPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserLotteryPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserLotteryPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=763 ID value
         */
        ProGetUserLotteryPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[763] = "ID"] = 763;
            return values;
        })();

        return ProGetUserLotteryPropRequest;
    })();

    messages.ProGetUserLotteryPropResponse = (function() {

        /**
         * Properties of a ProGetUserLotteryPropResponse.
         * @memberof messages
         * @interface IProGetUserLotteryPropResponse
         * @property {number|null} [lotteryNum] ProGetUserLotteryPropResponse lotteryNum
         */

        /**
         * Constructs a new ProGetUserLotteryPropResponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserLotteryPropResponse.
         * @implements IProGetUserLotteryPropResponse
         * @constructor
         * @param {messages.IProGetUserLotteryPropResponse=} [properties] Properties to set
         */
        function ProGetUserLotteryPropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserLotteryPropResponse lotteryNum.
         * @member {number} lotteryNum
         * @memberof messages.ProGetUserLotteryPropResponse
         * @instance
         */
        ProGetUserLotteryPropResponse.prototype.lotteryNum = 0;

        /**
         * Creates a new ProGetUserLotteryPropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {messages.IProGetUserLotteryPropResponse=} [properties] Properties to set
         * @returns {messages.ProGetUserLotteryPropResponse} ProGetUserLotteryPropResponse instance
         */
        ProGetUserLotteryPropResponse.create = function create(properties) {
            return new ProGetUserLotteryPropResponse(properties);
        };

        /**
         * Encodes the specified ProGetUserLotteryPropResponse message. Does not implicitly {@link messages.ProGetUserLotteryPropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {messages.IProGetUserLotteryPropResponse} message ProGetUserLotteryPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserLotteryPropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.lotteryNum != null && message.hasOwnProperty("lotteryNum"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lotteryNum);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserLotteryPropResponse message, length delimited. Does not implicitly {@link messages.ProGetUserLotteryPropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {messages.IProGetUserLotteryPropResponse} message ProGetUserLotteryPropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserLotteryPropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserLotteryPropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserLotteryPropResponse} ProGetUserLotteryPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserLotteryPropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserLotteryPropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.lotteryNum = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserLotteryPropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserLotteryPropResponse} ProGetUserLotteryPropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserLotteryPropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserLotteryPropResponse message.
         * @function verify
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserLotteryPropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.lotteryNum != null && message.hasOwnProperty("lotteryNum"))
                if (!$util.isInteger(message.lotteryNum))
                    return "lotteryNum: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserLotteryPropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserLotteryPropResponse} ProGetUserLotteryPropResponse
         */
        ProGetUserLotteryPropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserLotteryPropResponse)
                return object;
            var message = new $root.messages.ProGetUserLotteryPropResponse();
            if (object.lotteryNum != null)
                message.lotteryNum = object.lotteryNum | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserLotteryPropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserLotteryPropResponse
         * @static
         * @param {messages.ProGetUserLotteryPropResponse} message ProGetUserLotteryPropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserLotteryPropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.lotteryNum = 0;
            if (message.lotteryNum != null && message.hasOwnProperty("lotteryNum"))
                object.lotteryNum = message.lotteryNum;
            return object;
        };

        /**
         * Converts this ProGetUserLotteryPropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserLotteryPropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserLotteryPropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserLotteryPropResponse.MSGID
         * @enum {string}
         * @property {number} ID=764 ID value
         */
        ProGetUserLotteryPropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[764] = "ID"] = 764;
            return values;
        })();

        return ProGetUserLotteryPropResponse;
    })();

    messages.ProUserUpdatePropRequest = (function() {

        /**
         * Properties of a ProUserUpdatePropRequest.
         * @memberof messages
         * @interface IProUserUpdatePropRequest
         * @property {number|null} [userId] ProUserUpdatePropRequest userId
         * @property {number|null} [gameId] ProUserUpdatePropRequest gameId
         * @property {number|null} [count] ProUserUpdatePropRequest count
         * @property {number|null} [propType] ProUserUpdatePropRequest propType
         * @property {number|null} [sourceType] ProUserUpdatePropRequest sourceType
         */

        /**
         * Constructs a new ProUserUpdatePropRequest.
         * @memberof messages
         * @classdesc Represents a ProUserUpdatePropRequest.
         * @implements IProUserUpdatePropRequest
         * @constructor
         * @param {messages.IProUserUpdatePropRequest=} [properties] Properties to set
         */
        function ProUserUpdatePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserUpdatePropRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         */
        ProUserUpdatePropRequest.prototype.userId = 0;

        /**
         * ProUserUpdatePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         */
        ProUserUpdatePropRequest.prototype.gameId = 0;

        /**
         * ProUserUpdatePropRequest count.
         * @member {number} count
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         */
        ProUserUpdatePropRequest.prototype.count = 0;

        /**
         * ProUserUpdatePropRequest propType.
         * @member {number} propType
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         */
        ProUserUpdatePropRequest.prototype.propType = 0;

        /**
         * ProUserUpdatePropRequest sourceType.
         * @member {number} sourceType
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         */
        ProUserUpdatePropRequest.prototype.sourceType = 0;

        /**
         * Creates a new ProUserUpdatePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {messages.IProUserUpdatePropRequest=} [properties] Properties to set
         * @returns {messages.ProUserUpdatePropRequest} ProUserUpdatePropRequest instance
         */
        ProUserUpdatePropRequest.create = function create(properties) {
            return new ProUserUpdatePropRequest(properties);
        };

        /**
         * Encodes the specified ProUserUpdatePropRequest message. Does not implicitly {@link messages.ProUserUpdatePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {messages.IProUserUpdatePropRequest} message ProUserUpdatePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserUpdatePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);
            if (message.propType != null && message.hasOwnProperty("propType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.propType);
            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.sourceType);
            return writer;
        };

        /**
         * Encodes the specified ProUserUpdatePropRequest message, length delimited. Does not implicitly {@link messages.ProUserUpdatePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {messages.IProUserUpdatePropRequest} message ProUserUpdatePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserUpdatePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserUpdatePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserUpdatePropRequest} ProUserUpdatePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserUpdatePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserUpdatePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.count = reader.int32();
                    break;
                case 5:
                    message.propType = reader.int32();
                    break;
                case 6:
                    message.sourceType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserUpdatePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserUpdatePropRequest} ProUserUpdatePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserUpdatePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserUpdatePropRequest message.
         * @function verify
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserUpdatePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.propType != null && message.hasOwnProperty("propType"))
                if (!$util.isInteger(message.propType))
                    return "propType: integer expected";
            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                if (!$util.isInteger(message.sourceType))
                    return "sourceType: integer expected";
            return null;
        };

        /**
         * Creates a ProUserUpdatePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserUpdatePropRequest} ProUserUpdatePropRequest
         */
        ProUserUpdatePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserUpdatePropRequest)
                return object;
            var message = new $root.messages.ProUserUpdatePropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.propType != null)
                message.propType = object.propType | 0;
            if (object.sourceType != null)
                message.sourceType = object.sourceType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserUpdatePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserUpdatePropRequest
         * @static
         * @param {messages.ProUserUpdatePropRequest} message ProUserUpdatePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserUpdatePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.count = 0;
                object.propType = 0;
                object.sourceType = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.propType != null && message.hasOwnProperty("propType"))
                object.propType = message.propType;
            if (message.sourceType != null && message.hasOwnProperty("sourceType"))
                object.sourceType = message.sourceType;
            return object;
        };

        /**
         * Converts this ProUserUpdatePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserUpdatePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserUpdatePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserUpdatePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=765 ID value
         */
        ProUserUpdatePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[765] = "ID"] = 765;
            return values;
        })();

        return ProUserUpdatePropRequest;
    })();

    messages.ProUserUpdatePropResponse = (function() {

        /**
         * Properties of a ProUserUpdatePropResponse.
         * @memberof messages
         * @interface IProUserUpdatePropResponse
         * @property {number|null} [result] ProUserUpdatePropResponse result
         */

        /**
         * Constructs a new ProUserUpdatePropResponse.
         * @memberof messages
         * @classdesc Represents a ProUserUpdatePropResponse.
         * @implements IProUserUpdatePropResponse
         * @constructor
         * @param {messages.IProUserUpdatePropResponse=} [properties] Properties to set
         */
        function ProUserUpdatePropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserUpdatePropResponse result.
         * @member {number} result
         * @memberof messages.ProUserUpdatePropResponse
         * @instance
         */
        ProUserUpdatePropResponse.prototype.result = 0;

        /**
         * Creates a new ProUserUpdatePropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {messages.IProUserUpdatePropResponse=} [properties] Properties to set
         * @returns {messages.ProUserUpdatePropResponse} ProUserUpdatePropResponse instance
         */
        ProUserUpdatePropResponse.create = function create(properties) {
            return new ProUserUpdatePropResponse(properties);
        };

        /**
         * Encodes the specified ProUserUpdatePropResponse message. Does not implicitly {@link messages.ProUserUpdatePropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {messages.IProUserUpdatePropResponse} message ProUserUpdatePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserUpdatePropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.result);
            return writer;
        };

        /**
         * Encodes the specified ProUserUpdatePropResponse message, length delimited. Does not implicitly {@link messages.ProUserUpdatePropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {messages.IProUserUpdatePropResponse} message ProUserUpdatePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserUpdatePropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserUpdatePropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserUpdatePropResponse} ProUserUpdatePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserUpdatePropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserUpdatePropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.result = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserUpdatePropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserUpdatePropResponse} ProUserUpdatePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserUpdatePropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserUpdatePropResponse message.
         * @function verify
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserUpdatePropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            return null;
        };

        /**
         * Creates a ProUserUpdatePropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserUpdatePropResponse} ProUserUpdatePropResponse
         */
        ProUserUpdatePropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserUpdatePropResponse)
                return object;
            var message = new $root.messages.ProUserUpdatePropResponse();
            if (object.result != null)
                message.result = object.result | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserUpdatePropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserUpdatePropResponse
         * @static
         * @param {messages.ProUserUpdatePropResponse} message ProUserUpdatePropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserUpdatePropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults)
                object.result = 0;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            return object;
        };

        /**
         * Converts this ProUserUpdatePropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserUpdatePropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserUpdatePropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserUpdatePropResponse.MSGID
         * @enum {string}
         * @property {number} ID=766 ID value
         */
        ProUserUpdatePropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[766] = "ID"] = 766;
            return values;
        })();

        return ProUserUpdatePropResponse;
    })();

    messages.ProClientUsePropRequest = (function() {

        /**
         * Properties of a ProClientUsePropRequest.
         * @memberof messages
         * @interface IProClientUsePropRequest
         * @property {messages.propType} propType ProClientUsePropRequest propType
         * @property {number|null} [userId] ProClientUsePropRequest userId
         * @property {number|null} [gameId] ProClientUsePropRequest gameId
         * @property {number|null} [count] ProClientUsePropRequest count
         * @property {number|null} [roomcardId] ProClientUsePropRequest roomcardId
         */

        /**
         * Constructs a new ProClientUsePropRequest.
         * @memberof messages
         * @classdesc Represents a ProClientUsePropRequest.
         * @implements IProClientUsePropRequest
         * @constructor
         * @param {messages.IProClientUsePropRequest=} [properties] Properties to set
         */
        function ProClientUsePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProClientUsePropRequest propType.
         * @member {messages.propType} propType
         * @memberof messages.ProClientUsePropRequest
         * @instance
         */
        ProClientUsePropRequest.prototype.propType = 1;

        /**
         * ProClientUsePropRequest userId.
         * @member {number} userId
         * @memberof messages.ProClientUsePropRequest
         * @instance
         */
        ProClientUsePropRequest.prototype.userId = 0;

        /**
         * ProClientUsePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProClientUsePropRequest
         * @instance
         */
        ProClientUsePropRequest.prototype.gameId = 0;

        /**
         * ProClientUsePropRequest count.
         * @member {number} count
         * @memberof messages.ProClientUsePropRequest
         * @instance
         */
        ProClientUsePropRequest.prototype.count = 0;

        /**
         * ProClientUsePropRequest roomcardId.
         * @member {number} roomcardId
         * @memberof messages.ProClientUsePropRequest
         * @instance
         */
        ProClientUsePropRequest.prototype.roomcardId = 0;

        /**
         * Creates a new ProClientUsePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {messages.IProClientUsePropRequest=} [properties] Properties to set
         * @returns {messages.ProClientUsePropRequest} ProClientUsePropRequest instance
         */
        ProClientUsePropRequest.create = function create(properties) {
            return new ProClientUsePropRequest(properties);
        };

        /**
         * Encodes the specified ProClientUsePropRequest message. Does not implicitly {@link messages.ProClientUsePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {messages.IProClientUsePropRequest} message ProClientUsePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientUsePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.propType);
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gameId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.count);
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomcardId);
            return writer;
        };

        /**
         * Encodes the specified ProClientUsePropRequest message, length delimited. Does not implicitly {@link messages.ProClientUsePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {messages.IProClientUsePropRequest} message ProClientUsePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientUsePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProClientUsePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProClientUsePropRequest} ProClientUsePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientUsePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProClientUsePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.propType = reader.int32();
                    break;
                case 3:
                    message.userId = reader.int32();
                    break;
                case 4:
                    message.gameId = reader.int32();
                    break;
                case 5:
                    message.count = reader.int32();
                    break;
                case 6:
                    message.roomcardId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("propType"))
                throw $util.ProtocolError("missing required 'propType'", { instance: message });
            return message;
        };

        /**
         * Decodes a ProClientUsePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProClientUsePropRequest} ProClientUsePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientUsePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProClientUsePropRequest message.
         * @function verify
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProClientUsePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.propType) {
            default:
                return "propType: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                if (!$util.isInteger(message.roomcardId))
                    return "roomcardId: integer expected";
            return null;
        };

        /**
         * Creates a ProClientUsePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProClientUsePropRequest} ProClientUsePropRequest
         */
        ProClientUsePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProClientUsePropRequest)
                return object;
            var message = new $root.messages.ProClientUsePropRequest();
            switch (object.propType) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.propType = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.propType = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.propType = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.propType = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.propType = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.propType = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.propType = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.propType = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.propType = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.propType = 10;
                break;
            }
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.roomcardId != null)
                message.roomcardId = object.roomcardId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProClientUsePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProClientUsePropRequest
         * @static
         * @param {messages.ProClientUsePropRequest} message ProClientUsePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProClientUsePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.propType = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
                object.userId = 0;
                object.gameId = 0;
                object.count = 0;
                object.roomcardId = 0;
            }
            if (message.propType != null && message.hasOwnProperty("propType"))
                object.propType = options.enums === String ? $root.messages.propType[message.propType] : message.propType;
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                object.roomcardId = message.roomcardId;
            return object;
        };

        /**
         * Converts this ProClientUsePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProClientUsePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProClientUsePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProClientUsePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=767 ID value
         */
        ProClientUsePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[767] = "ID"] = 767;
            return values;
        })();

        return ProClientUsePropRequest;
    })();

    messages.ProClientUsePropResponse = (function() {

        /**
         * Properties of a ProClientUsePropResponse.
         * @memberof messages
         * @interface IProClientUsePropResponse
         * @property {Array.<messages.IpropBaseInfo>|null} [propInfo] ProClientUsePropResponse propInfo
         */

        /**
         * Constructs a new ProClientUsePropResponse.
         * @memberof messages
         * @classdesc Represents a ProClientUsePropResponse.
         * @implements IProClientUsePropResponse
         * @constructor
         * @param {messages.IProClientUsePropResponse=} [properties] Properties to set
         */
        function ProClientUsePropResponse(properties) {
            this.propInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProClientUsePropResponse propInfo.
         * @member {Array.<messages.IpropBaseInfo>} propInfo
         * @memberof messages.ProClientUsePropResponse
         * @instance
         */
        ProClientUsePropResponse.prototype.propInfo = $util.emptyArray;

        /**
         * Creates a new ProClientUsePropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {messages.IProClientUsePropResponse=} [properties] Properties to set
         * @returns {messages.ProClientUsePropResponse} ProClientUsePropResponse instance
         */
        ProClientUsePropResponse.create = function create(properties) {
            return new ProClientUsePropResponse(properties);
        };

        /**
         * Encodes the specified ProClientUsePropResponse message. Does not implicitly {@link messages.ProClientUsePropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {messages.IProClientUsePropResponse} message ProClientUsePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientUsePropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.propInfo != null && message.propInfo.length)
                for (var i = 0; i < message.propInfo.length; ++i)
                    $root.messages.propBaseInfo.encode(message.propInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProClientUsePropResponse message, length delimited. Does not implicitly {@link messages.ProClientUsePropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {messages.IProClientUsePropResponse} message ProClientUsePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProClientUsePropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProClientUsePropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProClientUsePropResponse} ProClientUsePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientUsePropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProClientUsePropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    if (!(message.propInfo && message.propInfo.length))
                        message.propInfo = [];
                    message.propInfo.push($root.messages.propBaseInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProClientUsePropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProClientUsePropResponse} ProClientUsePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProClientUsePropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProClientUsePropResponse message.
         * @function verify
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProClientUsePropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.propInfo != null && message.hasOwnProperty("propInfo")) {
                if (!Array.isArray(message.propInfo))
                    return "propInfo: array expected";
                for (var i = 0; i < message.propInfo.length; ++i) {
                    var error = $root.messages.propBaseInfo.verify(message.propInfo[i]);
                    if (error)
                        return "propInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProClientUsePropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProClientUsePropResponse} ProClientUsePropResponse
         */
        ProClientUsePropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProClientUsePropResponse)
                return object;
            var message = new $root.messages.ProClientUsePropResponse();
            if (object.propInfo) {
                if (!Array.isArray(object.propInfo))
                    throw TypeError(".messages.ProClientUsePropResponse.propInfo: array expected");
                message.propInfo = [];
                for (var i = 0; i < object.propInfo.length; ++i) {
                    if (typeof object.propInfo[i] !== "object")
                        throw TypeError(".messages.ProClientUsePropResponse.propInfo: object expected");
                    message.propInfo[i] = $root.messages.propBaseInfo.fromObject(object.propInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProClientUsePropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProClientUsePropResponse
         * @static
         * @param {messages.ProClientUsePropResponse} message ProClientUsePropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProClientUsePropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.propInfo = [];
            if (message.propInfo && message.propInfo.length) {
                object.propInfo = [];
                for (var j = 0; j < message.propInfo.length; ++j)
                    object.propInfo[j] = $root.messages.propBaseInfo.toObject(message.propInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this ProClientUsePropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProClientUsePropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProClientUsePropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProClientUsePropResponse.MSGID
         * @enum {string}
         * @property {number} ID=768 ID value
         */
        ProClientUsePropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[768] = "ID"] = 768;
            return values;
        })();

        return ProClientUsePropResponse;
    })();

    messages.ProGetUserOtherPropRequest = (function() {

        /**
         * Properties of a ProGetUserOtherPropRequest.
         * @memberof messages
         * @interface IProGetUserOtherPropRequest
         * @property {number|null} [userId] ProGetUserOtherPropRequest userId
         * @property {number|null} [gameId] ProGetUserOtherPropRequest gameId
         */

        /**
         * Constructs a new ProGetUserOtherPropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetUserOtherPropRequest.
         * @implements IProGetUserOtherPropRequest
         * @constructor
         * @param {messages.IProGetUserOtherPropRequest=} [properties] Properties to set
         */
        function ProGetUserOtherPropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserOtherPropRequest userId.
         * @member {number} userId
         * @memberof messages.ProGetUserOtherPropRequest
         * @instance
         */
        ProGetUserOtherPropRequest.prototype.userId = 0;

        /**
         * ProGetUserOtherPropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetUserOtherPropRequest
         * @instance
         */
        ProGetUserOtherPropRequest.prototype.gameId = 0;

        /**
         * Creates a new ProGetUserOtherPropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {messages.IProGetUserOtherPropRequest=} [properties] Properties to set
         * @returns {messages.ProGetUserOtherPropRequest} ProGetUserOtherPropRequest instance
         */
        ProGetUserOtherPropRequest.create = function create(properties) {
            return new ProGetUserOtherPropRequest(properties);
        };

        /**
         * Encodes the specified ProGetUserOtherPropRequest message. Does not implicitly {@link messages.ProGetUserOtherPropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {messages.IProGetUserOtherPropRequest} message ProGetUserOtherPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserOtherPropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProGetUserOtherPropRequest message, length delimited. Does not implicitly {@link messages.ProGetUserOtherPropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {messages.IProGetUserOtherPropRequest} message ProGetUserOtherPropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserOtherPropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserOtherPropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserOtherPropRequest} ProGetUserOtherPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserOtherPropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserOtherPropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserOtherPropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserOtherPropRequest} ProGetUserOtherPropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserOtherPropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserOtherPropRequest message.
         * @function verify
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserOtherPropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetUserOtherPropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserOtherPropRequest} ProGetUserOtherPropRequest
         */
        ProGetUserOtherPropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserOtherPropRequest)
                return object;
            var message = new $root.messages.ProGetUserOtherPropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserOtherPropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserOtherPropRequest
         * @static
         * @param {messages.ProGetUserOtherPropRequest} message ProGetUserOtherPropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserOtherPropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProGetUserOtherPropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserOtherPropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserOtherPropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserOtherPropRequest.MSGID
         * @enum {string}
         * @property {number} ID=769 ID value
         */
        ProGetUserOtherPropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[769] = "ID"] = 769;
            return values;
        })();

        return ProGetUserOtherPropRequest;
    })();

    messages.ProGetUserOtherPropReponse = (function() {

        /**
         * Properties of a ProGetUserOtherPropReponse.
         * @memberof messages
         * @interface IProGetUserOtherPropReponse
         * @property {Array.<messages.IpropBaseInfo>|null} [propInfo] ProGetUserOtherPropReponse propInfo
         */

        /**
         * Constructs a new ProGetUserOtherPropReponse.
         * @memberof messages
         * @classdesc Represents a ProGetUserOtherPropReponse.
         * @implements IProGetUserOtherPropReponse
         * @constructor
         * @param {messages.IProGetUserOtherPropReponse=} [properties] Properties to set
         */
        function ProGetUserOtherPropReponse(properties) {
            this.propInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetUserOtherPropReponse propInfo.
         * @member {Array.<messages.IpropBaseInfo>} propInfo
         * @memberof messages.ProGetUserOtherPropReponse
         * @instance
         */
        ProGetUserOtherPropReponse.prototype.propInfo = $util.emptyArray;

        /**
         * Creates a new ProGetUserOtherPropReponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {messages.IProGetUserOtherPropReponse=} [properties] Properties to set
         * @returns {messages.ProGetUserOtherPropReponse} ProGetUserOtherPropReponse instance
         */
        ProGetUserOtherPropReponse.create = function create(properties) {
            return new ProGetUserOtherPropReponse(properties);
        };

        /**
         * Encodes the specified ProGetUserOtherPropReponse message. Does not implicitly {@link messages.ProGetUserOtherPropReponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {messages.IProGetUserOtherPropReponse} message ProGetUserOtherPropReponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserOtherPropReponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.propInfo != null && message.propInfo.length)
                for (var i = 0; i < message.propInfo.length; ++i)
                    $root.messages.propBaseInfo.encode(message.propInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProGetUserOtherPropReponse message, length delimited. Does not implicitly {@link messages.ProGetUserOtherPropReponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {messages.IProGetUserOtherPropReponse} message ProGetUserOtherPropReponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetUserOtherPropReponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetUserOtherPropReponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetUserOtherPropReponse} ProGetUserOtherPropReponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserOtherPropReponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetUserOtherPropReponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    if (!(message.propInfo && message.propInfo.length))
                        message.propInfo = [];
                    message.propInfo.push($root.messages.propBaseInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetUserOtherPropReponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetUserOtherPropReponse} ProGetUserOtherPropReponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetUserOtherPropReponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetUserOtherPropReponse message.
         * @function verify
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetUserOtherPropReponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.propInfo != null && message.hasOwnProperty("propInfo")) {
                if (!Array.isArray(message.propInfo))
                    return "propInfo: array expected";
                for (var i = 0; i < message.propInfo.length; ++i) {
                    var error = $root.messages.propBaseInfo.verify(message.propInfo[i]);
                    if (error)
                        return "propInfo." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProGetUserOtherPropReponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetUserOtherPropReponse} ProGetUserOtherPropReponse
         */
        ProGetUserOtherPropReponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetUserOtherPropReponse)
                return object;
            var message = new $root.messages.ProGetUserOtherPropReponse();
            if (object.propInfo) {
                if (!Array.isArray(object.propInfo))
                    throw TypeError(".messages.ProGetUserOtherPropReponse.propInfo: array expected");
                message.propInfo = [];
                for (var i = 0; i < object.propInfo.length; ++i) {
                    if (typeof object.propInfo[i] !== "object")
                        throw TypeError(".messages.ProGetUserOtherPropReponse.propInfo: object expected");
                    message.propInfo[i] = $root.messages.propBaseInfo.fromObject(object.propInfo[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetUserOtherPropReponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetUserOtherPropReponse
         * @static
         * @param {messages.ProGetUserOtherPropReponse} message ProGetUserOtherPropReponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetUserOtherPropReponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.propInfo = [];
            if (message.propInfo && message.propInfo.length) {
                object.propInfo = [];
                for (var j = 0; j < message.propInfo.length; ++j)
                    object.propInfo[j] = $root.messages.propBaseInfo.toObject(message.propInfo[j], options);
            }
            return object;
        };

        /**
         * Converts this ProGetUserOtherPropReponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetUserOtherPropReponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetUserOtherPropReponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetUserOtherPropReponse.MSGID
         * @enum {string}
         * @property {number} ID=770 ID value
         */
        ProGetUserOtherPropReponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[770] = "ID"] = 770;
            return values;
        })();

        return ProGetUserOtherPropReponse;
    })();

    messages.ProGetOrganizePropRequest = (function() {

        /**
         * Properties of a ProGetOrganizePropRequest.
         * @memberof messages
         * @interface IProGetOrganizePropRequest
         * @property {number|null} [organizeId] ProGetOrganizePropRequest organizeId
         * @property {number|null} [gameId] ProGetOrganizePropRequest gameId
         * @property {messages.propType|null} [type] ProGetOrganizePropRequest type
         */

        /**
         * Constructs a new ProGetOrganizePropRequest.
         * @memberof messages
         * @classdesc Represents a ProGetOrganizePropRequest.
         * @implements IProGetOrganizePropRequest
         * @constructor
         * @param {messages.IProGetOrganizePropRequest=} [properties] Properties to set
         */
        function ProGetOrganizePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetOrganizePropRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProGetOrganizePropRequest
         * @instance
         */
        ProGetOrganizePropRequest.prototype.organizeId = 0;

        /**
         * ProGetOrganizePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProGetOrganizePropRequest
         * @instance
         */
        ProGetOrganizePropRequest.prototype.gameId = 0;

        /**
         * ProGetOrganizePropRequest type.
         * @member {messages.propType} type
         * @memberof messages.ProGetOrganizePropRequest
         * @instance
         */
        ProGetOrganizePropRequest.prototype.type = 1;

        /**
         * Creates a new ProGetOrganizePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {messages.IProGetOrganizePropRequest=} [properties] Properties to set
         * @returns {messages.ProGetOrganizePropRequest} ProGetOrganizePropRequest instance
         */
        ProGetOrganizePropRequest.create = function create(properties) {
            return new ProGetOrganizePropRequest(properties);
        };

        /**
         * Encodes the specified ProGetOrganizePropRequest message. Does not implicitly {@link messages.ProGetOrganizePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {messages.IProGetOrganizePropRequest} message ProGetOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified ProGetOrganizePropRequest message, length delimited. Does not implicitly {@link messages.ProGetOrganizePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {messages.IProGetOrganizePropRequest} message ProGetOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetOrganizePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetOrganizePropRequest} ProGetOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetOrganizePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetOrganizePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetOrganizePropRequest} ProGetOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetOrganizePropRequest message.
         * @function verify
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetOrganizePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            return null;
        };

        /**
         * Creates a ProGetOrganizePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetOrganizePropRequest} ProGetOrganizePropRequest
         */
        ProGetOrganizePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetOrganizePropRequest)
                return object;
            var message = new $root.messages.ProGetOrganizePropRequest();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            switch (object.type) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.type = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.type = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.type = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.type = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.type = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.type = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.type = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.type = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.type = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.type = 10;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a ProGetOrganizePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetOrganizePropRequest
         * @static
         * @param {messages.ProGetOrganizePropRequest} message ProGetOrganizePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetOrganizePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.gameId = 0;
                object.type = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.messages.propType[message.type] : message.type;
            return object;
        };

        /**
         * Converts this ProGetOrganizePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProGetOrganizePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetOrganizePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetOrganizePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=771 ID value
         */
        ProGetOrganizePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[771] = "ID"] = 771;
            return values;
        })();

        return ProGetOrganizePropRequest;
    })();

    messages.ProGetOrganizePropResponse = (function() {

        /**
         * Properties of a ProGetOrganizePropResponse.
         * @memberof messages
         * @interface IProGetOrganizePropResponse
         * @property {Array.<messages.IpropBaseInfo>|null} [propInfo] ProGetOrganizePropResponse propInfo
         * @property {number|null} [organizeId] ProGetOrganizePropResponse organizeId
         */

        /**
         * Constructs a new ProGetOrganizePropResponse.
         * @memberof messages
         * @classdesc Represents a ProGetOrganizePropResponse.
         * @implements IProGetOrganizePropResponse
         * @constructor
         * @param {messages.IProGetOrganizePropResponse=} [properties] Properties to set
         */
        function ProGetOrganizePropResponse(properties) {
            this.propInfo = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProGetOrganizePropResponse propInfo.
         * @member {Array.<messages.IpropBaseInfo>} propInfo
         * @memberof messages.ProGetOrganizePropResponse
         * @instance
         */
        ProGetOrganizePropResponse.prototype.propInfo = $util.emptyArray;

        /**
         * ProGetOrganizePropResponse organizeId.
         * @member {number} organizeId
         * @memberof messages.ProGetOrganizePropResponse
         * @instance
         */
        ProGetOrganizePropResponse.prototype.organizeId = 0;

        /**
         * Creates a new ProGetOrganizePropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {messages.IProGetOrganizePropResponse=} [properties] Properties to set
         * @returns {messages.ProGetOrganizePropResponse} ProGetOrganizePropResponse instance
         */
        ProGetOrganizePropResponse.create = function create(properties) {
            return new ProGetOrganizePropResponse(properties);
        };

        /**
         * Encodes the specified ProGetOrganizePropResponse message. Does not implicitly {@link messages.ProGetOrganizePropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {messages.IProGetOrganizePropResponse} message ProGetOrganizePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizePropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.propInfo != null && message.propInfo.length)
                for (var i = 0; i < message.propInfo.length; ++i)
                    $root.messages.propBaseInfo.encode(message.propInfo[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.organizeId);
            return writer;
        };

        /**
         * Encodes the specified ProGetOrganizePropResponse message, length delimited. Does not implicitly {@link messages.ProGetOrganizePropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {messages.IProGetOrganizePropResponse} message ProGetOrganizePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProGetOrganizePropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProGetOrganizePropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProGetOrganizePropResponse} ProGetOrganizePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizePropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProGetOrganizePropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 3:
                    if (!(message.propInfo && message.propInfo.length))
                        message.propInfo = [];
                    message.propInfo.push($root.messages.propBaseInfo.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.organizeId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProGetOrganizePropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProGetOrganizePropResponse} ProGetOrganizePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProGetOrganizePropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProGetOrganizePropResponse message.
         * @function verify
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProGetOrganizePropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.propInfo != null && message.hasOwnProperty("propInfo")) {
                if (!Array.isArray(message.propInfo))
                    return "propInfo: array expected";
                for (var i = 0; i < message.propInfo.length; ++i) {
                    var error = $root.messages.propBaseInfo.verify(message.propInfo[i]);
                    if (error)
                        return "propInfo." + error;
                }
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            return null;
        };

        /**
         * Creates a ProGetOrganizePropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProGetOrganizePropResponse} ProGetOrganizePropResponse
         */
        ProGetOrganizePropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProGetOrganizePropResponse)
                return object;
            var message = new $root.messages.ProGetOrganizePropResponse();
            if (object.propInfo) {
                if (!Array.isArray(object.propInfo))
                    throw TypeError(".messages.ProGetOrganizePropResponse.propInfo: array expected");
                message.propInfo = [];
                for (var i = 0; i < object.propInfo.length; ++i) {
                    if (typeof object.propInfo[i] !== "object")
                        throw TypeError(".messages.ProGetOrganizePropResponse.propInfo: object expected");
                    message.propInfo[i] = $root.messages.propBaseInfo.fromObject(object.propInfo[i]);
                }
            }
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProGetOrganizePropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProGetOrganizePropResponse
         * @static
         * @param {messages.ProGetOrganizePropResponse} message ProGetOrganizePropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProGetOrganizePropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.propInfo = [];
            if (options.defaults)
                object.organizeId = 0;
            if (message.propInfo && message.propInfo.length) {
                object.propInfo = [];
                for (var j = 0; j < message.propInfo.length; ++j)
                    object.propInfo[j] = $root.messages.propBaseInfo.toObject(message.propInfo[j], options);
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            return object;
        };

        /**
         * Converts this ProGetOrganizePropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProGetOrganizePropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProGetOrganizePropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProGetOrganizePropResponse.MSGID
         * @enum {string}
         * @property {number} ID=772 ID value
         */
        ProGetOrganizePropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[772] = "ID"] = 772;
            return values;
        })();

        return ProGetOrganizePropResponse;
    })();

    messages.ProUseOrganizePropRequest = (function() {

        /**
         * Properties of a ProUseOrganizePropRequest.
         * @memberof messages
         * @interface IProUseOrganizePropRequest
         * @property {messages.propType} propType ProUseOrganizePropRequest propType
         * @property {number|null} [organizeId] ProUseOrganizePropRequest organizeId
         * @property {number|null} [gameId] ProUseOrganizePropRequest gameId
         * @property {number|null} [count] ProUseOrganizePropRequest count
         * @property {number|null} [roomcardId] ProUseOrganizePropRequest roomcardId
         * @property {number|null} [areaId] ProUseOrganizePropRequest areaId
         * @property {number|null} [masterId] ProUseOrganizePropRequest masterId
         */

        /**
         * Constructs a new ProUseOrganizePropRequest.
         * @memberof messages
         * @classdesc Represents a ProUseOrganizePropRequest.
         * @implements IProUseOrganizePropRequest
         * @constructor
         * @param {messages.IProUseOrganizePropRequest=} [properties] Properties to set
         */
        function ProUseOrganizePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUseOrganizePropRequest propType.
         * @member {messages.propType} propType
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.propType = 1;

        /**
         * ProUseOrganizePropRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.organizeId = 0;

        /**
         * ProUseOrganizePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.gameId = 0;

        /**
         * ProUseOrganizePropRequest count.
         * @member {number} count
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.count = 0;

        /**
         * ProUseOrganizePropRequest roomcardId.
         * @member {number} roomcardId
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.roomcardId = 0;

        /**
         * ProUseOrganizePropRequest areaId.
         * @member {number} areaId
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.areaId = -1;

        /**
         * ProUseOrganizePropRequest masterId.
         * @member {number} masterId
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         */
        ProUseOrganizePropRequest.prototype.masterId = 0;

        /**
         * Creates a new ProUseOrganizePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {messages.IProUseOrganizePropRequest=} [properties] Properties to set
         * @returns {messages.ProUseOrganizePropRequest} ProUseOrganizePropRequest instance
         */
        ProUseOrganizePropRequest.create = function create(properties) {
            return new ProUseOrganizePropRequest(properties);
        };

        /**
         * Encodes the specified ProUseOrganizePropRequest message. Does not implicitly {@link messages.ProUseOrganizePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {messages.IProUseOrganizePropRequest} message ProUseOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseOrganizePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.propType);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.organizeId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.gameId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.count);
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomcardId);
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.areaId);
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.masterId);
            return writer;
        };

        /**
         * Encodes the specified ProUseOrganizePropRequest message, length delimited. Does not implicitly {@link messages.ProUseOrganizePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {messages.IProUseOrganizePropRequest} message ProUseOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseOrganizePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUseOrganizePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUseOrganizePropRequest} ProUseOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseOrganizePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUseOrganizePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.propType = reader.int32();
                    break;
                case 3:
                    message.organizeId = reader.int32();
                    break;
                case 4:
                    message.gameId = reader.int32();
                    break;
                case 5:
                    message.count = reader.int32();
                    break;
                case 6:
                    message.roomcardId = reader.int32();
                    break;
                case 7:
                    message.areaId = reader.int32();
                    break;
                case 8:
                    message.masterId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            if (!message.hasOwnProperty("propType"))
                throw $util.ProtocolError("missing required 'propType'", { instance: message });
            return message;
        };

        /**
         * Decodes a ProUseOrganizePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUseOrganizePropRequest} ProUseOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseOrganizePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUseOrganizePropRequest message.
         * @function verify
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUseOrganizePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            switch (message.propType) {
            default:
                return "propType: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                if (!$util.isInteger(message.roomcardId))
                    return "roomcardId: integer expected";
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                if (!$util.isInteger(message.areaId))
                    return "areaId: integer expected";
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                if (!$util.isInteger(message.masterId))
                    return "masterId: integer expected";
            return null;
        };

        /**
         * Creates a ProUseOrganizePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUseOrganizePropRequest} ProUseOrganizePropRequest
         */
        ProUseOrganizePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUseOrganizePropRequest)
                return object;
            var message = new $root.messages.ProUseOrganizePropRequest();
            switch (object.propType) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.propType = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.propType = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.propType = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.propType = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.propType = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.propType = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.propType = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.propType = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.propType = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.propType = 10;
                break;
            }
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.roomcardId != null)
                message.roomcardId = object.roomcardId | 0;
            if (object.areaId != null)
                message.areaId = object.areaId | 0;
            if (object.masterId != null)
                message.masterId = object.masterId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUseOrganizePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUseOrganizePropRequest
         * @static
         * @param {messages.ProUseOrganizePropRequest} message ProUseOrganizePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUseOrganizePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.propType = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
                object.organizeId = 0;
                object.gameId = 0;
                object.count = 0;
                object.roomcardId = 0;
                object.areaId = -1;
                object.masterId = 0;
            }
            if (message.propType != null && message.hasOwnProperty("propType"))
                object.propType = options.enums === String ? $root.messages.propType[message.propType] : message.propType;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.roomcardId != null && message.hasOwnProperty("roomcardId"))
                object.roomcardId = message.roomcardId;
            if (message.areaId != null && message.hasOwnProperty("areaId"))
                object.areaId = message.areaId;
            if (message.masterId != null && message.hasOwnProperty("masterId"))
                object.masterId = message.masterId;
            return object;
        };

        /**
         * Converts this ProUseOrganizePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUseOrganizePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUseOrganizePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUseOrganizePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=773 ID value
         */
        ProUseOrganizePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[773] = "ID"] = 773;
            return values;
        })();

        return ProUseOrganizePropRequest;
    })();

    messages.ProchangeOrganizePropRequest = (function() {

        /**
         * Properties of a ProchangeOrganizePropRequest.
         * @memberof messages
         * @interface IProchangeOrganizePropRequest
         * @property {number|null} [userId] ProchangeOrganizePropRequest userId
         * @property {number|null} [gameId] ProchangeOrganizePropRequest gameId
         * @property {messages.propType|null} [type] ProchangeOrganizePropRequest type
         * @property {number|null} [count] ProchangeOrganizePropRequest count
         * @property {number|null} [organizeId] ProchangeOrganizePropRequest organizeId
         * @property {number|null} [addFlag] ProchangeOrganizePropRequest addFlag
         */

        /**
         * Constructs a new ProchangeOrganizePropRequest.
         * @memberof messages
         * @classdesc Represents a ProchangeOrganizePropRequest.
         * @implements IProchangeOrganizePropRequest
         * @constructor
         * @param {messages.IProchangeOrganizePropRequest=} [properties] Properties to set
         */
        function ProchangeOrganizePropRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProchangeOrganizePropRequest userId.
         * @member {number} userId
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.userId = 0;

        /**
         * ProchangeOrganizePropRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.gameId = 0;

        /**
         * ProchangeOrganizePropRequest type.
         * @member {messages.propType} type
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.type = 1;

        /**
         * ProchangeOrganizePropRequest count.
         * @member {number} count
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.count = 0;

        /**
         * ProchangeOrganizePropRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.organizeId = 0;

        /**
         * ProchangeOrganizePropRequest addFlag.
         * @member {number} addFlag
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         */
        ProchangeOrganizePropRequest.prototype.addFlag = 0;

        /**
         * Creates a new ProchangeOrganizePropRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {messages.IProchangeOrganizePropRequest=} [properties] Properties to set
         * @returns {messages.ProchangeOrganizePropRequest} ProchangeOrganizePropRequest instance
         */
        ProchangeOrganizePropRequest.create = function create(properties) {
            return new ProchangeOrganizePropRequest(properties);
        };

        /**
         * Encodes the specified ProchangeOrganizePropRequest message. Does not implicitly {@link messages.ProchangeOrganizePropRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {messages.IProchangeOrganizePropRequest} message ProchangeOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProchangeOrganizePropRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.type);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.count);
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.organizeId);
            if (message.addFlag != null && message.hasOwnProperty("addFlag"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.addFlag);
            return writer;
        };

        /**
         * Encodes the specified ProchangeOrganizePropRequest message, length delimited. Does not implicitly {@link messages.ProchangeOrganizePropRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {messages.IProchangeOrganizePropRequest} message ProchangeOrganizePropRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProchangeOrganizePropRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProchangeOrganizePropRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProchangeOrganizePropRequest} ProchangeOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProchangeOrganizePropRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProchangeOrganizePropRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.count = reader.int32();
                    break;
                case 6:
                    message.organizeId = reader.int32();
                    break;
                case 7:
                    message.addFlag = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProchangeOrganizePropRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProchangeOrganizePropRequest} ProchangeOrganizePropRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProchangeOrganizePropRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProchangeOrganizePropRequest message.
         * @function verify
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProchangeOrganizePropRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    break;
                }
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.addFlag != null && message.hasOwnProperty("addFlag"))
                if (!$util.isInteger(message.addFlag))
                    return "addFlag: integer expected";
            return null;
        };

        /**
         * Creates a ProchangeOrganizePropRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProchangeOrganizePropRequest} ProchangeOrganizePropRequest
         */
        ProchangeOrganizePropRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProchangeOrganizePropRequest)
                return object;
            var message = new $root.messages.ProchangeOrganizePropRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            switch (object.type) {
            case "PROPTYPE_TRUMPET":
            case 1:
                message.type = 1;
                break;
            case "PROPTYPE_FILL_IN":
            case 2:
                message.type = 2;
                break;
            case "PROPTYPE_GOLD_COIN":
            case 3:
                message.type = 3;
                break;
            case "PROPTYPE_TM_COIN":
            case 4:
                message.type = 4;
                break;
            case "PROPTYPE_LOTTERY":
            case 5:
                message.type = 5;
                break;
            case "PROPTYPE_MOUTHCARD":
            case 6:
                message.type = 6;
                break;
            case "PROPTYPE_ROOMCARD":
            case 7:
                message.type = 7;
                break;
            case "PROPTYPE_LIMIT_ROOMCARD":
            case 8:
                message.type = 8;
                break;
            case "PROPTYPE_MATCH_TICKET":
            case 9:
                message.type = 9;
                break;
            case "PROPTYPE_ORGINIZE_ROOMCARD":
            case 10:
                message.type = 10;
                break;
            }
            if (object.count != null)
                message.count = object.count | 0;
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.addFlag != null)
                message.addFlag = object.addFlag | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProchangeOrganizePropRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProchangeOrganizePropRequest
         * @static
         * @param {messages.ProchangeOrganizePropRequest} message ProchangeOrganizePropRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProchangeOrganizePropRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.type = options.enums === String ? "PROPTYPE_TRUMPET" : 1;
                object.count = 0;
                object.organizeId = 0;
                object.addFlag = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.messages.propType[message.type] : message.type;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.addFlag != null && message.hasOwnProperty("addFlag"))
                object.addFlag = message.addFlag;
            return object;
        };

        /**
         * Converts this ProchangeOrganizePropRequest to JSON.
         * @function toJSON
         * @memberof messages.ProchangeOrganizePropRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProchangeOrganizePropRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProchangeOrganizePropRequest.MSGID
         * @enum {string}
         * @property {number} ID=774 ID value
         */
        ProchangeOrganizePropRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[774] = "ID"] = 774;
            return values;
        })();

        return ProchangeOrganizePropRequest;
    })();

    messages.ProchangeOrganizePropResponse = (function() {

        /**
         * Properties of a ProchangeOrganizePropResponse.
         * @memberof messages
         * @interface IProchangeOrganizePropResponse
         * @property {number|null} [organizeId] ProchangeOrganizePropResponse organizeId
         * @property {number|null} [result] ProchangeOrganizePropResponse result
         * @property {Uint8Array|null} [text] ProchangeOrganizePropResponse text
         */

        /**
         * Constructs a new ProchangeOrganizePropResponse.
         * @memberof messages
         * @classdesc Represents a ProchangeOrganizePropResponse.
         * @implements IProchangeOrganizePropResponse
         * @constructor
         * @param {messages.IProchangeOrganizePropResponse=} [properties] Properties to set
         */
        function ProchangeOrganizePropResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProchangeOrganizePropResponse organizeId.
         * @member {number} organizeId
         * @memberof messages.ProchangeOrganizePropResponse
         * @instance
         */
        ProchangeOrganizePropResponse.prototype.organizeId = 0;

        /**
         * ProchangeOrganizePropResponse result.
         * @member {number} result
         * @memberof messages.ProchangeOrganizePropResponse
         * @instance
         */
        ProchangeOrganizePropResponse.prototype.result = 0;

        /**
         * ProchangeOrganizePropResponse text.
         * @member {Uint8Array} text
         * @memberof messages.ProchangeOrganizePropResponse
         * @instance
         */
        ProchangeOrganizePropResponse.prototype.text = $util.newBuffer([]);

        /**
         * Creates a new ProchangeOrganizePropResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {messages.IProchangeOrganizePropResponse=} [properties] Properties to set
         * @returns {messages.ProchangeOrganizePropResponse} ProchangeOrganizePropResponse instance
         */
        ProchangeOrganizePropResponse.create = function create(properties) {
            return new ProchangeOrganizePropResponse(properties);
        };

        /**
         * Encodes the specified ProchangeOrganizePropResponse message. Does not implicitly {@link messages.ProchangeOrganizePropResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {messages.IProchangeOrganizePropResponse} message ProchangeOrganizePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProchangeOrganizePropResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.result != null && message.hasOwnProperty("result"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
            if (message.text != null && message.hasOwnProperty("text"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.text);
            return writer;
        };

        /**
         * Encodes the specified ProchangeOrganizePropResponse message, length delimited. Does not implicitly {@link messages.ProchangeOrganizePropResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {messages.IProchangeOrganizePropResponse} message ProchangeOrganizePropResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProchangeOrganizePropResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProchangeOrganizePropResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProchangeOrganizePropResponse} ProchangeOrganizePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProchangeOrganizePropResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProchangeOrganizePropResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.result = reader.int32();
                    break;
                case 4:
                    message.text = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProchangeOrganizePropResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProchangeOrganizePropResponse} ProchangeOrganizePropResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProchangeOrganizePropResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProchangeOrganizePropResponse message.
         * @function verify
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProchangeOrganizePropResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.result != null && message.hasOwnProperty("result"))
                if (!$util.isInteger(message.result))
                    return "result: integer expected";
            if (message.text != null && message.hasOwnProperty("text"))
                if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                    return "text: buffer expected";
            return null;
        };

        /**
         * Creates a ProchangeOrganizePropResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProchangeOrganizePropResponse} ProchangeOrganizePropResponse
         */
        ProchangeOrganizePropResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProchangeOrganizePropResponse)
                return object;
            var message = new $root.messages.ProchangeOrganizePropResponse();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.result != null)
                message.result = object.result | 0;
            if (object.text != null)
                if (typeof object.text === "string")
                    $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
                else if (object.text.length)
                    message.text = object.text;
            return message;
        };

        /**
         * Creates a plain object from a ProchangeOrganizePropResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProchangeOrganizePropResponse
         * @static
         * @param {messages.ProchangeOrganizePropResponse} message ProchangeOrganizePropResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProchangeOrganizePropResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.result = 0;
                object.text = options.bytes === String ? "" : [];
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.result != null && message.hasOwnProperty("result"))
                object.result = message.result;
            if (message.text != null && message.hasOwnProperty("text"))
                object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
            return object;
        };

        /**
         * Converts this ProchangeOrganizePropResponse to JSON.
         * @function toJSON
         * @memberof messages.ProchangeOrganizePropResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProchangeOrganizePropResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProchangeOrganizePropResponse.MSGID
         * @enum {string}
         * @property {number} ID=775 ID value
         */
        ProchangeOrganizePropResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[775] = "ID"] = 775;
            return values;
        })();

        return ProchangeOrganizePropResponse;
    })();

    messages.ProServerGetOrganizeRoomCardRequest = (function() {

        /**
         * Properties of a ProServerGetOrganizeRoomCardRequest.
         * @memberof messages
         * @interface IProServerGetOrganizeRoomCardRequest
         * @property {number|null} [organizeId] ProServerGetOrganizeRoomCardRequest organizeId
         * @property {number|null} [gameId] ProServerGetOrganizeRoomCardRequest gameId
         */

        /**
         * Constructs a new ProServerGetOrganizeRoomCardRequest.
         * @memberof messages
         * @classdesc Represents a ProServerGetOrganizeRoomCardRequest.
         * @implements IProServerGetOrganizeRoomCardRequest
         * @constructor
         * @param {messages.IProServerGetOrganizeRoomCardRequest=} [properties] Properties to set
         */
        function ProServerGetOrganizeRoomCardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProServerGetOrganizeRoomCardRequest organizeId.
         * @member {number} organizeId
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @instance
         */
        ProServerGetOrganizeRoomCardRequest.prototype.organizeId = 0;

        /**
         * ProServerGetOrganizeRoomCardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @instance
         */
        ProServerGetOrganizeRoomCardRequest.prototype.gameId = 0;

        /**
         * Creates a new ProServerGetOrganizeRoomCardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardRequest=} [properties] Properties to set
         * @returns {messages.ProServerGetOrganizeRoomCardRequest} ProServerGetOrganizeRoomCardRequest instance
         */
        ProServerGetOrganizeRoomCardRequest.create = function create(properties) {
            return new ProServerGetOrganizeRoomCardRequest(properties);
        };

        /**
         * Encodes the specified ProServerGetOrganizeRoomCardRequest message. Does not implicitly {@link messages.ProServerGetOrganizeRoomCardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardRequest} message ProServerGetOrganizeRoomCardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProServerGetOrganizeRoomCardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProServerGetOrganizeRoomCardRequest message, length delimited. Does not implicitly {@link messages.ProServerGetOrganizeRoomCardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardRequest} message ProServerGetOrganizeRoomCardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProServerGetOrganizeRoomCardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProServerGetOrganizeRoomCardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProServerGetOrganizeRoomCardRequest} ProServerGetOrganizeRoomCardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProServerGetOrganizeRoomCardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProServerGetOrganizeRoomCardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProServerGetOrganizeRoomCardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProServerGetOrganizeRoomCardRequest} ProServerGetOrganizeRoomCardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProServerGetOrganizeRoomCardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProServerGetOrganizeRoomCardRequest message.
         * @function verify
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProServerGetOrganizeRoomCardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProServerGetOrganizeRoomCardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProServerGetOrganizeRoomCardRequest} ProServerGetOrganizeRoomCardRequest
         */
        ProServerGetOrganizeRoomCardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProServerGetOrganizeRoomCardRequest)
                return object;
            var message = new $root.messages.ProServerGetOrganizeRoomCardRequest();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProServerGetOrganizeRoomCardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @static
         * @param {messages.ProServerGetOrganizeRoomCardRequest} message ProServerGetOrganizeRoomCardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProServerGetOrganizeRoomCardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.gameId = 0;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProServerGetOrganizeRoomCardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProServerGetOrganizeRoomCardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProServerGetOrganizeRoomCardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProServerGetOrganizeRoomCardRequest.MSGID
         * @enum {string}
         * @property {number} ID=776 ID value
         */
        ProServerGetOrganizeRoomCardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[776] = "ID"] = 776;
            return values;
        })();

        return ProServerGetOrganizeRoomCardRequest;
    })();

    messages.ProServerGetOrganizeRoomCardResponse = (function() {

        /**
         * Properties of a ProServerGetOrganizeRoomCardResponse.
         * @memberof messages
         * @interface IProServerGetOrganizeRoomCardResponse
         * @property {number|null} [organizeId] ProServerGetOrganizeRoomCardResponse organizeId
         * @property {number|null} [count] ProServerGetOrganizeRoomCardResponse count
         */

        /**
         * Constructs a new ProServerGetOrganizeRoomCardResponse.
         * @memberof messages
         * @classdesc Represents a ProServerGetOrganizeRoomCardResponse.
         * @implements IProServerGetOrganizeRoomCardResponse
         * @constructor
         * @param {messages.IProServerGetOrganizeRoomCardResponse=} [properties] Properties to set
         */
        function ProServerGetOrganizeRoomCardResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProServerGetOrganizeRoomCardResponse organizeId.
         * @member {number} organizeId
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @instance
         */
        ProServerGetOrganizeRoomCardResponse.prototype.organizeId = 0;

        /**
         * ProServerGetOrganizeRoomCardResponse count.
         * @member {number} count
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @instance
         */
        ProServerGetOrganizeRoomCardResponse.prototype.count = 0;

        /**
         * Creates a new ProServerGetOrganizeRoomCardResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardResponse=} [properties] Properties to set
         * @returns {messages.ProServerGetOrganizeRoomCardResponse} ProServerGetOrganizeRoomCardResponse instance
         */
        ProServerGetOrganizeRoomCardResponse.create = function create(properties) {
            return new ProServerGetOrganizeRoomCardResponse(properties);
        };

        /**
         * Encodes the specified ProServerGetOrganizeRoomCardResponse message. Does not implicitly {@link messages.ProServerGetOrganizeRoomCardResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardResponse} message ProServerGetOrganizeRoomCardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProServerGetOrganizeRoomCardResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.organizeId);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.count);
            return writer;
        };

        /**
         * Encodes the specified ProServerGetOrganizeRoomCardResponse message, length delimited. Does not implicitly {@link messages.ProServerGetOrganizeRoomCardResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {messages.IProServerGetOrganizeRoomCardResponse} message ProServerGetOrganizeRoomCardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProServerGetOrganizeRoomCardResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProServerGetOrganizeRoomCardResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProServerGetOrganizeRoomCardResponse} ProServerGetOrganizeRoomCardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProServerGetOrganizeRoomCardResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProServerGetOrganizeRoomCardResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.organizeId = reader.int32();
                    break;
                case 3:
                    message.count = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProServerGetOrganizeRoomCardResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProServerGetOrganizeRoomCardResponse} ProServerGetOrganizeRoomCardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProServerGetOrganizeRoomCardResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProServerGetOrganizeRoomCardResponse message.
         * @function verify
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProServerGetOrganizeRoomCardResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                if (!$util.isInteger(message.organizeId))
                    return "organizeId: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            return null;
        };

        /**
         * Creates a ProServerGetOrganizeRoomCardResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProServerGetOrganizeRoomCardResponse} ProServerGetOrganizeRoomCardResponse
         */
        ProServerGetOrganizeRoomCardResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProServerGetOrganizeRoomCardResponse)
                return object;
            var message = new $root.messages.ProServerGetOrganizeRoomCardResponse();
            if (object.organizeId != null)
                message.organizeId = object.organizeId | 0;
            if (object.count != null)
                message.count = object.count | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProServerGetOrganizeRoomCardResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @static
         * @param {messages.ProServerGetOrganizeRoomCardResponse} message ProServerGetOrganizeRoomCardResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProServerGetOrganizeRoomCardResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.organizeId = 0;
                object.count = 0;
            }
            if (message.organizeId != null && message.hasOwnProperty("organizeId"))
                object.organizeId = message.organizeId;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            return object;
        };

        /**
         * Converts this ProServerGetOrganizeRoomCardResponse to JSON.
         * @function toJSON
         * @memberof messages.ProServerGetOrganizeRoomCardResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProServerGetOrganizeRoomCardResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProServerGetOrganizeRoomCardResponse.MSGID
         * @enum {string}
         * @property {number} ID=777 ID value
         */
        ProServerGetOrganizeRoomCardResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[777] = "ID"] = 777;
            return values;
        })();

        return ProServerGetOrganizeRoomCardResponse;
    })();

    messages.ProUserTaskRequest = (function() {

        /**
         * Properties of a ProUserTaskRequest.
         * @memberof messages
         * @interface IProUserTaskRequest
         * @property {number|null} [userId] ProUserTaskRequest userId
         * @property {number|null} [gameId] ProUserTaskRequest gameId
         */

        /**
         * Constructs a new ProUserTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProUserTaskRequest.
         * @implements IProUserTaskRequest
         * @constructor
         * @param {messages.IProUserTaskRequest=} [properties] Properties to set
         */
        function ProUserTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserTaskRequest
         * @instance
         */
        ProUserTaskRequest.prototype.userId = 0;

        /**
         * ProUserTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserTaskRequest
         * @instance
         */
        ProUserTaskRequest.prototype.gameId = 0;

        /**
         * Creates a new ProUserTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {messages.IProUserTaskRequest=} [properties] Properties to set
         * @returns {messages.ProUserTaskRequest} ProUserTaskRequest instance
         */
        ProUserTaskRequest.create = function create(properties) {
            return new ProUserTaskRequest(properties);
        };

        /**
         * Encodes the specified ProUserTaskRequest message. Does not implicitly {@link messages.ProUserTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {messages.IProUserTaskRequest} message ProUserTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUserTaskRequest message, length delimited. Does not implicitly {@link messages.ProUserTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {messages.IProUserTaskRequest} message ProUserTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserTaskRequest} ProUserTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserTaskRequest} ProUserTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserTaskRequest message.
         * @function verify
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserTaskRequest} ProUserTaskRequest
         */
        ProUserTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserTaskRequest)
                return object;
            var message = new $root.messages.ProUserTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserTaskRequest
         * @static
         * @param {messages.ProUserTaskRequest} message ProUserTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUserTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=400 ID value
         */
        ProUserTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[400] = "ID"] = 400;
            return values;
        })();

        return ProUserTaskRequest;
    })();

    messages.Task = (function() {

        /**
         * Properties of a Task.
         * @memberof messages
         * @interface ITask
         * @property {number|null} [taskId] Task taskId
         * @property {Uint8Array|null} [taskName] Task taskName
         * @property {messages.Task.TaskIconType|null} [taskIconType] Task taskIconType
         * @property {number|null} [taskProgress] Task taskProgress
         * @property {number|null} [taskAwardCoin] Task taskAwardCoin
         * @property {number|null} [userProgress] Task userProgress
         * @property {messages.Task.TaskState|null} [taskState] Task taskState
         * @property {number|null} [roomId] Task roomId
         */

        /**
         * Constructs a new Task.
         * @memberof messages
         * @classdesc Represents a Task.
         * @implements ITask
         * @constructor
         * @param {messages.ITask=} [properties] Properties to set
         */
        function Task(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * Task taskId.
         * @member {number} taskId
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskId = 0;

        /**
         * Task taskName.
         * @member {Uint8Array} taskName
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskName = $util.newBuffer([]);

        /**
         * Task taskIconType.
         * @member {messages.Task.TaskIconType} taskIconType
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskIconType = 1;

        /**
         * Task taskProgress.
         * @member {number} taskProgress
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskProgress = 0;

        /**
         * Task taskAwardCoin.
         * @member {number} taskAwardCoin
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskAwardCoin = 0;

        /**
         * Task userProgress.
         * @member {number} userProgress
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.userProgress = 0;

        /**
         * Task taskState.
         * @member {messages.Task.TaskState} taskState
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.taskState = 1;

        /**
         * Task roomId.
         * @member {number} roomId
         * @memberof messages.Task
         * @instance
         */
        Task.prototype.roomId = 0;

        /**
         * Creates a new Task instance using the specified properties.
         * @function create
         * @memberof messages.Task
         * @static
         * @param {messages.ITask=} [properties] Properties to set
         * @returns {messages.Task} Task instance
         */
        Task.create = function create(properties) {
            return new Task(properties);
        };

        /**
         * Encodes the specified Task message. Does not implicitly {@link messages.Task.verify|verify} messages.
         * @function encode
         * @memberof messages.Task
         * @static
         * @param {messages.ITask} message Task message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Task.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.taskName);
            if (message.taskIconType != null && message.hasOwnProperty("taskIconType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskIconType);
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskProgress);
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.taskAwardCoin);
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.userProgress);
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.taskState);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.roomId);
            return writer;
        };

        /**
         * Encodes the specified Task message, length delimited. Does not implicitly {@link messages.Task.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.Task
         * @static
         * @param {messages.ITask} message Task message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        Task.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a Task message from the specified reader or buffer.
         * @function decode
         * @memberof messages.Task
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.Task} Task
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Task.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.Task();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.taskName = reader.bytes();
                    break;
                case 5:
                    message.taskIconType = reader.int32();
                    break;
                case 6:
                    message.taskProgress = reader.int32();
                    break;
                case 7:
                    message.taskAwardCoin = reader.int32();
                    break;
                case 8:
                    message.userProgress = reader.int32();
                    break;
                case 9:
                    message.taskState = reader.int32();
                    break;
                case 10:
                    message.roomId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a Task message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.Task
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.Task} Task
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        Task.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a Task message.
         * @function verify
         * @memberof messages.Task
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        Task.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                if (!(message.taskName && typeof message.taskName.length === "number" || $util.isString(message.taskName)))
                    return "taskName: buffer expected";
            if (message.taskIconType != null && message.hasOwnProperty("taskIconType"))
                switch (message.taskIconType) {
                default:
                    return "taskIconType: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                    break;
                }
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                if (!$util.isInteger(message.taskProgress))
                    return "taskProgress: integer expected";
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                if (!$util.isInteger(message.taskAwardCoin))
                    return "taskAwardCoin: integer expected";
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                if (!$util.isInteger(message.userProgress))
                    return "userProgress: integer expected";
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                switch (message.taskState) {
                default:
                    return "taskState: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            return null;
        };

        /**
         * Creates a Task message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.Task
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.Task} Task
         */
        Task.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.Task)
                return object;
            var message = new $root.messages.Task();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.taskName != null)
                if (typeof object.taskName === "string")
                    $util.base64.decode(object.taskName, message.taskName = $util.newBuffer($util.base64.length(object.taskName)), 0);
                else if (object.taskName.length)
                    message.taskName = object.taskName;
            switch (object.taskIconType) {
            case "TASK_ICON_OTHER":
            case 1:
                message.taskIconType = 1;
                break;
            case "TASK_ICON_WIN":
            case 2:
                message.taskIconType = 2;
                break;
            case "TASK_ICON_INNING":
            case 3:
                message.taskIconType = 3;
                break;
            case "TASK_ICON_MULTIPLE":
            case 4:
                message.taskIconType = 4;
                break;
            case "TASK_ICON_BANKRUPT":
            case 5:
                message.taskIconType = 5;
                break;
            }
            if (object.taskProgress != null)
                message.taskProgress = object.taskProgress | 0;
            if (object.taskAwardCoin != null)
                message.taskAwardCoin = object.taskAwardCoin | 0;
            if (object.userProgress != null)
                message.userProgress = object.userProgress | 0;
            switch (object.taskState) {
            case "TASK_INPROGRES":
            case 1:
                message.taskState = 1;
                break;
            case "TASK_END":
            case 2:
                message.taskState = 2;
                break;
            }
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            return message;
        };

        /**
         * Creates a plain object from a Task message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.Task
         * @static
         * @param {messages.Task} message Task
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        Task.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.taskName = options.bytes === String ? "" : [];
                object.taskIconType = options.enums === String ? "TASK_ICON_OTHER" : 1;
                object.taskProgress = 0;
                object.taskAwardCoin = 0;
                object.userProgress = 0;
                object.taskState = options.enums === String ? "TASK_INPROGRES" : 1;
                object.roomId = 0;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                object.taskName = options.bytes === String ? $util.base64.encode(message.taskName, 0, message.taskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.taskName) : message.taskName;
            if (message.taskIconType != null && message.hasOwnProperty("taskIconType"))
                object.taskIconType = options.enums === String ? $root.messages.Task.TaskIconType[message.taskIconType] : message.taskIconType;
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                object.taskProgress = message.taskProgress;
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                object.taskAwardCoin = message.taskAwardCoin;
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                object.userProgress = message.userProgress;
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                object.taskState = options.enums === String ? $root.messages.Task.TaskState[message.taskState] : message.taskState;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            return object;
        };

        /**
         * Converts this Task to JSON.
         * @function toJSON
         * @memberof messages.Task
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        Task.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * TaskIconType enum.
         * @name messages.Task.TaskIconType
         * @enum {string}
         * @property {number} TASK_ICON_OTHER=1 TASK_ICON_OTHER value
         * @property {number} TASK_ICON_WIN=2 TASK_ICON_WIN value
         * @property {number} TASK_ICON_INNING=3 TASK_ICON_INNING value
         * @property {number} TASK_ICON_MULTIPLE=4 TASK_ICON_MULTIPLE value
         * @property {number} TASK_ICON_BANKRUPT=5 TASK_ICON_BANKRUPT value
         */
        Task.TaskIconType = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TASK_ICON_OTHER"] = 1;
            values[valuesById[2] = "TASK_ICON_WIN"] = 2;
            values[valuesById[3] = "TASK_ICON_INNING"] = 3;
            values[valuesById[4] = "TASK_ICON_MULTIPLE"] = 4;
            values[valuesById[5] = "TASK_ICON_BANKRUPT"] = 5;
            return values;
        })();

        /**
         * TaskState enum.
         * @name messages.Task.TaskState
         * @enum {string}
         * @property {number} TASK_INPROGRES=1 TASK_INPROGRES value
         * @property {number} TASK_END=2 TASK_END value
         */
        Task.TaskState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TASK_INPROGRES"] = 1;
            values[valuesById[2] = "TASK_END"] = 2;
            return values;
        })();

        return Task;
    })();

    messages.ProUserTaskResponse = (function() {

        /**
         * Properties of a ProUserTaskResponse.
         * @memberof messages
         * @interface IProUserTaskResponse
         * @property {number|null} [userId] ProUserTaskResponse userId
         * @property {number|null} [gameId] ProUserTaskResponse gameId
         * @property {Array.<messages.ITask>|null} [tasks] ProUserTaskResponse tasks
         */

        /**
         * Constructs a new ProUserTaskResponse.
         * @memberof messages
         * @classdesc Represents a ProUserTaskResponse.
         * @implements IProUserTaskResponse
         * @constructor
         * @param {messages.IProUserTaskResponse=} [properties] Properties to set
         */
        function ProUserTaskResponse(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserTaskResponse userId.
         * @member {number} userId
         * @memberof messages.ProUserTaskResponse
         * @instance
         */
        ProUserTaskResponse.prototype.userId = 0;

        /**
         * ProUserTaskResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProUserTaskResponse
         * @instance
         */
        ProUserTaskResponse.prototype.gameId = 0;

        /**
         * ProUserTaskResponse tasks.
         * @member {Array.<messages.ITask>} tasks
         * @memberof messages.ProUserTaskResponse
         * @instance
         */
        ProUserTaskResponse.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new ProUserTaskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {messages.IProUserTaskResponse=} [properties] Properties to set
         * @returns {messages.ProUserTaskResponse} ProUserTaskResponse instance
         */
        ProUserTaskResponse.create = function create(properties) {
            return new ProUserTaskResponse(properties);
        };

        /**
         * Encodes the specified ProUserTaskResponse message. Does not implicitly {@link messages.ProUserTaskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {messages.IProUserTaskResponse} message ProUserTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTaskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.Task.encode(message.tasks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProUserTaskResponse message, length delimited. Does not implicitly {@link messages.ProUserTaskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {messages.IProUserTaskResponse} message ProUserTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserTaskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserTaskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserTaskResponse} ProUserTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTaskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserTaskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.Task.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserTaskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserTaskResponse} ProUserTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserTaskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserTaskResponse message.
         * @function verify
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserTaskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.Task.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProUserTaskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserTaskResponse} ProUserTaskResponse
         */
        ProUserTaskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserTaskResponse)
                return object;
            var message = new $root.messages.ProUserTaskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.ProUserTaskResponse.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.ProUserTaskResponse.tasks: object expected");
                    message.tasks[i] = $root.messages.Task.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProUserTaskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserTaskResponse
         * @static
         * @param {messages.ProUserTaskResponse} message ProUserTaskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserTaskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.Task.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProUserTaskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserTaskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserTaskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserTaskResponse.MSGID
         * @enum {string}
         * @property {number} ID=401 ID value
         */
        ProUserTaskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[401] = "ID"] = 401;
            return values;
        })();

        return ProUserTaskResponse;
    })();

    messages.ProTaskAwardRequest = (function() {

        /**
         * Properties of a ProTaskAwardRequest.
         * @memberof messages
         * @interface IProTaskAwardRequest
         * @property {number|null} [userId] ProTaskAwardRequest userId
         * @property {number|null} [gameId] ProTaskAwardRequest gameId
         * @property {number|null} [taskId] ProTaskAwardRequest taskId
         * @property {number|null} [taskProgress] ProTaskAwardRequest taskProgress
         */

        /**
         * Constructs a new ProTaskAwardRequest.
         * @memberof messages
         * @classdesc Represents a ProTaskAwardRequest.
         * @implements IProTaskAwardRequest
         * @constructor
         * @param {messages.IProTaskAwardRequest=} [properties] Properties to set
         */
        function ProTaskAwardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProTaskAwardRequest userId.
         * @member {number} userId
         * @memberof messages.ProTaskAwardRequest
         * @instance
         */
        ProTaskAwardRequest.prototype.userId = 0;

        /**
         * ProTaskAwardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProTaskAwardRequest
         * @instance
         */
        ProTaskAwardRequest.prototype.gameId = 0;

        /**
         * ProTaskAwardRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProTaskAwardRequest
         * @instance
         */
        ProTaskAwardRequest.prototype.taskId = 0;

        /**
         * ProTaskAwardRequest taskProgress.
         * @member {number} taskProgress
         * @memberof messages.ProTaskAwardRequest
         * @instance
         */
        ProTaskAwardRequest.prototype.taskProgress = 0;

        /**
         * Creates a new ProTaskAwardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {messages.IProTaskAwardRequest=} [properties] Properties to set
         * @returns {messages.ProTaskAwardRequest} ProTaskAwardRequest instance
         */
        ProTaskAwardRequest.create = function create(properties) {
            return new ProTaskAwardRequest(properties);
        };

        /**
         * Encodes the specified ProTaskAwardRequest message. Does not implicitly {@link messages.ProTaskAwardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {messages.IProTaskAwardRequest} message ProTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTaskAwardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskProgress);
            return writer;
        };

        /**
         * Encodes the specified ProTaskAwardRequest message, length delimited. Does not implicitly {@link messages.ProTaskAwardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {messages.IProTaskAwardRequest} message ProTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProTaskAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProTaskAwardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProTaskAwardRequest} ProTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTaskAwardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProTaskAwardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                case 5:
                    message.taskProgress = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProTaskAwardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProTaskAwardRequest} ProTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProTaskAwardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProTaskAwardRequest message.
         * @function verify
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProTaskAwardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                if (!$util.isInteger(message.taskProgress))
                    return "taskProgress: integer expected";
            return null;
        };

        /**
         * Creates a ProTaskAwardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProTaskAwardRequest} ProTaskAwardRequest
         */
        ProTaskAwardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProTaskAwardRequest)
                return object;
            var message = new $root.messages.ProTaskAwardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.taskProgress != null)
                message.taskProgress = object.taskProgress | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProTaskAwardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProTaskAwardRequest
         * @static
         * @param {messages.ProTaskAwardRequest} message ProTaskAwardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProTaskAwardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
                object.taskProgress = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                object.taskProgress = message.taskProgress;
            return object;
        };

        /**
         * Converts this ProTaskAwardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProTaskAwardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProTaskAwardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProTaskAwardRequest.MSGID
         * @enum {string}
         * @property {number} ID=402 ID value
         */
        ProTaskAwardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[402] = "ID"] = 402;
            return values;
        })();

        return ProTaskAwardRequest;
    })();

    messages.ProNotifyTaskFinishResponse = (function() {

        /**
         * Properties of a ProNotifyTaskFinishResponse.
         * @memberof messages
         * @interface IProNotifyTaskFinishResponse
         * @property {number|null} [userId] ProNotifyTaskFinishResponse userId
         * @property {number|null} [gameId] ProNotifyTaskFinishResponse gameId
         */

        /**
         * Constructs a new ProNotifyTaskFinishResponse.
         * @memberof messages
         * @classdesc Represents a ProNotifyTaskFinishResponse.
         * @implements IProNotifyTaskFinishResponse
         * @constructor
         * @param {messages.IProNotifyTaskFinishResponse=} [properties] Properties to set
         */
        function ProNotifyTaskFinishResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyTaskFinishResponse userId.
         * @member {number} userId
         * @memberof messages.ProNotifyTaskFinishResponse
         * @instance
         */
        ProNotifyTaskFinishResponse.prototype.userId = 0;

        /**
         * ProNotifyTaskFinishResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProNotifyTaskFinishResponse
         * @instance
         */
        ProNotifyTaskFinishResponse.prototype.gameId = 0;

        /**
         * Creates a new ProNotifyTaskFinishResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {messages.IProNotifyTaskFinishResponse=} [properties] Properties to set
         * @returns {messages.ProNotifyTaskFinishResponse} ProNotifyTaskFinishResponse instance
         */
        ProNotifyTaskFinishResponse.create = function create(properties) {
            return new ProNotifyTaskFinishResponse(properties);
        };

        /**
         * Encodes the specified ProNotifyTaskFinishResponse message. Does not implicitly {@link messages.ProNotifyTaskFinishResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {messages.IProNotifyTaskFinishResponse} message ProNotifyTaskFinishResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyTaskFinishResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyTaskFinishResponse message, length delimited. Does not implicitly {@link messages.ProNotifyTaskFinishResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {messages.IProNotifyTaskFinishResponse} message ProNotifyTaskFinishResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyTaskFinishResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyTaskFinishResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyTaskFinishResponse} ProNotifyTaskFinishResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyTaskFinishResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyTaskFinishResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyTaskFinishResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyTaskFinishResponse} ProNotifyTaskFinishResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyTaskFinishResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyTaskFinishResponse message.
         * @function verify
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyTaskFinishResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProNotifyTaskFinishResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyTaskFinishResponse} ProNotifyTaskFinishResponse
         */
        ProNotifyTaskFinishResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyTaskFinishResponse)
                return object;
            var message = new $root.messages.ProNotifyTaskFinishResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyTaskFinishResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyTaskFinishResponse
         * @static
         * @param {messages.ProNotifyTaskFinishResponse} message ProNotifyTaskFinishResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyTaskFinishResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProNotifyTaskFinishResponse to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyTaskFinishResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyTaskFinishResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNotifyTaskFinishResponse.MSGID
         * @enum {string}
         * @property {number} ID=403 ID value
         */
        ProNotifyTaskFinishResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[403] = "ID"] = 403;
            return values;
        })();

        return ProNotifyTaskFinishResponse;
    })();

    messages.ProUserDailyTaskRequest = (function() {

        /**
         * Properties of a ProUserDailyTaskRequest.
         * @memberof messages
         * @interface IProUserDailyTaskRequest
         * @property {number|null} [userId] ProUserDailyTaskRequest userId
         * @property {number|null} [gameId] ProUserDailyTaskRequest gameId
         */

        /**
         * Constructs a new ProUserDailyTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProUserDailyTaskRequest.
         * @implements IProUserDailyTaskRequest
         * @constructor
         * @param {messages.IProUserDailyTaskRequest=} [properties] Properties to set
         */
        function ProUserDailyTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyTaskRequest
         * @instance
         */
        ProUserDailyTaskRequest.prototype.userId = 0;

        /**
         * ProUserDailyTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyTaskRequest
         * @instance
         */
        ProUserDailyTaskRequest.prototype.gameId = 0;

        /**
         * Creates a new ProUserDailyTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {messages.IProUserDailyTaskRequest=} [properties] Properties to set
         * @returns {messages.ProUserDailyTaskRequest} ProUserDailyTaskRequest instance
         */
        ProUserDailyTaskRequest.create = function create(properties) {
            return new ProUserDailyTaskRequest(properties);
        };

        /**
         * Encodes the specified ProUserDailyTaskRequest message. Does not implicitly {@link messages.ProUserDailyTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {messages.IProUserDailyTaskRequest} message ProUserDailyTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyTaskRequest message, length delimited. Does not implicitly {@link messages.ProUserDailyTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {messages.IProUserDailyTaskRequest} message ProUserDailyTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyTaskRequest} ProUserDailyTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyTaskRequest} ProUserDailyTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyTaskRequest message.
         * @function verify
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserDailyTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyTaskRequest} ProUserDailyTaskRequest
         */
        ProUserDailyTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyTaskRequest)
                return object;
            var message = new $root.messages.ProUserDailyTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyTaskRequest
         * @static
         * @param {messages.ProUserDailyTaskRequest} message ProUserDailyTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUserDailyTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=404 ID value
         */
        ProUserDailyTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[404] = "ID"] = 404;
            return values;
        })();

        return ProUserDailyTaskRequest;
    })();

    /**
     * DailyTaskType enum.
     * @name messages.DailyTaskType
     * @enum {string}
     * @property {number} DAILYTASKTYPE_SHARE=1 DAILYTASKTYPE_SHARE value
     * @property {number} DAILYTASKTYPE_FRIEND=2 DAILYTASKTYPE_FRIEND value
     * @property {number} DAILYTASKTYPE_BANKRUPTCY=3 DAILYTASKTYPE_BANKRUPTCY value
     * @property {number} DAILYTASKTYPE_QQ_SHARE=4 DAILYTASKTYPE_QQ_SHARE value
     * @property {number} DAILYTASKTYPE_QQ_FRIEND=5 DAILYTASKTYPE_QQ_FRIEND value
     * @property {number} DAILYTASKTYPE_GAME=100 DAILYTASKTYPE_GAME value
     * @property {number} DAILYTASKTYPE_GIFT=101 DAILYTASKTYPE_GIFT value
     */
    messages.DailyTaskType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "DAILYTASKTYPE_SHARE"] = 1;
        values[valuesById[2] = "DAILYTASKTYPE_FRIEND"] = 2;
        values[valuesById[3] = "DAILYTASKTYPE_BANKRUPTCY"] = 3;
        values[valuesById[4] = "DAILYTASKTYPE_QQ_SHARE"] = 4;
        values[valuesById[5] = "DAILYTASKTYPE_QQ_FRIEND"] = 5;
        values[valuesById[100] = "DAILYTASKTYPE_GAME"] = 100;
        values[valuesById[101] = "DAILYTASKTYPE_GIFT"] = 101;
        return values;
    })();

    messages.DailyTask = (function() {

        /**
         * Properties of a DailyTask.
         * @memberof messages
         * @interface IDailyTask
         * @property {number|null} [taskId] DailyTask taskId
         * @property {Uint8Array|null} [taskName] DailyTask taskName
         * @property {number|null} [taskProgress] DailyTask taskProgress
         * @property {number|null} [taskAwardCoin] DailyTask taskAwardCoin
         * @property {number|null} [userProgress] DailyTask userProgress
         * @property {messages.DailyTask.TaskState|null} [taskState] DailyTask taskState
         * @property {number|Long|null} [goldLimit] DailyTask goldLimit
         * @property {number|null} [roomId] DailyTask roomId
         * @property {messages.DailyTaskType|null} [type] DailyTask type
         */

        /**
         * Constructs a new DailyTask.
         * @memberof messages
         * @classdesc Represents a DailyTask.
         * @implements IDailyTask
         * @constructor
         * @param {messages.IDailyTask=} [properties] Properties to set
         */
        function DailyTask(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * DailyTask taskId.
         * @member {number} taskId
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.taskId = 0;

        /**
         * DailyTask taskName.
         * @member {Uint8Array} taskName
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.taskName = $util.newBuffer([]);

        /**
         * DailyTask taskProgress.
         * @member {number} taskProgress
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.taskProgress = 0;

        /**
         * DailyTask taskAwardCoin.
         * @member {number} taskAwardCoin
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.taskAwardCoin = 0;

        /**
         * DailyTask userProgress.
         * @member {number} userProgress
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.userProgress = 0;

        /**
         * DailyTask taskState.
         * @member {messages.DailyTask.TaskState} taskState
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.taskState = 1;

        /**
         * DailyTask goldLimit.
         * @member {number|Long} goldLimit
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.goldLimit = $util.Long ? $util.Long.fromBits(0,0,false) : 0;

        /**
         * DailyTask roomId.
         * @member {number} roomId
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.roomId = 0;

        /**
         * DailyTask type.
         * @member {messages.DailyTaskType} type
         * @memberof messages.DailyTask
         * @instance
         */
        DailyTask.prototype.type = 1;

        /**
         * Creates a new DailyTask instance using the specified properties.
         * @function create
         * @memberof messages.DailyTask
         * @static
         * @param {messages.IDailyTask=} [properties] Properties to set
         * @returns {messages.DailyTask} DailyTask instance
         */
        DailyTask.create = function create(properties) {
            return new DailyTask(properties);
        };

        /**
         * Encodes the specified DailyTask message. Does not implicitly {@link messages.DailyTask.verify|verify} messages.
         * @function encode
         * @memberof messages.DailyTask
         * @static
         * @param {messages.IDailyTask} message DailyTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.taskName);
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskProgress);
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.taskAwardCoin);
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.userProgress);
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.taskState);
            if (message.goldLimit != null && message.hasOwnProperty("goldLimit"))
                writer.uint32(/* id 10, wireType 0 =*/80).int64(message.goldLimit);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.roomId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.type);
            return writer;
        };

        /**
         * Encodes the specified DailyTask message, length delimited. Does not implicitly {@link messages.DailyTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.DailyTask
         * @static
         * @param {messages.IDailyTask} message DailyTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        DailyTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a DailyTask message from the specified reader or buffer.
         * @function decode
         * @memberof messages.DailyTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.DailyTask} DailyTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.DailyTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.taskName = reader.bytes();
                    break;
                case 6:
                    message.taskProgress = reader.int32();
                    break;
                case 7:
                    message.taskAwardCoin = reader.int32();
                    break;
                case 8:
                    message.userProgress = reader.int32();
                    break;
                case 9:
                    message.taskState = reader.int32();
                    break;
                case 10:
                    message.goldLimit = reader.int64();
                    break;
                case 11:
                    message.roomId = reader.int32();
                    break;
                case 12:
                    message.type = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a DailyTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.DailyTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.DailyTask} DailyTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        DailyTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a DailyTask message.
         * @function verify
         * @memberof messages.DailyTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        DailyTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                if (!(message.taskName && typeof message.taskName.length === "number" || $util.isString(message.taskName)))
                    return "taskName: buffer expected";
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                if (!$util.isInteger(message.taskProgress))
                    return "taskProgress: integer expected";
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                if (!$util.isInteger(message.taskAwardCoin))
                    return "taskAwardCoin: integer expected";
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                if (!$util.isInteger(message.userProgress))
                    return "userProgress: integer expected";
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                switch (message.taskState) {
                default:
                    return "taskState: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.goldLimit != null && message.hasOwnProperty("goldLimit"))
                if (!$util.isInteger(message.goldLimit) && !(message.goldLimit && $util.isInteger(message.goldLimit.low) && $util.isInteger(message.goldLimit.high)))
                    return "goldLimit: integer|Long expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                switch (message.type) {
                default:
                    return "type: enum value expected";
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 100:
                case 101:
                    break;
                }
            return null;
        };

        /**
         * Creates a DailyTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.DailyTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.DailyTask} DailyTask
         */
        DailyTask.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.DailyTask)
                return object;
            var message = new $root.messages.DailyTask();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.taskName != null)
                if (typeof object.taskName === "string")
                    $util.base64.decode(object.taskName, message.taskName = $util.newBuffer($util.base64.length(object.taskName)), 0);
                else if (object.taskName.length)
                    message.taskName = object.taskName;
            if (object.taskProgress != null)
                message.taskProgress = object.taskProgress | 0;
            if (object.taskAwardCoin != null)
                message.taskAwardCoin = object.taskAwardCoin | 0;
            if (object.userProgress != null)
                message.userProgress = object.userProgress | 0;
            switch (object.taskState) {
            case "TASK_INPROGRES":
            case 1:
                message.taskState = 1;
                break;
            case "TASK_END":
            case 2:
                message.taskState = 2;
                break;
            }
            if (object.goldLimit != null)
                if ($util.Long)
                    (message.goldLimit = $util.Long.fromValue(object.goldLimit)).unsigned = false;
                else if (typeof object.goldLimit === "string")
                    message.goldLimit = parseInt(object.goldLimit, 10);
                else if (typeof object.goldLimit === "number")
                    message.goldLimit = object.goldLimit;
                else if (typeof object.goldLimit === "object")
                    message.goldLimit = new $util.LongBits(object.goldLimit.low >>> 0, object.goldLimit.high >>> 0).toNumber();
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            switch (object.type) {
            case "DAILYTASKTYPE_SHARE":
            case 1:
                message.type = 1;
                break;
            case "DAILYTASKTYPE_FRIEND":
            case 2:
                message.type = 2;
                break;
            case "DAILYTASKTYPE_BANKRUPTCY":
            case 3:
                message.type = 3;
                break;
            case "DAILYTASKTYPE_QQ_SHARE":
            case 4:
                message.type = 4;
                break;
            case "DAILYTASKTYPE_QQ_FRIEND":
            case 5:
                message.type = 5;
                break;
            case "DAILYTASKTYPE_GAME":
            case 100:
                message.type = 100;
                break;
            case "DAILYTASKTYPE_GIFT":
            case 101:
                message.type = 101;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a DailyTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.DailyTask
         * @static
         * @param {messages.DailyTask} message DailyTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        DailyTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.taskName = options.bytes === String ? "" : [];
                object.taskProgress = 0;
                object.taskAwardCoin = 0;
                object.userProgress = 0;
                object.taskState = options.enums === String ? "TASK_INPROGRES" : 1;
                if ($util.Long) {
                    var long = new $util.Long(0, 0, false);
                    object.goldLimit = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                } else
                    object.goldLimit = options.longs === String ? "0" : 0;
                object.roomId = 0;
                object.type = options.enums === String ? "DAILYTASKTYPE_SHARE" : 1;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                object.taskName = options.bytes === String ? $util.base64.encode(message.taskName, 0, message.taskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.taskName) : message.taskName;
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                object.taskProgress = message.taskProgress;
            if (message.taskAwardCoin != null && message.hasOwnProperty("taskAwardCoin"))
                object.taskAwardCoin = message.taskAwardCoin;
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                object.userProgress = message.userProgress;
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                object.taskState = options.enums === String ? $root.messages.DailyTask.TaskState[message.taskState] : message.taskState;
            if (message.goldLimit != null && message.hasOwnProperty("goldLimit"))
                if (typeof message.goldLimit === "number")
                    object.goldLimit = options.longs === String ? String(message.goldLimit) : message.goldLimit;
                else
                    object.goldLimit = options.longs === String ? $util.Long.prototype.toString.call(message.goldLimit) : options.longs === Number ? new $util.LongBits(message.goldLimit.low >>> 0, message.goldLimit.high >>> 0).toNumber() : message.goldLimit;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = options.enums === String ? $root.messages.DailyTaskType[message.type] : message.type;
            return object;
        };

        /**
         * Converts this DailyTask to JSON.
         * @function toJSON
         * @memberof messages.DailyTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        DailyTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * TaskState enum.
         * @name messages.DailyTask.TaskState
         * @enum {string}
         * @property {number} TASK_INPROGRES=1 TASK_INPROGRES value
         * @property {number} TASK_END=2 TASK_END value
         */
        DailyTask.TaskState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TASK_INPROGRES"] = 1;
            values[valuesById[2] = "TASK_END"] = 2;
            return values;
        })();

        return DailyTask;
    })();

    messages.NewDailyAward = (function() {

        /**
         * Properties of a NewDailyAward.
         * @memberof messages
         * @interface INewDailyAward
         * @property {number|null} [noId] NewDailyAward noId
         * @property {number|null} [type] NewDailyAward type
         * @property {number|null} [count] NewDailyAward count
         * @property {Uint8Array|null} [singleimageUrl] NewDailyAward singleimageUrl
         * @property {Uint8Array|null} [downsingleimageUrl] NewDailyAward downsingleimageUrl
         */

        /**
         * Constructs a new NewDailyAward.
         * @memberof messages
         * @classdesc Represents a NewDailyAward.
         * @implements INewDailyAward
         * @constructor
         * @param {messages.INewDailyAward=} [properties] Properties to set
         */
        function NewDailyAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NewDailyAward noId.
         * @member {number} noId
         * @memberof messages.NewDailyAward
         * @instance
         */
        NewDailyAward.prototype.noId = 0;

        /**
         * NewDailyAward type.
         * @member {number} type
         * @memberof messages.NewDailyAward
         * @instance
         */
        NewDailyAward.prototype.type = 0;

        /**
         * NewDailyAward count.
         * @member {number} count
         * @memberof messages.NewDailyAward
         * @instance
         */
        NewDailyAward.prototype.count = 0;

        /**
         * NewDailyAward singleimageUrl.
         * @member {Uint8Array} singleimageUrl
         * @memberof messages.NewDailyAward
         * @instance
         */
        NewDailyAward.prototype.singleimageUrl = $util.newBuffer([]);

        /**
         * NewDailyAward downsingleimageUrl.
         * @member {Uint8Array} downsingleimageUrl
         * @memberof messages.NewDailyAward
         * @instance
         */
        NewDailyAward.prototype.downsingleimageUrl = $util.newBuffer([]);

        /**
         * Creates a new NewDailyAward instance using the specified properties.
         * @function create
         * @memberof messages.NewDailyAward
         * @static
         * @param {messages.INewDailyAward=} [properties] Properties to set
         * @returns {messages.NewDailyAward} NewDailyAward instance
         */
        NewDailyAward.create = function create(properties) {
            return new NewDailyAward(properties);
        };

        /**
         * Encodes the specified NewDailyAward message. Does not implicitly {@link messages.NewDailyAward.verify|verify} messages.
         * @function encode
         * @memberof messages.NewDailyAward
         * @static
         * @param {messages.INewDailyAward} message NewDailyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewDailyAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.noId != null && message.hasOwnProperty("noId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.noId);
            if (message.type != null && message.hasOwnProperty("type"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
            if (message.count != null && message.hasOwnProperty("count"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.count);
            if (message.singleimageUrl != null && message.hasOwnProperty("singleimageUrl"))
                writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.singleimageUrl);
            if (message.downsingleimageUrl != null && message.hasOwnProperty("downsingleimageUrl"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.downsingleimageUrl);
            return writer;
        };

        /**
         * Encodes the specified NewDailyAward message, length delimited. Does not implicitly {@link messages.NewDailyAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.NewDailyAward
         * @static
         * @param {messages.INewDailyAward} message NewDailyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewDailyAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NewDailyAward message from the specified reader or buffer.
         * @function decode
         * @memberof messages.NewDailyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.NewDailyAward} NewDailyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewDailyAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.NewDailyAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.noId = reader.int32();
                    break;
                case 3:
                    message.type = reader.int32();
                    break;
                case 4:
                    message.count = reader.int32();
                    break;
                case 5:
                    message.singleimageUrl = reader.bytes();
                    break;
                case 6:
                    message.downsingleimageUrl = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NewDailyAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.NewDailyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.NewDailyAward} NewDailyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewDailyAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NewDailyAward message.
         * @function verify
         * @memberof messages.NewDailyAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NewDailyAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.noId != null && message.hasOwnProperty("noId"))
                if (!$util.isInteger(message.noId))
                    return "noId: integer expected";
            if (message.type != null && message.hasOwnProperty("type"))
                if (!$util.isInteger(message.type))
                    return "type: integer expected";
            if (message.count != null && message.hasOwnProperty("count"))
                if (!$util.isInteger(message.count))
                    return "count: integer expected";
            if (message.singleimageUrl != null && message.hasOwnProperty("singleimageUrl"))
                if (!(message.singleimageUrl && typeof message.singleimageUrl.length === "number" || $util.isString(message.singleimageUrl)))
                    return "singleimageUrl: buffer expected";
            if (message.downsingleimageUrl != null && message.hasOwnProperty("downsingleimageUrl"))
                if (!(message.downsingleimageUrl && typeof message.downsingleimageUrl.length === "number" || $util.isString(message.downsingleimageUrl)))
                    return "downsingleimageUrl: buffer expected";
            return null;
        };

        /**
         * Creates a NewDailyAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.NewDailyAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.NewDailyAward} NewDailyAward
         */
        NewDailyAward.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.NewDailyAward)
                return object;
            var message = new $root.messages.NewDailyAward();
            if (object.noId != null)
                message.noId = object.noId | 0;
            if (object.type != null)
                message.type = object.type | 0;
            if (object.count != null)
                message.count = object.count | 0;
            if (object.singleimageUrl != null)
                if (typeof object.singleimageUrl === "string")
                    $util.base64.decode(object.singleimageUrl, message.singleimageUrl = $util.newBuffer($util.base64.length(object.singleimageUrl)), 0);
                else if (object.singleimageUrl.length)
                    message.singleimageUrl = object.singleimageUrl;
            if (object.downsingleimageUrl != null)
                if (typeof object.downsingleimageUrl === "string")
                    $util.base64.decode(object.downsingleimageUrl, message.downsingleimageUrl = $util.newBuffer($util.base64.length(object.downsingleimageUrl)), 0);
                else if (object.downsingleimageUrl.length)
                    message.downsingleimageUrl = object.downsingleimageUrl;
            return message;
        };

        /**
         * Creates a plain object from a NewDailyAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.NewDailyAward
         * @static
         * @param {messages.NewDailyAward} message NewDailyAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NewDailyAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.noId = 0;
                object.type = 0;
                object.count = 0;
                object.singleimageUrl = options.bytes === String ? "" : [];
                object.downsingleimageUrl = options.bytes === String ? "" : [];
            }
            if (message.noId != null && message.hasOwnProperty("noId"))
                object.noId = message.noId;
            if (message.type != null && message.hasOwnProperty("type"))
                object.type = message.type;
            if (message.count != null && message.hasOwnProperty("count"))
                object.count = message.count;
            if (message.singleimageUrl != null && message.hasOwnProperty("singleimageUrl"))
                object.singleimageUrl = options.bytes === String ? $util.base64.encode(message.singleimageUrl, 0, message.singleimageUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.singleimageUrl) : message.singleimageUrl;
            if (message.downsingleimageUrl != null && message.hasOwnProperty("downsingleimageUrl"))
                object.downsingleimageUrl = options.bytes === String ? $util.base64.encode(message.downsingleimageUrl, 0, message.downsingleimageUrl.length) : options.bytes === Array ? Array.prototype.slice.call(message.downsingleimageUrl) : message.downsingleimageUrl;
            return object;
        };

        /**
         * Converts this NewDailyAward to JSON.
         * @function toJSON
         * @memberof messages.NewDailyAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NewDailyAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NewDailyAward;
    })();

    messages.NewDailyTask = (function() {

        /**
         * Properties of a NewDailyTask.
         * @memberof messages
         * @interface INewDailyTask
         * @property {number|null} [taskId] NewDailyTask taskId
         * @property {number|null} [gameId] NewDailyTask gameId
         * @property {Uint8Array|null} [taskName] NewDailyTask taskName
         * @property {number|null} [times] NewDailyTask times
         * @property {Array.<messages.INewDailyAward>|null} [award] NewDailyTask award
         * @property {number|null} [currentTimes] NewDailyTask currentTimes
         * @property {number|null} [passTimes] NewDailyTask passTimes
         * @property {number|null} [taskType] NewDailyTask taskType
         */

        /**
         * Constructs a new NewDailyTask.
         * @memberof messages
         * @classdesc Represents a NewDailyTask.
         * @implements INewDailyTask
         * @constructor
         * @param {messages.INewDailyTask=} [properties] Properties to set
         */
        function NewDailyTask(properties) {
            this.award = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NewDailyTask taskId.
         * @member {number} taskId
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.taskId = 0;

        /**
         * NewDailyTask gameId.
         * @member {number} gameId
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.gameId = 0;

        /**
         * NewDailyTask taskName.
         * @member {Uint8Array} taskName
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.taskName = $util.newBuffer([]);

        /**
         * NewDailyTask times.
         * @member {number} times
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.times = 0;

        /**
         * NewDailyTask award.
         * @member {Array.<messages.INewDailyAward>} award
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.award = $util.emptyArray;

        /**
         * NewDailyTask currentTimes.
         * @member {number} currentTimes
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.currentTimes = 0;

        /**
         * NewDailyTask passTimes.
         * @member {number} passTimes
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.passTimes = 0;

        /**
         * NewDailyTask taskType.
         * @member {number} taskType
         * @memberof messages.NewDailyTask
         * @instance
         */
        NewDailyTask.prototype.taskType = 0;

        /**
         * Creates a new NewDailyTask instance using the specified properties.
         * @function create
         * @memberof messages.NewDailyTask
         * @static
         * @param {messages.INewDailyTask=} [properties] Properties to set
         * @returns {messages.NewDailyTask} NewDailyTask instance
         */
        NewDailyTask.create = function create(properties) {
            return new NewDailyTask(properties);
        };

        /**
         * Encodes the specified NewDailyTask message. Does not implicitly {@link messages.NewDailyTask.verify|verify} messages.
         * @function encode
         * @memberof messages.NewDailyTask
         * @static
         * @param {messages.INewDailyTask} message NewDailyTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewDailyTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.taskName);
            if (message.times != null && message.hasOwnProperty("times"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.times);
            if (message.award != null && message.award.length)
                for (var i = 0; i < message.award.length; ++i)
                    $root.messages.NewDailyAward.encode(message.award[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
            if (message.currentTimes != null && message.hasOwnProperty("currentTimes"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.currentTimes);
            if (message.passTimes != null && message.hasOwnProperty("passTimes"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.passTimes);
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.taskType);
            return writer;
        };

        /**
         * Encodes the specified NewDailyTask message, length delimited. Does not implicitly {@link messages.NewDailyTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.NewDailyTask
         * @static
         * @param {messages.INewDailyTask} message NewDailyTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewDailyTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NewDailyTask message from the specified reader or buffer.
         * @function decode
         * @memberof messages.NewDailyTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.NewDailyTask} NewDailyTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewDailyTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.NewDailyTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskName = reader.bytes();
                    break;
                case 5:
                    message.times = reader.int32();
                    break;
                case 6:
                    if (!(message.award && message.award.length))
                        message.award = [];
                    message.award.push($root.messages.NewDailyAward.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.currentTimes = reader.int32();
                    break;
                case 8:
                    message.passTimes = reader.int32();
                    break;
                case 9:
                    message.taskType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NewDailyTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.NewDailyTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.NewDailyTask} NewDailyTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewDailyTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NewDailyTask message.
         * @function verify
         * @memberof messages.NewDailyTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NewDailyTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                if (!(message.taskName && typeof message.taskName.length === "number" || $util.isString(message.taskName)))
                    return "taskName: buffer expected";
            if (message.times != null && message.hasOwnProperty("times"))
                if (!$util.isInteger(message.times))
                    return "times: integer expected";
            if (message.award != null && message.hasOwnProperty("award")) {
                if (!Array.isArray(message.award))
                    return "award: array expected";
                for (var i = 0; i < message.award.length; ++i) {
                    var error = $root.messages.NewDailyAward.verify(message.award[i]);
                    if (error)
                        return "award." + error;
                }
            }
            if (message.currentTimes != null && message.hasOwnProperty("currentTimes"))
                if (!$util.isInteger(message.currentTimes))
                    return "currentTimes: integer expected";
            if (message.passTimes != null && message.hasOwnProperty("passTimes"))
                if (!$util.isInteger(message.passTimes))
                    return "passTimes: integer expected";
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                if (!$util.isInteger(message.taskType))
                    return "taskType: integer expected";
            return null;
        };

        /**
         * Creates a NewDailyTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.NewDailyTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.NewDailyTask} NewDailyTask
         */
        NewDailyTask.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.NewDailyTask)
                return object;
            var message = new $root.messages.NewDailyTask();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskName != null)
                if (typeof object.taskName === "string")
                    $util.base64.decode(object.taskName, message.taskName = $util.newBuffer($util.base64.length(object.taskName)), 0);
                else if (object.taskName.length)
                    message.taskName = object.taskName;
            if (object.times != null)
                message.times = object.times | 0;
            if (object.award) {
                if (!Array.isArray(object.award))
                    throw TypeError(".messages.NewDailyTask.award: array expected");
                message.award = [];
                for (var i = 0; i < object.award.length; ++i) {
                    if (typeof object.award[i] !== "object")
                        throw TypeError(".messages.NewDailyTask.award: object expected");
                    message.award[i] = $root.messages.NewDailyAward.fromObject(object.award[i]);
                }
            }
            if (object.currentTimes != null)
                message.currentTimes = object.currentTimes | 0;
            if (object.passTimes != null)
                message.passTimes = object.passTimes | 0;
            if (object.taskType != null)
                message.taskType = object.taskType | 0;
            return message;
        };

        /**
         * Creates a plain object from a NewDailyTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.NewDailyTask
         * @static
         * @param {messages.NewDailyTask} message NewDailyTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NewDailyTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.award = [];
            if (options.defaults) {
                object.taskId = 0;
                object.gameId = 0;
                object.taskName = options.bytes === String ? "" : [];
                object.times = 0;
                object.currentTimes = 0;
                object.passTimes = 0;
                object.taskType = 0;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                object.taskName = options.bytes === String ? $util.base64.encode(message.taskName, 0, message.taskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.taskName) : message.taskName;
            if (message.times != null && message.hasOwnProperty("times"))
                object.times = message.times;
            if (message.award && message.award.length) {
                object.award = [];
                for (var j = 0; j < message.award.length; ++j)
                    object.award[j] = $root.messages.NewDailyAward.toObject(message.award[j], options);
            }
            if (message.currentTimes != null && message.hasOwnProperty("currentTimes"))
                object.currentTimes = message.currentTimes;
            if (message.passTimes != null && message.hasOwnProperty("passTimes"))
                object.passTimes = message.passTimes;
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                object.taskType = message.taskType;
            return object;
        };

        /**
         * Converts this NewDailyTask to JSON.
         * @function toJSON
         * @memberof messages.NewDailyTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NewDailyTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        return NewDailyTask;
    })();

    messages.NewHandOneTask = (function() {

        /**
         * Properties of a NewHandOneTask.
         * @memberof messages
         * @interface INewHandOneTask
         * @property {number|null} [mainTaskId] NewHandOneTask mainTaskId
         * @property {number|null} [taskId] NewHandOneTask taskId
         * @property {number|null} [taskProgress] NewHandOneTask taskProgress
         * @property {number|null} [userProgress] NewHandOneTask userProgress
         * @property {Uint8Array|null} [taskName] NewHandOneTask taskName
         * @property {number|null} [roomId] NewHandOneTask roomId
         * @property {messages.NewHandOneTask.TaskState|null} [taskState] NewHandOneTask taskState
         */

        /**
         * Constructs a new NewHandOneTask.
         * @memberof messages
         * @classdesc Represents a NewHandOneTask.
         * @implements INewHandOneTask
         * @constructor
         * @param {messages.INewHandOneTask=} [properties] Properties to set
         */
        function NewHandOneTask(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NewHandOneTask mainTaskId.
         * @member {number} mainTaskId
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.mainTaskId = 0;

        /**
         * NewHandOneTask taskId.
         * @member {number} taskId
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.taskId = 0;

        /**
         * NewHandOneTask taskProgress.
         * @member {number} taskProgress
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.taskProgress = 0;

        /**
         * NewHandOneTask userProgress.
         * @member {number} userProgress
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.userProgress = 0;

        /**
         * NewHandOneTask taskName.
         * @member {Uint8Array} taskName
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.taskName = $util.newBuffer([]);

        /**
         * NewHandOneTask roomId.
         * @member {number} roomId
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.roomId = 0;

        /**
         * NewHandOneTask taskState.
         * @member {messages.NewHandOneTask.TaskState} taskState
         * @memberof messages.NewHandOneTask
         * @instance
         */
        NewHandOneTask.prototype.taskState = 1;

        /**
         * Creates a new NewHandOneTask instance using the specified properties.
         * @function create
         * @memberof messages.NewHandOneTask
         * @static
         * @param {messages.INewHandOneTask=} [properties] Properties to set
         * @returns {messages.NewHandOneTask} NewHandOneTask instance
         */
        NewHandOneTask.create = function create(properties) {
            return new NewHandOneTask(properties);
        };

        /**
         * Encodes the specified NewHandOneTask message. Does not implicitly {@link messages.NewHandOneTask.verify|verify} messages.
         * @function encode
         * @memberof messages.NewHandOneTask
         * @static
         * @param {messages.INewHandOneTask} message NewHandOneTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewHandOneTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.mainTaskId != null && message.hasOwnProperty("mainTaskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mainTaskId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.taskId);
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskProgress);
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.userProgress);
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.taskName);
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.roomId);
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.taskState);
            return writer;
        };

        /**
         * Encodes the specified NewHandOneTask message, length delimited. Does not implicitly {@link messages.NewHandOneTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.NewHandOneTask
         * @static
         * @param {messages.INewHandOneTask} message NewHandOneTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewHandOneTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NewHandOneTask message from the specified reader or buffer.
         * @function decode
         * @memberof messages.NewHandOneTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.NewHandOneTask} NewHandOneTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewHandOneTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.NewHandOneTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.mainTaskId = reader.int32();
                    break;
                case 3:
                    message.taskId = reader.int32();
                    break;
                case 4:
                    message.taskProgress = reader.int32();
                    break;
                case 5:
                    message.userProgress = reader.int32();
                    break;
                case 6:
                    message.taskName = reader.bytes();
                    break;
                case 7:
                    message.roomId = reader.int32();
                    break;
                case 8:
                    message.taskState = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NewHandOneTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.NewHandOneTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.NewHandOneTask} NewHandOneTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewHandOneTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NewHandOneTask message.
         * @function verify
         * @memberof messages.NewHandOneTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NewHandOneTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.mainTaskId != null && message.hasOwnProperty("mainTaskId"))
                if (!$util.isInteger(message.mainTaskId))
                    return "mainTaskId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                if (!$util.isInteger(message.taskProgress))
                    return "taskProgress: integer expected";
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                if (!$util.isInteger(message.userProgress))
                    return "userProgress: integer expected";
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                if (!(message.taskName && typeof message.taskName.length === "number" || $util.isString(message.taskName)))
                    return "taskName: buffer expected";
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                if (!$util.isInteger(message.roomId))
                    return "roomId: integer expected";
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                switch (message.taskState) {
                default:
                    return "taskState: enum value expected";
                case 1:
                case 2:
                    break;
                }
            return null;
        };

        /**
         * Creates a NewHandOneTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.NewHandOneTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.NewHandOneTask} NewHandOneTask
         */
        NewHandOneTask.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.NewHandOneTask)
                return object;
            var message = new $root.messages.NewHandOneTask();
            if (object.mainTaskId != null)
                message.mainTaskId = object.mainTaskId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.taskProgress != null)
                message.taskProgress = object.taskProgress | 0;
            if (object.userProgress != null)
                message.userProgress = object.userProgress | 0;
            if (object.taskName != null)
                if (typeof object.taskName === "string")
                    $util.base64.decode(object.taskName, message.taskName = $util.newBuffer($util.base64.length(object.taskName)), 0);
                else if (object.taskName.length)
                    message.taskName = object.taskName;
            if (object.roomId != null)
                message.roomId = object.roomId | 0;
            switch (object.taskState) {
            case "TASK_INPROGRES":
            case 1:
                message.taskState = 1;
                break;
            case "TASK_END":
            case 2:
                message.taskState = 2;
                break;
            }
            return message;
        };

        /**
         * Creates a plain object from a NewHandOneTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.NewHandOneTask
         * @static
         * @param {messages.NewHandOneTask} message NewHandOneTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NewHandOneTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.mainTaskId = 0;
                object.taskId = 0;
                object.taskProgress = 0;
                object.userProgress = 0;
                object.taskName = options.bytes === String ? "" : [];
                object.roomId = 0;
                object.taskState = options.enums === String ? "TASK_INPROGRES" : 1;
            }
            if (message.mainTaskId != null && message.hasOwnProperty("mainTaskId"))
                object.mainTaskId = message.mainTaskId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                object.taskProgress = message.taskProgress;
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                object.userProgress = message.userProgress;
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                object.taskName = options.bytes === String ? $util.base64.encode(message.taskName, 0, message.taskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.taskName) : message.taskName;
            if (message.roomId != null && message.hasOwnProperty("roomId"))
                object.roomId = message.roomId;
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                object.taskState = options.enums === String ? $root.messages.NewHandOneTask.TaskState[message.taskState] : message.taskState;
            return object;
        };

        /**
         * Converts this NewHandOneTask to JSON.
         * @function toJSON
         * @memberof messages.NewHandOneTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NewHandOneTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * TaskState enum.
         * @name messages.NewHandOneTask.TaskState
         * @enum {string}
         * @property {number} TASK_INPROGRES=1 TASK_INPROGRES value
         * @property {number} TASK_END=2 TASK_END value
         */
        NewHandOneTask.TaskState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TASK_INPROGRES"] = 1;
            values[valuesById[2] = "TASK_END"] = 2;
            return values;
        })();

        return NewHandOneTask;
    })();

    messages.NewHandTask = (function() {

        /**
         * Properties of a NewHandTask.
         * @memberof messages
         * @interface INewHandTask
         * @property {number|null} [taskId] NewHandTask taskId
         * @property {Uint8Array|null} [taskName] NewHandTask taskName
         * @property {number|null} [taskAwardType] NewHandTask taskAwardType
         * @property {number|null} [taskAwardCount] NewHandTask taskAwardCount
         * @property {messages.NewHandTask.TaskState|null} [taskState] NewHandTask taskState
         * @property {Array.<messages.INewHandOneTask>|null} [tasks] NewHandTask tasks
         * @property {number|null} [taskProgress] NewHandTask taskProgress
         * @property {number|null} [userProgress] NewHandTask userProgress
         */

        /**
         * Constructs a new NewHandTask.
         * @memberof messages
         * @classdesc Represents a NewHandTask.
         * @implements INewHandTask
         * @constructor
         * @param {messages.INewHandTask=} [properties] Properties to set
         */
        function NewHandTask(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * NewHandTask taskId.
         * @member {number} taskId
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskId = 0;

        /**
         * NewHandTask taskName.
         * @member {Uint8Array} taskName
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskName = $util.newBuffer([]);

        /**
         * NewHandTask taskAwardType.
         * @member {number} taskAwardType
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskAwardType = 0;

        /**
         * NewHandTask taskAwardCount.
         * @member {number} taskAwardCount
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskAwardCount = 0;

        /**
         * NewHandTask taskState.
         * @member {messages.NewHandTask.TaskState} taskState
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskState = 1;

        /**
         * NewHandTask tasks.
         * @member {Array.<messages.INewHandOneTask>} tasks
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.tasks = $util.emptyArray;

        /**
         * NewHandTask taskProgress.
         * @member {number} taskProgress
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.taskProgress = 0;

        /**
         * NewHandTask userProgress.
         * @member {number} userProgress
         * @memberof messages.NewHandTask
         * @instance
         */
        NewHandTask.prototype.userProgress = 0;

        /**
         * Creates a new NewHandTask instance using the specified properties.
         * @function create
         * @memberof messages.NewHandTask
         * @static
         * @param {messages.INewHandTask=} [properties] Properties to set
         * @returns {messages.NewHandTask} NewHandTask instance
         */
        NewHandTask.create = function create(properties) {
            return new NewHandTask(properties);
        };

        /**
         * Encodes the specified NewHandTask message. Does not implicitly {@link messages.NewHandTask.verify|verify} messages.
         * @function encode
         * @memberof messages.NewHandTask
         * @static
         * @param {messages.INewHandTask} message NewHandTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewHandTask.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.taskName);
            if (message.taskAwardType != null && message.hasOwnProperty("taskAwardType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskAwardType);
            if (message.taskAwardCount != null && message.hasOwnProperty("taskAwardCount"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskAwardCount);
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.taskState);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.NewHandOneTask.encode(message.tasks[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.taskProgress);
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.userProgress);
            return writer;
        };

        /**
         * Encodes the specified NewHandTask message, length delimited. Does not implicitly {@link messages.NewHandTask.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.NewHandTask
         * @static
         * @param {messages.INewHandTask} message NewHandTask message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        NewHandTask.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a NewHandTask message from the specified reader or buffer.
         * @function decode
         * @memberof messages.NewHandTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.NewHandTask} NewHandTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewHandTask.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.NewHandTask();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.taskName = reader.bytes();
                    break;
                case 4:
                    message.taskAwardType = reader.int32();
                    break;
                case 5:
                    message.taskAwardCount = reader.int32();
                    break;
                case 6:
                    message.taskState = reader.int32();
                    break;
                case 7:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.NewHandOneTask.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.taskProgress = reader.int32();
                    break;
                case 9:
                    message.userProgress = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a NewHandTask message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.NewHandTask
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.NewHandTask} NewHandTask
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        NewHandTask.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a NewHandTask message.
         * @function verify
         * @memberof messages.NewHandTask
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        NewHandTask.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                if (!(message.taskName && typeof message.taskName.length === "number" || $util.isString(message.taskName)))
                    return "taskName: buffer expected";
            if (message.taskAwardType != null && message.hasOwnProperty("taskAwardType"))
                if (!$util.isInteger(message.taskAwardType))
                    return "taskAwardType: integer expected";
            if (message.taskAwardCount != null && message.hasOwnProperty("taskAwardCount"))
                if (!$util.isInteger(message.taskAwardCount))
                    return "taskAwardCount: integer expected";
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                switch (message.taskState) {
                default:
                    return "taskState: enum value expected";
                case 1:
                case 2:
                    break;
                }
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.NewHandOneTask.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                if (!$util.isInteger(message.taskProgress))
                    return "taskProgress: integer expected";
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                if (!$util.isInteger(message.userProgress))
                    return "userProgress: integer expected";
            return null;
        };

        /**
         * Creates a NewHandTask message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.NewHandTask
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.NewHandTask} NewHandTask
         */
        NewHandTask.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.NewHandTask)
                return object;
            var message = new $root.messages.NewHandTask();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.taskName != null)
                if (typeof object.taskName === "string")
                    $util.base64.decode(object.taskName, message.taskName = $util.newBuffer($util.base64.length(object.taskName)), 0);
                else if (object.taskName.length)
                    message.taskName = object.taskName;
            if (object.taskAwardType != null)
                message.taskAwardType = object.taskAwardType | 0;
            if (object.taskAwardCount != null)
                message.taskAwardCount = object.taskAwardCount | 0;
            switch (object.taskState) {
            case "TASK_INPROGRES":
            case 1:
                message.taskState = 1;
                break;
            case "TASK_END":
            case 2:
                message.taskState = 2;
                break;
            }
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.NewHandTask.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.NewHandTask.tasks: object expected");
                    message.tasks[i] = $root.messages.NewHandOneTask.fromObject(object.tasks[i]);
                }
            }
            if (object.taskProgress != null)
                message.taskProgress = object.taskProgress | 0;
            if (object.userProgress != null)
                message.userProgress = object.userProgress | 0;
            return message;
        };

        /**
         * Creates a plain object from a NewHandTask message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.NewHandTask
         * @static
         * @param {messages.NewHandTask} message NewHandTask
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        NewHandTask.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.taskId = 0;
                object.taskName = options.bytes === String ? "" : [];
                object.taskAwardType = 0;
                object.taskAwardCount = 0;
                object.taskState = options.enums === String ? "TASK_INPROGRES" : 1;
                object.taskProgress = 0;
                object.userProgress = 0;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.taskName != null && message.hasOwnProperty("taskName"))
                object.taskName = options.bytes === String ? $util.base64.encode(message.taskName, 0, message.taskName.length) : options.bytes === Array ? Array.prototype.slice.call(message.taskName) : message.taskName;
            if (message.taskAwardType != null && message.hasOwnProperty("taskAwardType"))
                object.taskAwardType = message.taskAwardType;
            if (message.taskAwardCount != null && message.hasOwnProperty("taskAwardCount"))
                object.taskAwardCount = message.taskAwardCount;
            if (message.taskState != null && message.hasOwnProperty("taskState"))
                object.taskState = options.enums === String ? $root.messages.NewHandTask.TaskState[message.taskState] : message.taskState;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.NewHandOneTask.toObject(message.tasks[j], options);
            }
            if (message.taskProgress != null && message.hasOwnProperty("taskProgress"))
                object.taskProgress = message.taskProgress;
            if (message.userProgress != null && message.hasOwnProperty("userProgress"))
                object.userProgress = message.userProgress;
            return object;
        };

        /**
         * Converts this NewHandTask to JSON.
         * @function toJSON
         * @memberof messages.NewHandTask
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        NewHandTask.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * TaskState enum.
         * @name messages.NewHandTask.TaskState
         * @enum {string}
         * @property {number} TASK_INPROGRES=1 TASK_INPROGRES value
         * @property {number} TASK_END=2 TASK_END value
         */
        NewHandTask.TaskState = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[1] = "TASK_INPROGRES"] = 1;
            values[valuesById[2] = "TASK_END"] = 2;
            return values;
        })();

        return NewHandTask;
    })();

    messages.ProUserDailyTaskResponse = (function() {

        /**
         * Properties of a ProUserDailyTaskResponse.
         * @memberof messages
         * @interface IProUserDailyTaskResponse
         * @property {number|null} [userId] ProUserDailyTaskResponse userId
         * @property {number|null} [gameId] ProUserDailyTaskResponse gameId
         * @property {Array.<messages.IDailyTask>|null} [tasks] ProUserDailyTaskResponse tasks
         */

        /**
         * Constructs a new ProUserDailyTaskResponse.
         * @memberof messages
         * @classdesc Represents a ProUserDailyTaskResponse.
         * @implements IProUserDailyTaskResponse
         * @constructor
         * @param {messages.IProUserDailyTaskResponse=} [properties] Properties to set
         */
        function ProUserDailyTaskResponse(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyTaskResponse userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyTaskResponse
         * @instance
         */
        ProUserDailyTaskResponse.prototype.userId = 0;

        /**
         * ProUserDailyTaskResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyTaskResponse
         * @instance
         */
        ProUserDailyTaskResponse.prototype.gameId = 0;

        /**
         * ProUserDailyTaskResponse tasks.
         * @member {Array.<messages.IDailyTask>} tasks
         * @memberof messages.ProUserDailyTaskResponse
         * @instance
         */
        ProUserDailyTaskResponse.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new ProUserDailyTaskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {messages.IProUserDailyTaskResponse=} [properties] Properties to set
         * @returns {messages.ProUserDailyTaskResponse} ProUserDailyTaskResponse instance
         */
        ProUserDailyTaskResponse.create = function create(properties) {
            return new ProUserDailyTaskResponse(properties);
        };

        /**
         * Encodes the specified ProUserDailyTaskResponse message. Does not implicitly {@link messages.ProUserDailyTaskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {messages.IProUserDailyTaskResponse} message ProUserDailyTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.DailyTask.encode(message.tasks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyTaskResponse message, length delimited. Does not implicitly {@link messages.ProUserDailyTaskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {messages.IProUserDailyTaskResponse} message ProUserDailyTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyTaskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyTaskResponse} ProUserDailyTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyTaskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.DailyTask.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyTaskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyTaskResponse} ProUserDailyTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyTaskResponse message.
         * @function verify
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyTaskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.DailyTask.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProUserDailyTaskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyTaskResponse} ProUserDailyTaskResponse
         */
        ProUserDailyTaskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyTaskResponse)
                return object;
            var message = new $root.messages.ProUserDailyTaskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.ProUserDailyTaskResponse.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.ProUserDailyTaskResponse.tasks: object expected");
                    message.tasks[i] = $root.messages.DailyTask.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyTaskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyTaskResponse
         * @static
         * @param {messages.ProUserDailyTaskResponse} message ProUserDailyTaskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyTaskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.DailyTask.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProUserDailyTaskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyTaskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyTaskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyTaskResponse.MSGID
         * @enum {string}
         * @property {number} ID=405 ID value
         */
        ProUserDailyTaskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[405] = "ID"] = 405;
            return values;
        })();

        return ProUserDailyTaskResponse;
    })();

    messages.ProUserDailyTaskCompleteRequest = (function() {

        /**
         * Properties of a ProUserDailyTaskCompleteRequest.
         * @memberof messages
         * @interface IProUserDailyTaskCompleteRequest
         * @property {number|null} [userId] ProUserDailyTaskCompleteRequest userId
         * @property {number|null} [gameId] ProUserDailyTaskCompleteRequest gameId
         * @property {number|null} [taskId] ProUserDailyTaskCompleteRequest taskId
         */

        /**
         * Constructs a new ProUserDailyTaskCompleteRequest.
         * @memberof messages
         * @classdesc Represents a ProUserDailyTaskCompleteRequest.
         * @implements IProUserDailyTaskCompleteRequest
         * @constructor
         * @param {messages.IProUserDailyTaskCompleteRequest=} [properties] Properties to set
         */
        function ProUserDailyTaskCompleteRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyTaskCompleteRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @instance
         */
        ProUserDailyTaskCompleteRequest.prototype.userId = 0;

        /**
         * ProUserDailyTaskCompleteRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @instance
         */
        ProUserDailyTaskCompleteRequest.prototype.gameId = 0;

        /**
         * ProUserDailyTaskCompleteRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @instance
         */
        ProUserDailyTaskCompleteRequest.prototype.taskId = 0;

        /**
         * Creates a new ProUserDailyTaskCompleteRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProUserDailyTaskCompleteRequest=} [properties] Properties to set
         * @returns {messages.ProUserDailyTaskCompleteRequest} ProUserDailyTaskCompleteRequest instance
         */
        ProUserDailyTaskCompleteRequest.create = function create(properties) {
            return new ProUserDailyTaskCompleteRequest(properties);
        };

        /**
         * Encodes the specified ProUserDailyTaskCompleteRequest message. Does not implicitly {@link messages.ProUserDailyTaskCompleteRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProUserDailyTaskCompleteRequest} message ProUserDailyTaskCompleteRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskCompleteRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyTaskCompleteRequest message, length delimited. Does not implicitly {@link messages.ProUserDailyTaskCompleteRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProUserDailyTaskCompleteRequest} message ProUserDailyTaskCompleteRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskCompleteRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyTaskCompleteRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyTaskCompleteRequest} ProUserDailyTaskCompleteRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskCompleteRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyTaskCompleteRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyTaskCompleteRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyTaskCompleteRequest} ProUserDailyTaskCompleteRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskCompleteRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyTaskCompleteRequest message.
         * @function verify
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyTaskCompleteRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserDailyTaskCompleteRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyTaskCompleteRequest} ProUserDailyTaskCompleteRequest
         */
        ProUserDailyTaskCompleteRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyTaskCompleteRequest)
                return object;
            var message = new $root.messages.ProUserDailyTaskCompleteRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyTaskCompleteRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @static
         * @param {messages.ProUserDailyTaskCompleteRequest} message ProUserDailyTaskCompleteRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyTaskCompleteRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this ProUserDailyTaskCompleteRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyTaskCompleteRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyTaskCompleteRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyTaskCompleteRequest.MSGID
         * @enum {string}
         * @property {number} ID=406 ID value
         */
        ProUserDailyTaskCompleteRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[406] = "ID"] = 406;
            return values;
        })();

        return ProUserDailyTaskCompleteRequest;
    })();

    messages.ProUserDailyTaskAwardRequest = (function() {

        /**
         * Properties of a ProUserDailyTaskAwardRequest.
         * @memberof messages
         * @interface IProUserDailyTaskAwardRequest
         * @property {number|null} [userId] ProUserDailyTaskAwardRequest userId
         * @property {number|null} [gameId] ProUserDailyTaskAwardRequest gameId
         * @property {number|null} [taskId] ProUserDailyTaskAwardRequest taskId
         */

        /**
         * Constructs a new ProUserDailyTaskAwardRequest.
         * @memberof messages
         * @classdesc Represents a ProUserDailyTaskAwardRequest.
         * @implements IProUserDailyTaskAwardRequest
         * @constructor
         * @param {messages.IProUserDailyTaskAwardRequest=} [properties] Properties to set
         */
        function ProUserDailyTaskAwardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyTaskAwardRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @instance
         */
        ProUserDailyTaskAwardRequest.prototype.userId = 0;

        /**
         * ProUserDailyTaskAwardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @instance
         */
        ProUserDailyTaskAwardRequest.prototype.gameId = 0;

        /**
         * ProUserDailyTaskAwardRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @instance
         */
        ProUserDailyTaskAwardRequest.prototype.taskId = 0;

        /**
         * Creates a new ProUserDailyTaskAwardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProUserDailyTaskAwardRequest=} [properties] Properties to set
         * @returns {messages.ProUserDailyTaskAwardRequest} ProUserDailyTaskAwardRequest instance
         */
        ProUserDailyTaskAwardRequest.create = function create(properties) {
            return new ProUserDailyTaskAwardRequest(properties);
        };

        /**
         * Encodes the specified ProUserDailyTaskAwardRequest message. Does not implicitly {@link messages.ProUserDailyTaskAwardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProUserDailyTaskAwardRequest} message ProUserDailyTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskAwardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyTaskAwardRequest message, length delimited. Does not implicitly {@link messages.ProUserDailyTaskAwardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProUserDailyTaskAwardRequest} message ProUserDailyTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyTaskAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyTaskAwardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyTaskAwardRequest} ProUserDailyTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskAwardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyTaskAwardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyTaskAwardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyTaskAwardRequest} ProUserDailyTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyTaskAwardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyTaskAwardRequest message.
         * @function verify
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyTaskAwardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserDailyTaskAwardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyTaskAwardRequest} ProUserDailyTaskAwardRequest
         */
        ProUserDailyTaskAwardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyTaskAwardRequest)
                return object;
            var message = new $root.messages.ProUserDailyTaskAwardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyTaskAwardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @static
         * @param {messages.ProUserDailyTaskAwardRequest} message ProUserDailyTaskAwardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyTaskAwardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this ProUserDailyTaskAwardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyTaskAwardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyTaskAwardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyTaskAwardRequest.MSGID
         * @enum {string}
         * @property {number} ID=407 ID value
         */
        ProUserDailyTaskAwardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[407] = "ID"] = 407;
            return values;
        })();

        return ProUserDailyTaskAwardRequest;
    })();

    messages.ProNotifyClientGetBankruptcyAward = (function() {

        /**
         * Properties of a ProNotifyClientGetBankruptcyAward.
         * @memberof messages
         * @interface IProNotifyClientGetBankruptcyAward
         * @property {number|null} [taskId] ProNotifyClientGetBankruptcyAward taskId
         * @property {number|null} [times] ProNotifyClientGetBankruptcyAward times
         * @property {number|null} [limitcoin] ProNotifyClientGetBankruptcyAward limitcoin
         * @property {number|null} [coin] ProNotifyClientGetBankruptcyAward coin
         */

        /**
         * Constructs a new ProNotifyClientGetBankruptcyAward.
         * @memberof messages
         * @classdesc Represents a ProNotifyClientGetBankruptcyAward.
         * @implements IProNotifyClientGetBankruptcyAward
         * @constructor
         * @param {messages.IProNotifyClientGetBankruptcyAward=} [properties] Properties to set
         */
        function ProNotifyClientGetBankruptcyAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyClientGetBankruptcyAward taskId.
         * @member {number} taskId
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @instance
         */
        ProNotifyClientGetBankruptcyAward.prototype.taskId = 0;

        /**
         * ProNotifyClientGetBankruptcyAward times.
         * @member {number} times
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @instance
         */
        ProNotifyClientGetBankruptcyAward.prototype.times = 0;

        /**
         * ProNotifyClientGetBankruptcyAward limitcoin.
         * @member {number} limitcoin
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @instance
         */
        ProNotifyClientGetBankruptcyAward.prototype.limitcoin = 0;

        /**
         * ProNotifyClientGetBankruptcyAward coin.
         * @member {number} coin
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @instance
         */
        ProNotifyClientGetBankruptcyAward.prototype.coin = 0;

        /**
         * Creates a new ProNotifyClientGetBankruptcyAward instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {messages.IProNotifyClientGetBankruptcyAward=} [properties] Properties to set
         * @returns {messages.ProNotifyClientGetBankruptcyAward} ProNotifyClientGetBankruptcyAward instance
         */
        ProNotifyClientGetBankruptcyAward.create = function create(properties) {
            return new ProNotifyClientGetBankruptcyAward(properties);
        };

        /**
         * Encodes the specified ProNotifyClientGetBankruptcyAward message. Does not implicitly {@link messages.ProNotifyClientGetBankruptcyAward.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {messages.IProNotifyClientGetBankruptcyAward} message ProNotifyClientGetBankruptcyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyClientGetBankruptcyAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.times != null && message.hasOwnProperty("times"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.times);
            if (message.limitcoin != null && message.hasOwnProperty("limitcoin"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.limitcoin);
            if (message.coin != null && message.hasOwnProperty("coin"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.coin);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyClientGetBankruptcyAward message, length delimited. Does not implicitly {@link messages.ProNotifyClientGetBankruptcyAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {messages.IProNotifyClientGetBankruptcyAward} message ProNotifyClientGetBankruptcyAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyClientGetBankruptcyAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyClientGetBankruptcyAward message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyClientGetBankruptcyAward} ProNotifyClientGetBankruptcyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyClientGetBankruptcyAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyClientGetBankruptcyAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.times = reader.int32();
                    break;
                case 4:
                    message.limitcoin = reader.int32();
                    break;
                case 5:
                    message.coin = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyClientGetBankruptcyAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyClientGetBankruptcyAward} ProNotifyClientGetBankruptcyAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyClientGetBankruptcyAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyClientGetBankruptcyAward message.
         * @function verify
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyClientGetBankruptcyAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.times != null && message.hasOwnProperty("times"))
                if (!$util.isInteger(message.times))
                    return "times: integer expected";
            if (message.limitcoin != null && message.hasOwnProperty("limitcoin"))
                if (!$util.isInteger(message.limitcoin))
                    return "limitcoin: integer expected";
            if (message.coin != null && message.hasOwnProperty("coin"))
                if (!$util.isInteger(message.coin))
                    return "coin: integer expected";
            return null;
        };

        /**
         * Creates a ProNotifyClientGetBankruptcyAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyClientGetBankruptcyAward} ProNotifyClientGetBankruptcyAward
         */
        ProNotifyClientGetBankruptcyAward.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyClientGetBankruptcyAward)
                return object;
            var message = new $root.messages.ProNotifyClientGetBankruptcyAward();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.times != null)
                message.times = object.times | 0;
            if (object.limitcoin != null)
                message.limitcoin = object.limitcoin | 0;
            if (object.coin != null)
                message.coin = object.coin | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyClientGetBankruptcyAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @static
         * @param {messages.ProNotifyClientGetBankruptcyAward} message ProNotifyClientGetBankruptcyAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyClientGetBankruptcyAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.times = 0;
                object.limitcoin = 0;
                object.coin = 0;
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.times != null && message.hasOwnProperty("times"))
                object.times = message.times;
            if (message.limitcoin != null && message.hasOwnProperty("limitcoin"))
                object.limitcoin = message.limitcoin;
            if (message.coin != null && message.hasOwnProperty("coin"))
                object.coin = message.coin;
            return object;
        };

        /**
         * Converts this ProNotifyClientGetBankruptcyAward to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyClientGetBankruptcyAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyClientGetBankruptcyAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNotifyClientGetBankruptcyAward.MSGID
         * @enum {string}
         * @property {number} ID=408 ID value
         */
        ProNotifyClientGetBankruptcyAward.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[408] = "ID"] = 408;
            return values;
        })();

        return ProNotifyClientGetBankruptcyAward;
    })();

    messages.ProNotifyUserBankruptcy = (function() {

        /**
         * Properties of a ProNotifyUserBankruptcy.
         * @memberof messages
         * @interface IProNotifyUserBankruptcy
         * @property {number|null} [userId] ProNotifyUserBankruptcy userId
         * @property {number|null} [gameId] ProNotifyUserBankruptcy gameId
         */

        /**
         * Constructs a new ProNotifyUserBankruptcy.
         * @memberof messages
         * @classdesc Represents a ProNotifyUserBankruptcy.
         * @implements IProNotifyUserBankruptcy
         * @constructor
         * @param {messages.IProNotifyUserBankruptcy=} [properties] Properties to set
         */
        function ProNotifyUserBankruptcy(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyUserBankruptcy userId.
         * @member {number} userId
         * @memberof messages.ProNotifyUserBankruptcy
         * @instance
         */
        ProNotifyUserBankruptcy.prototype.userId = 0;

        /**
         * ProNotifyUserBankruptcy gameId.
         * @member {number} gameId
         * @memberof messages.ProNotifyUserBankruptcy
         * @instance
         */
        ProNotifyUserBankruptcy.prototype.gameId = 0;

        /**
         * Creates a new ProNotifyUserBankruptcy instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {messages.IProNotifyUserBankruptcy=} [properties] Properties to set
         * @returns {messages.ProNotifyUserBankruptcy} ProNotifyUserBankruptcy instance
         */
        ProNotifyUserBankruptcy.create = function create(properties) {
            return new ProNotifyUserBankruptcy(properties);
        };

        /**
         * Encodes the specified ProNotifyUserBankruptcy message. Does not implicitly {@link messages.ProNotifyUserBankruptcy.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {messages.IProNotifyUserBankruptcy} message ProNotifyUserBankruptcy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyUserBankruptcy.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyUserBankruptcy message, length delimited. Does not implicitly {@link messages.ProNotifyUserBankruptcy.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {messages.IProNotifyUserBankruptcy} message ProNotifyUserBankruptcy message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyUserBankruptcy.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyUserBankruptcy message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyUserBankruptcy} ProNotifyUserBankruptcy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyUserBankruptcy.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyUserBankruptcy();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyUserBankruptcy message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyUserBankruptcy} ProNotifyUserBankruptcy
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyUserBankruptcy.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyUserBankruptcy message.
         * @function verify
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyUserBankruptcy.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProNotifyUserBankruptcy message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyUserBankruptcy} ProNotifyUserBankruptcy
         */
        ProNotifyUserBankruptcy.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyUserBankruptcy)
                return object;
            var message = new $root.messages.ProNotifyUserBankruptcy();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyUserBankruptcy message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyUserBankruptcy
         * @static
         * @param {messages.ProNotifyUserBankruptcy} message ProNotifyUserBankruptcy
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyUserBankruptcy.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProNotifyUserBankruptcy to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyUserBankruptcy
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyUserBankruptcy.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSFID enum.
         * @name messages.ProNotifyUserBankruptcy.MSFID
         * @enum {string}
         * @property {number} ID=409 ID value
         */
        ProNotifyUserBankruptcy.MSFID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[409] = "ID"] = 409;
            return values;
        })();

        return ProNotifyUserBankruptcy;
    })();

    messages.ProUserDailyShareTaskRequest = (function() {

        /**
         * Properties of a ProUserDailyShareTaskRequest.
         * @memberof messages
         * @interface IProUserDailyShareTaskRequest
         * @property {number|null} [userId] ProUserDailyShareTaskRequest userId
         * @property {number|null} [gameId] ProUserDailyShareTaskRequest gameId
         */

        /**
         * Constructs a new ProUserDailyShareTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProUserDailyShareTaskRequest.
         * @implements IProUserDailyShareTaskRequest
         * @constructor
         * @param {messages.IProUserDailyShareTaskRequest=} [properties] Properties to set
         */
        function ProUserDailyShareTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyShareTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyShareTaskRequest
         * @instance
         */
        ProUserDailyShareTaskRequest.prototype.userId = 0;

        /**
         * ProUserDailyShareTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyShareTaskRequest
         * @instance
         */
        ProUserDailyShareTaskRequest.prototype.gameId = 0;

        /**
         * Creates a new ProUserDailyShareTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {messages.IProUserDailyShareTaskRequest=} [properties] Properties to set
         * @returns {messages.ProUserDailyShareTaskRequest} ProUserDailyShareTaskRequest instance
         */
        ProUserDailyShareTaskRequest.create = function create(properties) {
            return new ProUserDailyShareTaskRequest(properties);
        };

        /**
         * Encodes the specified ProUserDailyShareTaskRequest message. Does not implicitly {@link messages.ProUserDailyShareTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {messages.IProUserDailyShareTaskRequest} message ProUserDailyShareTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyShareTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyShareTaskRequest message, length delimited. Does not implicitly {@link messages.ProUserDailyShareTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {messages.IProUserDailyShareTaskRequest} message ProUserDailyShareTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyShareTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyShareTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyShareTaskRequest} ProUserDailyShareTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyShareTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyShareTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyShareTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyShareTaskRequest} ProUserDailyShareTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyShareTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyShareTaskRequest message.
         * @function verify
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyShareTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserDailyShareTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyShareTaskRequest} ProUserDailyShareTaskRequest
         */
        ProUserDailyShareTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyShareTaskRequest)
                return object;
            var message = new $root.messages.ProUserDailyShareTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyShareTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyShareTaskRequest
         * @static
         * @param {messages.ProUserDailyShareTaskRequest} message ProUserDailyShareTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyShareTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUserDailyShareTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyShareTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyShareTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyShareTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=410 ID value
         */
        ProUserDailyShareTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[410] = "ID"] = 410;
            return values;
        })();

        return ProUserDailyShareTaskRequest;
    })();

    messages.ProUserDailyShareTaskResponse = (function() {

        /**
         * Properties of a ProUserDailyShareTaskResponse.
         * @memberof messages
         * @interface IProUserDailyShareTaskResponse
         * @property {number|null} [userId] ProUserDailyShareTaskResponse userId
         * @property {number|null} [gameId] ProUserDailyShareTaskResponse gameId
         * @property {Array.<messages.IDailyTask>|null} [tasks] ProUserDailyShareTaskResponse tasks
         */

        /**
         * Constructs a new ProUserDailyShareTaskResponse.
         * @memberof messages
         * @classdesc Represents a ProUserDailyShareTaskResponse.
         * @implements IProUserDailyShareTaskResponse
         * @constructor
         * @param {messages.IProUserDailyShareTaskResponse=} [properties] Properties to set
         */
        function ProUserDailyShareTaskResponse(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserDailyShareTaskResponse userId.
         * @member {number} userId
         * @memberof messages.ProUserDailyShareTaskResponse
         * @instance
         */
        ProUserDailyShareTaskResponse.prototype.userId = 0;

        /**
         * ProUserDailyShareTaskResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProUserDailyShareTaskResponse
         * @instance
         */
        ProUserDailyShareTaskResponse.prototype.gameId = 0;

        /**
         * ProUserDailyShareTaskResponse tasks.
         * @member {Array.<messages.IDailyTask>} tasks
         * @memberof messages.ProUserDailyShareTaskResponse
         * @instance
         */
        ProUserDailyShareTaskResponse.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new ProUserDailyShareTaskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {messages.IProUserDailyShareTaskResponse=} [properties] Properties to set
         * @returns {messages.ProUserDailyShareTaskResponse} ProUserDailyShareTaskResponse instance
         */
        ProUserDailyShareTaskResponse.create = function create(properties) {
            return new ProUserDailyShareTaskResponse(properties);
        };

        /**
         * Encodes the specified ProUserDailyShareTaskResponse message. Does not implicitly {@link messages.ProUserDailyShareTaskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {messages.IProUserDailyShareTaskResponse} message ProUserDailyShareTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyShareTaskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.DailyTask.encode(message.tasks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProUserDailyShareTaskResponse message, length delimited. Does not implicitly {@link messages.ProUserDailyShareTaskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {messages.IProUserDailyShareTaskResponse} message ProUserDailyShareTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserDailyShareTaskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserDailyShareTaskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserDailyShareTaskResponse} ProUserDailyShareTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyShareTaskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserDailyShareTaskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.DailyTask.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserDailyShareTaskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserDailyShareTaskResponse} ProUserDailyShareTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserDailyShareTaskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserDailyShareTaskResponse message.
         * @function verify
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserDailyShareTaskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.DailyTask.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProUserDailyShareTaskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserDailyShareTaskResponse} ProUserDailyShareTaskResponse
         */
        ProUserDailyShareTaskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserDailyShareTaskResponse)
                return object;
            var message = new $root.messages.ProUserDailyShareTaskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.ProUserDailyShareTaskResponse.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.ProUserDailyShareTaskResponse.tasks: object expected");
                    message.tasks[i] = $root.messages.DailyTask.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProUserDailyShareTaskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserDailyShareTaskResponse
         * @static
         * @param {messages.ProUserDailyShareTaskResponse} message ProUserDailyShareTaskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserDailyShareTaskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.DailyTask.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProUserDailyShareTaskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUserDailyShareTaskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserDailyShareTaskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserDailyShareTaskResponse.MSGID
         * @enum {string}
         * @property {number} ID=411 ID value
         */
        ProUserDailyShareTaskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[411] = "ID"] = 411;
            return values;
        })();

        return ProUserDailyShareTaskResponse;
    })();

    messages.ProUserShareTaskAwardRequest = (function() {

        /**
         * Properties of a ProUserShareTaskAwardRequest.
         * @memberof messages
         * @interface IProUserShareTaskAwardRequest
         * @property {number|null} [userId] ProUserShareTaskAwardRequest userId
         * @property {number|null} [gameId] ProUserShareTaskAwardRequest gameId
         * @property {number|null} [sourceUserId] ProUserShareTaskAwardRequest sourceUserId
         * @property {number|null} [taskType] ProUserShareTaskAwardRequest taskType
         */

        /**
         * Constructs a new ProUserShareTaskAwardRequest.
         * @memberof messages
         * @classdesc Represents a ProUserShareTaskAwardRequest.
         * @implements IProUserShareTaskAwardRequest
         * @constructor
         * @param {messages.IProUserShareTaskAwardRequest=} [properties] Properties to set
         */
        function ProUserShareTaskAwardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserShareTaskAwardRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserShareTaskAwardRequest
         * @instance
         */
        ProUserShareTaskAwardRequest.prototype.userId = 0;

        /**
         * ProUserShareTaskAwardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserShareTaskAwardRequest
         * @instance
         */
        ProUserShareTaskAwardRequest.prototype.gameId = 0;

        /**
         * ProUserShareTaskAwardRequest sourceUserId.
         * @member {number} sourceUserId
         * @memberof messages.ProUserShareTaskAwardRequest
         * @instance
         */
        ProUserShareTaskAwardRequest.prototype.sourceUserId = 0;

        /**
         * ProUserShareTaskAwardRequest taskType.
         * @member {number} taskType
         * @memberof messages.ProUserShareTaskAwardRequest
         * @instance
         */
        ProUserShareTaskAwardRequest.prototype.taskType = 0;

        /**
         * Creates a new ProUserShareTaskAwardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {messages.IProUserShareTaskAwardRequest=} [properties] Properties to set
         * @returns {messages.ProUserShareTaskAwardRequest} ProUserShareTaskAwardRequest instance
         */
        ProUserShareTaskAwardRequest.create = function create(properties) {
            return new ProUserShareTaskAwardRequest(properties);
        };

        /**
         * Encodes the specified ProUserShareTaskAwardRequest message. Does not implicitly {@link messages.ProUserShareTaskAwardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {messages.IProUserShareTaskAwardRequest} message ProUserShareTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserShareTaskAwardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.sourceUserId != null && message.hasOwnProperty("sourceUserId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.sourceUserId);
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.taskType);
            return writer;
        };

        /**
         * Encodes the specified ProUserShareTaskAwardRequest message, length delimited. Does not implicitly {@link messages.ProUserShareTaskAwardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {messages.IProUserShareTaskAwardRequest} message ProUserShareTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserShareTaskAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserShareTaskAwardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserShareTaskAwardRequest} ProUserShareTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserShareTaskAwardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserShareTaskAwardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.sourceUserId = reader.int32();
                    break;
                case 5:
                    message.taskType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserShareTaskAwardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserShareTaskAwardRequest} ProUserShareTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserShareTaskAwardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserShareTaskAwardRequest message.
         * @function verify
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserShareTaskAwardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.sourceUserId != null && message.hasOwnProperty("sourceUserId"))
                if (!$util.isInteger(message.sourceUserId))
                    return "sourceUserId: integer expected";
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                if (!$util.isInteger(message.taskType))
                    return "taskType: integer expected";
            return null;
        };

        /**
         * Creates a ProUserShareTaskAwardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserShareTaskAwardRequest} ProUserShareTaskAwardRequest
         */
        ProUserShareTaskAwardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserShareTaskAwardRequest)
                return object;
            var message = new $root.messages.ProUserShareTaskAwardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.sourceUserId != null)
                message.sourceUserId = object.sourceUserId | 0;
            if (object.taskType != null)
                message.taskType = object.taskType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserShareTaskAwardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserShareTaskAwardRequest
         * @static
         * @param {messages.ProUserShareTaskAwardRequest} message ProUserShareTaskAwardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserShareTaskAwardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.sourceUserId = 0;
                object.taskType = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.sourceUserId != null && message.hasOwnProperty("sourceUserId"))
                object.sourceUserId = message.sourceUserId;
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                object.taskType = message.taskType;
            return object;
        };

        /**
         * Converts this ProUserShareTaskAwardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserShareTaskAwardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserShareTaskAwardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserShareTaskAwardRequest.MSGID
         * @enum {string}
         * @property {number} ID=412 ID value
         */
        ProUserShareTaskAwardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[412] = "ID"] = 412;
            return values;
        })();

        return ProUserShareTaskAwardRequest;
    })();

    messages.ProUseNewHandTaskRequest = (function() {

        /**
         * Properties of a ProUseNewHandTaskRequest.
         * @memberof messages
         * @interface IProUseNewHandTaskRequest
         * @property {number|null} [userId] ProUseNewHandTaskRequest userId
         * @property {number|null} [gameId] ProUseNewHandTaskRequest gameId
         */

        /**
         * Constructs a new ProUseNewHandTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProUseNewHandTaskRequest.
         * @implements IProUseNewHandTaskRequest
         * @constructor
         * @param {messages.IProUseNewHandTaskRequest=} [properties] Properties to set
         */
        function ProUseNewHandTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUseNewHandTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProUseNewHandTaskRequest
         * @instance
         */
        ProUseNewHandTaskRequest.prototype.userId = 0;

        /**
         * ProUseNewHandTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUseNewHandTaskRequest
         * @instance
         */
        ProUseNewHandTaskRequest.prototype.gameId = 0;

        /**
         * Creates a new ProUseNewHandTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {messages.IProUseNewHandTaskRequest=} [properties] Properties to set
         * @returns {messages.ProUseNewHandTaskRequest} ProUseNewHandTaskRequest instance
         */
        ProUseNewHandTaskRequest.create = function create(properties) {
            return new ProUseNewHandTaskRequest(properties);
        };

        /**
         * Encodes the specified ProUseNewHandTaskRequest message. Does not implicitly {@link messages.ProUseNewHandTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {messages.IProUseNewHandTaskRequest} message ProUseNewHandTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUseNewHandTaskRequest message, length delimited. Does not implicitly {@link messages.ProUseNewHandTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {messages.IProUseNewHandTaskRequest} message ProUseNewHandTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUseNewHandTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUseNewHandTaskRequest} ProUseNewHandTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUseNewHandTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUseNewHandTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUseNewHandTaskRequest} ProUseNewHandTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUseNewHandTaskRequest message.
         * @function verify
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUseNewHandTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUseNewHandTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUseNewHandTaskRequest} ProUseNewHandTaskRequest
         */
        ProUseNewHandTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUseNewHandTaskRequest)
                return object;
            var message = new $root.messages.ProUseNewHandTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUseNewHandTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUseNewHandTaskRequest
         * @static
         * @param {messages.ProUseNewHandTaskRequest} message ProUseNewHandTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUseNewHandTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUseNewHandTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUseNewHandTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUseNewHandTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUseNewHandTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=413 ID value
         */
        ProUseNewHandTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[413] = "ID"] = 413;
            return values;
        })();

        return ProUseNewHandTaskRequest;
    })();

    messages.ProUseNewHandTaskResponse = (function() {

        /**
         * Properties of a ProUseNewHandTaskResponse.
         * @memberof messages
         * @interface IProUseNewHandTaskResponse
         * @property {number|null} [userId] ProUseNewHandTaskResponse userId
         * @property {number|null} [gameId] ProUseNewHandTaskResponse gameId
         * @property {Array.<messages.INewHandTask>|null} [tasks] ProUseNewHandTaskResponse tasks
         */

        /**
         * Constructs a new ProUseNewHandTaskResponse.
         * @memberof messages
         * @classdesc Represents a ProUseNewHandTaskResponse.
         * @implements IProUseNewHandTaskResponse
         * @constructor
         * @param {messages.IProUseNewHandTaskResponse=} [properties] Properties to set
         */
        function ProUseNewHandTaskResponse(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUseNewHandTaskResponse userId.
         * @member {number} userId
         * @memberof messages.ProUseNewHandTaskResponse
         * @instance
         */
        ProUseNewHandTaskResponse.prototype.userId = 0;

        /**
         * ProUseNewHandTaskResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProUseNewHandTaskResponse
         * @instance
         */
        ProUseNewHandTaskResponse.prototype.gameId = 0;

        /**
         * ProUseNewHandTaskResponse tasks.
         * @member {Array.<messages.INewHandTask>} tasks
         * @memberof messages.ProUseNewHandTaskResponse
         * @instance
         */
        ProUseNewHandTaskResponse.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new ProUseNewHandTaskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {messages.IProUseNewHandTaskResponse=} [properties] Properties to set
         * @returns {messages.ProUseNewHandTaskResponse} ProUseNewHandTaskResponse instance
         */
        ProUseNewHandTaskResponse.create = function create(properties) {
            return new ProUseNewHandTaskResponse(properties);
        };

        /**
         * Encodes the specified ProUseNewHandTaskResponse message. Does not implicitly {@link messages.ProUseNewHandTaskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {messages.IProUseNewHandTaskResponse} message ProUseNewHandTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.NewHandTask.encode(message.tasks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProUseNewHandTaskResponse message, length delimited. Does not implicitly {@link messages.ProUseNewHandTaskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {messages.IProUseNewHandTaskResponse} message ProUseNewHandTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUseNewHandTaskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUseNewHandTaskResponse} ProUseNewHandTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUseNewHandTaskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.NewHandTask.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUseNewHandTaskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUseNewHandTaskResponse} ProUseNewHandTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUseNewHandTaskResponse message.
         * @function verify
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUseNewHandTaskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.NewHandTask.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProUseNewHandTaskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUseNewHandTaskResponse} ProUseNewHandTaskResponse
         */
        ProUseNewHandTaskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUseNewHandTaskResponse)
                return object;
            var message = new $root.messages.ProUseNewHandTaskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.ProUseNewHandTaskResponse.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.ProUseNewHandTaskResponse.tasks: object expected");
                    message.tasks[i] = $root.messages.NewHandTask.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProUseNewHandTaskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUseNewHandTaskResponse
         * @static
         * @param {messages.ProUseNewHandTaskResponse} message ProUseNewHandTaskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUseNewHandTaskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.NewHandTask.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProUseNewHandTaskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProUseNewHandTaskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUseNewHandTaskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUseNewHandTaskResponse.MSGID
         * @enum {string}
         * @property {number} ID=414 ID value
         */
        ProUseNewHandTaskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[414] = "ID"] = 414;
            return values;
        })();

        return ProUseNewHandTaskResponse;
    })();

    messages.ProUseNewHandTaskAwardRequest = (function() {

        /**
         * Properties of a ProUseNewHandTaskAwardRequest.
         * @memberof messages
         * @interface IProUseNewHandTaskAwardRequest
         * @property {number|null} [userId] ProUseNewHandTaskAwardRequest userId
         * @property {number|null} [gameId] ProUseNewHandTaskAwardRequest gameId
         * @property {number|null} [taskId] ProUseNewHandTaskAwardRequest taskId
         */

        /**
         * Constructs a new ProUseNewHandTaskAwardRequest.
         * @memberof messages
         * @classdesc Represents a ProUseNewHandTaskAwardRequest.
         * @implements IProUseNewHandTaskAwardRequest
         * @constructor
         * @param {messages.IProUseNewHandTaskAwardRequest=} [properties] Properties to set
         */
        function ProUseNewHandTaskAwardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUseNewHandTaskAwardRequest userId.
         * @member {number} userId
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @instance
         */
        ProUseNewHandTaskAwardRequest.prototype.userId = 0;

        /**
         * ProUseNewHandTaskAwardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @instance
         */
        ProUseNewHandTaskAwardRequest.prototype.gameId = 0;

        /**
         * ProUseNewHandTaskAwardRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @instance
         */
        ProUseNewHandTaskAwardRequest.prototype.taskId = 0;

        /**
         * Creates a new ProUseNewHandTaskAwardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {messages.IProUseNewHandTaskAwardRequest=} [properties] Properties to set
         * @returns {messages.ProUseNewHandTaskAwardRequest} ProUseNewHandTaskAwardRequest instance
         */
        ProUseNewHandTaskAwardRequest.create = function create(properties) {
            return new ProUseNewHandTaskAwardRequest(properties);
        };

        /**
         * Encodes the specified ProUseNewHandTaskAwardRequest message. Does not implicitly {@link messages.ProUseNewHandTaskAwardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {messages.IProUseNewHandTaskAwardRequest} message ProUseNewHandTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskAwardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified ProUseNewHandTaskAwardRequest message, length delimited. Does not implicitly {@link messages.ProUseNewHandTaskAwardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {messages.IProUseNewHandTaskAwardRequest} message ProUseNewHandTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUseNewHandTaskAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUseNewHandTaskAwardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUseNewHandTaskAwardRequest} ProUseNewHandTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskAwardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUseNewHandTaskAwardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUseNewHandTaskAwardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUseNewHandTaskAwardRequest} ProUseNewHandTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUseNewHandTaskAwardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUseNewHandTaskAwardRequest message.
         * @function verify
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUseNewHandTaskAwardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a ProUseNewHandTaskAwardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUseNewHandTaskAwardRequest} ProUseNewHandTaskAwardRequest
         */
        ProUseNewHandTaskAwardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUseNewHandTaskAwardRequest)
                return object;
            var message = new $root.messages.ProUseNewHandTaskAwardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUseNewHandTaskAwardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @static
         * @param {messages.ProUseNewHandTaskAwardRequest} message ProUseNewHandTaskAwardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUseNewHandTaskAwardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this ProUseNewHandTaskAwardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUseNewHandTaskAwardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUseNewHandTaskAwardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUseNewHandTaskAwardRequest.MSGID
         * @enum {string}
         * @property {number} ID=415 ID value
         */
        ProUseNewHandTaskAwardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[415] = "ID"] = 415;
            return values;
        })();

        return ProUseNewHandTaskAwardRequest;
    })();

    messages.ProUserLoginTaskRequest = (function() {

        /**
         * Properties of a ProUserLoginTaskRequest.
         * @memberof messages
         * @interface IProUserLoginTaskRequest
         * @property {number|null} [userId] ProUserLoginTaskRequest userId
         * @property {number|null} [gameId] ProUserLoginTaskRequest gameId
         */

        /**
         * Constructs a new ProUserLoginTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProUserLoginTaskRequest.
         * @implements IProUserLoginTaskRequest
         * @constructor
         * @param {messages.IProUserLoginTaskRequest=} [properties] Properties to set
         */
        function ProUserLoginTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProUserLoginTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProUserLoginTaskRequest
         * @instance
         */
        ProUserLoginTaskRequest.prototype.userId = 0;

        /**
         * ProUserLoginTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProUserLoginTaskRequest
         * @instance
         */
        ProUserLoginTaskRequest.prototype.gameId = 0;

        /**
         * Creates a new ProUserLoginTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {messages.IProUserLoginTaskRequest=} [properties] Properties to set
         * @returns {messages.ProUserLoginTaskRequest} ProUserLoginTaskRequest instance
         */
        ProUserLoginTaskRequest.create = function create(properties) {
            return new ProUserLoginTaskRequest(properties);
        };

        /**
         * Encodes the specified ProUserLoginTaskRequest message. Does not implicitly {@link messages.ProUserLoginTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {messages.IProUserLoginTaskRequest} message ProUserLoginTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            return writer;
        };

        /**
         * Encodes the specified ProUserLoginTaskRequest message, length delimited. Does not implicitly {@link messages.ProUserLoginTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {messages.IProUserLoginTaskRequest} message ProUserLoginTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProUserLoginTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProUserLoginTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProUserLoginTaskRequest} ProUserLoginTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProUserLoginTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProUserLoginTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProUserLoginTaskRequest} ProUserLoginTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProUserLoginTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProUserLoginTaskRequest message.
         * @function verify
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProUserLoginTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            return null;
        };

        /**
         * Creates a ProUserLoginTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProUserLoginTaskRequest} ProUserLoginTaskRequest
         */
        ProUserLoginTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProUserLoginTaskRequest)
                return object;
            var message = new $root.messages.ProUserLoginTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProUserLoginTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProUserLoginTaskRequest
         * @static
         * @param {messages.ProUserLoginTaskRequest} message ProUserLoginTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProUserLoginTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            return object;
        };

        /**
         * Converts this ProUserLoginTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProUserLoginTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProUserLoginTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProUserLoginTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=416 ID value
         */
        ProUserLoginTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[416] = "ID"] = 416;
            return values;
        })();

        return ProUserLoginTaskRequest;
    })();

    messages.ProNotifyClientGetLoginTaskAward = (function() {

        /**
         * Properties of a ProNotifyClientGetLoginTaskAward.
         * @memberof messages
         * @interface IProNotifyClientGetLoginTaskAward
         * @property {number|null} [taskId] ProNotifyClientGetLoginTaskAward taskId
         * @property {number|null} [times] ProNotifyClientGetLoginTaskAward times
         * @property {Uint8Array|null} [award] ProNotifyClientGetLoginTaskAward award
         */

        /**
         * Constructs a new ProNotifyClientGetLoginTaskAward.
         * @memberof messages
         * @classdesc Represents a ProNotifyClientGetLoginTaskAward.
         * @implements IProNotifyClientGetLoginTaskAward
         * @constructor
         * @param {messages.IProNotifyClientGetLoginTaskAward=} [properties] Properties to set
         */
        function ProNotifyClientGetLoginTaskAward(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNotifyClientGetLoginTaskAward taskId.
         * @member {number} taskId
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @instance
         */
        ProNotifyClientGetLoginTaskAward.prototype.taskId = 0;

        /**
         * ProNotifyClientGetLoginTaskAward times.
         * @member {number} times
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @instance
         */
        ProNotifyClientGetLoginTaskAward.prototype.times = 0;

        /**
         * ProNotifyClientGetLoginTaskAward award.
         * @member {Uint8Array} award
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @instance
         */
        ProNotifyClientGetLoginTaskAward.prototype.award = $util.newBuffer([]);

        /**
         * Creates a new ProNotifyClientGetLoginTaskAward instance using the specified properties.
         * @function create
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {messages.IProNotifyClientGetLoginTaskAward=} [properties] Properties to set
         * @returns {messages.ProNotifyClientGetLoginTaskAward} ProNotifyClientGetLoginTaskAward instance
         */
        ProNotifyClientGetLoginTaskAward.create = function create(properties) {
            return new ProNotifyClientGetLoginTaskAward(properties);
        };

        /**
         * Encodes the specified ProNotifyClientGetLoginTaskAward message. Does not implicitly {@link messages.ProNotifyClientGetLoginTaskAward.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {messages.IProNotifyClientGetLoginTaskAward} message ProNotifyClientGetLoginTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyClientGetLoginTaskAward.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.times != null && message.hasOwnProperty("times"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.times);
            if (message.award != null && message.hasOwnProperty("award"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.award);
            return writer;
        };

        /**
         * Encodes the specified ProNotifyClientGetLoginTaskAward message, length delimited. Does not implicitly {@link messages.ProNotifyClientGetLoginTaskAward.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {messages.IProNotifyClientGetLoginTaskAward} message ProNotifyClientGetLoginTaskAward message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNotifyClientGetLoginTaskAward.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNotifyClientGetLoginTaskAward message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNotifyClientGetLoginTaskAward} ProNotifyClientGetLoginTaskAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyClientGetLoginTaskAward.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNotifyClientGetLoginTaskAward();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.times = reader.int32();
                    break;
                case 4:
                    message.award = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNotifyClientGetLoginTaskAward message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNotifyClientGetLoginTaskAward} ProNotifyClientGetLoginTaskAward
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNotifyClientGetLoginTaskAward.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNotifyClientGetLoginTaskAward message.
         * @function verify
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNotifyClientGetLoginTaskAward.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.times != null && message.hasOwnProperty("times"))
                if (!$util.isInteger(message.times))
                    return "times: integer expected";
            if (message.award != null && message.hasOwnProperty("award"))
                if (!(message.award && typeof message.award.length === "number" || $util.isString(message.award)))
                    return "award: buffer expected";
            return null;
        };

        /**
         * Creates a ProNotifyClientGetLoginTaskAward message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNotifyClientGetLoginTaskAward} ProNotifyClientGetLoginTaskAward
         */
        ProNotifyClientGetLoginTaskAward.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNotifyClientGetLoginTaskAward)
                return object;
            var message = new $root.messages.ProNotifyClientGetLoginTaskAward();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.times != null)
                message.times = object.times | 0;
            if (object.award != null)
                if (typeof object.award === "string")
                    $util.base64.decode(object.award, message.award = $util.newBuffer($util.base64.length(object.award)), 0);
                else if (object.award.length)
                    message.award = object.award;
            return message;
        };

        /**
         * Creates a plain object from a ProNotifyClientGetLoginTaskAward message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @static
         * @param {messages.ProNotifyClientGetLoginTaskAward} message ProNotifyClientGetLoginTaskAward
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNotifyClientGetLoginTaskAward.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.times = 0;
                object.award = options.bytes === String ? "" : [];
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.times != null && message.hasOwnProperty("times"))
                object.times = message.times;
            if (message.award != null && message.hasOwnProperty("award"))
                object.award = options.bytes === String ? $util.base64.encode(message.award, 0, message.award.length) : options.bytes === Array ? Array.prototype.slice.call(message.award) : message.award;
            return object;
        };

        /**
         * Converts this ProNotifyClientGetLoginTaskAward to JSON.
         * @function toJSON
         * @memberof messages.ProNotifyClientGetLoginTaskAward
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNotifyClientGetLoginTaskAward.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNotifyClientGetLoginTaskAward.MSGID
         * @enum {string}
         * @property {number} ID=417 ID value
         */
        ProNotifyClientGetLoginTaskAward.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[417] = "ID"] = 417;
            return values;
        })();

        return ProNotifyClientGetLoginTaskAward;
    })();

    messages.ProNewUserDailyTaskRequest = (function() {

        /**
         * Properties of a ProNewUserDailyTaskRequest.
         * @memberof messages
         * @interface IProNewUserDailyTaskRequest
         * @property {number|null} [userId] ProNewUserDailyTaskRequest userId
         * @property {number|null} [gameId] ProNewUserDailyTaskRequest gameId
         * @property {number|null} [taskType] ProNewUserDailyTaskRequest taskType
         */

        /**
         * Constructs a new ProNewUserDailyTaskRequest.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskRequest.
         * @implements IProNewUserDailyTaskRequest
         * @constructor
         * @param {messages.IProNewUserDailyTaskRequest=} [properties] Properties to set
         */
        function ProNewUserDailyTaskRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskRequest userId.
         * @member {number} userId
         * @memberof messages.ProNewUserDailyTaskRequest
         * @instance
         */
        ProNewUserDailyTaskRequest.prototype.userId = 0;

        /**
         * ProNewUserDailyTaskRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProNewUserDailyTaskRequest
         * @instance
         */
        ProNewUserDailyTaskRequest.prototype.gameId = 0;

        /**
         * ProNewUserDailyTaskRequest taskType.
         * @member {number} taskType
         * @memberof messages.ProNewUserDailyTaskRequest
         * @instance
         */
        ProNewUserDailyTaskRequest.prototype.taskType = 0;

        /**
         * Creates a new ProNewUserDailyTaskRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {messages.IProNewUserDailyTaskRequest=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskRequest} ProNewUserDailyTaskRequest instance
         */
        ProNewUserDailyTaskRequest.create = function create(properties) {
            return new ProNewUserDailyTaskRequest(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskRequest message. Does not implicitly {@link messages.ProNewUserDailyTaskRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {messages.IProNewUserDailyTaskRequest} message ProNewUserDailyTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskType);
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskRequest message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {messages.IProNewUserDailyTaskRequest} message ProNewUserDailyTaskRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskRequest} ProNewUserDailyTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskRequest} ProNewUserDailyTaskRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskRequest message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                if (!$util.isInteger(message.taskType))
                    return "taskType: integer expected";
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskRequest} ProNewUserDailyTaskRequest
         */
        ProNewUserDailyTaskRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskRequest)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskType != null)
                message.taskType = object.taskType | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskRequest
         * @static
         * @param {messages.ProNewUserDailyTaskRequest} message ProNewUserDailyTaskRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskType = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskType != null && message.hasOwnProperty("taskType"))
                object.taskType = message.taskType;
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskRequest to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskRequest.MSGID
         * @enum {string}
         * @property {number} ID=418 ID value
         */
        ProNewUserDailyTaskRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[418] = "ID"] = 418;
            return values;
        })();

        return ProNewUserDailyTaskRequest;
    })();

    messages.ProNewUserDailyTaskResponse = (function() {

        /**
         * Properties of a ProNewUserDailyTaskResponse.
         * @memberof messages
         * @interface IProNewUserDailyTaskResponse
         * @property {number|null} [userId] ProNewUserDailyTaskResponse userId
         * @property {number|null} [gameId] ProNewUserDailyTaskResponse gameId
         * @property {Array.<messages.INewDailyTask>|null} [tasks] ProNewUserDailyTaskResponse tasks
         */

        /**
         * Constructs a new ProNewUserDailyTaskResponse.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskResponse.
         * @implements IProNewUserDailyTaskResponse
         * @constructor
         * @param {messages.IProNewUserDailyTaskResponse=} [properties] Properties to set
         */
        function ProNewUserDailyTaskResponse(properties) {
            this.tasks = [];
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskResponse userId.
         * @member {number} userId
         * @memberof messages.ProNewUserDailyTaskResponse
         * @instance
         */
        ProNewUserDailyTaskResponse.prototype.userId = 0;

        /**
         * ProNewUserDailyTaskResponse gameId.
         * @member {number} gameId
         * @memberof messages.ProNewUserDailyTaskResponse
         * @instance
         */
        ProNewUserDailyTaskResponse.prototype.gameId = 0;

        /**
         * ProNewUserDailyTaskResponse tasks.
         * @member {Array.<messages.INewDailyTask>} tasks
         * @memberof messages.ProNewUserDailyTaskResponse
         * @instance
         */
        ProNewUserDailyTaskResponse.prototype.tasks = $util.emptyArray;

        /**
         * Creates a new ProNewUserDailyTaskResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {messages.IProNewUserDailyTaskResponse=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskResponse} ProNewUserDailyTaskResponse instance
         */
        ProNewUserDailyTaskResponse.create = function create(properties) {
            return new ProNewUserDailyTaskResponse(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskResponse message. Does not implicitly {@link messages.ProNewUserDailyTaskResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {messages.IProNewUserDailyTaskResponse} message ProNewUserDailyTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.tasks != null && message.tasks.length)
                for (var i = 0; i < message.tasks.length; ++i)
                    $root.messages.NewDailyTask.encode(message.tasks[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskResponse message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {messages.IProNewUserDailyTaskResponse} message ProNewUserDailyTaskResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskResponse} ProNewUserDailyTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    if (!(message.tasks && message.tasks.length))
                        message.tasks = [];
                    message.tasks.push($root.messages.NewDailyTask.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskResponse} ProNewUserDailyTaskResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskResponse message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.tasks != null && message.hasOwnProperty("tasks")) {
                if (!Array.isArray(message.tasks))
                    return "tasks: array expected";
                for (var i = 0; i < message.tasks.length; ++i) {
                    var error = $root.messages.NewDailyTask.verify(message.tasks[i]);
                    if (error)
                        return "tasks." + error;
                }
            }
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskResponse} ProNewUserDailyTaskResponse
         */
        ProNewUserDailyTaskResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskResponse)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskResponse();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.tasks) {
                if (!Array.isArray(object.tasks))
                    throw TypeError(".messages.ProNewUserDailyTaskResponse.tasks: array expected");
                message.tasks = [];
                for (var i = 0; i < object.tasks.length; ++i) {
                    if (typeof object.tasks[i] !== "object")
                        throw TypeError(".messages.ProNewUserDailyTaskResponse.tasks: object expected");
                    message.tasks[i] = $root.messages.NewDailyTask.fromObject(object.tasks[i]);
                }
            }
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskResponse
         * @static
         * @param {messages.ProNewUserDailyTaskResponse} message ProNewUserDailyTaskResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.arrays || options.defaults)
                object.tasks = [];
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.tasks && message.tasks.length) {
                object.tasks = [];
                for (var j = 0; j < message.tasks.length; ++j)
                    object.tasks[j] = $root.messages.NewDailyTask.toObject(message.tasks[j], options);
            }
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskResponse to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskResponse.MSGID
         * @enum {string}
         * @property {number} ID=419 ID value
         */
        ProNewUserDailyTaskResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[419] = "ID"] = 419;
            return values;
        })();

        return ProNewUserDailyTaskResponse;
    })();

    messages.ProNewUserDailyTaskCompleteRequest = (function() {

        /**
         * Properties of a ProNewUserDailyTaskCompleteRequest.
         * @memberof messages
         * @interface IProNewUserDailyTaskCompleteRequest
         * @property {number|null} [userId] ProNewUserDailyTaskCompleteRequest userId
         * @property {number|null} [gameId] ProNewUserDailyTaskCompleteRequest gameId
         * @property {number|null} [taskId] ProNewUserDailyTaskCompleteRequest taskId
         */

        /**
         * Constructs a new ProNewUserDailyTaskCompleteRequest.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskCompleteRequest.
         * @implements IProNewUserDailyTaskCompleteRequest
         * @constructor
         * @param {messages.IProNewUserDailyTaskCompleteRequest=} [properties] Properties to set
         */
        function ProNewUserDailyTaskCompleteRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskCompleteRequest userId.
         * @member {number} userId
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @instance
         */
        ProNewUserDailyTaskCompleteRequest.prototype.userId = 0;

        /**
         * ProNewUserDailyTaskCompleteRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @instance
         */
        ProNewUserDailyTaskCompleteRequest.prototype.gameId = 0;

        /**
         * ProNewUserDailyTaskCompleteRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @instance
         */
        ProNewUserDailyTaskCompleteRequest.prototype.taskId = 0;

        /**
         * Creates a new ProNewUserDailyTaskCompleteRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteRequest=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskCompleteRequest} ProNewUserDailyTaskCompleteRequest instance
         */
        ProNewUserDailyTaskCompleteRequest.create = function create(properties) {
            return new ProNewUserDailyTaskCompleteRequest(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskCompleteRequest message. Does not implicitly {@link messages.ProNewUserDailyTaskCompleteRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteRequest} message ProNewUserDailyTaskCompleteRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskCompleteRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskCompleteRequest message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskCompleteRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteRequest} message ProNewUserDailyTaskCompleteRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskCompleteRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskCompleteRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskCompleteRequest} ProNewUserDailyTaskCompleteRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskCompleteRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskCompleteRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskCompleteRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskCompleteRequest} ProNewUserDailyTaskCompleteRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskCompleteRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskCompleteRequest message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskCompleteRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskCompleteRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskCompleteRequest} ProNewUserDailyTaskCompleteRequest
         */
        ProNewUserDailyTaskCompleteRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskCompleteRequest)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskCompleteRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskCompleteRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @static
         * @param {messages.ProNewUserDailyTaskCompleteRequest} message ProNewUserDailyTaskCompleteRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskCompleteRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskCompleteRequest to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskCompleteRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskCompleteRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskCompleteRequest.MSGID
         * @enum {string}
         * @property {number} ID=420 ID value
         */
        ProNewUserDailyTaskCompleteRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[420] = "ID"] = 420;
            return values;
        })();

        return ProNewUserDailyTaskCompleteRequest;
    })();

    messages.ProNewUserDailyTaskCompleteResponse = (function() {

        /**
         * Properties of a ProNewUserDailyTaskCompleteResponse.
         * @memberof messages
         * @interface IProNewUserDailyTaskCompleteResponse
         * @property {number|null} [taskId] ProNewUserDailyTaskCompleteResponse taskId
         * @property {number|null} [resault] ProNewUserDailyTaskCompleteResponse resault
         * @property {Uint8Array|null} [message] ProNewUserDailyTaskCompleteResponse message
         */

        /**
         * Constructs a new ProNewUserDailyTaskCompleteResponse.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskCompleteResponse.
         * @implements IProNewUserDailyTaskCompleteResponse
         * @constructor
         * @param {messages.IProNewUserDailyTaskCompleteResponse=} [properties] Properties to set
         */
        function ProNewUserDailyTaskCompleteResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskCompleteResponse taskId.
         * @member {number} taskId
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @instance
         */
        ProNewUserDailyTaskCompleteResponse.prototype.taskId = 0;

        /**
         * ProNewUserDailyTaskCompleteResponse resault.
         * @member {number} resault
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @instance
         */
        ProNewUserDailyTaskCompleteResponse.prototype.resault = 0;

        /**
         * ProNewUserDailyTaskCompleteResponse message.
         * @member {Uint8Array} message
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @instance
         */
        ProNewUserDailyTaskCompleteResponse.prototype.message = $util.newBuffer([]);

        /**
         * Creates a new ProNewUserDailyTaskCompleteResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteResponse=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskCompleteResponse} ProNewUserDailyTaskCompleteResponse instance
         */
        ProNewUserDailyTaskCompleteResponse.create = function create(properties) {
            return new ProNewUserDailyTaskCompleteResponse(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskCompleteResponse message. Does not implicitly {@link messages.ProNewUserDailyTaskCompleteResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteResponse} message ProNewUserDailyTaskCompleteResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskCompleteResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.resault != null && message.hasOwnProperty("resault"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.resault);
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskCompleteResponse message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskCompleteResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {messages.IProNewUserDailyTaskCompleteResponse} message ProNewUserDailyTaskCompleteResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskCompleteResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskCompleteResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskCompleteResponse} ProNewUserDailyTaskCompleteResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskCompleteResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskCompleteResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.resault = reader.int32();
                    break;
                case 4:
                    message.message = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskCompleteResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskCompleteResponse} ProNewUserDailyTaskCompleteResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskCompleteResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskCompleteResponse message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskCompleteResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.resault != null && message.hasOwnProperty("resault"))
                if (!$util.isInteger(message.resault))
                    return "resault: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                    return "message: buffer expected";
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskCompleteResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskCompleteResponse} ProNewUserDailyTaskCompleteResponse
         */
        ProNewUserDailyTaskCompleteResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskCompleteResponse)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskCompleteResponse();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.resault != null)
                message.resault = object.resault | 0;
            if (object.message != null)
                if (typeof object.message === "string")
                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
                else if (object.message.length)
                    message.message = object.message;
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskCompleteResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @static
         * @param {messages.ProNewUserDailyTaskCompleteResponse} message ProNewUserDailyTaskCompleteResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskCompleteResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.resault = 0;
                object.message = options.bytes === String ? "" : [];
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.resault != null && message.hasOwnProperty("resault"))
                object.resault = message.resault;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskCompleteResponse to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskCompleteResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskCompleteResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskCompleteResponse.MSGID
         * @enum {string}
         * @property {number} ID=421 ID value
         */
        ProNewUserDailyTaskCompleteResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[421] = "ID"] = 421;
            return values;
        })();

        return ProNewUserDailyTaskCompleteResponse;
    })();

    messages.ProNewUserDailyTaskAwardRequest = (function() {

        /**
         * Properties of a ProNewUserDailyTaskAwardRequest.
         * @memberof messages
         * @interface IProNewUserDailyTaskAwardRequest
         * @property {number|null} [userId] ProNewUserDailyTaskAwardRequest userId
         * @property {number|null} [gameId] ProNewUserDailyTaskAwardRequest gameId
         * @property {number|null} [taskId] ProNewUserDailyTaskAwardRequest taskId
         */

        /**
         * Constructs a new ProNewUserDailyTaskAwardRequest.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskAwardRequest.
         * @implements IProNewUserDailyTaskAwardRequest
         * @constructor
         * @param {messages.IProNewUserDailyTaskAwardRequest=} [properties] Properties to set
         */
        function ProNewUserDailyTaskAwardRequest(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskAwardRequest userId.
         * @member {number} userId
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @instance
         */
        ProNewUserDailyTaskAwardRequest.prototype.userId = 0;

        /**
         * ProNewUserDailyTaskAwardRequest gameId.
         * @member {number} gameId
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @instance
         */
        ProNewUserDailyTaskAwardRequest.prototype.gameId = 0;

        /**
         * ProNewUserDailyTaskAwardRequest taskId.
         * @member {number} taskId
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @instance
         */
        ProNewUserDailyTaskAwardRequest.prototype.taskId = 0;

        /**
         * Creates a new ProNewUserDailyTaskAwardRequest instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProNewUserDailyTaskAwardRequest=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskAwardRequest} ProNewUserDailyTaskAwardRequest instance
         */
        ProNewUserDailyTaskAwardRequest.create = function create(properties) {
            return new ProNewUserDailyTaskAwardRequest(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskAwardRequest message. Does not implicitly {@link messages.ProNewUserDailyTaskAwardRequest.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProNewUserDailyTaskAwardRequest} message ProNewUserDailyTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskAwardRequest.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.userId != null && message.hasOwnProperty("userId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.taskId);
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskAwardRequest message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskAwardRequest.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {messages.IProNewUserDailyTaskAwardRequest} message ProNewUserDailyTaskAwardRequest message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskAwardRequest message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskAwardRequest} ProNewUserDailyTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskAwardRequest.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskAwardRequest();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.userId = reader.int32();
                    break;
                case 3:
                    message.gameId = reader.int32();
                    break;
                case 4:
                    message.taskId = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskAwardRequest message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskAwardRequest} ProNewUserDailyTaskAwardRequest
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskAwardRequest.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskAwardRequest message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskAwardRequest.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.userId != null && message.hasOwnProperty("userId"))
                if (!$util.isInteger(message.userId))
                    return "userId: integer expected";
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                if (!$util.isInteger(message.gameId))
                    return "gameId: integer expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskAwardRequest message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskAwardRequest} ProNewUserDailyTaskAwardRequest
         */
        ProNewUserDailyTaskAwardRequest.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskAwardRequest)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskAwardRequest();
            if (object.userId != null)
                message.userId = object.userId | 0;
            if (object.gameId != null)
                message.gameId = object.gameId | 0;
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskAwardRequest message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @static
         * @param {messages.ProNewUserDailyTaskAwardRequest} message ProNewUserDailyTaskAwardRequest
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskAwardRequest.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.userId = 0;
                object.gameId = 0;
                object.taskId = 0;
            }
            if (message.userId != null && message.hasOwnProperty("userId"))
                object.userId = message.userId;
            if (message.gameId != null && message.hasOwnProperty("gameId"))
                object.gameId = message.gameId;
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskAwardRequest to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskAwardRequest
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskAwardRequest.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskAwardRequest.MSGID
         * @enum {string}
         * @property {number} ID=422 ID value
         */
        ProNewUserDailyTaskAwardRequest.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[422] = "ID"] = 422;
            return values;
        })();

        return ProNewUserDailyTaskAwardRequest;
    })();

    messages.ProNewUserDailyTaskAwardResponse = (function() {

        /**
         * Properties of a ProNewUserDailyTaskAwardResponse.
         * @memberof messages
         * @interface IProNewUserDailyTaskAwardResponse
         * @property {number|null} [taskId] ProNewUserDailyTaskAwardResponse taskId
         * @property {number|null} [resault] ProNewUserDailyTaskAwardResponse resault
         * @property {Uint8Array|null} [message] ProNewUserDailyTaskAwardResponse message
         */

        /**
         * Constructs a new ProNewUserDailyTaskAwardResponse.
         * @memberof messages
         * @classdesc Represents a ProNewUserDailyTaskAwardResponse.
         * @implements IProNewUserDailyTaskAwardResponse
         * @constructor
         * @param {messages.IProNewUserDailyTaskAwardResponse=} [properties] Properties to set
         */
        function ProNewUserDailyTaskAwardResponse(properties) {
            if (properties)
                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                    if (properties[keys[i]] != null)
                        this[keys[i]] = properties[keys[i]];
        }

        /**
         * ProNewUserDailyTaskAwardResponse taskId.
         * @member {number} taskId
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @instance
         */
        ProNewUserDailyTaskAwardResponse.prototype.taskId = 0;

        /**
         * ProNewUserDailyTaskAwardResponse resault.
         * @member {number} resault
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @instance
         */
        ProNewUserDailyTaskAwardResponse.prototype.resault = 0;

        /**
         * ProNewUserDailyTaskAwardResponse message.
         * @member {Uint8Array} message
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @instance
         */
        ProNewUserDailyTaskAwardResponse.prototype.message = $util.newBuffer([]);

        /**
         * Creates a new ProNewUserDailyTaskAwardResponse instance using the specified properties.
         * @function create
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {messages.IProNewUserDailyTaskAwardResponse=} [properties] Properties to set
         * @returns {messages.ProNewUserDailyTaskAwardResponse} ProNewUserDailyTaskAwardResponse instance
         */
        ProNewUserDailyTaskAwardResponse.create = function create(properties) {
            return new ProNewUserDailyTaskAwardResponse(properties);
        };

        /**
         * Encodes the specified ProNewUserDailyTaskAwardResponse message. Does not implicitly {@link messages.ProNewUserDailyTaskAwardResponse.verify|verify} messages.
         * @function encode
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {messages.IProNewUserDailyTaskAwardResponse} message ProNewUserDailyTaskAwardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskAwardResponse.encode = function encode(message, writer) {
            if (!writer)
                writer = $Writer.create();
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.taskId);
            if (message.resault != null && message.hasOwnProperty("resault"))
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.resault);
            if (message.message != null && message.hasOwnProperty("message"))
                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.message);
            return writer;
        };

        /**
         * Encodes the specified ProNewUserDailyTaskAwardResponse message, length delimited. Does not implicitly {@link messages.ProNewUserDailyTaskAwardResponse.verify|verify} messages.
         * @function encodeDelimited
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {messages.IProNewUserDailyTaskAwardResponse} message ProNewUserDailyTaskAwardResponse message or plain object to encode
         * @param {$protobuf.Writer} [writer] Writer to encode to
         * @returns {$protobuf.Writer} Writer
         */
        ProNewUserDailyTaskAwardResponse.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
        };

        /**
         * Decodes a ProNewUserDailyTaskAwardResponse message from the specified reader or buffer.
         * @function decode
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @param {number} [length] Message length if known beforehand
         * @returns {messages.ProNewUserDailyTaskAwardResponse} ProNewUserDailyTaskAwardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskAwardResponse.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
                reader = $Reader.create(reader);
            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.messages.ProNewUserDailyTaskAwardResponse();
            while (reader.pos < end) {
                var tag = reader.uint32();
                switch (tag >>> 3) {
                case 2:
                    message.taskId = reader.int32();
                    break;
                case 3:
                    message.resault = reader.int32();
                    break;
                case 4:
                    message.message = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
                }
            }
            return message;
        };

        /**
         * Decodes a ProNewUserDailyTaskAwardResponse message from the specified reader or buffer, length delimited.
         * @function decodeDelimited
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
         * @returns {messages.ProNewUserDailyTaskAwardResponse} ProNewUserDailyTaskAwardResponse
         * @throws {Error} If the payload is not a reader or valid buffer
         * @throws {$protobuf.util.ProtocolError} If required fields are missing
         */
        ProNewUserDailyTaskAwardResponse.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
                reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
        };

        /**
         * Verifies a ProNewUserDailyTaskAwardResponse message.
         * @function verify
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {Object.<string,*>} message Plain object to verify
         * @returns {string|null} `null` if valid, otherwise the reason why it is not
         */
        ProNewUserDailyTaskAwardResponse.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
                return "object expected";
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                if (!$util.isInteger(message.taskId))
                    return "taskId: integer expected";
            if (message.resault != null && message.hasOwnProperty("resault"))
                if (!$util.isInteger(message.resault))
                    return "resault: integer expected";
            if (message.message != null && message.hasOwnProperty("message"))
                if (!(message.message && typeof message.message.length === "number" || $util.isString(message.message)))
                    return "message: buffer expected";
            return null;
        };

        /**
         * Creates a ProNewUserDailyTaskAwardResponse message from a plain object. Also converts values to their respective internal types.
         * @function fromObject
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {Object.<string,*>} object Plain object
         * @returns {messages.ProNewUserDailyTaskAwardResponse} ProNewUserDailyTaskAwardResponse
         */
        ProNewUserDailyTaskAwardResponse.fromObject = function fromObject(object) {
            if (object instanceof $root.messages.ProNewUserDailyTaskAwardResponse)
                return object;
            var message = new $root.messages.ProNewUserDailyTaskAwardResponse();
            if (object.taskId != null)
                message.taskId = object.taskId | 0;
            if (object.resault != null)
                message.resault = object.resault | 0;
            if (object.message != null)
                if (typeof object.message === "string")
                    $util.base64.decode(object.message, message.message = $util.newBuffer($util.base64.length(object.message)), 0);
                else if (object.message.length)
                    message.message = object.message;
            return message;
        };

        /**
         * Creates a plain object from a ProNewUserDailyTaskAwardResponse message. Also converts values to other types if specified.
         * @function toObject
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @static
         * @param {messages.ProNewUserDailyTaskAwardResponse} message ProNewUserDailyTaskAwardResponse
         * @param {$protobuf.IConversionOptions} [options] Conversion options
         * @returns {Object.<string,*>} Plain object
         */
        ProNewUserDailyTaskAwardResponse.toObject = function toObject(message, options) {
            if (!options)
                options = {};
            var object = {};
            if (options.defaults) {
                object.taskId = 0;
                object.resault = 0;
                object.message = options.bytes === String ? "" : [];
            }
            if (message.taskId != null && message.hasOwnProperty("taskId"))
                object.taskId = message.taskId;
            if (message.resault != null && message.hasOwnProperty("resault"))
                object.resault = message.resault;
            if (message.message != null && message.hasOwnProperty("message"))
                object.message = options.bytes === String ? $util.base64.encode(message.message, 0, message.message.length) : options.bytes === Array ? Array.prototype.slice.call(message.message) : message.message;
            return object;
        };

        /**
         * Converts this ProNewUserDailyTaskAwardResponse to JSON.
         * @function toJSON
         * @memberof messages.ProNewUserDailyTaskAwardResponse
         * @instance
         * @returns {Object.<string,*>} JSON object
         */
        ProNewUserDailyTaskAwardResponse.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };

        /**
         * MSGID enum.
         * @name messages.ProNewUserDailyTaskAwardResponse.MSGID
         * @enum {string}
         * @property {number} ID=423 ID value
         */
        ProNewUserDailyTaskAwardResponse.MSGID = (function() {
            var valuesById = {}, values = Object.create(valuesById);
            values[valuesById[423] = "ID"] = 423;
            return values;
        })();

        return ProNewUserDailyTaskAwardResponse;
    })();

    return messages;
})();

/**
 * MJGameState enum.
 * @exports MJGameState
 * @enum {string}
 * @property {number} MJ_GAME_IDLE=1 MJ_GAME_IDLE value
 * @property {number} MJ_GAME_DICE_BANK=2 MJ_GAME_DICE_BANK value
 * @property {number} MJ_GAME_SEND=3 MJ_GAME_SEND value
 * @property {number} MJ_GAME_DICE_KING=4 MJ_GAME_DICE_KING value
 * @property {number} MJ_GAME_PLAY=5 MJ_GAME_PLAY value
 * @property {number} MJ_GAME_END=6 MJ_GAME_END value
 */
$root.MJGameState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "MJ_GAME_IDLE"] = 1;
    values[valuesById[2] = "MJ_GAME_DICE_BANK"] = 2;
    values[valuesById[3] = "MJ_GAME_SEND"] = 3;
    values[valuesById[4] = "MJ_GAME_DICE_KING"] = 4;
    values[valuesById[5] = "MJ_GAME_PLAY"] = 5;
    values[valuesById[6] = "MJ_GAME_END"] = 6;
    return values;
})();

/**
 * SEND_TYPE enum.
 * @exports SEND_TYPE
 * @enum {string}
 * @property {number} NORMAL_SEND=1 NORMAL_SEND value
 * @property {number} RECOME_SEND=2 RECOME_SEND value
 */
$root.SEND_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "NORMAL_SEND"] = 1;
    values[valuesById[2] = "RECOME_SEND"] = 2;
    return values;
})();

$root.ProMJGameStatusResponse = (function() {

    /**
     * Properties of a ProMJGameStatusResponse.
     * @exports IProMJGameStatusResponse
     * @interface IProMJGameStatusResponse
     * @property {MJGameState|null} [status] ProMJGameStatusResponse status
     */

    /**
     * Constructs a new ProMJGameStatusResponse.
     * @exports ProMJGameStatusResponse
     * @classdesc Represents a ProMJGameStatusResponse.
     * @implements IProMJGameStatusResponse
     * @constructor
     * @param {IProMJGameStatusResponse=} [properties] Properties to set
     */
    function ProMJGameStatusResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameStatusResponse status.
     * @member {MJGameState} status
     * @memberof ProMJGameStatusResponse
     * @instance
     */
    ProMJGameStatusResponse.prototype.status = 1;

    /**
     * Creates a new ProMJGameStatusResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {IProMJGameStatusResponse=} [properties] Properties to set
     * @returns {ProMJGameStatusResponse} ProMJGameStatusResponse instance
     */
    ProMJGameStatusResponse.create = function create(properties) {
        return new ProMJGameStatusResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameStatusResponse message. Does not implicitly {@link ProMJGameStatusResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {IProMJGameStatusResponse} message ProMJGameStatusResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameStatusResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.status != null && message.hasOwnProperty("status"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameStatusResponse message, length delimited. Does not implicitly {@link ProMJGameStatusResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {IProMJGameStatusResponse} message ProMJGameStatusResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameStatusResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameStatusResponse} ProMJGameStatusResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameStatusResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameStatusResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.status = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameStatusResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameStatusResponse} ProMJGameStatusResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameStatusResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameStatusResponse message.
     * @function verify
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameStatusResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.status != null && message.hasOwnProperty("status"))
            switch (message.status) {
            default:
                return "status: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        return null;
    };

    /**
     * Creates a ProMJGameStatusResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameStatusResponse} ProMJGameStatusResponse
     */
    ProMJGameStatusResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameStatusResponse)
            return object;
        var message = new $root.ProMJGameStatusResponse();
        switch (object.status) {
        case "MJ_GAME_IDLE":
        case 1:
            message.status = 1;
            break;
        case "MJ_GAME_DICE_BANK":
        case 2:
            message.status = 2;
            break;
        case "MJ_GAME_SEND":
        case 3:
            message.status = 3;
            break;
        case "MJ_GAME_DICE_KING":
        case 4:
            message.status = 4;
            break;
        case "MJ_GAME_PLAY":
        case 5:
            message.status = 5;
            break;
        case "MJ_GAME_END":
        case 6:
            message.status = 6;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameStatusResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameStatusResponse
     * @static
     * @param {ProMJGameStatusResponse} message ProMJGameStatusResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameStatusResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.status = options.enums === String ? "MJ_GAME_IDLE" : 1;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = options.enums === String ? $root.MJGameState[message.status] : message.status;
        return object;
    };

    /**
     * Converts this ProMJGameStatusResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameStatusResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameStatusResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameStatusResponse.MSGID
     * @enum {string}
     * @property {number} ID=8600 ID value
     */
    ProMJGameStatusResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8600] = "ID"] = 8600;
        return values;
    })();

    return ProMJGameStatusResponse;
})();

$root.ProMJGameDeskInfoResponse = (function() {

    /**
     * Properties of a ProMJGameDeskInfoResponse.
     * @exports IProMJGameDeskInfoResponse
     * @interface IProMJGameDeskInfoResponse
     * @property {number|null} [CellScore] ProMJGameDeskInfoResponse CellScore
     */

    /**
     * Constructs a new ProMJGameDeskInfoResponse.
     * @exports ProMJGameDeskInfoResponse
     * @classdesc Represents a ProMJGameDeskInfoResponse.
     * @implements IProMJGameDeskInfoResponse
     * @constructor
     * @param {IProMJGameDeskInfoResponse=} [properties] Properties to set
     */
    function ProMJGameDeskInfoResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameDeskInfoResponse CellScore.
     * @member {number} CellScore
     * @memberof ProMJGameDeskInfoResponse
     * @instance
     */
    ProMJGameDeskInfoResponse.prototype.CellScore = 0;

    /**
     * Creates a new ProMJGameDeskInfoResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {IProMJGameDeskInfoResponse=} [properties] Properties to set
     * @returns {ProMJGameDeskInfoResponse} ProMJGameDeskInfoResponse instance
     */
    ProMJGameDeskInfoResponse.create = function create(properties) {
        return new ProMJGameDeskInfoResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameDeskInfoResponse message. Does not implicitly {@link ProMJGameDeskInfoResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {IProMJGameDeskInfoResponse} message ProMJGameDeskInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDeskInfoResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CellScore);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameDeskInfoResponse message, length delimited. Does not implicitly {@link ProMJGameDeskInfoResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {IProMJGameDeskInfoResponse} message ProMJGameDeskInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDeskInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameDeskInfoResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameDeskInfoResponse} ProMJGameDeskInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDeskInfoResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameDeskInfoResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.CellScore = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameDeskInfoResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameDeskInfoResponse} ProMJGameDeskInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDeskInfoResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameDeskInfoResponse message.
     * @function verify
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameDeskInfoResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            if (!$util.isInteger(message.CellScore))
                return "CellScore: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameDeskInfoResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameDeskInfoResponse} ProMJGameDeskInfoResponse
     */
    ProMJGameDeskInfoResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameDeskInfoResponse)
            return object;
        var message = new $root.ProMJGameDeskInfoResponse();
        if (object.CellScore != null)
            message.CellScore = object.CellScore | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameDeskInfoResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameDeskInfoResponse
     * @static
     * @param {ProMJGameDeskInfoResponse} message ProMJGameDeskInfoResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameDeskInfoResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.CellScore = 0;
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            object.CellScore = message.CellScore;
        return object;
    };

    /**
     * Converts this ProMJGameDeskInfoResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameDeskInfoResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameDeskInfoResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameDeskInfoResponse.MSGID
     * @enum {string}
     * @property {number} ID=8601 ID value
     */
    ProMJGameDeskInfoResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8601] = "ID"] = 8601;
        return values;
    })();

    return ProMJGameDeskInfoResponse;
})();

$root.ProMJGameReadyNotify = (function() {

    /**
     * Properties of a ProMJGameReadyNotify.
     * @exports IProMJGameReadyNotify
     * @interface IProMJGameReadyNotify
     * @property {number|null} [seat] ProMJGameReadyNotify seat
     * @property {number|null} [time] ProMJGameReadyNotify time
     */

    /**
     * Constructs a new ProMJGameReadyNotify.
     * @exports ProMJGameReadyNotify
     * @classdesc Represents a ProMJGameReadyNotify.
     * @implements IProMJGameReadyNotify
     * @constructor
     * @param {IProMJGameReadyNotify=} [properties] Properties to set
     */
    function ProMJGameReadyNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameReadyNotify seat.
     * @member {number} seat
     * @memberof ProMJGameReadyNotify
     * @instance
     */
    ProMJGameReadyNotify.prototype.seat = 0;

    /**
     * ProMJGameReadyNotify time.
     * @member {number} time
     * @memberof ProMJGameReadyNotify
     * @instance
     */
    ProMJGameReadyNotify.prototype.time = 0;

    /**
     * Creates a new ProMJGameReadyNotify instance using the specified properties.
     * @function create
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {IProMJGameReadyNotify=} [properties] Properties to set
     * @returns {ProMJGameReadyNotify} ProMJGameReadyNotify instance
     */
    ProMJGameReadyNotify.create = function create(properties) {
        return new ProMJGameReadyNotify(properties);
    };

    /**
     * Encodes the specified ProMJGameReadyNotify message. Does not implicitly {@link ProMJGameReadyNotify.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {IProMJGameReadyNotify} message ProMJGameReadyNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameReadyNotify message, length delimited. Does not implicitly {@link ProMJGameReadyNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {IProMJGameReadyNotify} message ProMJGameReadyNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameReadyNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameReadyNotify} ProMJGameReadyNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameReadyNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameReadyNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameReadyNotify} ProMJGameReadyNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameReadyNotify message.
     * @function verify
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameReadyNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameReadyNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameReadyNotify} ProMJGameReadyNotify
     */
    ProMJGameReadyNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameReadyNotify)
            return object;
        var message = new $root.ProMJGameReadyNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameReadyNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameReadyNotify
     * @static
     * @param {ProMJGameReadyNotify} message ProMJGameReadyNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameReadyNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this ProMJGameReadyNotify to JSON.
     * @function toJSON
     * @memberof ProMJGameReadyNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameReadyNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameReadyNotify.MSGID
     * @enum {string}
     * @property {number} ID=8602 ID value
     */
    ProMJGameReadyNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8602] = "ID"] = 8602;
        return values;
    })();

    return ProMJGameReadyNotify;
})();

$root.ProMJGameReadyRequest = (function() {

    /**
     * Properties of a ProMJGameReadyRequest.
     * @exports IProMJGameReadyRequest
     * @interface IProMJGameReadyRequest
     * @property {number|null} [seat] ProMJGameReadyRequest seat
     */

    /**
     * Constructs a new ProMJGameReadyRequest.
     * @exports ProMJGameReadyRequest
     * @classdesc Represents a ProMJGameReadyRequest.
     * @implements IProMJGameReadyRequest
     * @constructor
     * @param {IProMJGameReadyRequest=} [properties] Properties to set
     */
    function ProMJGameReadyRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameReadyRequest seat.
     * @member {number} seat
     * @memberof ProMJGameReadyRequest
     * @instance
     */
    ProMJGameReadyRequest.prototype.seat = 0;

    /**
     * Creates a new ProMJGameReadyRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {IProMJGameReadyRequest=} [properties] Properties to set
     * @returns {ProMJGameReadyRequest} ProMJGameReadyRequest instance
     */
    ProMJGameReadyRequest.create = function create(properties) {
        return new ProMJGameReadyRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameReadyRequest message. Does not implicitly {@link ProMJGameReadyRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {IProMJGameReadyRequest} message ProMJGameReadyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameReadyRequest message, length delimited. Does not implicitly {@link ProMJGameReadyRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {IProMJGameReadyRequest} message ProMJGameReadyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameReadyRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameReadyRequest} ProMJGameReadyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameReadyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameReadyRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameReadyRequest} ProMJGameReadyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameReadyRequest message.
     * @function verify
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameReadyRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameReadyRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameReadyRequest} ProMJGameReadyRequest
     */
    ProMJGameReadyRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameReadyRequest)
            return object;
        var message = new $root.ProMJGameReadyRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameReadyRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameReadyRequest
     * @static
     * @param {ProMJGameReadyRequest} message ProMJGameReadyRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameReadyRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProMJGameReadyRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameReadyRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameReadyRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameReadyRequest.MSGID
     * @enum {string}
     * @property {number} ID=8603 ID value
     */
    ProMJGameReadyRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8603] = "ID"] = 8603;
        return values;
    })();

    return ProMJGameReadyRequest;
})();

$root.ProMJGameReadyResponse = (function() {

    /**
     * Properties of a ProMJGameReadyResponse.
     * @exports IProMJGameReadyResponse
     * @interface IProMJGameReadyResponse
     * @property {number|null} [seat] ProMJGameReadyResponse seat
     */

    /**
     * Constructs a new ProMJGameReadyResponse.
     * @exports ProMJGameReadyResponse
     * @classdesc Represents a ProMJGameReadyResponse.
     * @implements IProMJGameReadyResponse
     * @constructor
     * @param {IProMJGameReadyResponse=} [properties] Properties to set
     */
    function ProMJGameReadyResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameReadyResponse seat.
     * @member {number} seat
     * @memberof ProMJGameReadyResponse
     * @instance
     */
    ProMJGameReadyResponse.prototype.seat = 0;

    /**
     * Creates a new ProMJGameReadyResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {IProMJGameReadyResponse=} [properties] Properties to set
     * @returns {ProMJGameReadyResponse} ProMJGameReadyResponse instance
     */
    ProMJGameReadyResponse.create = function create(properties) {
        return new ProMJGameReadyResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameReadyResponse message. Does not implicitly {@link ProMJGameReadyResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {IProMJGameReadyResponse} message ProMJGameReadyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameReadyResponse message, length delimited. Does not implicitly {@link ProMJGameReadyResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {IProMJGameReadyResponse} message ProMJGameReadyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameReadyResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameReadyResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameReadyResponse} ProMJGameReadyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameReadyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameReadyResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameReadyResponse} ProMJGameReadyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameReadyResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameReadyResponse message.
     * @function verify
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameReadyResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameReadyResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameReadyResponse} ProMJGameReadyResponse
     */
    ProMJGameReadyResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameReadyResponse)
            return object;
        var message = new $root.ProMJGameReadyResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameReadyResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameReadyResponse
     * @static
     * @param {ProMJGameReadyResponse} message ProMJGameReadyResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameReadyResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProMJGameReadyResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameReadyResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameReadyResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameReadyResponse.MSGID
     * @enum {string}
     * @property {number} ID=8604 ID value
     */
    ProMJGameReadyResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8604] = "ID"] = 8604;
        return values;
    })();

    return ProMJGameReadyResponse;
})();

$root.ProMJGameStart = (function() {

    /**
     * Properties of a ProMJGameStart.
     * @exports IProMJGameStart
     * @interface IProMJGameStart
     * @property {number|null} [bankerseat] ProMJGameStart bankerseat
     * @property {number|null} [gamecount] ProMJGameStart gamecount
     */

    /**
     * Constructs a new ProMJGameStart.
     * @exports ProMJGameStart
     * @classdesc Represents a ProMJGameStart.
     * @implements IProMJGameStart
     * @constructor
     * @param {IProMJGameStart=} [properties] Properties to set
     */
    function ProMJGameStart(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameStart bankerseat.
     * @member {number} bankerseat
     * @memberof ProMJGameStart
     * @instance
     */
    ProMJGameStart.prototype.bankerseat = 0;

    /**
     * ProMJGameStart gamecount.
     * @member {number} gamecount
     * @memberof ProMJGameStart
     * @instance
     */
    ProMJGameStart.prototype.gamecount = 0;

    /**
     * Creates a new ProMJGameStart instance using the specified properties.
     * @function create
     * @memberof ProMJGameStart
     * @static
     * @param {IProMJGameStart=} [properties] Properties to set
     * @returns {ProMJGameStart} ProMJGameStart instance
     */
    ProMJGameStart.create = function create(properties) {
        return new ProMJGameStart(properties);
    };

    /**
     * Encodes the specified ProMJGameStart message. Does not implicitly {@link ProMJGameStart.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameStart
     * @static
     * @param {IProMJGameStart} message ProMJGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameStart.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bankerseat);
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamecount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameStart message, length delimited. Does not implicitly {@link ProMJGameStart.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameStart
     * @static
     * @param {IProMJGameStart} message ProMJGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameStart.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameStart message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameStart} ProMJGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameStart.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameStart();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.bankerseat = reader.int32();
                break;
            case 3:
                message.gamecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameStart message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameStart} ProMJGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameStart.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameStart message.
     * @function verify
     * @memberof ProMJGameStart
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameStart.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            if (!$util.isInteger(message.bankerseat))
                return "bankerseat: integer expected";
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            if (!$util.isInteger(message.gamecount))
                return "gamecount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameStart message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameStart
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameStart} ProMJGameStart
     */
    ProMJGameStart.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameStart)
            return object;
        var message = new $root.ProMJGameStart();
        if (object.bankerseat != null)
            message.bankerseat = object.bankerseat | 0;
        if (object.gamecount != null)
            message.gamecount = object.gamecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameStart message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameStart
     * @static
     * @param {ProMJGameStart} message ProMJGameStart
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameStart.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.bankerseat = 0;
            object.gamecount = 0;
        }
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            object.bankerseat = message.bankerseat;
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            object.gamecount = message.gamecount;
        return object;
    };

    /**
     * Converts this ProMJGameStart to JSON.
     * @function toJSON
     * @memberof ProMJGameStart
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameStart.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameStart.MSGID
     * @enum {string}
     * @property {number} ID=8605 ID value
     */
    ProMJGameStart.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8605] = "ID"] = 8605;
        return values;
    })();

    return ProMJGameStart;
})();

$root.ProMJGameDiceNotify = (function() {

    /**
     * Properties of a ProMJGameDiceNotify.
     * @exports IProMJGameDiceNotify
     * @interface IProMJGameDiceNotify
     * @property {number|null} [seat] ProMJGameDiceNotify seat
     * @property {number|null} [time] ProMJGameDiceNotify time
     * @property {number|null} [dicecount] ProMJGameDiceNotify dicecount
     */

    /**
     * Constructs a new ProMJGameDiceNotify.
     * @exports ProMJGameDiceNotify
     * @classdesc Represents a ProMJGameDiceNotify.
     * @implements IProMJGameDiceNotify
     * @constructor
     * @param {IProMJGameDiceNotify=} [properties] Properties to set
     */
    function ProMJGameDiceNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameDiceNotify seat.
     * @member {number} seat
     * @memberof ProMJGameDiceNotify
     * @instance
     */
    ProMJGameDiceNotify.prototype.seat = 0;

    /**
     * ProMJGameDiceNotify time.
     * @member {number} time
     * @memberof ProMJGameDiceNotify
     * @instance
     */
    ProMJGameDiceNotify.prototype.time = 0;

    /**
     * ProMJGameDiceNotify dicecount.
     * @member {number} dicecount
     * @memberof ProMJGameDiceNotify
     * @instance
     */
    ProMJGameDiceNotify.prototype.dicecount = 0;

    /**
     * Creates a new ProMJGameDiceNotify instance using the specified properties.
     * @function create
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {IProMJGameDiceNotify=} [properties] Properties to set
     * @returns {ProMJGameDiceNotify} ProMJGameDiceNotify instance
     */
    ProMJGameDiceNotify.create = function create(properties) {
        return new ProMJGameDiceNotify(properties);
    };

    /**
     * Encodes the specified ProMJGameDiceNotify message. Does not implicitly {@link ProMJGameDiceNotify.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {IProMJGameDiceNotify} message ProMJGameDiceNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameDiceNotify message, length delimited. Does not implicitly {@link ProMJGameDiceNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {IProMJGameDiceNotify} message ProMJGameDiceNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameDiceNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameDiceNotify} ProMJGameDiceNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameDiceNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            case 4:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameDiceNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameDiceNotify} ProMJGameDiceNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameDiceNotify message.
     * @function verify
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameDiceNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameDiceNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameDiceNotify} ProMJGameDiceNotify
     */
    ProMJGameDiceNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameDiceNotify)
            return object;
        var message = new $root.ProMJGameDiceNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameDiceNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameDiceNotify
     * @static
     * @param {ProMJGameDiceNotify} message ProMJGameDiceNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameDiceNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProMJGameDiceNotify to JSON.
     * @function toJSON
     * @memberof ProMJGameDiceNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameDiceNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameDiceNotify.MSGID
     * @enum {string}
     * @property {number} ID=8606 ID value
     */
    ProMJGameDiceNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8606] = "ID"] = 8606;
        return values;
    })();

    return ProMJGameDiceNotify;
})();

$root.ProMJGameDiceRequest = (function() {

    /**
     * Properties of a ProMJGameDiceRequest.
     * @exports IProMJGameDiceRequest
     * @interface IProMJGameDiceRequest
     * @property {number|null} [seat] ProMJGameDiceRequest seat
     * @property {number|null} [dicecount] ProMJGameDiceRequest dicecount
     */

    /**
     * Constructs a new ProMJGameDiceRequest.
     * @exports ProMJGameDiceRequest
     * @classdesc Represents a ProMJGameDiceRequest.
     * @implements IProMJGameDiceRequest
     * @constructor
     * @param {IProMJGameDiceRequest=} [properties] Properties to set
     */
    function ProMJGameDiceRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameDiceRequest seat.
     * @member {number} seat
     * @memberof ProMJGameDiceRequest
     * @instance
     */
    ProMJGameDiceRequest.prototype.seat = 0;

    /**
     * ProMJGameDiceRequest dicecount.
     * @member {number} dicecount
     * @memberof ProMJGameDiceRequest
     * @instance
     */
    ProMJGameDiceRequest.prototype.dicecount = 0;

    /**
     * Creates a new ProMJGameDiceRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {IProMJGameDiceRequest=} [properties] Properties to set
     * @returns {ProMJGameDiceRequest} ProMJGameDiceRequest instance
     */
    ProMJGameDiceRequest.create = function create(properties) {
        return new ProMJGameDiceRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameDiceRequest message. Does not implicitly {@link ProMJGameDiceRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {IProMJGameDiceRequest} message ProMJGameDiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameDiceRequest message, length delimited. Does not implicitly {@link ProMJGameDiceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {IProMJGameDiceRequest} message ProMJGameDiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameDiceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameDiceRequest} ProMJGameDiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameDiceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameDiceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameDiceRequest} ProMJGameDiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameDiceRequest message.
     * @function verify
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameDiceRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameDiceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameDiceRequest} ProMJGameDiceRequest
     */
    ProMJGameDiceRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameDiceRequest)
            return object;
        var message = new $root.ProMJGameDiceRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameDiceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameDiceRequest
     * @static
     * @param {ProMJGameDiceRequest} message ProMJGameDiceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameDiceRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProMJGameDiceRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameDiceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameDiceRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameDiceRequest.MSGID
     * @enum {string}
     * @property {number} ID=8607 ID value
     */
    ProMJGameDiceRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8607] = "ID"] = 8607;
        return values;
    })();

    return ProMJGameDiceRequest;
})();

$root.ProMJGameDiceResult = (function() {

    /**
     * Properties of a ProMJGameDiceResult.
     * @exports IProMJGameDiceResult
     * @interface IProMJGameDiceResult
     * @property {number|null} [seat] ProMJGameDiceResult seat
     * @property {Array.<number>|null} [result] ProMJGameDiceResult result
     * @property {number|null} [dicecount] ProMJGameDiceResult dicecount
     */

    /**
     * Constructs a new ProMJGameDiceResult.
     * @exports ProMJGameDiceResult
     * @classdesc Represents a ProMJGameDiceResult.
     * @implements IProMJGameDiceResult
     * @constructor
     * @param {IProMJGameDiceResult=} [properties] Properties to set
     */
    function ProMJGameDiceResult(properties) {
        this.result = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameDiceResult seat.
     * @member {number} seat
     * @memberof ProMJGameDiceResult
     * @instance
     */
    ProMJGameDiceResult.prototype.seat = 0;

    /**
     * ProMJGameDiceResult result.
     * @member {Array.<number>} result
     * @memberof ProMJGameDiceResult
     * @instance
     */
    ProMJGameDiceResult.prototype.result = $util.emptyArray;

    /**
     * ProMJGameDiceResult dicecount.
     * @member {number} dicecount
     * @memberof ProMJGameDiceResult
     * @instance
     */
    ProMJGameDiceResult.prototype.dicecount = 0;

    /**
     * Creates a new ProMJGameDiceResult instance using the specified properties.
     * @function create
     * @memberof ProMJGameDiceResult
     * @static
     * @param {IProMJGameDiceResult=} [properties] Properties to set
     * @returns {ProMJGameDiceResult} ProMJGameDiceResult instance
     */
    ProMJGameDiceResult.create = function create(properties) {
        return new ProMJGameDiceResult(properties);
    };

    /**
     * Encodes the specified ProMJGameDiceResult message. Does not implicitly {@link ProMJGameDiceResult.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameDiceResult
     * @static
     * @param {IProMJGameDiceResult} message ProMJGameDiceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.result != null && message.result.length)
            for (var i = 0; i < message.result.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result[i]);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameDiceResult message, length delimited. Does not implicitly {@link ProMJGameDiceResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameDiceResult
     * @static
     * @param {IProMJGameDiceResult} message ProMJGameDiceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDiceResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameDiceResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameDiceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameDiceResult} ProMJGameDiceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameDiceResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.result && message.result.length))
                    message.result = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.result.push(reader.int32());
                } else
                    message.result.push(reader.int32());
                break;
            case 4:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameDiceResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameDiceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameDiceResult} ProMJGameDiceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDiceResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameDiceResult message.
     * @function verify
     * @memberof ProMJGameDiceResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameDiceResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.result != null && message.hasOwnProperty("result")) {
            if (!Array.isArray(message.result))
                return "result: array expected";
            for (var i = 0; i < message.result.length; ++i)
                if (!$util.isInteger(message.result[i]))
                    return "result: integer[] expected";
        }
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameDiceResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameDiceResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameDiceResult} ProMJGameDiceResult
     */
    ProMJGameDiceResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameDiceResult)
            return object;
        var message = new $root.ProMJGameDiceResult();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.result) {
            if (!Array.isArray(object.result))
                throw TypeError(".ProMJGameDiceResult.result: array expected");
            message.result = [];
            for (var i = 0; i < object.result.length; ++i)
                message.result[i] = object.result[i] | 0;
        }
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameDiceResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameDiceResult
     * @static
     * @param {ProMJGameDiceResult} message ProMJGameDiceResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameDiceResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.result = [];
        if (options.defaults) {
            object.seat = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.result && message.result.length) {
            object.result = [];
            for (var j = 0; j < message.result.length; ++j)
                object.result[j] = message.result[j];
        }
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProMJGameDiceResult to JSON.
     * @function toJSON
     * @memberof ProMJGameDiceResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameDiceResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameDiceResult.MSGID
     * @enum {string}
     * @property {number} ID=8608 ID value
     */
    ProMJGameDiceResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8608] = "ID"] = 8608;
        return values;
    })();

    return ProMJGameDiceResult;
})();

$root.ProMJGameSendMahs = (function() {

    /**
     * Properties of a ProMJGameSendMahs.
     * @exports IProMJGameSendMahs
     * @interface IProMJGameSendMahs
     * @property {number|null} [seat] ProMJGameSendMahs seat
     * @property {Array.<number>|null} [mahs] ProMJGameSendMahs mahs
     * @property {Array.<number>|null} [mahscount] ProMJGameSendMahs mahscount
     * @property {number|null} [cbLeftCount] ProMJGameSendMahs cbLeftCount
     */

    /**
     * Constructs a new ProMJGameSendMahs.
     * @exports ProMJGameSendMahs
     * @classdesc Represents a ProMJGameSendMahs.
     * @implements IProMJGameSendMahs
     * @constructor
     * @param {IProMJGameSendMahs=} [properties] Properties to set
     */
    function ProMJGameSendMahs(properties) {
        this.mahs = [];
        this.mahscount = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameSendMahs seat.
     * @member {number} seat
     * @memberof ProMJGameSendMahs
     * @instance
     */
    ProMJGameSendMahs.prototype.seat = 0;

    /**
     * ProMJGameSendMahs mahs.
     * @member {Array.<number>} mahs
     * @memberof ProMJGameSendMahs
     * @instance
     */
    ProMJGameSendMahs.prototype.mahs = $util.emptyArray;

    /**
     * ProMJGameSendMahs mahscount.
     * @member {Array.<number>} mahscount
     * @memberof ProMJGameSendMahs
     * @instance
     */
    ProMJGameSendMahs.prototype.mahscount = $util.emptyArray;

    /**
     * ProMJGameSendMahs cbLeftCount.
     * @member {number} cbLeftCount
     * @memberof ProMJGameSendMahs
     * @instance
     */
    ProMJGameSendMahs.prototype.cbLeftCount = 0;

    /**
     * Creates a new ProMJGameSendMahs instance using the specified properties.
     * @function create
     * @memberof ProMJGameSendMahs
     * @static
     * @param {IProMJGameSendMahs=} [properties] Properties to set
     * @returns {ProMJGameSendMahs} ProMJGameSendMahs instance
     */
    ProMJGameSendMahs.create = function create(properties) {
        return new ProMJGameSendMahs(properties);
    };

    /**
     * Encodes the specified ProMJGameSendMahs message. Does not implicitly {@link ProMJGameSendMahs.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameSendMahs
     * @static
     * @param {IProMJGameSendMahs} message ProMJGameSendMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.mahs != null && message.mahs.length)
            for (var i = 0; i < message.mahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mahs[i]);
        if (message.mahscount != null && message.mahscount.length)
            for (var i = 0; i < message.mahscount.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.mahscount[i]);
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cbLeftCount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameSendMahs message, length delimited. Does not implicitly {@link ProMJGameSendMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameSendMahs
     * @static
     * @param {IProMJGameSendMahs} message ProMJGameSendMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameSendMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameSendMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameSendMahs} ProMJGameSendMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameSendMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.mahs && message.mahs.length))
                    message.mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahs.push(reader.int32());
                } else
                    message.mahs.push(reader.int32());
                break;
            case 4:
                if (!(message.mahscount && message.mahscount.length))
                    message.mahscount = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahscount.push(reader.int32());
                } else
                    message.mahscount.push(reader.int32());
                break;
            case 5:
                message.cbLeftCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameSendMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameSendMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameSendMahs} ProMJGameSendMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameSendMahs message.
     * @function verify
     * @memberof ProMJGameSendMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameSendMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.mahs != null && message.hasOwnProperty("mahs")) {
            if (!Array.isArray(message.mahs))
                return "mahs: array expected";
            for (var i = 0; i < message.mahs.length; ++i)
                if (!$util.isInteger(message.mahs[i]))
                    return "mahs: integer[] expected";
        }
        if (message.mahscount != null && message.hasOwnProperty("mahscount")) {
            if (!Array.isArray(message.mahscount))
                return "mahscount: array expected";
            for (var i = 0; i < message.mahscount.length; ++i)
                if (!$util.isInteger(message.mahscount[i]))
                    return "mahscount: integer[] expected";
        }
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            if (!$util.isInteger(message.cbLeftCount))
                return "cbLeftCount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameSendMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameSendMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameSendMahs} ProMJGameSendMahs
     */
    ProMJGameSendMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameSendMahs)
            return object;
        var message = new $root.ProMJGameSendMahs();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.mahs) {
            if (!Array.isArray(object.mahs))
                throw TypeError(".ProMJGameSendMahs.mahs: array expected");
            message.mahs = [];
            for (var i = 0; i < object.mahs.length; ++i)
                message.mahs[i] = object.mahs[i] | 0;
        }
        if (object.mahscount) {
            if (!Array.isArray(object.mahscount))
                throw TypeError(".ProMJGameSendMahs.mahscount: array expected");
            message.mahscount = [];
            for (var i = 0; i < object.mahscount.length; ++i)
                message.mahscount[i] = object.mahscount[i] | 0;
        }
        if (object.cbLeftCount != null)
            message.cbLeftCount = object.cbLeftCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameSendMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameSendMahs
     * @static
     * @param {ProMJGameSendMahs} message ProMJGameSendMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameSendMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.mahs = [];
            object.mahscount = [];
        }
        if (options.defaults) {
            object.seat = 0;
            object.cbLeftCount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.mahs && message.mahs.length) {
            object.mahs = [];
            for (var j = 0; j < message.mahs.length; ++j)
                object.mahs[j] = message.mahs[j];
        }
        if (message.mahscount && message.mahscount.length) {
            object.mahscount = [];
            for (var j = 0; j < message.mahscount.length; ++j)
                object.mahscount[j] = message.mahscount[j];
        }
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            object.cbLeftCount = message.cbLeftCount;
        return object;
    };

    /**
     * Converts this ProMJGameSendMahs to JSON.
     * @function toJSON
     * @memberof ProMJGameSendMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameSendMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameSendMahs.MSGID
     * @enum {string}
     * @property {number} ID=8609 ID value
     */
    ProMJGameSendMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8609] = "ID"] = 8609;
        return values;
    })();

    return ProMJGameSendMahs;
})();

/**
 * KIGN_TYPE enum.
 * @exports KIGN_TYPE
 * @enum {string}
 * @property {number} KING_UP=1 KING_UP value
 * @property {number} KING_HUITOU=2 KING_HUITOU value
 * @property {number} KING_MAILEI=3 KING_MAILEI value
 * @property {number} KING_ONESING=4 KING_ONESING value
 */
$root.KIGN_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "KING_UP"] = 1;
    values[valuesById[2] = "KING_HUITOU"] = 2;
    values[valuesById[3] = "KING_MAILEI"] = 3;
    values[valuesById[4] = "KING_ONESING"] = 4;
    return values;
})();

$root.ProMJGameKingData = (function() {

    /**
     * Properties of a ProMJGameKingData.
     * @exports IProMJGameKingData
     * @interface IProMJGameKingData
     * @property {number|null} [seat] ProMJGameKingData seat
     * @property {Array.<number>|null} [mahs] ProMJGameKingData mahs
     * @property {Array.<number>|null} [downKingScore] ProMJGameKingData downKingScore
     * @property {Array.<number>|null} [kingcount] ProMJGameKingData kingcount
     * @property {Array.<number>|null} [viceking] ProMJGameKingData viceking
     * @property {SEND_TYPE|null} [notifyType] ProMJGameKingData notifyType
     * @property {KIGN_TYPE|null} [kingType] ProMJGameKingData kingType
     * @property {Array.<number>|null} [cbChongGuang] ProMJGameKingData cbChongGuang
     * @property {Array.<number>|null} [cbBaWangKing] ProMJGameKingData cbBaWangKing
     */

    /**
     * Constructs a new ProMJGameKingData.
     * @exports ProMJGameKingData
     * @classdesc Represents a ProMJGameKingData.
     * @implements IProMJGameKingData
     * @constructor
     * @param {IProMJGameKingData=} [properties] Properties to set
     */
    function ProMJGameKingData(properties) {
        this.mahs = [];
        this.downKingScore = [];
        this.kingcount = [];
        this.viceking = [];
        this.cbChongGuang = [];
        this.cbBaWangKing = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameKingData seat.
     * @member {number} seat
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.seat = 0;

    /**
     * ProMJGameKingData mahs.
     * @member {Array.<number>} mahs
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.mahs = $util.emptyArray;

    /**
     * ProMJGameKingData downKingScore.
     * @member {Array.<number>} downKingScore
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.downKingScore = $util.emptyArray;

    /**
     * ProMJGameKingData kingcount.
     * @member {Array.<number>} kingcount
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.kingcount = $util.emptyArray;

    /**
     * ProMJGameKingData viceking.
     * @member {Array.<number>} viceking
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.viceking = $util.emptyArray;

    /**
     * ProMJGameKingData notifyType.
     * @member {SEND_TYPE} notifyType
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.notifyType = 1;

    /**
     * ProMJGameKingData kingType.
     * @member {KIGN_TYPE} kingType
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.kingType = 1;

    /**
     * ProMJGameKingData cbChongGuang.
     * @member {Array.<number>} cbChongGuang
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.cbChongGuang = $util.emptyArray;

    /**
     * ProMJGameKingData cbBaWangKing.
     * @member {Array.<number>} cbBaWangKing
     * @memberof ProMJGameKingData
     * @instance
     */
    ProMJGameKingData.prototype.cbBaWangKing = $util.emptyArray;

    /**
     * Creates a new ProMJGameKingData instance using the specified properties.
     * @function create
     * @memberof ProMJGameKingData
     * @static
     * @param {IProMJGameKingData=} [properties] Properties to set
     * @returns {ProMJGameKingData} ProMJGameKingData instance
     */
    ProMJGameKingData.create = function create(properties) {
        return new ProMJGameKingData(properties);
    };

    /**
     * Encodes the specified ProMJGameKingData message. Does not implicitly {@link ProMJGameKingData.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameKingData
     * @static
     * @param {IProMJGameKingData} message ProMJGameKingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.mahs != null && message.mahs.length)
            for (var i = 0; i < message.mahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mahs[i]);
        if (message.downKingScore != null && message.downKingScore.length)
            for (var i = 0; i < message.downKingScore.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.downKingScore[i]);
        if (message.kingcount != null && message.kingcount.length)
            for (var i = 0; i < message.kingcount.length; ++i)
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.kingcount[i]);
        if (message.viceking != null && message.viceking.length)
            for (var i = 0; i < message.viceking.length; ++i)
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.viceking[i]);
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.notifyType);
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.kingType);
        if (message.cbChongGuang != null && message.cbChongGuang.length)
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.cbChongGuang[i]);
        if (message.cbBaWangKing != null && message.cbBaWangKing.length)
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.cbBaWangKing[i]);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameKingData message, length delimited. Does not implicitly {@link ProMJGameKingData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameKingData
     * @static
     * @param {IProMJGameKingData} message ProMJGameKingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameKingData message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameKingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameKingData} ProMJGameKingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameKingData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.mahs && message.mahs.length))
                    message.mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahs.push(reader.int32());
                } else
                    message.mahs.push(reader.int32());
                break;
            case 4:
                if (!(message.downKingScore && message.downKingScore.length))
                    message.downKingScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.downKingScore.push(reader.int32());
                } else
                    message.downKingScore.push(reader.int32());
                break;
            case 5:
                if (!(message.kingcount && message.kingcount.length))
                    message.kingcount = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.kingcount.push(reader.int32());
                } else
                    message.kingcount.push(reader.int32());
                break;
            case 6:
                if (!(message.viceking && message.viceking.length))
                    message.viceking = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.viceking.push(reader.int32());
                } else
                    message.viceking.push(reader.int32());
                break;
            case 7:
                message.notifyType = reader.int32();
                break;
            case 8:
                message.kingType = reader.int32();
                break;
            case 9:
                if (!(message.cbChongGuang && message.cbChongGuang.length))
                    message.cbChongGuang = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbChongGuang.push(reader.int32());
                } else
                    message.cbChongGuang.push(reader.int32());
                break;
            case 10:
                if (!(message.cbBaWangKing && message.cbBaWangKing.length))
                    message.cbBaWangKing = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbBaWangKing.push(reader.int32());
                } else
                    message.cbBaWangKing.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameKingData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameKingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameKingData} ProMJGameKingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameKingData message.
     * @function verify
     * @memberof ProMJGameKingData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameKingData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.mahs != null && message.hasOwnProperty("mahs")) {
            if (!Array.isArray(message.mahs))
                return "mahs: array expected";
            for (var i = 0; i < message.mahs.length; ++i)
                if (!$util.isInteger(message.mahs[i]))
                    return "mahs: integer[] expected";
        }
        if (message.downKingScore != null && message.hasOwnProperty("downKingScore")) {
            if (!Array.isArray(message.downKingScore))
                return "downKingScore: array expected";
            for (var i = 0; i < message.downKingScore.length; ++i)
                if (!$util.isInteger(message.downKingScore[i]))
                    return "downKingScore: integer[] expected";
        }
        if (message.kingcount != null && message.hasOwnProperty("kingcount")) {
            if (!Array.isArray(message.kingcount))
                return "kingcount: array expected";
            for (var i = 0; i < message.kingcount.length; ++i)
                if (!$util.isInteger(message.kingcount[i]))
                    return "kingcount: integer[] expected";
        }
        if (message.viceking != null && message.hasOwnProperty("viceking")) {
            if (!Array.isArray(message.viceking))
                return "viceking: array expected";
            for (var i = 0; i < message.viceking.length; ++i)
                if (!$util.isInteger(message.viceking[i]))
                    return "viceking: integer[] expected";
        }
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            switch (message.notifyType) {
            default:
                return "notifyType: enum value expected";
            case 1:
            case 2:
                break;
            }
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            switch (message.kingType) {
            default:
                return "kingType: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.cbChongGuang != null && message.hasOwnProperty("cbChongGuang")) {
            if (!Array.isArray(message.cbChongGuang))
                return "cbChongGuang: array expected";
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                if (!$util.isInteger(message.cbChongGuang[i]))
                    return "cbChongGuang: integer[] expected";
        }
        if (message.cbBaWangKing != null && message.hasOwnProperty("cbBaWangKing")) {
            if (!Array.isArray(message.cbBaWangKing))
                return "cbBaWangKing: array expected";
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                if (!$util.isInteger(message.cbBaWangKing[i]))
                    return "cbBaWangKing: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProMJGameKingData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameKingData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameKingData} ProMJGameKingData
     */
    ProMJGameKingData.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameKingData)
            return object;
        var message = new $root.ProMJGameKingData();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.mahs) {
            if (!Array.isArray(object.mahs))
                throw TypeError(".ProMJGameKingData.mahs: array expected");
            message.mahs = [];
            for (var i = 0; i < object.mahs.length; ++i)
                message.mahs[i] = object.mahs[i] | 0;
        }
        if (object.downKingScore) {
            if (!Array.isArray(object.downKingScore))
                throw TypeError(".ProMJGameKingData.downKingScore: array expected");
            message.downKingScore = [];
            for (var i = 0; i < object.downKingScore.length; ++i)
                message.downKingScore[i] = object.downKingScore[i] | 0;
        }
        if (object.kingcount) {
            if (!Array.isArray(object.kingcount))
                throw TypeError(".ProMJGameKingData.kingcount: array expected");
            message.kingcount = [];
            for (var i = 0; i < object.kingcount.length; ++i)
                message.kingcount[i] = object.kingcount[i] | 0;
        }
        if (object.viceking) {
            if (!Array.isArray(object.viceking))
                throw TypeError(".ProMJGameKingData.viceking: array expected");
            message.viceking = [];
            for (var i = 0; i < object.viceking.length; ++i)
                message.viceking[i] = object.viceking[i] | 0;
        }
        switch (object.notifyType) {
        case "NORMAL_SEND":
        case 1:
            message.notifyType = 1;
            break;
        case "RECOME_SEND":
        case 2:
            message.notifyType = 2;
            break;
        }
        switch (object.kingType) {
        case "KING_UP":
        case 1:
            message.kingType = 1;
            break;
        case "KING_HUITOU":
        case 2:
            message.kingType = 2;
            break;
        case "KING_MAILEI":
        case 3:
            message.kingType = 3;
            break;
        case "KING_ONESING":
        case 4:
            message.kingType = 4;
            break;
        }
        if (object.cbChongGuang) {
            if (!Array.isArray(object.cbChongGuang))
                throw TypeError(".ProMJGameKingData.cbChongGuang: array expected");
            message.cbChongGuang = [];
            for (var i = 0; i < object.cbChongGuang.length; ++i)
                message.cbChongGuang[i] = object.cbChongGuang[i] | 0;
        }
        if (object.cbBaWangKing) {
            if (!Array.isArray(object.cbBaWangKing))
                throw TypeError(".ProMJGameKingData.cbBaWangKing: array expected");
            message.cbBaWangKing = [];
            for (var i = 0; i < object.cbBaWangKing.length; ++i)
                message.cbBaWangKing[i] = object.cbBaWangKing[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameKingData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameKingData
     * @static
     * @param {ProMJGameKingData} message ProMJGameKingData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameKingData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.mahs = [];
            object.downKingScore = [];
            object.kingcount = [];
            object.viceking = [];
            object.cbChongGuang = [];
            object.cbBaWangKing = [];
        }
        if (options.defaults) {
            object.seat = 0;
            object.notifyType = options.enums === String ? "NORMAL_SEND" : 1;
            object.kingType = options.enums === String ? "KING_UP" : 1;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.mahs && message.mahs.length) {
            object.mahs = [];
            for (var j = 0; j < message.mahs.length; ++j)
                object.mahs[j] = message.mahs[j];
        }
        if (message.downKingScore && message.downKingScore.length) {
            object.downKingScore = [];
            for (var j = 0; j < message.downKingScore.length; ++j)
                object.downKingScore[j] = message.downKingScore[j];
        }
        if (message.kingcount && message.kingcount.length) {
            object.kingcount = [];
            for (var j = 0; j < message.kingcount.length; ++j)
                object.kingcount[j] = message.kingcount[j];
        }
        if (message.viceking && message.viceking.length) {
            object.viceking = [];
            for (var j = 0; j < message.viceking.length; ++j)
                object.viceking[j] = message.viceking[j];
        }
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            object.notifyType = options.enums === String ? $root.SEND_TYPE[message.notifyType] : message.notifyType;
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            object.kingType = options.enums === String ? $root.KIGN_TYPE[message.kingType] : message.kingType;
        if (message.cbChongGuang && message.cbChongGuang.length) {
            object.cbChongGuang = [];
            for (var j = 0; j < message.cbChongGuang.length; ++j)
                object.cbChongGuang[j] = message.cbChongGuang[j];
        }
        if (message.cbBaWangKing && message.cbBaWangKing.length) {
            object.cbBaWangKing = [];
            for (var j = 0; j < message.cbBaWangKing.length; ++j)
                object.cbBaWangKing[j] = message.cbBaWangKing[j];
        }
        return object;
    };

    /**
     * Converts this ProMJGameKingData to JSON.
     * @function toJSON
     * @memberof ProMJGameKingData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameKingData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameKingData.MSGID
     * @enum {string}
     * @property {number} ID=8610 ID value
     */
    ProMJGameKingData.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8610] = "ID"] = 8610;
        return values;
    })();

    return ProMJGameKingData;
})();

$root.ProMJGameOutMahsResponse = (function() {

    /**
     * Properties of a ProMJGameOutMahsResponse.
     * @exports IProMJGameOutMahsResponse
     * @interface IProMJGameOutMahsResponse
     * @property {number|null} [seat] ProMJGameOutMahsResponse seat
     * @property {number|null} [outMah] ProMJGameOutMahsResponse outMah
     * @property {Array.<number>|null} [handmahs] ProMJGameOutMahsResponse handmahs
     */

    /**
     * Constructs a new ProMJGameOutMahsResponse.
     * @exports ProMJGameOutMahsResponse
     * @classdesc Represents a ProMJGameOutMahsResponse.
     * @implements IProMJGameOutMahsResponse
     * @constructor
     * @param {IProMJGameOutMahsResponse=} [properties] Properties to set
     */
    function ProMJGameOutMahsResponse(properties) {
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameOutMahsResponse seat.
     * @member {number} seat
     * @memberof ProMJGameOutMahsResponse
     * @instance
     */
    ProMJGameOutMahsResponse.prototype.seat = 0;

    /**
     * ProMJGameOutMahsResponse outMah.
     * @member {number} outMah
     * @memberof ProMJGameOutMahsResponse
     * @instance
     */
    ProMJGameOutMahsResponse.prototype.outMah = 0;

    /**
     * ProMJGameOutMahsResponse handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProMJGameOutMahsResponse
     * @instance
     */
    ProMJGameOutMahsResponse.prototype.handmahs = $util.emptyArray;

    /**
     * Creates a new ProMJGameOutMahsResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {IProMJGameOutMahsResponse=} [properties] Properties to set
     * @returns {ProMJGameOutMahsResponse} ProMJGameOutMahsResponse instance
     */
    ProMJGameOutMahsResponse.create = function create(properties) {
        return new ProMJGameOutMahsResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameOutMahsResponse message. Does not implicitly {@link ProMJGameOutMahsResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {IProMJGameOutMahsResponse} message ProMJGameOutMahsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOutMahsResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outMah);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.handmahs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameOutMahsResponse message, length delimited. Does not implicitly {@link ProMJGameOutMahsResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {IProMJGameOutMahsResponse} message ProMJGameOutMahsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOutMahsResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameOutMahsResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameOutMahsResponse} ProMJGameOutMahsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOutMahsResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameOutMahsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.outMah = reader.int32();
                break;
            case 4:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameOutMahsResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameOutMahsResponse} ProMJGameOutMahsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOutMahsResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameOutMahsResponse message.
     * @function verify
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameOutMahsResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            if (!$util.isInteger(message.outMah))
                return "outMah: integer expected";
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProMJGameOutMahsResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameOutMahsResponse} ProMJGameOutMahsResponse
     */
    ProMJGameOutMahsResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameOutMahsResponse)
            return object;
        var message = new $root.ProMJGameOutMahsResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.outMah != null)
            message.outMah = object.outMah | 0;
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProMJGameOutMahsResponse.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameOutMahsResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameOutMahsResponse
     * @static
     * @param {ProMJGameOutMahsResponse} message ProMJGameOutMahsResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameOutMahsResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.handmahs = [];
        if (options.defaults) {
            object.seat = 0;
            object.outMah = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            object.outMah = message.outMah;
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        return object;
    };

    /**
     * Converts this ProMJGameOutMahsResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameOutMahsResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameOutMahsResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameOutMahsResponse.MSGID
     * @enum {string}
     * @property {number} ID=8611 ID value
     */
    ProMJGameOutMahsResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8611] = "ID"] = 8611;
        return values;
    })();

    return ProMJGameOutMahsResponse;
})();

$root.ProMJGameTimerPower = (function() {

    /**
     * Properties of a ProMJGameTimerPower.
     * @exports IProMJGameTimerPower
     * @interface IProMJGameTimerPower
     * @property {number|null} [seat] ProMJGameTimerPower seat
     * @property {number|null} [time] ProMJGameTimerPower time
     */

    /**
     * Constructs a new ProMJGameTimerPower.
     * @exports ProMJGameTimerPower
     * @classdesc Represents a ProMJGameTimerPower.
     * @implements IProMJGameTimerPower
     * @constructor
     * @param {IProMJGameTimerPower=} [properties] Properties to set
     */
    function ProMJGameTimerPower(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameTimerPower seat.
     * @member {number} seat
     * @memberof ProMJGameTimerPower
     * @instance
     */
    ProMJGameTimerPower.prototype.seat = 0;

    /**
     * ProMJGameTimerPower time.
     * @member {number} time
     * @memberof ProMJGameTimerPower
     * @instance
     */
    ProMJGameTimerPower.prototype.time = 0;

    /**
     * Creates a new ProMJGameTimerPower instance using the specified properties.
     * @function create
     * @memberof ProMJGameTimerPower
     * @static
     * @param {IProMJGameTimerPower=} [properties] Properties to set
     * @returns {ProMJGameTimerPower} ProMJGameTimerPower instance
     */
    ProMJGameTimerPower.create = function create(properties) {
        return new ProMJGameTimerPower(properties);
    };

    /**
     * Encodes the specified ProMJGameTimerPower message. Does not implicitly {@link ProMJGameTimerPower.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameTimerPower
     * @static
     * @param {IProMJGameTimerPower} message ProMJGameTimerPower message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameTimerPower.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameTimerPower message, length delimited. Does not implicitly {@link ProMJGameTimerPower.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameTimerPower
     * @static
     * @param {IProMJGameTimerPower} message ProMJGameTimerPower message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameTimerPower.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameTimerPower message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameTimerPower
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameTimerPower} ProMJGameTimerPower
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameTimerPower.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameTimerPower();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameTimerPower message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameTimerPower
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameTimerPower} ProMJGameTimerPower
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameTimerPower.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameTimerPower message.
     * @function verify
     * @memberof ProMJGameTimerPower
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameTimerPower.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameTimerPower message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameTimerPower
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameTimerPower} ProMJGameTimerPower
     */
    ProMJGameTimerPower.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameTimerPower)
            return object;
        var message = new $root.ProMJGameTimerPower();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameTimerPower message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameTimerPower
     * @static
     * @param {ProMJGameTimerPower} message ProMJGameTimerPower
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameTimerPower.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this ProMJGameTimerPower to JSON.
     * @function toJSON
     * @memberof ProMJGameTimerPower
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameTimerPower.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameTimerPower.MSGID
     * @enum {string}
     * @property {number} ID=8612 ID value
     */
    ProMJGameTimerPower.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8612] = "ID"] = 8612;
        return values;
    })();

    return ProMJGameTimerPower;
})();

$root.ProMJGameOperateNotify = (function() {

    /**
     * Properties of a ProMJGameOperateNotify.
     * @exports IProMJGameOperateNotify
     * @interface IProMJGameOperateNotify
     * @property {number|null} [resumeSeat] ProMJGameOperateNotify resumeSeat
     * @property {number|null} [ActionMask] ProMJGameOperateNotify ActionMask
     * @property {number|null} [ActionCard] ProMJGameOperateNotify ActionCard
     * @property {number|null} [time] ProMJGameOperateNotify time
     * @property {number|null} [operateseat] ProMJGameOperateNotify operateseat
     */

    /**
     * Constructs a new ProMJGameOperateNotify.
     * @exports ProMJGameOperateNotify
     * @classdesc Represents a ProMJGameOperateNotify.
     * @implements IProMJGameOperateNotify
     * @constructor
     * @param {IProMJGameOperateNotify=} [properties] Properties to set
     */
    function ProMJGameOperateNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameOperateNotify resumeSeat.
     * @member {number} resumeSeat
     * @memberof ProMJGameOperateNotify
     * @instance
     */
    ProMJGameOperateNotify.prototype.resumeSeat = 0;

    /**
     * ProMJGameOperateNotify ActionMask.
     * @member {number} ActionMask
     * @memberof ProMJGameOperateNotify
     * @instance
     */
    ProMJGameOperateNotify.prototype.ActionMask = 0;

    /**
     * ProMJGameOperateNotify ActionCard.
     * @member {number} ActionCard
     * @memberof ProMJGameOperateNotify
     * @instance
     */
    ProMJGameOperateNotify.prototype.ActionCard = 0;

    /**
     * ProMJGameOperateNotify time.
     * @member {number} time
     * @memberof ProMJGameOperateNotify
     * @instance
     */
    ProMJGameOperateNotify.prototype.time = 0;

    /**
     * ProMJGameOperateNotify operateseat.
     * @member {number} operateseat
     * @memberof ProMJGameOperateNotify
     * @instance
     */
    ProMJGameOperateNotify.prototype.operateseat = 0;

    /**
     * Creates a new ProMJGameOperateNotify instance using the specified properties.
     * @function create
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {IProMJGameOperateNotify=} [properties] Properties to set
     * @returns {ProMJGameOperateNotify} ProMJGameOperateNotify instance
     */
    ProMJGameOperateNotify.create = function create(properties) {
        return new ProMJGameOperateNotify(properties);
    };

    /**
     * Encodes the specified ProMJGameOperateNotify message. Does not implicitly {@link ProMJGameOperateNotify.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {IProMJGameOperateNotify} message ProMJGameOperateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.resumeSeat);
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ActionMask);
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ActionCard);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.time);
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.operateseat);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameOperateNotify message, length delimited. Does not implicitly {@link ProMJGameOperateNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {IProMJGameOperateNotify} message ProMJGameOperateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameOperateNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameOperateNotify} ProMJGameOperateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameOperateNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.resumeSeat = reader.int32();
                break;
            case 3:
                message.ActionMask = reader.int32();
                break;
            case 4:
                message.ActionCard = reader.int32();
                break;
            case 5:
                message.time = reader.int32();
                break;
            case 6:
                message.operateseat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameOperateNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameOperateNotify} ProMJGameOperateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameOperateNotify message.
     * @function verify
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameOperateNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            if (!$util.isInteger(message.resumeSeat))
                return "resumeSeat: integer expected";
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            if (!$util.isInteger(message.ActionMask))
                return "ActionMask: integer expected";
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            if (!$util.isInteger(message.ActionCard))
                return "ActionCard: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            if (!$util.isInteger(message.operateseat))
                return "operateseat: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameOperateNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameOperateNotify} ProMJGameOperateNotify
     */
    ProMJGameOperateNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameOperateNotify)
            return object;
        var message = new $root.ProMJGameOperateNotify();
        if (object.resumeSeat != null)
            message.resumeSeat = object.resumeSeat | 0;
        if (object.ActionMask != null)
            message.ActionMask = object.ActionMask | 0;
        if (object.ActionCard != null)
            message.ActionCard = object.ActionCard | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.operateseat != null)
            message.operateseat = object.operateseat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameOperateNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameOperateNotify
     * @static
     * @param {ProMJGameOperateNotify} message ProMJGameOperateNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameOperateNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.resumeSeat = 0;
            object.ActionMask = 0;
            object.ActionCard = 0;
            object.time = 0;
            object.operateseat = 0;
        }
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            object.resumeSeat = message.resumeSeat;
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            object.ActionMask = message.ActionMask;
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            object.ActionCard = message.ActionCard;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            object.operateseat = message.operateseat;
        return object;
    };

    /**
     * Converts this ProMJGameOperateNotify to JSON.
     * @function toJSON
     * @memberof ProMJGameOperateNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameOperateNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameOperateNotify.MSGID
     * @enum {string}
     * @property {number} ID=8613 ID value
     */
    ProMJGameOperateNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8613] = "ID"] = 8613;
        return values;
    })();

    return ProMJGameOperateNotify;
})();

$root.ProMJGameOperateResult = (function() {

    /**
     * Properties of a ProMJGameOperateResult.
     * @exports IProMJGameOperateResult
     * @interface IProMJGameOperateResult
     * @property {number|null} [wOperateUser] ProMJGameOperateResult wOperateUser
     * @property {number|null} [wProvideUser] ProMJGameOperateResult wProvideUser
     * @property {number|null} [wOperateCode] ProMJGameOperateResult wOperateCode
     * @property {number|null} [cbOperateCard] ProMJGameOperateResult cbOperateCard
     * @property {Array.<number>|null} [handmahs] ProMJGameOperateResult handmahs
     * @property {number|null} [handcount] ProMJGameOperateResult handcount
     */

    /**
     * Constructs a new ProMJGameOperateResult.
     * @exports ProMJGameOperateResult
     * @classdesc Represents a ProMJGameOperateResult.
     * @implements IProMJGameOperateResult
     * @constructor
     * @param {IProMJGameOperateResult=} [properties] Properties to set
     */
    function ProMJGameOperateResult(properties) {
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameOperateResult wOperateUser.
     * @member {number} wOperateUser
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.wOperateUser = 0;

    /**
     * ProMJGameOperateResult wProvideUser.
     * @member {number} wProvideUser
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.wProvideUser = 0;

    /**
     * ProMJGameOperateResult wOperateCode.
     * @member {number} wOperateCode
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.wOperateCode = 0;

    /**
     * ProMJGameOperateResult cbOperateCard.
     * @member {number} cbOperateCard
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.cbOperateCard = 0;

    /**
     * ProMJGameOperateResult handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.handmahs = $util.emptyArray;

    /**
     * ProMJGameOperateResult handcount.
     * @member {number} handcount
     * @memberof ProMJGameOperateResult
     * @instance
     */
    ProMJGameOperateResult.prototype.handcount = 0;

    /**
     * Creates a new ProMJGameOperateResult instance using the specified properties.
     * @function create
     * @memberof ProMJGameOperateResult
     * @static
     * @param {IProMJGameOperateResult=} [properties] Properties to set
     * @returns {ProMJGameOperateResult} ProMJGameOperateResult instance
     */
    ProMJGameOperateResult.create = function create(properties) {
        return new ProMJGameOperateResult(properties);
    };

    /**
     * Encodes the specified ProMJGameOperateResult message. Does not implicitly {@link ProMJGameOperateResult.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameOperateResult
     * @static
     * @param {IProMJGameOperateResult} message ProMJGameOperateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.wOperateUser);
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.wProvideUser);
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.wOperateCode);
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cbOperateCard);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.handmahs[i]);
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.handcount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameOperateResult message, length delimited. Does not implicitly {@link ProMJGameOperateResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameOperateResult
     * @static
     * @param {IProMJGameOperateResult} message ProMJGameOperateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameOperateResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameOperateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameOperateResult} ProMJGameOperateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameOperateResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.wOperateUser = reader.int32();
                break;
            case 3:
                message.wProvideUser = reader.int32();
                break;
            case 4:
                message.wOperateCode = reader.int32();
                break;
            case 5:
                message.cbOperateCard = reader.int32();
                break;
            case 6:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            case 7:
                message.handcount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameOperateResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameOperateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameOperateResult} ProMJGameOperateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameOperateResult message.
     * @function verify
     * @memberof ProMJGameOperateResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameOperateResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            if (!$util.isInteger(message.wOperateUser))
                return "wOperateUser: integer expected";
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            if (!$util.isInteger(message.wProvideUser))
                return "wProvideUser: integer expected";
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            if (!$util.isInteger(message.wOperateCode))
                return "wOperateCode: integer expected";
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            if (!$util.isInteger(message.cbOperateCard))
                return "cbOperateCard: integer expected";
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            if (!$util.isInteger(message.handcount))
                return "handcount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameOperateResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameOperateResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameOperateResult} ProMJGameOperateResult
     */
    ProMJGameOperateResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameOperateResult)
            return object;
        var message = new $root.ProMJGameOperateResult();
        if (object.wOperateUser != null)
            message.wOperateUser = object.wOperateUser | 0;
        if (object.wProvideUser != null)
            message.wProvideUser = object.wProvideUser | 0;
        if (object.wOperateCode != null)
            message.wOperateCode = object.wOperateCode | 0;
        if (object.cbOperateCard != null)
            message.cbOperateCard = object.cbOperateCard | 0;
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProMJGameOperateResult.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        if (object.handcount != null)
            message.handcount = object.handcount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameOperateResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameOperateResult
     * @static
     * @param {ProMJGameOperateResult} message ProMJGameOperateResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameOperateResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.handmahs = [];
        if (options.defaults) {
            object.wOperateUser = 0;
            object.wProvideUser = 0;
            object.wOperateCode = 0;
            object.cbOperateCard = 0;
            object.handcount = 0;
        }
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            object.wOperateUser = message.wOperateUser;
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            object.wProvideUser = message.wProvideUser;
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            object.wOperateCode = message.wOperateCode;
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            object.cbOperateCard = message.cbOperateCard;
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            object.handcount = message.handcount;
        return object;
    };

    /**
     * Converts this ProMJGameOperateResult to JSON.
     * @function toJSON
     * @memberof ProMJGameOperateResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameOperateResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameOperateResult.MSGID
     * @enum {string}
     * @property {number} ID=8614 ID value
     */
    ProMJGameOperateResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8614] = "ID"] = 8614;
        return values;
    })();

    return ProMJGameOperateResult;
})();

$root.ProMJGameOperateRequest = (function() {

    /**
     * Properties of a ProMJGameOperateRequest.
     * @exports IProMJGameOperateRequest
     * @interface IProMJGameOperateRequest
     * @property {number|null} [seat] ProMJGameOperateRequest seat
     * @property {number|null} [wOperateCode] ProMJGameOperateRequest wOperateCode
     * @property {number|null} [cbOperateCard] ProMJGameOperateRequest cbOperateCard
     */

    /**
     * Constructs a new ProMJGameOperateRequest.
     * @exports ProMJGameOperateRequest
     * @classdesc Represents a ProMJGameOperateRequest.
     * @implements IProMJGameOperateRequest
     * @constructor
     * @param {IProMJGameOperateRequest=} [properties] Properties to set
     */
    function ProMJGameOperateRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameOperateRequest seat.
     * @member {number} seat
     * @memberof ProMJGameOperateRequest
     * @instance
     */
    ProMJGameOperateRequest.prototype.seat = 0;

    /**
     * ProMJGameOperateRequest wOperateCode.
     * @member {number} wOperateCode
     * @memberof ProMJGameOperateRequest
     * @instance
     */
    ProMJGameOperateRequest.prototype.wOperateCode = 0;

    /**
     * ProMJGameOperateRequest cbOperateCard.
     * @member {number} cbOperateCard
     * @memberof ProMJGameOperateRequest
     * @instance
     */
    ProMJGameOperateRequest.prototype.cbOperateCard = 0;

    /**
     * Creates a new ProMJGameOperateRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {IProMJGameOperateRequest=} [properties] Properties to set
     * @returns {ProMJGameOperateRequest} ProMJGameOperateRequest instance
     */
    ProMJGameOperateRequest.create = function create(properties) {
        return new ProMJGameOperateRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameOperateRequest message. Does not implicitly {@link ProMJGameOperateRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {IProMJGameOperateRequest} message ProMJGameOperateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.wOperateCode);
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cbOperateCard);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameOperateRequest message, length delimited. Does not implicitly {@link ProMJGameOperateRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {IProMJGameOperateRequest} message ProMJGameOperateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOperateRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameOperateRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameOperateRequest} ProMJGameOperateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameOperateRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.wOperateCode = reader.int32();
                break;
            case 4:
                message.cbOperateCard = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameOperateRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameOperateRequest} ProMJGameOperateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOperateRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameOperateRequest message.
     * @function verify
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameOperateRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            if (!$util.isInteger(message.wOperateCode))
                return "wOperateCode: integer expected";
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            if (!$util.isInteger(message.cbOperateCard))
                return "cbOperateCard: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameOperateRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameOperateRequest} ProMJGameOperateRequest
     */
    ProMJGameOperateRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameOperateRequest)
            return object;
        var message = new $root.ProMJGameOperateRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.wOperateCode != null)
            message.wOperateCode = object.wOperateCode | 0;
        if (object.cbOperateCard != null)
            message.cbOperateCard = object.cbOperateCard | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameOperateRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameOperateRequest
     * @static
     * @param {ProMJGameOperateRequest} message ProMJGameOperateRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameOperateRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.wOperateCode = 0;
            object.cbOperateCard = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            object.wOperateCode = message.wOperateCode;
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            object.cbOperateCard = message.cbOperateCard;
        return object;
    };

    /**
     * Converts this ProMJGameOperateRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameOperateRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameOperateRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameOperateRequest.MSGID
     * @enum {string}
     * @property {number} ID=8615 ID value
     */
    ProMJGameOperateRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8615] = "ID"] = 8615;
        return values;
    })();

    return ProMJGameOperateRequest;
})();

$root.ProMJGameTrust = (function() {

    /**
     * Properties of a ProMJGameTrust.
     * @exports IProMJGameTrust
     * @interface IProMJGameTrust
     * @property {number|null} [seat] ProMJGameTrust seat
     * @property {boolean|null} [isTrust] ProMJGameTrust isTrust
     */

    /**
     * Constructs a new ProMJGameTrust.
     * @exports ProMJGameTrust
     * @classdesc Represents a ProMJGameTrust.
     * @implements IProMJGameTrust
     * @constructor
     * @param {IProMJGameTrust=} [properties] Properties to set
     */
    function ProMJGameTrust(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameTrust seat.
     * @member {number} seat
     * @memberof ProMJGameTrust
     * @instance
     */
    ProMJGameTrust.prototype.seat = 0;

    /**
     * ProMJGameTrust isTrust.
     * @member {boolean} isTrust
     * @memberof ProMJGameTrust
     * @instance
     */
    ProMJGameTrust.prototype.isTrust = false;

    /**
     * Creates a new ProMJGameTrust instance using the specified properties.
     * @function create
     * @memberof ProMJGameTrust
     * @static
     * @param {IProMJGameTrust=} [properties] Properties to set
     * @returns {ProMJGameTrust} ProMJGameTrust instance
     */
    ProMJGameTrust.create = function create(properties) {
        return new ProMJGameTrust(properties);
    };

    /**
     * Encodes the specified ProMJGameTrust message. Does not implicitly {@link ProMJGameTrust.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameTrust
     * @static
     * @param {IProMJGameTrust} message ProMJGameTrust message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameTrust.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isTrust);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameTrust message, length delimited. Does not implicitly {@link ProMJGameTrust.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameTrust
     * @static
     * @param {IProMJGameTrust} message ProMJGameTrust message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameTrust.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameTrust message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameTrust
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameTrust} ProMJGameTrust
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameTrust.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameTrust();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.isTrust = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameTrust message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameTrust
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameTrust} ProMJGameTrust
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameTrust.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameTrust message.
     * @function verify
     * @memberof ProMJGameTrust
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameTrust.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            if (typeof message.isTrust !== "boolean")
                return "isTrust: boolean expected";
        return null;
    };

    /**
     * Creates a ProMJGameTrust message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameTrust
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameTrust} ProMJGameTrust
     */
    ProMJGameTrust.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameTrust)
            return object;
        var message = new $root.ProMJGameTrust();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.isTrust != null)
            message.isTrust = Boolean(object.isTrust);
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameTrust message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameTrust
     * @static
     * @param {ProMJGameTrust} message ProMJGameTrust
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameTrust.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.isTrust = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            object.isTrust = message.isTrust;
        return object;
    };

    /**
     * Converts this ProMJGameTrust to JSON.
     * @function toJSON
     * @memberof ProMJGameTrust
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameTrust.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameTrust.MSGID
     * @enum {string}
     * @property {number} ID=8616 ID value
     */
    ProMJGameTrust.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8616] = "ID"] = 8616;
        return values;
    })();

    return ProMJGameTrust;
})();

$root.ProMJGameOutMahRequest = (function() {

    /**
     * Properties of a ProMJGameOutMahRequest.
     * @exports IProMJGameOutMahRequest
     * @interface IProMJGameOutMahRequest
     * @property {number|null} [seat] ProMJGameOutMahRequest seat
     * @property {number|null} [outMah] ProMJGameOutMahRequest outMah
     */

    /**
     * Constructs a new ProMJGameOutMahRequest.
     * @exports ProMJGameOutMahRequest
     * @classdesc Represents a ProMJGameOutMahRequest.
     * @implements IProMJGameOutMahRequest
     * @constructor
     * @param {IProMJGameOutMahRequest=} [properties] Properties to set
     */
    function ProMJGameOutMahRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameOutMahRequest seat.
     * @member {number} seat
     * @memberof ProMJGameOutMahRequest
     * @instance
     */
    ProMJGameOutMahRequest.prototype.seat = 0;

    /**
     * ProMJGameOutMahRequest outMah.
     * @member {number} outMah
     * @memberof ProMJGameOutMahRequest
     * @instance
     */
    ProMJGameOutMahRequest.prototype.outMah = 0;

    /**
     * Creates a new ProMJGameOutMahRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {IProMJGameOutMahRequest=} [properties] Properties to set
     * @returns {ProMJGameOutMahRequest} ProMJGameOutMahRequest instance
     */
    ProMJGameOutMahRequest.create = function create(properties) {
        return new ProMJGameOutMahRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameOutMahRequest message. Does not implicitly {@link ProMJGameOutMahRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {IProMJGameOutMahRequest} message ProMJGameOutMahRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOutMahRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outMah);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameOutMahRequest message, length delimited. Does not implicitly {@link ProMJGameOutMahRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {IProMJGameOutMahRequest} message ProMJGameOutMahRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameOutMahRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameOutMahRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameOutMahRequest} ProMJGameOutMahRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOutMahRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameOutMahRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.outMah = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameOutMahRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameOutMahRequest} ProMJGameOutMahRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameOutMahRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameOutMahRequest message.
     * @function verify
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameOutMahRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            if (!$util.isInteger(message.outMah))
                return "outMah: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameOutMahRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameOutMahRequest} ProMJGameOutMahRequest
     */
    ProMJGameOutMahRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameOutMahRequest)
            return object;
        var message = new $root.ProMJGameOutMahRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.outMah != null)
            message.outMah = object.outMah | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameOutMahRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameOutMahRequest
     * @static
     * @param {ProMJGameOutMahRequest} message ProMJGameOutMahRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameOutMahRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.outMah = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.outMah != null && message.hasOwnProperty("outMah"))
            object.outMah = message.outMah;
        return object;
    };

    /**
     * Converts this ProMJGameOutMahRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameOutMahRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameOutMahRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameOutMahRequest.MSGID
     * @enum {string}
     * @property {number} ID=8617 ID value
     */
    ProMJGameOutMahRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8617] = "ID"] = 8617;
        return values;
    })();

    return ProMJGameOutMahRequest;
})();

$root.ProMJGameCatchCard = (function() {

    /**
     * Properties of a ProMJGameCatchCard.
     * @exports IProMJGameCatchCard
     * @interface IProMJGameCatchCard
     * @property {number|null} [seat] ProMJGameCatchCard seat
     * @property {number|null} [cbCardData] ProMJGameCatchCard cbCardData
     * @property {number|null} [wActionMask] ProMJGameCatchCard wActionMask
     * @property {boolean|null} [cbIsNotGang] ProMJGameCatchCard cbIsNotGang
     * @property {number|null} [cbLeftCount] ProMJGameCatchCard cbLeftCount
     * @property {number|null} [cbOperateCard] ProMJGameCatchCard cbOperateCard
     */

    /**
     * Constructs a new ProMJGameCatchCard.
     * @exports ProMJGameCatchCard
     * @classdesc Represents a ProMJGameCatchCard.
     * @implements IProMJGameCatchCard
     * @constructor
     * @param {IProMJGameCatchCard=} [properties] Properties to set
     */
    function ProMJGameCatchCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameCatchCard seat.
     * @member {number} seat
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.seat = 0;

    /**
     * ProMJGameCatchCard cbCardData.
     * @member {number} cbCardData
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.cbCardData = 0;

    /**
     * ProMJGameCatchCard wActionMask.
     * @member {number} wActionMask
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.wActionMask = 0;

    /**
     * ProMJGameCatchCard cbIsNotGang.
     * @member {boolean} cbIsNotGang
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.cbIsNotGang = false;

    /**
     * ProMJGameCatchCard cbLeftCount.
     * @member {number} cbLeftCount
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.cbLeftCount = 0;

    /**
     * ProMJGameCatchCard cbOperateCard.
     * @member {number} cbOperateCard
     * @memberof ProMJGameCatchCard
     * @instance
     */
    ProMJGameCatchCard.prototype.cbOperateCard = 0;

    /**
     * Creates a new ProMJGameCatchCard instance using the specified properties.
     * @function create
     * @memberof ProMJGameCatchCard
     * @static
     * @param {IProMJGameCatchCard=} [properties] Properties to set
     * @returns {ProMJGameCatchCard} ProMJGameCatchCard instance
     */
    ProMJGameCatchCard.create = function create(properties) {
        return new ProMJGameCatchCard(properties);
    };

    /**
     * Encodes the specified ProMJGameCatchCard message. Does not implicitly {@link ProMJGameCatchCard.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameCatchCard
     * @static
     * @param {IProMJGameCatchCard} message ProMJGameCatchCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameCatchCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cbCardData);
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.wActionMask);
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.cbIsNotGang);
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cbLeftCount);
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.cbOperateCard);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameCatchCard message, length delimited. Does not implicitly {@link ProMJGameCatchCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameCatchCard
     * @static
     * @param {IProMJGameCatchCard} message ProMJGameCatchCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameCatchCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameCatchCard message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameCatchCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameCatchCard} ProMJGameCatchCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameCatchCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameCatchCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.cbCardData = reader.int32();
                break;
            case 4:
                message.wActionMask = reader.int32();
                break;
            case 5:
                message.cbIsNotGang = reader.bool();
                break;
            case 6:
                message.cbLeftCount = reader.int32();
                break;
            case 7:
                message.cbOperateCard = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameCatchCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameCatchCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameCatchCard} ProMJGameCatchCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameCatchCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameCatchCard message.
     * @function verify
     * @memberof ProMJGameCatchCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameCatchCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            if (!$util.isInteger(message.cbCardData))
                return "cbCardData: integer expected";
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            if (!$util.isInteger(message.wActionMask))
                return "wActionMask: integer expected";
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            if (typeof message.cbIsNotGang !== "boolean")
                return "cbIsNotGang: boolean expected";
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            if (!$util.isInteger(message.cbLeftCount))
                return "cbLeftCount: integer expected";
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            if (!$util.isInteger(message.cbOperateCard))
                return "cbOperateCard: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameCatchCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameCatchCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameCatchCard} ProMJGameCatchCard
     */
    ProMJGameCatchCard.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameCatchCard)
            return object;
        var message = new $root.ProMJGameCatchCard();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.cbCardData != null)
            message.cbCardData = object.cbCardData | 0;
        if (object.wActionMask != null)
            message.wActionMask = object.wActionMask | 0;
        if (object.cbIsNotGang != null)
            message.cbIsNotGang = Boolean(object.cbIsNotGang);
        if (object.cbLeftCount != null)
            message.cbLeftCount = object.cbLeftCount | 0;
        if (object.cbOperateCard != null)
            message.cbOperateCard = object.cbOperateCard | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameCatchCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameCatchCard
     * @static
     * @param {ProMJGameCatchCard} message ProMJGameCatchCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameCatchCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.cbCardData = 0;
            object.wActionMask = 0;
            object.cbIsNotGang = false;
            object.cbLeftCount = 0;
            object.cbOperateCard = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            object.cbCardData = message.cbCardData;
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            object.wActionMask = message.wActionMask;
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            object.cbIsNotGang = message.cbIsNotGang;
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            object.cbLeftCount = message.cbLeftCount;
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            object.cbOperateCard = message.cbOperateCard;
        return object;
    };

    /**
     * Converts this ProMJGameCatchCard to JSON.
     * @function toJSON
     * @memberof ProMJGameCatchCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameCatchCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameCatchCard.MSGID
     * @enum {string}
     * @property {number} ID=8618 ID value
     */
    ProMJGameCatchCard.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8618] = "ID"] = 8618;
        return values;
    })();

    return ProMJGameCatchCard;
})();

$root.MahList = (function() {

    /**
     * Properties of a MahList.
     * @exports IMahList
     * @interface IMahList
     * @property {Array.<number>|null} [Mahs] MahList Mahs
     */

    /**
     * Constructs a new MahList.
     * @exports MahList
     * @classdesc Represents a MahList.
     * @implements IMahList
     * @constructor
     * @param {IMahList=} [properties] Properties to set
     */
    function MahList(properties) {
        this.Mahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * MahList Mahs.
     * @member {Array.<number>} Mahs
     * @memberof MahList
     * @instance
     */
    MahList.prototype.Mahs = $util.emptyArray;

    /**
     * Creates a new MahList instance using the specified properties.
     * @function create
     * @memberof MahList
     * @static
     * @param {IMahList=} [properties] Properties to set
     * @returns {MahList} MahList instance
     */
    MahList.create = function create(properties) {
        return new MahList(properties);
    };

    /**
     * Encodes the specified MahList message. Does not implicitly {@link MahList.verify|verify} messages.
     * @function encode
     * @memberof MahList
     * @static
     * @param {IMahList} message MahList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MahList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Mahs != null && message.Mahs.length)
            for (var i = 0; i < message.Mahs.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Mahs[i]);
        return writer;
    };

    /**
     * Encodes the specified MahList message, length delimited. Does not implicitly {@link MahList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof MahList
     * @static
     * @param {IMahList} message MahList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    MahList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a MahList message from the specified reader or buffer.
     * @function decode
     * @memberof MahList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {MahList} MahList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MahList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.MahList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.Mahs && message.Mahs.length))
                    message.Mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.Mahs.push(reader.int32());
                } else
                    message.Mahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a MahList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof MahList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {MahList} MahList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    MahList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a MahList message.
     * @function verify
     * @memberof MahList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    MahList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Mahs != null && message.hasOwnProperty("Mahs")) {
            if (!Array.isArray(message.Mahs))
                return "Mahs: array expected";
            for (var i = 0; i < message.Mahs.length; ++i)
                if (!$util.isInteger(message.Mahs[i]))
                    return "Mahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a MahList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof MahList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {MahList} MahList
     */
    MahList.fromObject = function fromObject(object) {
        if (object instanceof $root.MahList)
            return object;
        var message = new $root.MahList();
        if (object.Mahs) {
            if (!Array.isArray(object.Mahs))
                throw TypeError(".MahList.Mahs: array expected");
            message.Mahs = [];
            for (var i = 0; i < object.Mahs.length; ++i)
                message.Mahs[i] = object.Mahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a MahList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof MahList
     * @static
     * @param {MahList} message MahList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    MahList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Mahs = [];
        if (message.Mahs && message.Mahs.length) {
            object.Mahs = [];
            for (var j = 0; j < message.Mahs.length; ++j)
                object.Mahs[j] = message.Mahs[j];
        }
        return object;
    };

    /**
     * Converts this MahList to JSON.
     * @function toJSON
     * @memberof MahList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    MahList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return MahList;
})();

$root.lAllRoundGameScore = (function() {

    /**
     * Properties of a lAllRoundGameScore.
     * @exports IlAllRoundGameScore
     * @interface IlAllRoundGameScore
     * @property {Array.<number>|null} [score] lAllRoundGameScore score
     */

    /**
     * Constructs a new lAllRoundGameScore.
     * @exports lAllRoundGameScore
     * @classdesc Represents a lAllRoundGameScore.
     * @implements IlAllRoundGameScore
     * @constructor
     * @param {IlAllRoundGameScore=} [properties] Properties to set
     */
    function lAllRoundGameScore(properties) {
        this.score = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * lAllRoundGameScore score.
     * @member {Array.<number>} score
     * @memberof lAllRoundGameScore
     * @instance
     */
    lAllRoundGameScore.prototype.score = $util.emptyArray;

    /**
     * Creates a new lAllRoundGameScore instance using the specified properties.
     * @function create
     * @memberof lAllRoundGameScore
     * @static
     * @param {IlAllRoundGameScore=} [properties] Properties to set
     * @returns {lAllRoundGameScore} lAllRoundGameScore instance
     */
    lAllRoundGameScore.create = function create(properties) {
        return new lAllRoundGameScore(properties);
    };

    /**
     * Encodes the specified lAllRoundGameScore message. Does not implicitly {@link lAllRoundGameScore.verify|verify} messages.
     * @function encode
     * @memberof lAllRoundGameScore
     * @static
     * @param {IlAllRoundGameScore} message lAllRoundGameScore message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    lAllRoundGameScore.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.score != null && message.score.length)
            for (var i = 0; i < message.score.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.score[i]);
        return writer;
    };

    /**
     * Encodes the specified lAllRoundGameScore message, length delimited. Does not implicitly {@link lAllRoundGameScore.verify|verify} messages.
     * @function encodeDelimited
     * @memberof lAllRoundGameScore
     * @static
     * @param {IlAllRoundGameScore} message lAllRoundGameScore message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    lAllRoundGameScore.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a lAllRoundGameScore message from the specified reader or buffer.
     * @function decode
     * @memberof lAllRoundGameScore
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {lAllRoundGameScore} lAllRoundGameScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    lAllRoundGameScore.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.lAllRoundGameScore();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.score && message.score.length))
                    message.score = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.score.push(reader.int32());
                } else
                    message.score.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a lAllRoundGameScore message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof lAllRoundGameScore
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {lAllRoundGameScore} lAllRoundGameScore
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    lAllRoundGameScore.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a lAllRoundGameScore message.
     * @function verify
     * @memberof lAllRoundGameScore
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    lAllRoundGameScore.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.score != null && message.hasOwnProperty("score")) {
            if (!Array.isArray(message.score))
                return "score: array expected";
            for (var i = 0; i < message.score.length; ++i)
                if (!$util.isInteger(message.score[i]))
                    return "score: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a lAllRoundGameScore message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof lAllRoundGameScore
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {lAllRoundGameScore} lAllRoundGameScore
     */
    lAllRoundGameScore.fromObject = function fromObject(object) {
        if (object instanceof $root.lAllRoundGameScore)
            return object;
        var message = new $root.lAllRoundGameScore();
        if (object.score) {
            if (!Array.isArray(object.score))
                throw TypeError(".lAllRoundGameScore.score: array expected");
            message.score = [];
            for (var i = 0; i < object.score.length; ++i)
                message.score[i] = object.score[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a lAllRoundGameScore message. Also converts values to other types if specified.
     * @function toObject
     * @memberof lAllRoundGameScore
     * @static
     * @param {lAllRoundGameScore} message lAllRoundGameScore
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    lAllRoundGameScore.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.score = [];
        if (message.score && message.score.length) {
            object.score = [];
            for (var j = 0; j < message.score.length; ++j)
                object.score[j] = message.score[j];
        }
        return object;
    };

    /**
     * Converts this lAllRoundGameScore to JSON.
     * @function toJSON
     * @memberof lAllRoundGameScore
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    lAllRoundGameScore.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return lAllRoundGameScore;
})();

$root.ProMJGameEnd = (function() {

    /**
     * Properties of a ProMJGameEnd.
     * @exports IProMJGameEnd
     * @interface IProMJGameEnd
     * @property {number|null} [lGameTax] ProMJGameEnd lGameTax
     * @property {Array.<number>|null} [cbChongGuang] ProMJGameEnd cbChongGuang
     * @property {Array.<number>|null} [cbBaWangKing] ProMJGameEnd cbBaWangKing
     * @property {number|null} [wProvideUser] ProMJGameEnd wProvideUser
     * @property {number|null} [cbChiHuCard] ProMJGameEnd cbChiHuCard
     * @property {Array.<number>|null} [dwChiHuKind] ProMJGameEnd dwChiHuKind
     * @property {Array.<number>|null} [dwChiHuRight] ProMJGameEnd dwChiHuRight
     * @property {Array.<number>|null} [lGameScore] ProMJGameEnd lGameScore
     * @property {Array.<number>|null} [lDownScore] ProMJGameEnd lDownScore
     * @property {Array.<number>|null} [lGameScoreEx] ProMJGameEnd lGameScoreEx
     * @property {Array.<number>|null} [lGameHuScore] ProMJGameEnd lGameHuScore
     * @property {Array.<IMahList>|null} [cbCardData] ProMJGameEnd cbCardData
     * @property {Array.<number>|null} [lGangScore] ProMJGameEnd lGangScore
     * @property {Array.<number>|null} [lAllScore] ProMJGameEnd lAllScore
     * @property {boolean|null} [bRoundEnd] ProMJGameEnd bRoundEnd
     * @property {Array.<number>|null} [lHuiTouScore] ProMJGameEnd lHuiTouScore
     * @property {boolean|null} [bShowEnd] ProMJGameEnd bShowEnd
     * @property {Array.<number>|null} [cbJiangMaCardData] ProMJGameEnd cbJiangMaCardData
     * @property {Array.<number>|null} [lGamejiangmaScore] ProMJGameEnd lGamejiangmaScore
     * @property {boolean|null} [bIsFangPaoRule] ProMJGameEnd bIsFangPaoRule
     * @property {Array.<IlAllRoundGameScore>|null} [lRoundGameScore] ProMJGameEnd lRoundGameScore
     */

    /**
     * Constructs a new ProMJGameEnd.
     * @exports ProMJGameEnd
     * @classdesc Represents a ProMJGameEnd.
     * @implements IProMJGameEnd
     * @constructor
     * @param {IProMJGameEnd=} [properties] Properties to set
     */
    function ProMJGameEnd(properties) {
        this.cbChongGuang = [];
        this.cbBaWangKing = [];
        this.dwChiHuKind = [];
        this.dwChiHuRight = [];
        this.lGameScore = [];
        this.lDownScore = [];
        this.lGameScoreEx = [];
        this.lGameHuScore = [];
        this.cbCardData = [];
        this.lGangScore = [];
        this.lAllScore = [];
        this.lHuiTouScore = [];
        this.cbJiangMaCardData = [];
        this.lGamejiangmaScore = [];
        this.lRoundGameScore = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameEnd lGameTax.
     * @member {number} lGameTax
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGameTax = 0;

    /**
     * ProMJGameEnd cbChongGuang.
     * @member {Array.<number>} cbChongGuang
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.cbChongGuang = $util.emptyArray;

    /**
     * ProMJGameEnd cbBaWangKing.
     * @member {Array.<number>} cbBaWangKing
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.cbBaWangKing = $util.emptyArray;

    /**
     * ProMJGameEnd wProvideUser.
     * @member {number} wProvideUser
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.wProvideUser = 0;

    /**
     * ProMJGameEnd cbChiHuCard.
     * @member {number} cbChiHuCard
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.cbChiHuCard = 0;

    /**
     * ProMJGameEnd dwChiHuKind.
     * @member {Array.<number>} dwChiHuKind
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.dwChiHuKind = $util.emptyArray;

    /**
     * ProMJGameEnd dwChiHuRight.
     * @member {Array.<number>} dwChiHuRight
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.dwChiHuRight = $util.emptyArray;

    /**
     * ProMJGameEnd lGameScore.
     * @member {Array.<number>} lGameScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGameScore = $util.emptyArray;

    /**
     * ProMJGameEnd lDownScore.
     * @member {Array.<number>} lDownScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lDownScore = $util.emptyArray;

    /**
     * ProMJGameEnd lGameScoreEx.
     * @member {Array.<number>} lGameScoreEx
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGameScoreEx = $util.emptyArray;

    /**
     * ProMJGameEnd lGameHuScore.
     * @member {Array.<number>} lGameHuScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGameHuScore = $util.emptyArray;

    /**
     * ProMJGameEnd cbCardData.
     * @member {Array.<IMahList>} cbCardData
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.cbCardData = $util.emptyArray;

    /**
     * ProMJGameEnd lGangScore.
     * @member {Array.<number>} lGangScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGangScore = $util.emptyArray;

    /**
     * ProMJGameEnd lAllScore.
     * @member {Array.<number>} lAllScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lAllScore = $util.emptyArray;

    /**
     * ProMJGameEnd bRoundEnd.
     * @member {boolean} bRoundEnd
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.bRoundEnd = false;

    /**
     * ProMJGameEnd lHuiTouScore.
     * @member {Array.<number>} lHuiTouScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lHuiTouScore = $util.emptyArray;

    /**
     * ProMJGameEnd bShowEnd.
     * @member {boolean} bShowEnd
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.bShowEnd = false;

    /**
     * ProMJGameEnd cbJiangMaCardData.
     * @member {Array.<number>} cbJiangMaCardData
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.cbJiangMaCardData = $util.emptyArray;

    /**
     * ProMJGameEnd lGamejiangmaScore.
     * @member {Array.<number>} lGamejiangmaScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lGamejiangmaScore = $util.emptyArray;

    /**
     * ProMJGameEnd bIsFangPaoRule.
     * @member {boolean} bIsFangPaoRule
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.bIsFangPaoRule = false;

    /**
     * ProMJGameEnd lRoundGameScore.
     * @member {Array.<IlAllRoundGameScore>} lRoundGameScore
     * @memberof ProMJGameEnd
     * @instance
     */
    ProMJGameEnd.prototype.lRoundGameScore = $util.emptyArray;

    /**
     * Creates a new ProMJGameEnd instance using the specified properties.
     * @function create
     * @memberof ProMJGameEnd
     * @static
     * @param {IProMJGameEnd=} [properties] Properties to set
     * @returns {ProMJGameEnd} ProMJGameEnd instance
     */
    ProMJGameEnd.create = function create(properties) {
        return new ProMJGameEnd(properties);
    };

    /**
     * Encodes the specified ProMJGameEnd message. Does not implicitly {@link ProMJGameEnd.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameEnd
     * @static
     * @param {IProMJGameEnd} message ProMJGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameEnd.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lGameTax);
        if (message.cbChongGuang != null && message.cbChongGuang.length)
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cbChongGuang[i]);
        if (message.cbBaWangKing != null && message.cbBaWangKing.length)
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cbBaWangKing[i]);
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.wProvideUser);
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cbChiHuCard);
        if (message.dwChiHuKind != null && message.dwChiHuKind.length)
            for (var i = 0; i < message.dwChiHuKind.length; ++i)
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.dwChiHuKind[i]);
        if (message.dwChiHuRight != null && message.dwChiHuRight.length)
            for (var i = 0; i < message.dwChiHuRight.length; ++i)
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.dwChiHuRight[i]);
        if (message.lGameScore != null && message.lGameScore.length)
            for (var i = 0; i < message.lGameScore.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.lGameScore[i]);
        if (message.lDownScore != null && message.lDownScore.length)
            for (var i = 0; i < message.lDownScore.length; ++i)
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.lDownScore[i]);
        if (message.lGameScoreEx != null && message.lGameScoreEx.length)
            for (var i = 0; i < message.lGameScoreEx.length; ++i)
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.lGameScoreEx[i]);
        if (message.lGameHuScore != null && message.lGameHuScore.length)
            for (var i = 0; i < message.lGameHuScore.length; ++i)
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.lGameHuScore[i]);
        if (message.cbCardData != null && message.cbCardData.length)
            for (var i = 0; i < message.cbCardData.length; ++i)
                $root.MahList.encode(message.cbCardData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.lGangScore != null && message.lGangScore.length)
            for (var i = 0; i < message.lGangScore.length; ++i)
                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.lGangScore[i]);
        if (message.lAllScore != null && message.lAllScore.length)
            for (var i = 0; i < message.lAllScore.length; ++i)
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.lAllScore[i]);
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.bRoundEnd);
        if (message.lHuiTouScore != null && message.lHuiTouScore.length)
            for (var i = 0; i < message.lHuiTouScore.length; ++i)
                writer.uint32(/* id 17, wireType 0 =*/136).int32(message.lHuiTouScore[i]);
        if (message.bShowEnd != null && message.hasOwnProperty("bShowEnd"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.bShowEnd);
        if (message.cbJiangMaCardData != null && message.cbJiangMaCardData.length)
            for (var i = 0; i < message.cbJiangMaCardData.length; ++i)
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.cbJiangMaCardData[i]);
        if (message.lGamejiangmaScore != null && message.lGamejiangmaScore.length)
            for (var i = 0; i < message.lGamejiangmaScore.length; ++i)
                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.lGamejiangmaScore[i]);
        if (message.bIsFangPaoRule != null && message.hasOwnProperty("bIsFangPaoRule"))
            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.bIsFangPaoRule);
        if (message.lRoundGameScore != null && message.lRoundGameScore.length)
            for (var i = 0; i < message.lRoundGameScore.length; ++i)
                $root.lAllRoundGameScore.encode(message.lRoundGameScore[i], writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProMJGameEnd message, length delimited. Does not implicitly {@link ProMJGameEnd.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameEnd
     * @static
     * @param {IProMJGameEnd} message ProMJGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameEnd.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameEnd message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameEnd} ProMJGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameEnd.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameEnd();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.lGameTax = reader.int32();
                break;
            case 3:
                if (!(message.cbChongGuang && message.cbChongGuang.length))
                    message.cbChongGuang = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbChongGuang.push(reader.int32());
                } else
                    message.cbChongGuang.push(reader.int32());
                break;
            case 4:
                if (!(message.cbBaWangKing && message.cbBaWangKing.length))
                    message.cbBaWangKing = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbBaWangKing.push(reader.int32());
                } else
                    message.cbBaWangKing.push(reader.int32());
                break;
            case 5:
                message.wProvideUser = reader.int32();
                break;
            case 6:
                message.cbChiHuCard = reader.int32();
                break;
            case 7:
                if (!(message.dwChiHuKind && message.dwChiHuKind.length))
                    message.dwChiHuKind = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.dwChiHuKind.push(reader.int32());
                } else
                    message.dwChiHuKind.push(reader.int32());
                break;
            case 8:
                if (!(message.dwChiHuRight && message.dwChiHuRight.length))
                    message.dwChiHuRight = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.dwChiHuRight.push(reader.int32());
                } else
                    message.dwChiHuRight.push(reader.int32());
                break;
            case 9:
                if (!(message.lGameScore && message.lGameScore.length))
                    message.lGameScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lGameScore.push(reader.int32());
                } else
                    message.lGameScore.push(reader.int32());
                break;
            case 10:
                if (!(message.lDownScore && message.lDownScore.length))
                    message.lDownScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lDownScore.push(reader.int32());
                } else
                    message.lDownScore.push(reader.int32());
                break;
            case 11:
                if (!(message.lGameScoreEx && message.lGameScoreEx.length))
                    message.lGameScoreEx = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lGameScoreEx.push(reader.int32());
                } else
                    message.lGameScoreEx.push(reader.int32());
                break;
            case 12:
                if (!(message.lGameHuScore && message.lGameHuScore.length))
                    message.lGameHuScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lGameHuScore.push(reader.int32());
                } else
                    message.lGameHuScore.push(reader.int32());
                break;
            case 13:
                if (!(message.cbCardData && message.cbCardData.length))
                    message.cbCardData = [];
                message.cbCardData.push($root.MahList.decode(reader, reader.uint32()));
                break;
            case 14:
                if (!(message.lGangScore && message.lGangScore.length))
                    message.lGangScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lGangScore.push(reader.int32());
                } else
                    message.lGangScore.push(reader.int32());
                break;
            case 15:
                if (!(message.lAllScore && message.lAllScore.length))
                    message.lAllScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lAllScore.push(reader.int32());
                } else
                    message.lAllScore.push(reader.int32());
                break;
            case 16:
                message.bRoundEnd = reader.bool();
                break;
            case 17:
                if (!(message.lHuiTouScore && message.lHuiTouScore.length))
                    message.lHuiTouScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lHuiTouScore.push(reader.int32());
                } else
                    message.lHuiTouScore.push(reader.int32());
                break;
            case 18:
                message.bShowEnd = reader.bool();
                break;
            case 19:
                if (!(message.cbJiangMaCardData && message.cbJiangMaCardData.length))
                    message.cbJiangMaCardData = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbJiangMaCardData.push(reader.int32());
                } else
                    message.cbJiangMaCardData.push(reader.int32());
                break;
            case 20:
                if (!(message.lGamejiangmaScore && message.lGamejiangmaScore.length))
                    message.lGamejiangmaScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lGamejiangmaScore.push(reader.int32());
                } else
                    message.lGamejiangmaScore.push(reader.int32());
                break;
            case 21:
                message.bIsFangPaoRule = reader.bool();
                break;
            case 22:
                if (!(message.lRoundGameScore && message.lRoundGameScore.length))
                    message.lRoundGameScore = [];
                message.lRoundGameScore.push($root.lAllRoundGameScore.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameEnd message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameEnd} ProMJGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameEnd.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameEnd message.
     * @function verify
     * @memberof ProMJGameEnd
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameEnd.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            if (!$util.isInteger(message.lGameTax))
                return "lGameTax: integer expected";
        if (message.cbChongGuang != null && message.hasOwnProperty("cbChongGuang")) {
            if (!Array.isArray(message.cbChongGuang))
                return "cbChongGuang: array expected";
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                if (!$util.isInteger(message.cbChongGuang[i]))
                    return "cbChongGuang: integer[] expected";
        }
        if (message.cbBaWangKing != null && message.hasOwnProperty("cbBaWangKing")) {
            if (!Array.isArray(message.cbBaWangKing))
                return "cbBaWangKing: array expected";
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                if (!$util.isInteger(message.cbBaWangKing[i]))
                    return "cbBaWangKing: integer[] expected";
        }
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            if (!$util.isInteger(message.wProvideUser))
                return "wProvideUser: integer expected";
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            if (!$util.isInteger(message.cbChiHuCard))
                return "cbChiHuCard: integer expected";
        if (message.dwChiHuKind != null && message.hasOwnProperty("dwChiHuKind")) {
            if (!Array.isArray(message.dwChiHuKind))
                return "dwChiHuKind: array expected";
            for (var i = 0; i < message.dwChiHuKind.length; ++i)
                if (!$util.isInteger(message.dwChiHuKind[i]))
                    return "dwChiHuKind: integer[] expected";
        }
        if (message.dwChiHuRight != null && message.hasOwnProperty("dwChiHuRight")) {
            if (!Array.isArray(message.dwChiHuRight))
                return "dwChiHuRight: array expected";
            for (var i = 0; i < message.dwChiHuRight.length; ++i)
                if (!$util.isInteger(message.dwChiHuRight[i]))
                    return "dwChiHuRight: integer[] expected";
        }
        if (message.lGameScore != null && message.hasOwnProperty("lGameScore")) {
            if (!Array.isArray(message.lGameScore))
                return "lGameScore: array expected";
            for (var i = 0; i < message.lGameScore.length; ++i)
                if (!$util.isInteger(message.lGameScore[i]))
                    return "lGameScore: integer[] expected";
        }
        if (message.lDownScore != null && message.hasOwnProperty("lDownScore")) {
            if (!Array.isArray(message.lDownScore))
                return "lDownScore: array expected";
            for (var i = 0; i < message.lDownScore.length; ++i)
                if (!$util.isInteger(message.lDownScore[i]))
                    return "lDownScore: integer[] expected";
        }
        if (message.lGameScoreEx != null && message.hasOwnProperty("lGameScoreEx")) {
            if (!Array.isArray(message.lGameScoreEx))
                return "lGameScoreEx: array expected";
            for (var i = 0; i < message.lGameScoreEx.length; ++i)
                if (!$util.isInteger(message.lGameScoreEx[i]))
                    return "lGameScoreEx: integer[] expected";
        }
        if (message.lGameHuScore != null && message.hasOwnProperty("lGameHuScore")) {
            if (!Array.isArray(message.lGameHuScore))
                return "lGameHuScore: array expected";
            for (var i = 0; i < message.lGameHuScore.length; ++i)
                if (!$util.isInteger(message.lGameHuScore[i]))
                    return "lGameHuScore: integer[] expected";
        }
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData")) {
            if (!Array.isArray(message.cbCardData))
                return "cbCardData: array expected";
            for (var i = 0; i < message.cbCardData.length; ++i) {
                var error = $root.MahList.verify(message.cbCardData[i]);
                if (error)
                    return "cbCardData." + error;
            }
        }
        if (message.lGangScore != null && message.hasOwnProperty("lGangScore")) {
            if (!Array.isArray(message.lGangScore))
                return "lGangScore: array expected";
            for (var i = 0; i < message.lGangScore.length; ++i)
                if (!$util.isInteger(message.lGangScore[i]))
                    return "lGangScore: integer[] expected";
        }
        if (message.lAllScore != null && message.hasOwnProperty("lAllScore")) {
            if (!Array.isArray(message.lAllScore))
                return "lAllScore: array expected";
            for (var i = 0; i < message.lAllScore.length; ++i)
                if (!$util.isInteger(message.lAllScore[i]))
                    return "lAllScore: integer[] expected";
        }
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            if (typeof message.bRoundEnd !== "boolean")
                return "bRoundEnd: boolean expected";
        if (message.lHuiTouScore != null && message.hasOwnProperty("lHuiTouScore")) {
            if (!Array.isArray(message.lHuiTouScore))
                return "lHuiTouScore: array expected";
            for (var i = 0; i < message.lHuiTouScore.length; ++i)
                if (!$util.isInteger(message.lHuiTouScore[i]))
                    return "lHuiTouScore: integer[] expected";
        }
        if (message.bShowEnd != null && message.hasOwnProperty("bShowEnd"))
            if (typeof message.bShowEnd !== "boolean")
                return "bShowEnd: boolean expected";
        if (message.cbJiangMaCardData != null && message.hasOwnProperty("cbJiangMaCardData")) {
            if (!Array.isArray(message.cbJiangMaCardData))
                return "cbJiangMaCardData: array expected";
            for (var i = 0; i < message.cbJiangMaCardData.length; ++i)
                if (!$util.isInteger(message.cbJiangMaCardData[i]))
                    return "cbJiangMaCardData: integer[] expected";
        }
        if (message.lGamejiangmaScore != null && message.hasOwnProperty("lGamejiangmaScore")) {
            if (!Array.isArray(message.lGamejiangmaScore))
                return "lGamejiangmaScore: array expected";
            for (var i = 0; i < message.lGamejiangmaScore.length; ++i)
                if (!$util.isInteger(message.lGamejiangmaScore[i]))
                    return "lGamejiangmaScore: integer[] expected";
        }
        if (message.bIsFangPaoRule != null && message.hasOwnProperty("bIsFangPaoRule"))
            if (typeof message.bIsFangPaoRule !== "boolean")
                return "bIsFangPaoRule: boolean expected";
        if (message.lRoundGameScore != null && message.hasOwnProperty("lRoundGameScore")) {
            if (!Array.isArray(message.lRoundGameScore))
                return "lRoundGameScore: array expected";
            for (var i = 0; i < message.lRoundGameScore.length; ++i) {
                var error = $root.lAllRoundGameScore.verify(message.lRoundGameScore[i]);
                if (error)
                    return "lRoundGameScore." + error;
            }
        }
        return null;
    };

    /**
     * Creates a ProMJGameEnd message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameEnd
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameEnd} ProMJGameEnd
     */
    ProMJGameEnd.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameEnd)
            return object;
        var message = new $root.ProMJGameEnd();
        if (object.lGameTax != null)
            message.lGameTax = object.lGameTax | 0;
        if (object.cbChongGuang) {
            if (!Array.isArray(object.cbChongGuang))
                throw TypeError(".ProMJGameEnd.cbChongGuang: array expected");
            message.cbChongGuang = [];
            for (var i = 0; i < object.cbChongGuang.length; ++i)
                message.cbChongGuang[i] = object.cbChongGuang[i] | 0;
        }
        if (object.cbBaWangKing) {
            if (!Array.isArray(object.cbBaWangKing))
                throw TypeError(".ProMJGameEnd.cbBaWangKing: array expected");
            message.cbBaWangKing = [];
            for (var i = 0; i < object.cbBaWangKing.length; ++i)
                message.cbBaWangKing[i] = object.cbBaWangKing[i] | 0;
        }
        if (object.wProvideUser != null)
            message.wProvideUser = object.wProvideUser | 0;
        if (object.cbChiHuCard != null)
            message.cbChiHuCard = object.cbChiHuCard | 0;
        if (object.dwChiHuKind) {
            if (!Array.isArray(object.dwChiHuKind))
                throw TypeError(".ProMJGameEnd.dwChiHuKind: array expected");
            message.dwChiHuKind = [];
            for (var i = 0; i < object.dwChiHuKind.length; ++i)
                message.dwChiHuKind[i] = object.dwChiHuKind[i] | 0;
        }
        if (object.dwChiHuRight) {
            if (!Array.isArray(object.dwChiHuRight))
                throw TypeError(".ProMJGameEnd.dwChiHuRight: array expected");
            message.dwChiHuRight = [];
            for (var i = 0; i < object.dwChiHuRight.length; ++i)
                message.dwChiHuRight[i] = object.dwChiHuRight[i] | 0;
        }
        if (object.lGameScore) {
            if (!Array.isArray(object.lGameScore))
                throw TypeError(".ProMJGameEnd.lGameScore: array expected");
            message.lGameScore = [];
            for (var i = 0; i < object.lGameScore.length; ++i)
                message.lGameScore[i] = object.lGameScore[i] | 0;
        }
        if (object.lDownScore) {
            if (!Array.isArray(object.lDownScore))
                throw TypeError(".ProMJGameEnd.lDownScore: array expected");
            message.lDownScore = [];
            for (var i = 0; i < object.lDownScore.length; ++i)
                message.lDownScore[i] = object.lDownScore[i] | 0;
        }
        if (object.lGameScoreEx) {
            if (!Array.isArray(object.lGameScoreEx))
                throw TypeError(".ProMJGameEnd.lGameScoreEx: array expected");
            message.lGameScoreEx = [];
            for (var i = 0; i < object.lGameScoreEx.length; ++i)
                message.lGameScoreEx[i] = object.lGameScoreEx[i] | 0;
        }
        if (object.lGameHuScore) {
            if (!Array.isArray(object.lGameHuScore))
                throw TypeError(".ProMJGameEnd.lGameHuScore: array expected");
            message.lGameHuScore = [];
            for (var i = 0; i < object.lGameHuScore.length; ++i)
                message.lGameHuScore[i] = object.lGameHuScore[i] | 0;
        }
        if (object.cbCardData) {
            if (!Array.isArray(object.cbCardData))
                throw TypeError(".ProMJGameEnd.cbCardData: array expected");
            message.cbCardData = [];
            for (var i = 0; i < object.cbCardData.length; ++i) {
                if (typeof object.cbCardData[i] !== "object")
                    throw TypeError(".ProMJGameEnd.cbCardData: object expected");
                message.cbCardData[i] = $root.MahList.fromObject(object.cbCardData[i]);
            }
        }
        if (object.lGangScore) {
            if (!Array.isArray(object.lGangScore))
                throw TypeError(".ProMJGameEnd.lGangScore: array expected");
            message.lGangScore = [];
            for (var i = 0; i < object.lGangScore.length; ++i)
                message.lGangScore[i] = object.lGangScore[i] | 0;
        }
        if (object.lAllScore) {
            if (!Array.isArray(object.lAllScore))
                throw TypeError(".ProMJGameEnd.lAllScore: array expected");
            message.lAllScore = [];
            for (var i = 0; i < object.lAllScore.length; ++i)
                message.lAllScore[i] = object.lAllScore[i] | 0;
        }
        if (object.bRoundEnd != null)
            message.bRoundEnd = Boolean(object.bRoundEnd);
        if (object.lHuiTouScore) {
            if (!Array.isArray(object.lHuiTouScore))
                throw TypeError(".ProMJGameEnd.lHuiTouScore: array expected");
            message.lHuiTouScore = [];
            for (var i = 0; i < object.lHuiTouScore.length; ++i)
                message.lHuiTouScore[i] = object.lHuiTouScore[i] | 0;
        }
        if (object.bShowEnd != null)
            message.bShowEnd = Boolean(object.bShowEnd);
        if (object.cbJiangMaCardData) {
            if (!Array.isArray(object.cbJiangMaCardData))
                throw TypeError(".ProMJGameEnd.cbJiangMaCardData: array expected");
            message.cbJiangMaCardData = [];
            for (var i = 0; i < object.cbJiangMaCardData.length; ++i)
                message.cbJiangMaCardData[i] = object.cbJiangMaCardData[i] | 0;
        }
        if (object.lGamejiangmaScore) {
            if (!Array.isArray(object.lGamejiangmaScore))
                throw TypeError(".ProMJGameEnd.lGamejiangmaScore: array expected");
            message.lGamejiangmaScore = [];
            for (var i = 0; i < object.lGamejiangmaScore.length; ++i)
                message.lGamejiangmaScore[i] = object.lGamejiangmaScore[i] | 0;
        }
        if (object.bIsFangPaoRule != null)
            message.bIsFangPaoRule = Boolean(object.bIsFangPaoRule);
        if (object.lRoundGameScore) {
            if (!Array.isArray(object.lRoundGameScore))
                throw TypeError(".ProMJGameEnd.lRoundGameScore: array expected");
            message.lRoundGameScore = [];
            for (var i = 0; i < object.lRoundGameScore.length; ++i) {
                if (typeof object.lRoundGameScore[i] !== "object")
                    throw TypeError(".ProMJGameEnd.lRoundGameScore: object expected");
                message.lRoundGameScore[i] = $root.lAllRoundGameScore.fromObject(object.lRoundGameScore[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameEnd message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameEnd
     * @static
     * @param {ProMJGameEnd} message ProMJGameEnd
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameEnd.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.cbChongGuang = [];
            object.cbBaWangKing = [];
            object.dwChiHuKind = [];
            object.dwChiHuRight = [];
            object.lGameScore = [];
            object.lDownScore = [];
            object.lGameScoreEx = [];
            object.lGameHuScore = [];
            object.cbCardData = [];
            object.lGangScore = [];
            object.lAllScore = [];
            object.lHuiTouScore = [];
            object.cbJiangMaCardData = [];
            object.lGamejiangmaScore = [];
            object.lRoundGameScore = [];
        }
        if (options.defaults) {
            object.lGameTax = 0;
            object.wProvideUser = 0;
            object.cbChiHuCard = 0;
            object.bRoundEnd = false;
            object.bShowEnd = false;
            object.bIsFangPaoRule = false;
        }
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            object.lGameTax = message.lGameTax;
        if (message.cbChongGuang && message.cbChongGuang.length) {
            object.cbChongGuang = [];
            for (var j = 0; j < message.cbChongGuang.length; ++j)
                object.cbChongGuang[j] = message.cbChongGuang[j];
        }
        if (message.cbBaWangKing && message.cbBaWangKing.length) {
            object.cbBaWangKing = [];
            for (var j = 0; j < message.cbBaWangKing.length; ++j)
                object.cbBaWangKing[j] = message.cbBaWangKing[j];
        }
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            object.wProvideUser = message.wProvideUser;
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            object.cbChiHuCard = message.cbChiHuCard;
        if (message.dwChiHuKind && message.dwChiHuKind.length) {
            object.dwChiHuKind = [];
            for (var j = 0; j < message.dwChiHuKind.length; ++j)
                object.dwChiHuKind[j] = message.dwChiHuKind[j];
        }
        if (message.dwChiHuRight && message.dwChiHuRight.length) {
            object.dwChiHuRight = [];
            for (var j = 0; j < message.dwChiHuRight.length; ++j)
                object.dwChiHuRight[j] = message.dwChiHuRight[j];
        }
        if (message.lGameScore && message.lGameScore.length) {
            object.lGameScore = [];
            for (var j = 0; j < message.lGameScore.length; ++j)
                object.lGameScore[j] = message.lGameScore[j];
        }
        if (message.lDownScore && message.lDownScore.length) {
            object.lDownScore = [];
            for (var j = 0; j < message.lDownScore.length; ++j)
                object.lDownScore[j] = message.lDownScore[j];
        }
        if (message.lGameScoreEx && message.lGameScoreEx.length) {
            object.lGameScoreEx = [];
            for (var j = 0; j < message.lGameScoreEx.length; ++j)
                object.lGameScoreEx[j] = message.lGameScoreEx[j];
        }
        if (message.lGameHuScore && message.lGameHuScore.length) {
            object.lGameHuScore = [];
            for (var j = 0; j < message.lGameHuScore.length; ++j)
                object.lGameHuScore[j] = message.lGameHuScore[j];
        }
        if (message.cbCardData && message.cbCardData.length) {
            object.cbCardData = [];
            for (var j = 0; j < message.cbCardData.length; ++j)
                object.cbCardData[j] = $root.MahList.toObject(message.cbCardData[j], options);
        }
        if (message.lGangScore && message.lGangScore.length) {
            object.lGangScore = [];
            for (var j = 0; j < message.lGangScore.length; ++j)
                object.lGangScore[j] = message.lGangScore[j];
        }
        if (message.lAllScore && message.lAllScore.length) {
            object.lAllScore = [];
            for (var j = 0; j < message.lAllScore.length; ++j)
                object.lAllScore[j] = message.lAllScore[j];
        }
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            object.bRoundEnd = message.bRoundEnd;
        if (message.lHuiTouScore && message.lHuiTouScore.length) {
            object.lHuiTouScore = [];
            for (var j = 0; j < message.lHuiTouScore.length; ++j)
                object.lHuiTouScore[j] = message.lHuiTouScore[j];
        }
        if (message.bShowEnd != null && message.hasOwnProperty("bShowEnd"))
            object.bShowEnd = message.bShowEnd;
        if (message.cbJiangMaCardData && message.cbJiangMaCardData.length) {
            object.cbJiangMaCardData = [];
            for (var j = 0; j < message.cbJiangMaCardData.length; ++j)
                object.cbJiangMaCardData[j] = message.cbJiangMaCardData[j];
        }
        if (message.lGamejiangmaScore && message.lGamejiangmaScore.length) {
            object.lGamejiangmaScore = [];
            for (var j = 0; j < message.lGamejiangmaScore.length; ++j)
                object.lGamejiangmaScore[j] = message.lGamejiangmaScore[j];
        }
        if (message.bIsFangPaoRule != null && message.hasOwnProperty("bIsFangPaoRule"))
            object.bIsFangPaoRule = message.bIsFangPaoRule;
        if (message.lRoundGameScore && message.lRoundGameScore.length) {
            object.lRoundGameScore = [];
            for (var j = 0; j < message.lRoundGameScore.length; ++j)
                object.lRoundGameScore[j] = $root.lAllRoundGameScore.toObject(message.lRoundGameScore[j], options);
        }
        return object;
    };

    /**
     * Converts this ProMJGameEnd to JSON.
     * @function toJSON
     * @memberof ProMJGameEnd
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameEnd.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameEnd.MSGID
     * @enum {string}
     * @property {number} ID=8619 ID value
     */
    ProMJGameEnd.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8619] = "ID"] = 8619;
        return values;
    })();

    return ProMJGameEnd;
})();

$root.ProMJGameQuickSoundRequest = (function() {

    /**
     * Properties of a ProMJGameQuickSoundRequest.
     * @exports IProMJGameQuickSoundRequest
     * @interface IProMJGameQuickSoundRequest
     * @property {number|null} [deskId] ProMJGameQuickSoundRequest deskId
     * @property {number|null} [seatId] ProMJGameQuickSoundRequest seatId
     * @property {number|null} [soundId] ProMJGameQuickSoundRequest soundId
     * @property {Uint8Array|null} [text] ProMJGameQuickSoundRequest text
     */

    /**
     * Constructs a new ProMJGameQuickSoundRequest.
     * @exports ProMJGameQuickSoundRequest
     * @classdesc Represents a ProMJGameQuickSoundRequest.
     * @implements IProMJGameQuickSoundRequest
     * @constructor
     * @param {IProMJGameQuickSoundRequest=} [properties] Properties to set
     */
    function ProMJGameQuickSoundRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameQuickSoundRequest deskId.
     * @member {number} deskId
     * @memberof ProMJGameQuickSoundRequest
     * @instance
     */
    ProMJGameQuickSoundRequest.prototype.deskId = 0;

    /**
     * ProMJGameQuickSoundRequest seatId.
     * @member {number} seatId
     * @memberof ProMJGameQuickSoundRequest
     * @instance
     */
    ProMJGameQuickSoundRequest.prototype.seatId = 0;

    /**
     * ProMJGameQuickSoundRequest soundId.
     * @member {number} soundId
     * @memberof ProMJGameQuickSoundRequest
     * @instance
     */
    ProMJGameQuickSoundRequest.prototype.soundId = 0;

    /**
     * ProMJGameQuickSoundRequest text.
     * @member {Uint8Array} text
     * @memberof ProMJGameQuickSoundRequest
     * @instance
     */
    ProMJGameQuickSoundRequest.prototype.text = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameQuickSoundRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {IProMJGameQuickSoundRequest=} [properties] Properties to set
     * @returns {ProMJGameQuickSoundRequest} ProMJGameQuickSoundRequest instance
     */
    ProMJGameQuickSoundRequest.create = function create(properties) {
        return new ProMJGameQuickSoundRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameQuickSoundRequest message. Does not implicitly {@link ProMJGameQuickSoundRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {IProMJGameQuickSoundRequest} message ProMJGameQuickSoundRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameQuickSoundRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
        if (message.text != null && message.hasOwnProperty("text"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameQuickSoundRequest message, length delimited. Does not implicitly {@link ProMJGameQuickSoundRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {IProMJGameQuickSoundRequest} message ProMJGameQuickSoundRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameQuickSoundRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameQuickSoundRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameQuickSoundRequest} ProMJGameQuickSoundRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameQuickSoundRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameQuickSoundRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.deskId = reader.int32();
                break;
            case 3:
                message.seatId = reader.int32();
                break;
            case 4:
                message.soundId = reader.int32();
                break;
            case 5:
                message.text = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameQuickSoundRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameQuickSoundRequest} ProMJGameQuickSoundRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameQuickSoundRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameQuickSoundRequest message.
     * @function verify
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameQuickSoundRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            if (!$util.isInteger(message.deskId))
                return "deskId: integer expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            if (!$util.isInteger(message.soundId))
                return "soundId: integer expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                return "text: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameQuickSoundRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameQuickSoundRequest} ProMJGameQuickSoundRequest
     */
    ProMJGameQuickSoundRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameQuickSoundRequest)
            return object;
        var message = new $root.ProMJGameQuickSoundRequest();
        if (object.deskId != null)
            message.deskId = object.deskId | 0;
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.soundId != null)
            message.soundId = object.soundId | 0;
        if (object.text != null)
            if (typeof object.text === "string")
                $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
            else if (object.text.length)
                message.text = object.text;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameQuickSoundRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameQuickSoundRequest
     * @static
     * @param {ProMJGameQuickSoundRequest} message ProMJGameQuickSoundRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameQuickSoundRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deskId = 0;
            object.seatId = 0;
            object.soundId = 0;
            object.text = options.bytes === String ? "" : [];
        }
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            object.deskId = message.deskId;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            object.soundId = message.soundId;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
        return object;
    };

    /**
     * Converts this ProMJGameQuickSoundRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameQuickSoundRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameQuickSoundRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameQuickSoundRequest.MSGID
     * @enum {string}
     * @property {number} ID=8620 ID value
     */
    ProMJGameQuickSoundRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8620] = "ID"] = 8620;
        return values;
    })();

    return ProMJGameQuickSoundRequest;
})();

$root.ProMJGameQuickSoundResponse = (function() {

    /**
     * Properties of a ProMJGameQuickSoundResponse.
     * @exports IProMJGameQuickSoundResponse
     * @interface IProMJGameQuickSoundResponse
     * @property {number|null} [deskId] ProMJGameQuickSoundResponse deskId
     * @property {number|null} [seatId] ProMJGameQuickSoundResponse seatId
     * @property {number|null} [soundId] ProMJGameQuickSoundResponse soundId
     * @property {Uint8Array|null} [text] ProMJGameQuickSoundResponse text
     */

    /**
     * Constructs a new ProMJGameQuickSoundResponse.
     * @exports ProMJGameQuickSoundResponse
     * @classdesc Represents a ProMJGameQuickSoundResponse.
     * @implements IProMJGameQuickSoundResponse
     * @constructor
     * @param {IProMJGameQuickSoundResponse=} [properties] Properties to set
     */
    function ProMJGameQuickSoundResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameQuickSoundResponse deskId.
     * @member {number} deskId
     * @memberof ProMJGameQuickSoundResponse
     * @instance
     */
    ProMJGameQuickSoundResponse.prototype.deskId = 0;

    /**
     * ProMJGameQuickSoundResponse seatId.
     * @member {number} seatId
     * @memberof ProMJGameQuickSoundResponse
     * @instance
     */
    ProMJGameQuickSoundResponse.prototype.seatId = 0;

    /**
     * ProMJGameQuickSoundResponse soundId.
     * @member {number} soundId
     * @memberof ProMJGameQuickSoundResponse
     * @instance
     */
    ProMJGameQuickSoundResponse.prototype.soundId = 0;

    /**
     * ProMJGameQuickSoundResponse text.
     * @member {Uint8Array} text
     * @memberof ProMJGameQuickSoundResponse
     * @instance
     */
    ProMJGameQuickSoundResponse.prototype.text = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameQuickSoundResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {IProMJGameQuickSoundResponse=} [properties] Properties to set
     * @returns {ProMJGameQuickSoundResponse} ProMJGameQuickSoundResponse instance
     */
    ProMJGameQuickSoundResponse.create = function create(properties) {
        return new ProMJGameQuickSoundResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameQuickSoundResponse message. Does not implicitly {@link ProMJGameQuickSoundResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {IProMJGameQuickSoundResponse} message ProMJGameQuickSoundResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameQuickSoundResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
        if (message.text != null && message.hasOwnProperty("text"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameQuickSoundResponse message, length delimited. Does not implicitly {@link ProMJGameQuickSoundResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {IProMJGameQuickSoundResponse} message ProMJGameQuickSoundResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameQuickSoundResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameQuickSoundResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameQuickSoundResponse} ProMJGameQuickSoundResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameQuickSoundResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameQuickSoundResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.deskId = reader.int32();
                break;
            case 3:
                message.seatId = reader.int32();
                break;
            case 4:
                message.soundId = reader.int32();
                break;
            case 5:
                message.text = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameQuickSoundResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameQuickSoundResponse} ProMJGameQuickSoundResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameQuickSoundResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameQuickSoundResponse message.
     * @function verify
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameQuickSoundResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            if (!$util.isInteger(message.deskId))
                return "deskId: integer expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            if (!$util.isInteger(message.soundId))
                return "soundId: integer expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                return "text: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameQuickSoundResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameQuickSoundResponse} ProMJGameQuickSoundResponse
     */
    ProMJGameQuickSoundResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameQuickSoundResponse)
            return object;
        var message = new $root.ProMJGameQuickSoundResponse();
        if (object.deskId != null)
            message.deskId = object.deskId | 0;
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.soundId != null)
            message.soundId = object.soundId | 0;
        if (object.text != null)
            if (typeof object.text === "string")
                $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
            else if (object.text.length)
                message.text = object.text;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameQuickSoundResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameQuickSoundResponse
     * @static
     * @param {ProMJGameQuickSoundResponse} message ProMJGameQuickSoundResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameQuickSoundResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deskId = 0;
            object.seatId = 0;
            object.soundId = 0;
            object.text = options.bytes === String ? "" : [];
        }
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            object.deskId = message.deskId;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            object.soundId = message.soundId;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
        return object;
    };

    /**
     * Converts this ProMJGameQuickSoundResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameQuickSoundResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameQuickSoundResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameQuickSoundResponse.MSGID
     * @enum {string}
     * @property {number} ID=8621 ID value
     */
    ProMJGameQuickSoundResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8621] = "ID"] = 8621;
        return values;
    })();

    return ProMJGameQuickSoundResponse;
})();

$root.ProMJGameSendDiscardMahs = (function() {

    /**
     * Properties of a ProMJGameSendDiscardMahs.
     * @exports IProMJGameSendDiscardMahs
     * @interface IProMJGameSendDiscardMahs
     * @property {number|null} [seatId] ProMJGameSendDiscardMahs seatId
     * @property {Array.<IMahList>|null} [cbCardData] ProMJGameSendDiscardMahs cbCardData
     * @property {number|null} [deskCount] ProMJGameSendDiscardMahs deskCount
     */

    /**
     * Constructs a new ProMJGameSendDiscardMahs.
     * @exports ProMJGameSendDiscardMahs
     * @classdesc Represents a ProMJGameSendDiscardMahs.
     * @implements IProMJGameSendDiscardMahs
     * @constructor
     * @param {IProMJGameSendDiscardMahs=} [properties] Properties to set
     */
    function ProMJGameSendDiscardMahs(properties) {
        this.cbCardData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameSendDiscardMahs seatId.
     * @member {number} seatId
     * @memberof ProMJGameSendDiscardMahs
     * @instance
     */
    ProMJGameSendDiscardMahs.prototype.seatId = 0;

    /**
     * ProMJGameSendDiscardMahs cbCardData.
     * @member {Array.<IMahList>} cbCardData
     * @memberof ProMJGameSendDiscardMahs
     * @instance
     */
    ProMJGameSendDiscardMahs.prototype.cbCardData = $util.emptyArray;

    /**
     * ProMJGameSendDiscardMahs deskCount.
     * @member {number} deskCount
     * @memberof ProMJGameSendDiscardMahs
     * @instance
     */
    ProMJGameSendDiscardMahs.prototype.deskCount = 0;

    /**
     * Creates a new ProMJGameSendDiscardMahs instance using the specified properties.
     * @function create
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {IProMJGameSendDiscardMahs=} [properties] Properties to set
     * @returns {ProMJGameSendDiscardMahs} ProMJGameSendDiscardMahs instance
     */
    ProMJGameSendDiscardMahs.create = function create(properties) {
        return new ProMJGameSendDiscardMahs(properties);
    };

    /**
     * Encodes the specified ProMJGameSendDiscardMahs message. Does not implicitly {@link ProMJGameSendDiscardMahs.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {IProMJGameSendDiscardMahs} message ProMJGameSendDiscardMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendDiscardMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.cbCardData != null && message.cbCardData.length)
            for (var i = 0; i < message.cbCardData.length; ++i)
                $root.MahList.encode(message.cbCardData[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.deskCount);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameSendDiscardMahs message, length delimited. Does not implicitly {@link ProMJGameSendDiscardMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {IProMJGameSendDiscardMahs} message ProMJGameSendDiscardMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendDiscardMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameSendDiscardMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameSendDiscardMahs} ProMJGameSendDiscardMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendDiscardMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameSendDiscardMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                if (!(message.cbCardData && message.cbCardData.length))
                    message.cbCardData = [];
                message.cbCardData.push($root.MahList.decode(reader, reader.uint32()));
                break;
            case 4:
                message.deskCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameSendDiscardMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameSendDiscardMahs} ProMJGameSendDiscardMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendDiscardMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameSendDiscardMahs message.
     * @function verify
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameSendDiscardMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData")) {
            if (!Array.isArray(message.cbCardData))
                return "cbCardData: array expected";
            for (var i = 0; i < message.cbCardData.length; ++i) {
                var error = $root.MahList.verify(message.cbCardData[i]);
                if (error)
                    return "cbCardData." + error;
            }
        }
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            if (!$util.isInteger(message.deskCount))
                return "deskCount: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameSendDiscardMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameSendDiscardMahs} ProMJGameSendDiscardMahs
     */
    ProMJGameSendDiscardMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameSendDiscardMahs)
            return object;
        var message = new $root.ProMJGameSendDiscardMahs();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.cbCardData) {
            if (!Array.isArray(object.cbCardData))
                throw TypeError(".ProMJGameSendDiscardMahs.cbCardData: array expected");
            message.cbCardData = [];
            for (var i = 0; i < object.cbCardData.length; ++i) {
                if (typeof object.cbCardData[i] !== "object")
                    throw TypeError(".ProMJGameSendDiscardMahs.cbCardData: object expected");
                message.cbCardData[i] = $root.MahList.fromObject(object.cbCardData[i]);
            }
        }
        if (object.deskCount != null)
            message.deskCount = object.deskCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameSendDiscardMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameSendDiscardMahs
     * @static
     * @param {ProMJGameSendDiscardMahs} message ProMJGameSendDiscardMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameSendDiscardMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cbCardData = [];
        if (options.defaults) {
            object.seatId = 0;
            object.deskCount = 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.cbCardData && message.cbCardData.length) {
            object.cbCardData = [];
            for (var j = 0; j < message.cbCardData.length; ++j)
                object.cbCardData[j] = $root.MahList.toObject(message.cbCardData[j], options);
        }
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            object.deskCount = message.deskCount;
        return object;
    };

    /**
     * Converts this ProMJGameSendDiscardMahs to JSON.
     * @function toJSON
     * @memberof ProMJGameSendDiscardMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameSendDiscardMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameSendDiscardMahs.MSGID
     * @enum {string}
     * @property {number} ID=8622 ID value
     */
    ProMJGameSendDiscardMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8622] = "ID"] = 8622;
        return values;
    })();

    return ProMJGameSendDiscardMahs;
})();

$root.WeaveItem = (function() {

    /**
     * Properties of a WeaveItem.
     * @exports IWeaveItem
     * @interface IWeaveItem
     * @property {number|null} [weaveKind] WeaveItem weaveKind
     * @property {number|null} [centercard] WeaveItem centercard
     * @property {number|null} [provideUser] WeaveItem provideUser
     */

    /**
     * Constructs a new WeaveItem.
     * @exports WeaveItem
     * @classdesc Represents a WeaveItem.
     * @implements IWeaveItem
     * @constructor
     * @param {IWeaveItem=} [properties] Properties to set
     */
    function WeaveItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * WeaveItem weaveKind.
     * @member {number} weaveKind
     * @memberof WeaveItem
     * @instance
     */
    WeaveItem.prototype.weaveKind = 0;

    /**
     * WeaveItem centercard.
     * @member {number} centercard
     * @memberof WeaveItem
     * @instance
     */
    WeaveItem.prototype.centercard = 0;

    /**
     * WeaveItem provideUser.
     * @member {number} provideUser
     * @memberof WeaveItem
     * @instance
     */
    WeaveItem.prototype.provideUser = 0;

    /**
     * Creates a new WeaveItem instance using the specified properties.
     * @function create
     * @memberof WeaveItem
     * @static
     * @param {IWeaveItem=} [properties] Properties to set
     * @returns {WeaveItem} WeaveItem instance
     */
    WeaveItem.create = function create(properties) {
        return new WeaveItem(properties);
    };

    /**
     * Encodes the specified WeaveItem message. Does not implicitly {@link WeaveItem.verify|verify} messages.
     * @function encode
     * @memberof WeaveItem
     * @static
     * @param {IWeaveItem} message WeaveItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WeaveItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.weaveKind);
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.centercard);
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.provideUser);
        return writer;
    };

    /**
     * Encodes the specified WeaveItem message, length delimited. Does not implicitly {@link WeaveItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof WeaveItem
     * @static
     * @param {IWeaveItem} message WeaveItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WeaveItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a WeaveItem message from the specified reader or buffer.
     * @function decode
     * @memberof WeaveItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {WeaveItem} WeaveItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WeaveItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WeaveItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.weaveKind = reader.int32();
                break;
            case 2:
                message.centercard = reader.int32();
                break;
            case 3:
                message.provideUser = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a WeaveItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof WeaveItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {WeaveItem} WeaveItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WeaveItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a WeaveItem message.
     * @function verify
     * @memberof WeaveItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    WeaveItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            if (!$util.isInteger(message.weaveKind))
                return "weaveKind: integer expected";
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            if (!$util.isInteger(message.centercard))
                return "centercard: integer expected";
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            if (!$util.isInteger(message.provideUser))
                return "provideUser: integer expected";
        return null;
    };

    /**
     * Creates a WeaveItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof WeaveItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {WeaveItem} WeaveItem
     */
    WeaveItem.fromObject = function fromObject(object) {
        if (object instanceof $root.WeaveItem)
            return object;
        var message = new $root.WeaveItem();
        if (object.weaveKind != null)
            message.weaveKind = object.weaveKind | 0;
        if (object.centercard != null)
            message.centercard = object.centercard | 0;
        if (object.provideUser != null)
            message.provideUser = object.provideUser | 0;
        return message;
    };

    /**
     * Creates a plain object from a WeaveItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof WeaveItem
     * @static
     * @param {WeaveItem} message WeaveItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    WeaveItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.weaveKind = 0;
            object.centercard = 0;
            object.provideUser = 0;
        }
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            object.weaveKind = message.weaveKind;
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            object.centercard = message.centercard;
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            object.provideUser = message.provideUser;
        return object;
    };

    /**
     * Converts this WeaveItem to JSON.
     * @function toJSON
     * @memberof WeaveItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    WeaveItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return WeaveItem;
})();

$root.WeaveItems = (function() {

    /**
     * Properties of a WeaveItems.
     * @exports IWeaveItems
     * @interface IWeaveItems
     * @property {Array.<IWeaveItem>|null} [items] WeaveItems items
     */

    /**
     * Constructs a new WeaveItems.
     * @exports WeaveItems
     * @classdesc Represents a WeaveItems.
     * @implements IWeaveItems
     * @constructor
     * @param {IWeaveItems=} [properties] Properties to set
     */
    function WeaveItems(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * WeaveItems items.
     * @member {Array.<IWeaveItem>} items
     * @memberof WeaveItems
     * @instance
     */
    WeaveItems.prototype.items = $util.emptyArray;

    /**
     * Creates a new WeaveItems instance using the specified properties.
     * @function create
     * @memberof WeaveItems
     * @static
     * @param {IWeaveItems=} [properties] Properties to set
     * @returns {WeaveItems} WeaveItems instance
     */
    WeaveItems.create = function create(properties) {
        return new WeaveItems(properties);
    };

    /**
     * Encodes the specified WeaveItems message. Does not implicitly {@link WeaveItems.verify|verify} messages.
     * @function encode
     * @memberof WeaveItems
     * @static
     * @param {IWeaveItems} message WeaveItems message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WeaveItems.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.WeaveItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified WeaveItems message, length delimited. Does not implicitly {@link WeaveItems.verify|verify} messages.
     * @function encodeDelimited
     * @memberof WeaveItems
     * @static
     * @param {IWeaveItems} message WeaveItems message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    WeaveItems.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a WeaveItems message from the specified reader or buffer.
     * @function decode
     * @memberof WeaveItems
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {WeaveItems} WeaveItems
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WeaveItems.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WeaveItems();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.WeaveItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a WeaveItems message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof WeaveItems
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {WeaveItems} WeaveItems
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    WeaveItems.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a WeaveItems message.
     * @function verify
     * @memberof WeaveItems
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    WeaveItems.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.WeaveItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };

    /**
     * Creates a WeaveItems message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof WeaveItems
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {WeaveItems} WeaveItems
     */
    WeaveItems.fromObject = function fromObject(object) {
        if (object instanceof $root.WeaveItems)
            return object;
        var message = new $root.WeaveItems();
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".WeaveItems.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".WeaveItems.items: object expected");
                message.items[i] = $root.WeaveItem.fromObject(object.items[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a WeaveItems message. Also converts values to other types if specified.
     * @function toObject
     * @memberof WeaveItems
     * @static
     * @param {WeaveItems} message WeaveItems
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    WeaveItems.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.WeaveItem.toObject(message.items[j], options);
        }
        return object;
    };

    /**
     * Converts this WeaveItems to JSON.
     * @function toJSON
     * @memberof WeaveItems
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    WeaveItems.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return WeaveItems;
})();

$root.ProMJGameSendActionMahs = (function() {

    /**
     * Properties of a ProMJGameSendActionMahs.
     * @exports IProMJGameSendActionMahs
     * @interface IProMJGameSendActionMahs
     * @property {number|null} [seatId] ProMJGameSendActionMahs seatId
     * @property {Array.<IWeaveItems>|null} [weaves] ProMJGameSendActionMahs weaves
     */

    /**
     * Constructs a new ProMJGameSendActionMahs.
     * @exports ProMJGameSendActionMahs
     * @classdesc Represents a ProMJGameSendActionMahs.
     * @implements IProMJGameSendActionMahs
     * @constructor
     * @param {IProMJGameSendActionMahs=} [properties] Properties to set
     */
    function ProMJGameSendActionMahs(properties) {
        this.weaves = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameSendActionMahs seatId.
     * @member {number} seatId
     * @memberof ProMJGameSendActionMahs
     * @instance
     */
    ProMJGameSendActionMahs.prototype.seatId = 0;

    /**
     * ProMJGameSendActionMahs weaves.
     * @member {Array.<IWeaveItems>} weaves
     * @memberof ProMJGameSendActionMahs
     * @instance
     */
    ProMJGameSendActionMahs.prototype.weaves = $util.emptyArray;

    /**
     * Creates a new ProMJGameSendActionMahs instance using the specified properties.
     * @function create
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {IProMJGameSendActionMahs=} [properties] Properties to set
     * @returns {ProMJGameSendActionMahs} ProMJGameSendActionMahs instance
     */
    ProMJGameSendActionMahs.create = function create(properties) {
        return new ProMJGameSendActionMahs(properties);
    };

    /**
     * Encodes the specified ProMJGameSendActionMahs message. Does not implicitly {@link ProMJGameSendActionMahs.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {IProMJGameSendActionMahs} message ProMJGameSendActionMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendActionMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.weaves != null && message.weaves.length)
            for (var i = 0; i < message.weaves.length; ++i)
                $root.WeaveItems.encode(message.weaves[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProMJGameSendActionMahs message, length delimited. Does not implicitly {@link ProMJGameSendActionMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {IProMJGameSendActionMahs} message ProMJGameSendActionMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSendActionMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameSendActionMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameSendActionMahs} ProMJGameSendActionMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendActionMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameSendActionMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                if (!(message.weaves && message.weaves.length))
                    message.weaves = [];
                message.weaves.push($root.WeaveItems.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameSendActionMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameSendActionMahs} ProMJGameSendActionMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSendActionMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameSendActionMahs message.
     * @function verify
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameSendActionMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.weaves != null && message.hasOwnProperty("weaves")) {
            if (!Array.isArray(message.weaves))
                return "weaves: array expected";
            for (var i = 0; i < message.weaves.length; ++i) {
                var error = $root.WeaveItems.verify(message.weaves[i]);
                if (error)
                    return "weaves." + error;
            }
        }
        return null;
    };

    /**
     * Creates a ProMJGameSendActionMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameSendActionMahs} ProMJGameSendActionMahs
     */
    ProMJGameSendActionMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameSendActionMahs)
            return object;
        var message = new $root.ProMJGameSendActionMahs();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.weaves) {
            if (!Array.isArray(object.weaves))
                throw TypeError(".ProMJGameSendActionMahs.weaves: array expected");
            message.weaves = [];
            for (var i = 0; i < object.weaves.length; ++i) {
                if (typeof object.weaves[i] !== "object")
                    throw TypeError(".ProMJGameSendActionMahs.weaves: object expected");
                message.weaves[i] = $root.WeaveItems.fromObject(object.weaves[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameSendActionMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameSendActionMahs
     * @static
     * @param {ProMJGameSendActionMahs} message ProMJGameSendActionMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameSendActionMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.weaves = [];
        if (options.defaults)
            object.seatId = 0;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.weaves && message.weaves.length) {
            object.weaves = [];
            for (var j = 0; j < message.weaves.length; ++j)
                object.weaves[j] = $root.WeaveItems.toObject(message.weaves[j], options);
        }
        return object;
    };

    /**
     * Converts this ProMJGameSendActionMahs to JSON.
     * @function toJSON
     * @memberof ProMJGameSendActionMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameSendActionMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameSendActionMahs.MSGID
     * @enum {string}
     * @property {number} ID=8623 ID value
     */
    ProMJGameSendActionMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8623] = "ID"] = 8623;
        return values;
    })();

    return ProMJGameSendActionMahs;
})();

/**
 * BROKEN_TYPE enum.
 * @exports BROKEN_TYPE
 * @enum {string}
 * @property {number} BT_MASTER_QUIT=0 BT_MASTER_QUIT value
 * @property {number} BT_USER_QUIT=1 BT_USER_QUIT value
 * @property {number} BT_BROKEN=2 BT_BROKEN value
 */
$root.BROKEN_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BT_MASTER_QUIT"] = 0;
    values[valuesById[1] = "BT_USER_QUIT"] = 1;
    values[valuesById[2] = "BT_BROKEN"] = 2;
    return values;
})();

$root.ProMJGameBrokenRequest = (function() {

    /**
     * Properties of a ProMJGameBrokenRequest.
     * @exports IProMJGameBrokenRequest
     * @interface IProMJGameBrokenRequest
     * @property {number|null} [seatId] ProMJGameBrokenRequest seatId
     * @property {BROKEN_TYPE|null} [type] ProMJGameBrokenRequest type
     * @property {number|null} [time] ProMJGameBrokenRequest time
     */

    /**
     * Constructs a new ProMJGameBrokenRequest.
     * @exports ProMJGameBrokenRequest
     * @classdesc Represents a ProMJGameBrokenRequest.
     * @implements IProMJGameBrokenRequest
     * @constructor
     * @param {IProMJGameBrokenRequest=} [properties] Properties to set
     */
    function ProMJGameBrokenRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameBrokenRequest seatId.
     * @member {number} seatId
     * @memberof ProMJGameBrokenRequest
     * @instance
     */
    ProMJGameBrokenRequest.prototype.seatId = 0;

    /**
     * ProMJGameBrokenRequest type.
     * @member {BROKEN_TYPE} type
     * @memberof ProMJGameBrokenRequest
     * @instance
     */
    ProMJGameBrokenRequest.prototype.type = 0;

    /**
     * ProMJGameBrokenRequest time.
     * @member {number} time
     * @memberof ProMJGameBrokenRequest
     * @instance
     */
    ProMJGameBrokenRequest.prototype.time = 0;

    /**
     * Creates a new ProMJGameBrokenRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {IProMJGameBrokenRequest=} [properties] Properties to set
     * @returns {ProMJGameBrokenRequest} ProMJGameBrokenRequest instance
     */
    ProMJGameBrokenRequest.create = function create(properties) {
        return new ProMJGameBrokenRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameBrokenRequest message. Does not implicitly {@link ProMJGameBrokenRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {IProMJGameBrokenRequest} message ProMJGameBrokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.time);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameBrokenRequest message, length delimited. Does not implicitly {@link ProMJGameBrokenRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {IProMJGameBrokenRequest} message ProMJGameBrokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameBrokenRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameBrokenRequest} ProMJGameBrokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameBrokenRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.type = reader.int32();
                break;
            case 4:
                message.time = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameBrokenRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameBrokenRequest} ProMJGameBrokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameBrokenRequest message.
     * @function verify
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameBrokenRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameBrokenRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameBrokenRequest} ProMJGameBrokenRequest
     */
    ProMJGameBrokenRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameBrokenRequest)
            return object;
        var message = new $root.ProMJGameBrokenRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.type) {
        case "BT_MASTER_QUIT":
        case 0:
            message.type = 0;
            break;
        case "BT_USER_QUIT":
        case 1:
            message.type = 1;
            break;
        case "BT_BROKEN":
        case 2:
            message.type = 2;
            break;
        }
        if (object.time != null)
            message.time = object.time | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameBrokenRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameBrokenRequest
     * @static
     * @param {ProMJGameBrokenRequest} message ProMJGameBrokenRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameBrokenRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.type = options.enums === String ? "BT_MASTER_QUIT" : 0;
            object.time = 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.BROKEN_TYPE[message.type] : message.type;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this ProMJGameBrokenRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameBrokenRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameBrokenRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameBrokenRequest.MSGID
     * @enum {string}
     * @property {number} ID=8624 ID value
     */
    ProMJGameBrokenRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8624] = "ID"] = 8624;
        return values;
    })();

    return ProMJGameBrokenRequest;
})();

/**
 * BROKEN_OPERATE enum.
 * @exports BROKEN_OPERATE
 * @enum {string}
 * @property {number} BO_DISAGREE=0 BO_DISAGREE value
 * @property {number} BO_AGREE=1 BO_AGREE value
 */
$root.BROKEN_OPERATE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BO_DISAGREE"] = 0;
    values[valuesById[1] = "BO_AGREE"] = 1;
    return values;
})();

$root.ProMJGameBrokenOperate = (function() {

    /**
     * Properties of a ProMJGameBrokenOperate.
     * @exports IProMJGameBrokenOperate
     * @interface IProMJGameBrokenOperate
     * @property {number|null} [seatId] ProMJGameBrokenOperate seatId
     * @property {BROKEN_OPERATE|null} [result] ProMJGameBrokenOperate result
     */

    /**
     * Constructs a new ProMJGameBrokenOperate.
     * @exports ProMJGameBrokenOperate
     * @classdesc Represents a ProMJGameBrokenOperate.
     * @implements IProMJGameBrokenOperate
     * @constructor
     * @param {IProMJGameBrokenOperate=} [properties] Properties to set
     */
    function ProMJGameBrokenOperate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameBrokenOperate seatId.
     * @member {number} seatId
     * @memberof ProMJGameBrokenOperate
     * @instance
     */
    ProMJGameBrokenOperate.prototype.seatId = 0;

    /**
     * ProMJGameBrokenOperate result.
     * @member {BROKEN_OPERATE} result
     * @memberof ProMJGameBrokenOperate
     * @instance
     */
    ProMJGameBrokenOperate.prototype.result = 0;

    /**
     * Creates a new ProMJGameBrokenOperate instance using the specified properties.
     * @function create
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {IProMJGameBrokenOperate=} [properties] Properties to set
     * @returns {ProMJGameBrokenOperate} ProMJGameBrokenOperate instance
     */
    ProMJGameBrokenOperate.create = function create(properties) {
        return new ProMJGameBrokenOperate(properties);
    };

    /**
     * Encodes the specified ProMJGameBrokenOperate message. Does not implicitly {@link ProMJGameBrokenOperate.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {IProMJGameBrokenOperate} message ProMJGameBrokenOperate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenOperate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameBrokenOperate message, length delimited. Does not implicitly {@link ProMJGameBrokenOperate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {IProMJGameBrokenOperate} message ProMJGameBrokenOperate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenOperate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameBrokenOperate message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameBrokenOperate} ProMJGameBrokenOperate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenOperate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameBrokenOperate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameBrokenOperate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameBrokenOperate} ProMJGameBrokenOperate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenOperate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameBrokenOperate message.
     * @function verify
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameBrokenOperate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };

    /**
     * Creates a ProMJGameBrokenOperate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameBrokenOperate} ProMJGameBrokenOperate
     */
    ProMJGameBrokenOperate.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameBrokenOperate)
            return object;
        var message = new $root.ProMJGameBrokenOperate();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.result) {
        case "BO_DISAGREE":
        case 0:
            message.result = 0;
            break;
        case "BO_AGREE":
        case 1:
            message.result = 1;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameBrokenOperate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameBrokenOperate
     * @static
     * @param {ProMJGameBrokenOperate} message ProMJGameBrokenOperate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameBrokenOperate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.result = options.enums === String ? "BO_DISAGREE" : 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.BROKEN_OPERATE[message.result] : message.result;
        return object;
    };

    /**
     * Converts this ProMJGameBrokenOperate to JSON.
     * @function toJSON
     * @memberof ProMJGameBrokenOperate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameBrokenOperate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameBrokenOperate.MSGID
     * @enum {string}
     * @property {number} ID=8625 ID value
     */
    ProMJGameBrokenOperate.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8625] = "ID"] = 8625;
        return values;
    })();

    return ProMJGameBrokenOperate;
})();

/**
 * BROKEN_CODE enum.
 * @exports BROKEN_CODE
 * @enum {string}
 * @property {number} BC_SUCCESS=0 BC_SUCCESS value
 * @property {number} BC_DISAGREE=1 BC_DISAGREE value
 * @property {number} BC_QUIT_SUCCESS=2 BC_QUIT_SUCCESS value
 * @property {number} BC_EXCEPTION=3 BC_EXCEPTION value
 */
$root.BROKEN_CODE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "BC_SUCCESS"] = 0;
    values[valuesById[1] = "BC_DISAGREE"] = 1;
    values[valuesById[2] = "BC_QUIT_SUCCESS"] = 2;
    values[valuesById[3] = "BC_EXCEPTION"] = 3;
    return values;
})();

$root.ProMJGameBrokenNotify = (function() {

    /**
     * Properties of a ProMJGameBrokenNotify.
     * @exports IProMJGameBrokenNotify
     * @interface IProMJGameBrokenNotify
     * @property {number|null} [seatId] ProMJGameBrokenNotify seatId
     * @property {BROKEN_CODE|null} [operateCode] ProMJGameBrokenNotify operateCode
     */

    /**
     * Constructs a new ProMJGameBrokenNotify.
     * @exports ProMJGameBrokenNotify
     * @classdesc Represents a ProMJGameBrokenNotify.
     * @implements IProMJGameBrokenNotify
     * @constructor
     * @param {IProMJGameBrokenNotify=} [properties] Properties to set
     */
    function ProMJGameBrokenNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameBrokenNotify seatId.
     * @member {number} seatId
     * @memberof ProMJGameBrokenNotify
     * @instance
     */
    ProMJGameBrokenNotify.prototype.seatId = 0;

    /**
     * ProMJGameBrokenNotify operateCode.
     * @member {BROKEN_CODE} operateCode
     * @memberof ProMJGameBrokenNotify
     * @instance
     */
    ProMJGameBrokenNotify.prototype.operateCode = 0;

    /**
     * Creates a new ProMJGameBrokenNotify instance using the specified properties.
     * @function create
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {IProMJGameBrokenNotify=} [properties] Properties to set
     * @returns {ProMJGameBrokenNotify} ProMJGameBrokenNotify instance
     */
    ProMJGameBrokenNotify.create = function create(properties) {
        return new ProMJGameBrokenNotify(properties);
    };

    /**
     * Encodes the specified ProMJGameBrokenNotify message. Does not implicitly {@link ProMJGameBrokenNotify.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {IProMJGameBrokenNotify} message ProMJGameBrokenNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.operateCode);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameBrokenNotify message, length delimited. Does not implicitly {@link ProMJGameBrokenNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {IProMJGameBrokenNotify} message ProMJGameBrokenNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameBrokenNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameBrokenNotify} ProMJGameBrokenNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameBrokenNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.operateCode = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameBrokenNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameBrokenNotify} ProMJGameBrokenNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameBrokenNotify message.
     * @function verify
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameBrokenNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            switch (message.operateCode) {
            default:
                return "operateCode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a ProMJGameBrokenNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameBrokenNotify} ProMJGameBrokenNotify
     */
    ProMJGameBrokenNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameBrokenNotify)
            return object;
        var message = new $root.ProMJGameBrokenNotify();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.operateCode) {
        case "BC_SUCCESS":
        case 0:
            message.operateCode = 0;
            break;
        case "BC_DISAGREE":
        case 1:
            message.operateCode = 1;
            break;
        case "BC_QUIT_SUCCESS":
        case 2:
            message.operateCode = 2;
            break;
        case "BC_EXCEPTION":
        case 3:
            message.operateCode = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameBrokenNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameBrokenNotify
     * @static
     * @param {ProMJGameBrokenNotify} message ProMJGameBrokenNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameBrokenNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.operateCode = options.enums === String ? "BC_SUCCESS" : 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            object.operateCode = options.enums === String ? $root.BROKEN_CODE[message.operateCode] : message.operateCode;
        return object;
    };

    /**
     * Converts this ProMJGameBrokenNotify to JSON.
     * @function toJSON
     * @memberof ProMJGameBrokenNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameBrokenNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameBrokenNotify.MSGID
     * @enum {string}
     * @property {number} ID=8626 ID value
     */
    ProMJGameBrokenNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8626] = "ID"] = 8626;
        return values;
    })();

    return ProMJGameBrokenNotify;
})();

$root.ProMJGameRuleConfig = (function() {

    /**
     * Properties of a ProMJGameRuleConfig.
     * @exports IProMJGameRuleConfig
     * @interface IProMJGameRuleConfig
     * @property {number|null} [gameRound] ProMJGameRuleConfig gameRound
     * @property {number|null} [needCard] ProMJGameRuleConfig needCard
     * @property {number|null} [nMasterSeat] ProMJGameRuleConfig nMasterSeat
     * @property {number|null} [currentGameCount] ProMJGameRuleConfig currentGameCount
     * @property {boolean|null} [havePengpeng] ProMJGameRuleConfig havePengpeng
     * @property {boolean|null} [haveBaosanqiu] ProMJGameRuleConfig haveBaosanqiu
     * @property {number|null} [nJiangMaCounts] ProMJGameRuleConfig nJiangMaCounts
     * @property {number|null} [nPlayerNum] ProMJGameRuleConfig nPlayerNum
     * @property {boolean|null} [haveSiguiyi] ProMJGameRuleConfig haveSiguiyi
     * @property {boolean|null} [haveZhuangjiafanbei] ProMJGameRuleConfig haveZhuangjiafanbei
     * @property {boolean|null} [bHaveKing] ProMJGameRuleConfig bHaveKing
     * @property {Uint8Array|null} [sRoomNum] ProMJGameRuleConfig sRoomNum
     * @property {Uint8Array|null} [sPlayTime] ProMJGameRuleConfig sPlayTime
     */

    /**
     * Constructs a new ProMJGameRuleConfig.
     * @exports ProMJGameRuleConfig
     * @classdesc Represents a ProMJGameRuleConfig.
     * @implements IProMJGameRuleConfig
     * @constructor
     * @param {IProMJGameRuleConfig=} [properties] Properties to set
     */
    function ProMJGameRuleConfig(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameRuleConfig gameRound.
     * @member {number} gameRound
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.gameRound = 0;

    /**
     * ProMJGameRuleConfig needCard.
     * @member {number} needCard
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.needCard = 0;

    /**
     * ProMJGameRuleConfig nMasterSeat.
     * @member {number} nMasterSeat
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.nMasterSeat = 0;

    /**
     * ProMJGameRuleConfig currentGameCount.
     * @member {number} currentGameCount
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.currentGameCount = 0;

    /**
     * ProMJGameRuleConfig havePengpeng.
     * @member {boolean} havePengpeng
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.havePengpeng = false;

    /**
     * ProMJGameRuleConfig haveBaosanqiu.
     * @member {boolean} haveBaosanqiu
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.haveBaosanqiu = false;

    /**
     * ProMJGameRuleConfig nJiangMaCounts.
     * @member {number} nJiangMaCounts
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.nJiangMaCounts = 0;

    /**
     * ProMJGameRuleConfig nPlayerNum.
     * @member {number} nPlayerNum
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.nPlayerNum = 0;

    /**
     * ProMJGameRuleConfig haveSiguiyi.
     * @member {boolean} haveSiguiyi
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.haveSiguiyi = false;

    /**
     * ProMJGameRuleConfig haveZhuangjiafanbei.
     * @member {boolean} haveZhuangjiafanbei
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.haveZhuangjiafanbei = false;

    /**
     * ProMJGameRuleConfig bHaveKing.
     * @member {boolean} bHaveKing
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.bHaveKing = true;

    /**
     * ProMJGameRuleConfig sRoomNum.
     * @member {Uint8Array} sRoomNum
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.sRoomNum = $util.newBuffer([]);

    /**
     * ProMJGameRuleConfig sPlayTime.
     * @member {Uint8Array} sPlayTime
     * @memberof ProMJGameRuleConfig
     * @instance
     */
    ProMJGameRuleConfig.prototype.sPlayTime = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameRuleConfig instance using the specified properties.
     * @function create
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {IProMJGameRuleConfig=} [properties] Properties to set
     * @returns {ProMJGameRuleConfig} ProMJGameRuleConfig instance
     */
    ProMJGameRuleConfig.create = function create(properties) {
        return new ProMJGameRuleConfig(properties);
    };

    /**
     * Encodes the specified ProMJGameRuleConfig message. Does not implicitly {@link ProMJGameRuleConfig.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {IProMJGameRuleConfig} message ProMJGameRuleConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRuleConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameRound);
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.needCard);
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nMasterSeat);
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.currentGameCount);
        if (message.havePengpeng != null && message.hasOwnProperty("havePengpeng"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.havePengpeng);
        if (message.haveBaosanqiu != null && message.hasOwnProperty("haveBaosanqiu"))
            writer.uint32(/* id 9, wireType 0 =*/72).bool(message.haveBaosanqiu);
        if (message.nJiangMaCounts != null && message.hasOwnProperty("nJiangMaCounts"))
            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.nJiangMaCounts);
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.nPlayerNum);
        if (message.haveSiguiyi != null && message.hasOwnProperty("haveSiguiyi"))
            writer.uint32(/* id 12, wireType 0 =*/96).bool(message.haveSiguiyi);
        if (message.haveZhuangjiafanbei != null && message.hasOwnProperty("haveZhuangjiafanbei"))
            writer.uint32(/* id 13, wireType 0 =*/104).bool(message.haveZhuangjiafanbei);
        if (message.bHaveKing != null && message.hasOwnProperty("bHaveKing"))
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.bHaveKing);
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            writer.uint32(/* id 15, wireType 2 =*/122).bytes(message.sRoomNum);
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            writer.uint32(/* id 16, wireType 2 =*/130).bytes(message.sPlayTime);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameRuleConfig message, length delimited. Does not implicitly {@link ProMJGameRuleConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {IProMJGameRuleConfig} message ProMJGameRuleConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRuleConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameRuleConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameRuleConfig} ProMJGameRuleConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRuleConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameRuleConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameRound = reader.int32();
                break;
            case 2:
                message.needCard = reader.int32();
                break;
            case 6:
                message.nMasterSeat = reader.int32();
                break;
            case 7:
                message.currentGameCount = reader.int32();
                break;
            case 8:
                message.havePengpeng = reader.bool();
                break;
            case 9:
                message.haveBaosanqiu = reader.bool();
                break;
            case 10:
                message.nJiangMaCounts = reader.int32();
                break;
            case 11:
                message.nPlayerNum = reader.int32();
                break;
            case 12:
                message.haveSiguiyi = reader.bool();
                break;
            case 13:
                message.haveZhuangjiafanbei = reader.bool();
                break;
            case 14:
                message.bHaveKing = reader.bool();
                break;
            case 15:
                message.sRoomNum = reader.bytes();
                break;
            case 16:
                message.sPlayTime = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameRuleConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameRuleConfig} ProMJGameRuleConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRuleConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameRuleConfig message.
     * @function verify
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameRuleConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            if (!$util.isInteger(message.gameRound))
                return "gameRound: integer expected";
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            if (!$util.isInteger(message.needCard))
                return "needCard: integer expected";
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            if (!$util.isInteger(message.nMasterSeat))
                return "nMasterSeat: integer expected";
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            if (!$util.isInteger(message.currentGameCount))
                return "currentGameCount: integer expected";
        if (message.havePengpeng != null && message.hasOwnProperty("havePengpeng"))
            if (typeof message.havePengpeng !== "boolean")
                return "havePengpeng: boolean expected";
        if (message.haveBaosanqiu != null && message.hasOwnProperty("haveBaosanqiu"))
            if (typeof message.haveBaosanqiu !== "boolean")
                return "haveBaosanqiu: boolean expected";
        if (message.nJiangMaCounts != null && message.hasOwnProperty("nJiangMaCounts"))
            if (!$util.isInteger(message.nJiangMaCounts))
                return "nJiangMaCounts: integer expected";
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            if (!$util.isInteger(message.nPlayerNum))
                return "nPlayerNum: integer expected";
        if (message.haveSiguiyi != null && message.hasOwnProperty("haveSiguiyi"))
            if (typeof message.haveSiguiyi !== "boolean")
                return "haveSiguiyi: boolean expected";
        if (message.haveZhuangjiafanbei != null && message.hasOwnProperty("haveZhuangjiafanbei"))
            if (typeof message.haveZhuangjiafanbei !== "boolean")
                return "haveZhuangjiafanbei: boolean expected";
        if (message.bHaveKing != null && message.hasOwnProperty("bHaveKing"))
            if (typeof message.bHaveKing !== "boolean")
                return "bHaveKing: boolean expected";
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            if (!(message.sRoomNum && typeof message.sRoomNum.length === "number" || $util.isString(message.sRoomNum)))
                return "sRoomNum: buffer expected";
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            if (!(message.sPlayTime && typeof message.sPlayTime.length === "number" || $util.isString(message.sPlayTime)))
                return "sPlayTime: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameRuleConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameRuleConfig} ProMJGameRuleConfig
     */
    ProMJGameRuleConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameRuleConfig)
            return object;
        var message = new $root.ProMJGameRuleConfig();
        if (object.gameRound != null)
            message.gameRound = object.gameRound | 0;
        if (object.needCard != null)
            message.needCard = object.needCard | 0;
        if (object.nMasterSeat != null)
            message.nMasterSeat = object.nMasterSeat | 0;
        if (object.currentGameCount != null)
            message.currentGameCount = object.currentGameCount | 0;
        if (object.havePengpeng != null)
            message.havePengpeng = Boolean(object.havePengpeng);
        if (object.haveBaosanqiu != null)
            message.haveBaosanqiu = Boolean(object.haveBaosanqiu);
        if (object.nJiangMaCounts != null)
            message.nJiangMaCounts = object.nJiangMaCounts | 0;
        if (object.nPlayerNum != null)
            message.nPlayerNum = object.nPlayerNum | 0;
        if (object.haveSiguiyi != null)
            message.haveSiguiyi = Boolean(object.haveSiguiyi);
        if (object.haveZhuangjiafanbei != null)
            message.haveZhuangjiafanbei = Boolean(object.haveZhuangjiafanbei);
        if (object.bHaveKing != null)
            message.bHaveKing = Boolean(object.bHaveKing);
        if (object.sRoomNum != null)
            if (typeof object.sRoomNum === "string")
                $util.base64.decode(object.sRoomNum, message.sRoomNum = $util.newBuffer($util.base64.length(object.sRoomNum)), 0);
            else if (object.sRoomNum.length)
                message.sRoomNum = object.sRoomNum;
        if (object.sPlayTime != null)
            if (typeof object.sPlayTime === "string")
                $util.base64.decode(object.sPlayTime, message.sPlayTime = $util.newBuffer($util.base64.length(object.sPlayTime)), 0);
            else if (object.sPlayTime.length)
                message.sPlayTime = object.sPlayTime;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameRuleConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameRuleConfig
     * @static
     * @param {ProMJGameRuleConfig} message ProMJGameRuleConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameRuleConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gameRound = 0;
            object.needCard = 0;
            object.nMasterSeat = 0;
            object.currentGameCount = 0;
            object.havePengpeng = false;
            object.haveBaosanqiu = false;
            object.nJiangMaCounts = 0;
            object.nPlayerNum = 0;
            object.haveSiguiyi = false;
            object.haveZhuangjiafanbei = false;
            object.bHaveKing = true;
            object.sRoomNum = options.bytes === String ? "" : [];
            object.sPlayTime = options.bytes === String ? "" : [];
        }
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            object.gameRound = message.gameRound;
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            object.needCard = message.needCard;
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            object.nMasterSeat = message.nMasterSeat;
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            object.currentGameCount = message.currentGameCount;
        if (message.havePengpeng != null && message.hasOwnProperty("havePengpeng"))
            object.havePengpeng = message.havePengpeng;
        if (message.haveBaosanqiu != null && message.hasOwnProperty("haveBaosanqiu"))
            object.haveBaosanqiu = message.haveBaosanqiu;
        if (message.nJiangMaCounts != null && message.hasOwnProperty("nJiangMaCounts"))
            object.nJiangMaCounts = message.nJiangMaCounts;
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            object.nPlayerNum = message.nPlayerNum;
        if (message.haveSiguiyi != null && message.hasOwnProperty("haveSiguiyi"))
            object.haveSiguiyi = message.haveSiguiyi;
        if (message.haveZhuangjiafanbei != null && message.hasOwnProperty("haveZhuangjiafanbei"))
            object.haveZhuangjiafanbei = message.haveZhuangjiafanbei;
        if (message.bHaveKing != null && message.hasOwnProperty("bHaveKing"))
            object.bHaveKing = message.bHaveKing;
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            object.sRoomNum = options.bytes === String ? $util.base64.encode(message.sRoomNum, 0, message.sRoomNum.length) : options.bytes === Array ? Array.prototype.slice.call(message.sRoomNum) : message.sRoomNum;
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            object.sPlayTime = options.bytes === String ? $util.base64.encode(message.sPlayTime, 0, message.sPlayTime.length) : options.bytes === Array ? Array.prototype.slice.call(message.sPlayTime) : message.sPlayTime;
        return object;
    };

    /**
     * Converts this ProMJGameRuleConfig to JSON.
     * @function toJSON
     * @memberof ProMJGameRuleConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameRuleConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameRuleConfig.MSGID
     * @enum {string}
     * @property {number} ID=8627 ID value
     */
    ProMJGameRuleConfig.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8627] = "ID"] = 8627;
        return values;
    })();

    return ProMJGameRuleConfig;
})();

$root.ProMJGameBrokenStatus = (function() {

    /**
     * Properties of a ProMJGameBrokenStatus.
     * @exports IProMJGameBrokenStatus
     * @interface IProMJGameBrokenStatus
     * @property {number|null} [brokenSeat] ProMJGameBrokenStatus brokenSeat
     * @property {Array.<boolean>|null} [brokenStatus] ProMJGameBrokenStatus brokenStatus
     * @property {number|null} [leftTime] ProMJGameBrokenStatus leftTime
     */

    /**
     * Constructs a new ProMJGameBrokenStatus.
     * @exports ProMJGameBrokenStatus
     * @classdesc Represents a ProMJGameBrokenStatus.
     * @implements IProMJGameBrokenStatus
     * @constructor
     * @param {IProMJGameBrokenStatus=} [properties] Properties to set
     */
    function ProMJGameBrokenStatus(properties) {
        this.brokenStatus = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameBrokenStatus brokenSeat.
     * @member {number} brokenSeat
     * @memberof ProMJGameBrokenStatus
     * @instance
     */
    ProMJGameBrokenStatus.prototype.brokenSeat = 0;

    /**
     * ProMJGameBrokenStatus brokenStatus.
     * @member {Array.<boolean>} brokenStatus
     * @memberof ProMJGameBrokenStatus
     * @instance
     */
    ProMJGameBrokenStatus.prototype.brokenStatus = $util.emptyArray;

    /**
     * ProMJGameBrokenStatus leftTime.
     * @member {number} leftTime
     * @memberof ProMJGameBrokenStatus
     * @instance
     */
    ProMJGameBrokenStatus.prototype.leftTime = 0;

    /**
     * Creates a new ProMJGameBrokenStatus instance using the specified properties.
     * @function create
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {IProMJGameBrokenStatus=} [properties] Properties to set
     * @returns {ProMJGameBrokenStatus} ProMJGameBrokenStatus instance
     */
    ProMJGameBrokenStatus.create = function create(properties) {
        return new ProMJGameBrokenStatus(properties);
    };

    /**
     * Encodes the specified ProMJGameBrokenStatus message. Does not implicitly {@link ProMJGameBrokenStatus.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {IProMJGameBrokenStatus} message ProMJGameBrokenStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.brokenSeat);
        if (message.brokenStatus != null && message.brokenStatus.length)
            for (var i = 0; i < message.brokenStatus.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.brokenStatus[i]);
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.leftTime);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameBrokenStatus message, length delimited. Does not implicitly {@link ProMJGameBrokenStatus.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {IProMJGameBrokenStatus} message ProMJGameBrokenStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameBrokenStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameBrokenStatus message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameBrokenStatus} ProMJGameBrokenStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameBrokenStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.brokenSeat = reader.int32();
                break;
            case 2:
                if (!(message.brokenStatus && message.brokenStatus.length))
                    message.brokenStatus = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.brokenStatus.push(reader.bool());
                } else
                    message.brokenStatus.push(reader.bool());
                break;
            case 3:
                message.leftTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameBrokenStatus message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameBrokenStatus} ProMJGameBrokenStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameBrokenStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameBrokenStatus message.
     * @function verify
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameBrokenStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            if (!$util.isInteger(message.brokenSeat))
                return "brokenSeat: integer expected";
        if (message.brokenStatus != null && message.hasOwnProperty("brokenStatus")) {
            if (!Array.isArray(message.brokenStatus))
                return "brokenStatus: array expected";
            for (var i = 0; i < message.brokenStatus.length; ++i)
                if (typeof message.brokenStatus[i] !== "boolean")
                    return "brokenStatus: boolean[] expected";
        }
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            if (!$util.isInteger(message.leftTime))
                return "leftTime: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameBrokenStatus message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameBrokenStatus} ProMJGameBrokenStatus
     */
    ProMJGameBrokenStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameBrokenStatus)
            return object;
        var message = new $root.ProMJGameBrokenStatus();
        if (object.brokenSeat != null)
            message.brokenSeat = object.brokenSeat | 0;
        if (object.brokenStatus) {
            if (!Array.isArray(object.brokenStatus))
                throw TypeError(".ProMJGameBrokenStatus.brokenStatus: array expected");
            message.brokenStatus = [];
            for (var i = 0; i < object.brokenStatus.length; ++i)
                message.brokenStatus[i] = Boolean(object.brokenStatus[i]);
        }
        if (object.leftTime != null)
            message.leftTime = object.leftTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameBrokenStatus message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameBrokenStatus
     * @static
     * @param {ProMJGameBrokenStatus} message ProMJGameBrokenStatus
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameBrokenStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.brokenStatus = [];
        if (options.defaults) {
            object.brokenSeat = 0;
            object.leftTime = 0;
        }
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            object.brokenSeat = message.brokenSeat;
        if (message.brokenStatus && message.brokenStatus.length) {
            object.brokenStatus = [];
            for (var j = 0; j < message.brokenStatus.length; ++j)
                object.brokenStatus[j] = message.brokenStatus[j];
        }
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            object.leftTime = message.leftTime;
        return object;
    };

    /**
     * Converts this ProMJGameBrokenStatus to JSON.
     * @function toJSON
     * @memberof ProMJGameBrokenStatus
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameBrokenStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameBrokenStatus.MSGID
     * @enum {string}
     * @property {number} ID=8628 ID value
     */
    ProMJGameBrokenStatus.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8628] = "ID"] = 8628;
        return values;
    })();

    return ProMJGameBrokenStatus;
})();

$root.ProMJGameDataResp = (function() {

    /**
     * Properties of a ProMJGameDataResp.
     * @exports IProMJGameDataResp
     * @interface IProMJGameDataResp
     * @property {Array.<number>|null} [totalScore] ProMJGameDataResp totalScore
     */

    /**
     * Constructs a new ProMJGameDataResp.
     * @exports ProMJGameDataResp
     * @classdesc Represents a ProMJGameDataResp.
     * @implements IProMJGameDataResp
     * @constructor
     * @param {IProMJGameDataResp=} [properties] Properties to set
     */
    function ProMJGameDataResp(properties) {
        this.totalScore = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameDataResp totalScore.
     * @member {Array.<number>} totalScore
     * @memberof ProMJGameDataResp
     * @instance
     */
    ProMJGameDataResp.prototype.totalScore = $util.emptyArray;

    /**
     * Creates a new ProMJGameDataResp instance using the specified properties.
     * @function create
     * @memberof ProMJGameDataResp
     * @static
     * @param {IProMJGameDataResp=} [properties] Properties to set
     * @returns {ProMJGameDataResp} ProMJGameDataResp instance
     */
    ProMJGameDataResp.create = function create(properties) {
        return new ProMJGameDataResp(properties);
    };

    /**
     * Encodes the specified ProMJGameDataResp message. Does not implicitly {@link ProMJGameDataResp.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameDataResp
     * @static
     * @param {IProMJGameDataResp} message ProMJGameDataResp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDataResp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.totalScore != null && message.totalScore.length)
            for (var i = 0; i < message.totalScore.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.totalScore[i]);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameDataResp message, length delimited. Does not implicitly {@link ProMJGameDataResp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameDataResp
     * @static
     * @param {IProMJGameDataResp} message ProMJGameDataResp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameDataResp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameDataResp message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameDataResp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameDataResp} ProMJGameDataResp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDataResp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameDataResp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.totalScore && message.totalScore.length))
                    message.totalScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.totalScore.push(reader.int32());
                } else
                    message.totalScore.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameDataResp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameDataResp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameDataResp} ProMJGameDataResp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameDataResp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameDataResp message.
     * @function verify
     * @memberof ProMJGameDataResp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameDataResp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.totalScore != null && message.hasOwnProperty("totalScore")) {
            if (!Array.isArray(message.totalScore))
                return "totalScore: array expected";
            for (var i = 0; i < message.totalScore.length; ++i)
                if (!$util.isInteger(message.totalScore[i]))
                    return "totalScore: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProMJGameDataResp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameDataResp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameDataResp} ProMJGameDataResp
     */
    ProMJGameDataResp.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameDataResp)
            return object;
        var message = new $root.ProMJGameDataResp();
        if (object.totalScore) {
            if (!Array.isArray(object.totalScore))
                throw TypeError(".ProMJGameDataResp.totalScore: array expected");
            message.totalScore = [];
            for (var i = 0; i < object.totalScore.length; ++i)
                message.totalScore[i] = object.totalScore[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameDataResp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameDataResp
     * @static
     * @param {ProMJGameDataResp} message ProMJGameDataResp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameDataResp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.totalScore = [];
        if (message.totalScore && message.totalScore.length) {
            object.totalScore = [];
            for (var j = 0; j < message.totalScore.length; ++j)
                object.totalScore[j] = message.totalScore[j];
        }
        return object;
    };

    /**
     * Converts this ProMJGameDataResp to JSON.
     * @function toJSON
     * @memberof ProMJGameDataResp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameDataResp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameDataResp.MSGID
     * @enum {string}
     * @property {number} ID=8629 ID value
     */
    ProMJGameDataResp.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8629] = "ID"] = 8629;
        return values;
    })();

    return ProMJGameDataResp;
})();

$root.ProMJGameSyncCardResponse = (function() {

    /**
     * Properties of a ProMJGameSyncCardResponse.
     * @exports IProMJGameSyncCardResponse
     * @interface IProMJGameSyncCardResponse
     * @property {number|null} [seat] ProMJGameSyncCardResponse seat
     * @property {Array.<number>|null} [handmahs] ProMJGameSyncCardResponse handmahs
     */

    /**
     * Constructs a new ProMJGameSyncCardResponse.
     * @exports ProMJGameSyncCardResponse
     * @classdesc Represents a ProMJGameSyncCardResponse.
     * @implements IProMJGameSyncCardResponse
     * @constructor
     * @param {IProMJGameSyncCardResponse=} [properties] Properties to set
     */
    function ProMJGameSyncCardResponse(properties) {
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameSyncCardResponse seat.
     * @member {number} seat
     * @memberof ProMJGameSyncCardResponse
     * @instance
     */
    ProMJGameSyncCardResponse.prototype.seat = 0;

    /**
     * ProMJGameSyncCardResponse handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProMJGameSyncCardResponse
     * @instance
     */
    ProMJGameSyncCardResponse.prototype.handmahs = $util.emptyArray;

    /**
     * Creates a new ProMJGameSyncCardResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {IProMJGameSyncCardResponse=} [properties] Properties to set
     * @returns {ProMJGameSyncCardResponse} ProMJGameSyncCardResponse instance
     */
    ProMJGameSyncCardResponse.create = function create(properties) {
        return new ProMJGameSyncCardResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameSyncCardResponse message. Does not implicitly {@link ProMJGameSyncCardResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {IProMJGameSyncCardResponse} message ProMJGameSyncCardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSyncCardResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.handmahs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameSyncCardResponse message, length delimited. Does not implicitly {@link ProMJGameSyncCardResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {IProMJGameSyncCardResponse} message ProMJGameSyncCardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameSyncCardResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameSyncCardResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameSyncCardResponse} ProMJGameSyncCardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSyncCardResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameSyncCardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameSyncCardResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameSyncCardResponse} ProMJGameSyncCardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameSyncCardResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameSyncCardResponse message.
     * @function verify
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameSyncCardResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProMJGameSyncCardResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameSyncCardResponse} ProMJGameSyncCardResponse
     */
    ProMJGameSyncCardResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameSyncCardResponse)
            return object;
        var message = new $root.ProMJGameSyncCardResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProMJGameSyncCardResponse.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameSyncCardResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameSyncCardResponse
     * @static
     * @param {ProMJGameSyncCardResponse} message ProMJGameSyncCardResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameSyncCardResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.handmahs = [];
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        return object;
    };

    /**
     * Converts this ProMJGameSyncCardResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameSyncCardResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameSyncCardResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameSyncCardResponse.MSGID
     * @enum {string}
     * @property {number} ID=8633 ID value
     */
    ProMJGameSyncCardResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8633] = "ID"] = 8633;
        return values;
    })();

    return ProMJGameSyncCardResponse;
})();

$root.ProMJGameRecordRequest = (function() {

    /**
     * Properties of a ProMJGameRecordRequest.
     * @exports IProMJGameRecordRequest
     * @interface IProMJGameRecordRequest
     * @property {number|null} [seatId] ProMJGameRecordRequest seatId
     * @property {Uint8Array|null} [url] ProMJGameRecordRequest url
     */

    /**
     * Constructs a new ProMJGameRecordRequest.
     * @exports ProMJGameRecordRequest
     * @classdesc Represents a ProMJGameRecordRequest.
     * @implements IProMJGameRecordRequest
     * @constructor
     * @param {IProMJGameRecordRequest=} [properties] Properties to set
     */
    function ProMJGameRecordRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameRecordRequest seatId.
     * @member {number} seatId
     * @memberof ProMJGameRecordRequest
     * @instance
     */
    ProMJGameRecordRequest.prototype.seatId = 0;

    /**
     * ProMJGameRecordRequest url.
     * @member {Uint8Array} url
     * @memberof ProMJGameRecordRequest
     * @instance
     */
    ProMJGameRecordRequest.prototype.url = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameRecordRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {IProMJGameRecordRequest=} [properties] Properties to set
     * @returns {ProMJGameRecordRequest} ProMJGameRecordRequest instance
     */
    ProMJGameRecordRequest.create = function create(properties) {
        return new ProMJGameRecordRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameRecordRequest message. Does not implicitly {@link ProMJGameRecordRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {IProMJGameRecordRequest} message ProMJGameRecordRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRecordRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.url != null && message.hasOwnProperty("url"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.url);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameRecordRequest message, length delimited. Does not implicitly {@link ProMJGameRecordRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {IProMJGameRecordRequest} message ProMJGameRecordRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRecordRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameRecordRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameRecordRequest} ProMJGameRecordRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRecordRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameRecordRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.url = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameRecordRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameRecordRequest} ProMJGameRecordRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRecordRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameRecordRequest message.
     * @function verify
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameRecordRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.url != null && message.hasOwnProperty("url"))
            if (!(message.url && typeof message.url.length === "number" || $util.isString(message.url)))
                return "url: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameRecordRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameRecordRequest} ProMJGameRecordRequest
     */
    ProMJGameRecordRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameRecordRequest)
            return object;
        var message = new $root.ProMJGameRecordRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.url != null)
            if (typeof object.url === "string")
                $util.base64.decode(object.url, message.url = $util.newBuffer($util.base64.length(object.url)), 0);
            else if (object.url.length)
                message.url = object.url;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameRecordRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameRecordRequest
     * @static
     * @param {ProMJGameRecordRequest} message ProMJGameRecordRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameRecordRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.url = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = options.bytes === String ? $util.base64.encode(message.url, 0, message.url.length) : options.bytes === Array ? Array.prototype.slice.call(message.url) : message.url;
        return object;
    };

    /**
     * Converts this ProMJGameRecordRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameRecordRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameRecordRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameRecordRequest.MSGID
     * @enum {string}
     * @property {number} ID=8630 ID value
     */
    ProMJGameRecordRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8630] = "ID"] = 8630;
        return values;
    })();

    return ProMJGameRecordRequest;
})();

$root.ProMJGameRecordResponse = (function() {

    /**
     * Properties of a ProMJGameRecordResponse.
     * @exports IProMJGameRecordResponse
     * @interface IProMJGameRecordResponse
     * @property {number|null} [seatId] ProMJGameRecordResponse seatId
     * @property {Uint8Array|null} [url] ProMJGameRecordResponse url
     */

    /**
     * Constructs a new ProMJGameRecordResponse.
     * @exports ProMJGameRecordResponse
     * @classdesc Represents a ProMJGameRecordResponse.
     * @implements IProMJGameRecordResponse
     * @constructor
     * @param {IProMJGameRecordResponse=} [properties] Properties to set
     */
    function ProMJGameRecordResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameRecordResponse seatId.
     * @member {number} seatId
     * @memberof ProMJGameRecordResponse
     * @instance
     */
    ProMJGameRecordResponse.prototype.seatId = 0;

    /**
     * ProMJGameRecordResponse url.
     * @member {Uint8Array} url
     * @memberof ProMJGameRecordResponse
     * @instance
     */
    ProMJGameRecordResponse.prototype.url = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameRecordResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {IProMJGameRecordResponse=} [properties] Properties to set
     * @returns {ProMJGameRecordResponse} ProMJGameRecordResponse instance
     */
    ProMJGameRecordResponse.create = function create(properties) {
        return new ProMJGameRecordResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameRecordResponse message. Does not implicitly {@link ProMJGameRecordResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {IProMJGameRecordResponse} message ProMJGameRecordResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRecordResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.url != null && message.hasOwnProperty("url"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.url);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameRecordResponse message, length delimited. Does not implicitly {@link ProMJGameRecordResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {IProMJGameRecordResponse} message ProMJGameRecordResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameRecordResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameRecordResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameRecordResponse} ProMJGameRecordResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRecordResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameRecordResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.url = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameRecordResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameRecordResponse} ProMJGameRecordResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameRecordResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameRecordResponse message.
     * @function verify
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameRecordResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.url != null && message.hasOwnProperty("url"))
            if (!(message.url && typeof message.url.length === "number" || $util.isString(message.url)))
                return "url: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameRecordResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameRecordResponse} ProMJGameRecordResponse
     */
    ProMJGameRecordResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameRecordResponse)
            return object;
        var message = new $root.ProMJGameRecordResponse();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.url != null)
            if (typeof object.url === "string")
                $util.base64.decode(object.url, message.url = $util.newBuffer($util.base64.length(object.url)), 0);
            else if (object.url.length)
                message.url = object.url;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameRecordResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameRecordResponse
     * @static
     * @param {ProMJGameRecordResponse} message ProMJGameRecordResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameRecordResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.url = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = options.bytes === String ? $util.base64.encode(message.url, 0, message.url.length) : options.bytes === Array ? Array.prototype.slice.call(message.url) : message.url;
        return object;
    };

    /**
     * Converts this ProMJGameRecordResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameRecordResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameRecordResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameRecordResponse.MSGID
     * @enum {string}
     * @property {number} ID=8631 ID value
     */
    ProMJGameRecordResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8631] = "ID"] = 8631;
        return values;
    })();

    return ProMJGameRecordResponse;
})();

$root.ProMJGameUserLocationRequest = (function() {

    /**
     * Properties of a ProMJGameUserLocationRequest.
     * @exports IProMJGameUserLocationRequest
     * @interface IProMJGameUserLocationRequest
     * @property {number|null} [seatId] ProMJGameUserLocationRequest seatId
     * @property {number|null} [dwlongitude] ProMJGameUserLocationRequest dwlongitude
     * @property {number|null} [dwlatitude] ProMJGameUserLocationRequest dwlatitude
     * @property {Uint8Array|null} [strDistrict] ProMJGameUserLocationRequest strDistrict
     * @property {Uint8Array|null} [strStreetName] ProMJGameUserLocationRequest strStreetName
     */

    /**
     * Constructs a new ProMJGameUserLocationRequest.
     * @exports ProMJGameUserLocationRequest
     * @classdesc Represents a ProMJGameUserLocationRequest.
     * @implements IProMJGameUserLocationRequest
     * @constructor
     * @param {IProMJGameUserLocationRequest=} [properties] Properties to set
     */
    function ProMJGameUserLocationRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameUserLocationRequest seatId.
     * @member {number} seatId
     * @memberof ProMJGameUserLocationRequest
     * @instance
     */
    ProMJGameUserLocationRequest.prototype.seatId = 0;

    /**
     * ProMJGameUserLocationRequest dwlongitude.
     * @member {number} dwlongitude
     * @memberof ProMJGameUserLocationRequest
     * @instance
     */
    ProMJGameUserLocationRequest.prototype.dwlongitude = 0;

    /**
     * ProMJGameUserLocationRequest dwlatitude.
     * @member {number} dwlatitude
     * @memberof ProMJGameUserLocationRequest
     * @instance
     */
    ProMJGameUserLocationRequest.prototype.dwlatitude = 0;

    /**
     * ProMJGameUserLocationRequest strDistrict.
     * @member {Uint8Array} strDistrict
     * @memberof ProMJGameUserLocationRequest
     * @instance
     */
    ProMJGameUserLocationRequest.prototype.strDistrict = $util.newBuffer([]);

    /**
     * ProMJGameUserLocationRequest strStreetName.
     * @member {Uint8Array} strStreetName
     * @memberof ProMJGameUserLocationRequest
     * @instance
     */
    ProMJGameUserLocationRequest.prototype.strStreetName = $util.newBuffer([]);

    /**
     * Creates a new ProMJGameUserLocationRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {IProMJGameUserLocationRequest=} [properties] Properties to set
     * @returns {ProMJGameUserLocationRequest} ProMJGameUserLocationRequest instance
     */
    ProMJGameUserLocationRequest.create = function create(properties) {
        return new ProMJGameUserLocationRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameUserLocationRequest message. Does not implicitly {@link ProMJGameUserLocationRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {IProMJGameUserLocationRequest} message ProMJGameUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameUserLocationRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.dwlongitude);
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            writer.uint32(/* id 3, wireType 1 =*/25).double(message.dwlatitude);
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.strDistrict);
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.strStreetName);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameUserLocationRequest message, length delimited. Does not implicitly {@link ProMJGameUserLocationRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {IProMJGameUserLocationRequest} message ProMJGameUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameUserLocationRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameUserLocationRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameUserLocationRequest} ProMJGameUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameUserLocationRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameUserLocationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.dwlongitude = reader.double();
                break;
            case 3:
                message.dwlatitude = reader.double();
                break;
            case 4:
                message.strDistrict = reader.bytes();
                break;
            case 5:
                message.strStreetName = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameUserLocationRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameUserLocationRequest} ProMJGameUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameUserLocationRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameUserLocationRequest message.
     * @function verify
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameUserLocationRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            if (typeof message.dwlongitude !== "number")
                return "dwlongitude: number expected";
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            if (typeof message.dwlatitude !== "number")
                return "dwlatitude: number expected";
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            if (!(message.strDistrict && typeof message.strDistrict.length === "number" || $util.isString(message.strDistrict)))
                return "strDistrict: buffer expected";
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            if (!(message.strStreetName && typeof message.strStreetName.length === "number" || $util.isString(message.strStreetName)))
                return "strStreetName: buffer expected";
        return null;
    };

    /**
     * Creates a ProMJGameUserLocationRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameUserLocationRequest} ProMJGameUserLocationRequest
     */
    ProMJGameUserLocationRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameUserLocationRequest)
            return object;
        var message = new $root.ProMJGameUserLocationRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.dwlongitude != null)
            message.dwlongitude = Number(object.dwlongitude);
        if (object.dwlatitude != null)
            message.dwlatitude = Number(object.dwlatitude);
        if (object.strDistrict != null)
            if (typeof object.strDistrict === "string")
                $util.base64.decode(object.strDistrict, message.strDistrict = $util.newBuffer($util.base64.length(object.strDistrict)), 0);
            else if (object.strDistrict.length)
                message.strDistrict = object.strDistrict;
        if (object.strStreetName != null)
            if (typeof object.strStreetName === "string")
                $util.base64.decode(object.strStreetName, message.strStreetName = $util.newBuffer($util.base64.length(object.strStreetName)), 0);
            else if (object.strStreetName.length)
                message.strStreetName = object.strStreetName;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameUserLocationRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameUserLocationRequest
     * @static
     * @param {ProMJGameUserLocationRequest} message ProMJGameUserLocationRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameUserLocationRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.dwlongitude = 0;
            object.dwlatitude = 0;
            object.strDistrict = options.bytes === String ? "" : [];
            object.strStreetName = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            object.dwlongitude = options.json && !isFinite(message.dwlongitude) ? String(message.dwlongitude) : message.dwlongitude;
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            object.dwlatitude = options.json && !isFinite(message.dwlatitude) ? String(message.dwlatitude) : message.dwlatitude;
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            object.strDistrict = options.bytes === String ? $util.base64.encode(message.strDistrict, 0, message.strDistrict.length) : options.bytes === Array ? Array.prototype.slice.call(message.strDistrict) : message.strDistrict;
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            object.strStreetName = options.bytes === String ? $util.base64.encode(message.strStreetName, 0, message.strStreetName.length) : options.bytes === Array ? Array.prototype.slice.call(message.strStreetName) : message.strStreetName;
        return object;
    };

    /**
     * Converts this ProMJGameUserLocationRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameUserLocationRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameUserLocationRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameUserLocationRequest.MSGID
     * @enum {string}
     * @property {number} ID=8632 ID value
     */
    ProMJGameUserLocationRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8632] = "ID"] = 8632;
        return values;
    })();

    return ProMJGameUserLocationRequest;
})();

$root.IntArray = (function() {

    /**
     * Properties of an IntArray.
     * @exports IIntArray
     * @interface IIntArray
     * @property {Array.<number>|null} [data] IntArray data
     */

    /**
     * Constructs a new IntArray.
     * @exports IntArray
     * @classdesc Represents an IntArray.
     * @implements IIntArray
     * @constructor
     * @param {IIntArray=} [properties] Properties to set
     */
    function IntArray(properties) {
        this.data = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * IntArray data.
     * @member {Array.<number>} data
     * @memberof IntArray
     * @instance
     */
    IntArray.prototype.data = $util.emptyArray;

    /**
     * Creates a new IntArray instance using the specified properties.
     * @function create
     * @memberof IntArray
     * @static
     * @param {IIntArray=} [properties] Properties to set
     * @returns {IntArray} IntArray instance
     */
    IntArray.create = function create(properties) {
        return new IntArray(properties);
    };

    /**
     * Encodes the specified IntArray message. Does not implicitly {@link IntArray.verify|verify} messages.
     * @function encode
     * @memberof IntArray
     * @static
     * @param {IIntArray} message IntArray message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IntArray.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.data != null && message.data.length)
            for (var i = 0; i < message.data.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.data[i]);
        return writer;
    };

    /**
     * Encodes the specified IntArray message, length delimited. Does not implicitly {@link IntArray.verify|verify} messages.
     * @function encodeDelimited
     * @memberof IntArray
     * @static
     * @param {IIntArray} message IntArray message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    IntArray.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an IntArray message from the specified reader or buffer.
     * @function decode
     * @memberof IntArray
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {IntArray} IntArray
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IntArray.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.IntArray();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.data && message.data.length))
                    message.data = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.data.push(reader.int32());
                } else
                    message.data.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an IntArray message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof IntArray
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {IntArray} IntArray
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    IntArray.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an IntArray message.
     * @function verify
     * @memberof IntArray
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    IntArray.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.data != null && message.hasOwnProperty("data")) {
            if (!Array.isArray(message.data))
                return "data: array expected";
            for (var i = 0; i < message.data.length; ++i)
                if (!$util.isInteger(message.data[i]))
                    return "data: integer[] expected";
        }
        return null;
    };

    /**
     * Creates an IntArray message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof IntArray
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {IntArray} IntArray
     */
    IntArray.fromObject = function fromObject(object) {
        if (object instanceof $root.IntArray)
            return object;
        var message = new $root.IntArray();
        if (object.data) {
            if (!Array.isArray(object.data))
                throw TypeError(".IntArray.data: array expected");
            message.data = [];
            for (var i = 0; i < object.data.length; ++i)
                message.data[i] = object.data[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from an IntArray message. Also converts values to other types if specified.
     * @function toObject
     * @memberof IntArray
     * @static
     * @param {IntArray} message IntArray
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    IntArray.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.data = [];
        if (message.data && message.data.length) {
            object.data = [];
            for (var j = 0; j < message.data.length; ++j)
                object.data[j] = message.data[j];
        }
        return object;
    };

    /**
     * Converts this IntArray to JSON.
     * @function toJSON
     * @memberof IntArray
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    IntArray.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return IntArray;
})();

$root.ProMJGameKingWaitNotify = (function() {

    /**
     * Properties of a ProMJGameKingWaitNotify.
     * @exports IProMJGameKingWaitNotify
     * @interface IProMJGameKingWaitNotify
     * @property {boolean|null} [isKingWait] ProMJGameKingWaitNotify isKingWait
     */

    /**
     * Constructs a new ProMJGameKingWaitNotify.
     * @exports ProMJGameKingWaitNotify
     * @classdesc Represents a ProMJGameKingWaitNotify.
     * @implements IProMJGameKingWaitNotify
     * @constructor
     * @param {IProMJGameKingWaitNotify=} [properties] Properties to set
     */
    function ProMJGameKingWaitNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameKingWaitNotify isKingWait.
     * @member {boolean} isKingWait
     * @memberof ProMJGameKingWaitNotify
     * @instance
     */
    ProMJGameKingWaitNotify.prototype.isKingWait = false;

    /**
     * Creates a new ProMJGameKingWaitNotify instance using the specified properties.
     * @function create
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {IProMJGameKingWaitNotify=} [properties] Properties to set
     * @returns {ProMJGameKingWaitNotify} ProMJGameKingWaitNotify instance
     */
    ProMJGameKingWaitNotify.create = function create(properties) {
        return new ProMJGameKingWaitNotify(properties);
    };

    /**
     * Encodes the specified ProMJGameKingWaitNotify message. Does not implicitly {@link ProMJGameKingWaitNotify.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {IProMJGameKingWaitNotify} message ProMJGameKingWaitNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.isKingWait != null && message.hasOwnProperty("isKingWait"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isKingWait);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameKingWaitNotify message, length delimited. Does not implicitly {@link ProMJGameKingWaitNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {IProMJGameKingWaitNotify} message ProMJGameKingWaitNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameKingWaitNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameKingWaitNotify} ProMJGameKingWaitNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameKingWaitNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.isKingWait = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameKingWaitNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameKingWaitNotify} ProMJGameKingWaitNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameKingWaitNotify message.
     * @function verify
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameKingWaitNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.isKingWait != null && message.hasOwnProperty("isKingWait"))
            if (typeof message.isKingWait !== "boolean")
                return "isKingWait: boolean expected";
        return null;
    };

    /**
     * Creates a ProMJGameKingWaitNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameKingWaitNotify} ProMJGameKingWaitNotify
     */
    ProMJGameKingWaitNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameKingWaitNotify)
            return object;
        var message = new $root.ProMJGameKingWaitNotify();
        if (object.isKingWait != null)
            message.isKingWait = Boolean(object.isKingWait);
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameKingWaitNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameKingWaitNotify
     * @static
     * @param {ProMJGameKingWaitNotify} message ProMJGameKingWaitNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameKingWaitNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.isKingWait = false;
        if (message.isKingWait != null && message.hasOwnProperty("isKingWait"))
            object.isKingWait = message.isKingWait;
        return object;
    };

    /**
     * Converts this ProMJGameKingWaitNotify to JSON.
     * @function toJSON
     * @memberof ProMJGameKingWaitNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameKingWaitNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameKingWaitNotify.MSGID
     * @enum {string}
     * @property {number} ID=8634 ID value
     */
    ProMJGameKingWaitNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8634] = "ID"] = 8634;
        return values;
    })();

    return ProMJGameKingWaitNotify;
})();

$root.ProMJGameKingWaitRequest = (function() {

    /**
     * Properties of a ProMJGameKingWaitRequest.
     * @exports IProMJGameKingWaitRequest
     * @interface IProMJGameKingWaitRequest
     * @property {boolean|null} [isClickKingWait] ProMJGameKingWaitRequest isClickKingWait
     * @property {number|null} [seatId] ProMJGameKingWaitRequest seatId
     */

    /**
     * Constructs a new ProMJGameKingWaitRequest.
     * @exports ProMJGameKingWaitRequest
     * @classdesc Represents a ProMJGameKingWaitRequest.
     * @implements IProMJGameKingWaitRequest
     * @constructor
     * @param {IProMJGameKingWaitRequest=} [properties] Properties to set
     */
    function ProMJGameKingWaitRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameKingWaitRequest isClickKingWait.
     * @member {boolean} isClickKingWait
     * @memberof ProMJGameKingWaitRequest
     * @instance
     */
    ProMJGameKingWaitRequest.prototype.isClickKingWait = false;

    /**
     * ProMJGameKingWaitRequest seatId.
     * @member {number} seatId
     * @memberof ProMJGameKingWaitRequest
     * @instance
     */
    ProMJGameKingWaitRequest.prototype.seatId = 0;

    /**
     * Creates a new ProMJGameKingWaitRequest instance using the specified properties.
     * @function create
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {IProMJGameKingWaitRequest=} [properties] Properties to set
     * @returns {ProMJGameKingWaitRequest} ProMJGameKingWaitRequest instance
     */
    ProMJGameKingWaitRequest.create = function create(properties) {
        return new ProMJGameKingWaitRequest(properties);
    };

    /**
     * Encodes the specified ProMJGameKingWaitRequest message. Does not implicitly {@link ProMJGameKingWaitRequest.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {IProMJGameKingWaitRequest} message ProMJGameKingWaitRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isClickKingWait);
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameKingWaitRequest message, length delimited. Does not implicitly {@link ProMJGameKingWaitRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {IProMJGameKingWaitRequest} message ProMJGameKingWaitRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameKingWaitRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameKingWaitRequest} ProMJGameKingWaitRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameKingWaitRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.isClickKingWait = reader.bool();
                break;
            case 2:
                message.seatId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameKingWaitRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameKingWaitRequest} ProMJGameKingWaitRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameKingWaitRequest message.
     * @function verify
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameKingWaitRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            if (typeof message.isClickKingWait !== "boolean")
                return "isClickKingWait: boolean expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        return null;
    };

    /**
     * Creates a ProMJGameKingWaitRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameKingWaitRequest} ProMJGameKingWaitRequest
     */
    ProMJGameKingWaitRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameKingWaitRequest)
            return object;
        var message = new $root.ProMJGameKingWaitRequest();
        if (object.isClickKingWait != null)
            message.isClickKingWait = Boolean(object.isClickKingWait);
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameKingWaitRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameKingWaitRequest
     * @static
     * @param {ProMJGameKingWaitRequest} message ProMJGameKingWaitRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameKingWaitRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.isClickKingWait = false;
            object.seatId = 0;
        }
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            object.isClickKingWait = message.isClickKingWait;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        return object;
    };

    /**
     * Converts this ProMJGameKingWaitRequest to JSON.
     * @function toJSON
     * @memberof ProMJGameKingWaitRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameKingWaitRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameKingWaitRequest.MSGID
     * @enum {string}
     * @property {number} ID=8635 ID value
     */
    ProMJGameKingWaitRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8635] = "ID"] = 8635;
        return values;
    })();

    return ProMJGameKingWaitRequest;
})();

$root.ProMJGameKingWaitResponse = (function() {

    /**
     * Properties of a ProMJGameKingWaitResponse.
     * @exports IProMJGameKingWaitResponse
     * @interface IProMJGameKingWaitResponse
     * @property {number|null} [seat] ProMJGameKingWaitResponse seat
     * @property {Array.<number>|null} [mahs] ProMJGameKingWaitResponse mahs
     * @property {number|null} [mahscount] ProMJGameKingWaitResponse mahscount
     * @property {boolean|null} [isClickKingWait] ProMJGameKingWaitResponse isClickKingWait
     */

    /**
     * Constructs a new ProMJGameKingWaitResponse.
     * @exports ProMJGameKingWaitResponse
     * @classdesc Represents a ProMJGameKingWaitResponse.
     * @implements IProMJGameKingWaitResponse
     * @constructor
     * @param {IProMJGameKingWaitResponse=} [properties] Properties to set
     */
    function ProMJGameKingWaitResponse(properties) {
        this.mahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProMJGameKingWaitResponse seat.
     * @member {number} seat
     * @memberof ProMJGameKingWaitResponse
     * @instance
     */
    ProMJGameKingWaitResponse.prototype.seat = 0;

    /**
     * ProMJGameKingWaitResponse mahs.
     * @member {Array.<number>} mahs
     * @memberof ProMJGameKingWaitResponse
     * @instance
     */
    ProMJGameKingWaitResponse.prototype.mahs = $util.emptyArray;

    /**
     * ProMJGameKingWaitResponse mahscount.
     * @member {number} mahscount
     * @memberof ProMJGameKingWaitResponse
     * @instance
     */
    ProMJGameKingWaitResponse.prototype.mahscount = 0;

    /**
     * ProMJGameKingWaitResponse isClickKingWait.
     * @member {boolean} isClickKingWait
     * @memberof ProMJGameKingWaitResponse
     * @instance
     */
    ProMJGameKingWaitResponse.prototype.isClickKingWait = false;

    /**
     * Creates a new ProMJGameKingWaitResponse instance using the specified properties.
     * @function create
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {IProMJGameKingWaitResponse=} [properties] Properties to set
     * @returns {ProMJGameKingWaitResponse} ProMJGameKingWaitResponse instance
     */
    ProMJGameKingWaitResponse.create = function create(properties) {
        return new ProMJGameKingWaitResponse(properties);
    };

    /**
     * Encodes the specified ProMJGameKingWaitResponse message. Does not implicitly {@link ProMJGameKingWaitResponse.verify|verify} messages.
     * @function encode
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {IProMJGameKingWaitResponse} message ProMJGameKingWaitResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.mahs != null && message.mahs.length)
            for (var i = 0; i < message.mahs.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.mahs[i]);
        if (message.mahscount != null && message.hasOwnProperty("mahscount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mahscount);
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.isClickKingWait);
        return writer;
    };

    /**
     * Encodes the specified ProMJGameKingWaitResponse message, length delimited. Does not implicitly {@link ProMJGameKingWaitResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {IProMJGameKingWaitResponse} message ProMJGameKingWaitResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProMJGameKingWaitResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProMJGameKingWaitResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProMJGameKingWaitResponse} ProMJGameKingWaitResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProMJGameKingWaitResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                if (!(message.mahs && message.mahs.length))
                    message.mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahs.push(reader.int32());
                } else
                    message.mahs.push(reader.int32());
                break;
            case 3:
                message.mahscount = reader.int32();
                break;
            case 4:
                message.isClickKingWait = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProMJGameKingWaitResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProMJGameKingWaitResponse} ProMJGameKingWaitResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProMJGameKingWaitResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProMJGameKingWaitResponse message.
     * @function verify
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProMJGameKingWaitResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.mahs != null && message.hasOwnProperty("mahs")) {
            if (!Array.isArray(message.mahs))
                return "mahs: array expected";
            for (var i = 0; i < message.mahs.length; ++i)
                if (!$util.isInteger(message.mahs[i]))
                    return "mahs: integer[] expected";
        }
        if (message.mahscount != null && message.hasOwnProperty("mahscount"))
            if (!$util.isInteger(message.mahscount))
                return "mahscount: integer expected";
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            if (typeof message.isClickKingWait !== "boolean")
                return "isClickKingWait: boolean expected";
        return null;
    };

    /**
     * Creates a ProMJGameKingWaitResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProMJGameKingWaitResponse} ProMJGameKingWaitResponse
     */
    ProMJGameKingWaitResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProMJGameKingWaitResponse)
            return object;
        var message = new $root.ProMJGameKingWaitResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.mahs) {
            if (!Array.isArray(object.mahs))
                throw TypeError(".ProMJGameKingWaitResponse.mahs: array expected");
            message.mahs = [];
            for (var i = 0; i < object.mahs.length; ++i)
                message.mahs[i] = object.mahs[i] | 0;
        }
        if (object.mahscount != null)
            message.mahscount = object.mahscount | 0;
        if (object.isClickKingWait != null)
            message.isClickKingWait = Boolean(object.isClickKingWait);
        return message;
    };

    /**
     * Creates a plain object from a ProMJGameKingWaitResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProMJGameKingWaitResponse
     * @static
     * @param {ProMJGameKingWaitResponse} message ProMJGameKingWaitResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProMJGameKingWaitResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.mahs = [];
        if (options.defaults) {
            object.seat = 0;
            object.mahscount = 0;
            object.isClickKingWait = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.mahs && message.mahs.length) {
            object.mahs = [];
            for (var j = 0; j < message.mahs.length; ++j)
                object.mahs[j] = message.mahs[j];
        }
        if (message.mahscount != null && message.hasOwnProperty("mahscount"))
            object.mahscount = message.mahscount;
        if (message.isClickKingWait != null && message.hasOwnProperty("isClickKingWait"))
            object.isClickKingWait = message.isClickKingWait;
        return object;
    };

    /**
     * Converts this ProMJGameKingWaitResponse to JSON.
     * @function toJSON
     * @memberof ProMJGameKingWaitResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProMJGameKingWaitResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProMJGameKingWaitResponse.MSGID
     * @enum {string}
     * @property {number} ID=8636 ID value
     */
    ProMJGameKingWaitResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8636] = "ID"] = 8636;
        return values;
    })();

    return ProMJGameKingWaitResponse;
})();

$root.ProGameSendLocationNotify = (function() {

    /**
     * Properties of a ProGameSendLocationNotify.
     * @exports IProGameSendLocationNotify
     * @interface IProGameSendLocationNotify
     * @property {number|null} [nSeat] ProGameSendLocationNotify nSeat
     */

    /**
     * Constructs a new ProGameSendLocationNotify.
     * @exports ProGameSendLocationNotify
     * @classdesc Represents a ProGameSendLocationNotify.
     * @implements IProGameSendLocationNotify
     * @constructor
     * @param {IProGameSendLocationNotify=} [properties] Properties to set
     */
    function ProGameSendLocationNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProGameSendLocationNotify nSeat.
     * @member {number} nSeat
     * @memberof ProGameSendLocationNotify
     * @instance
     */
    ProGameSendLocationNotify.prototype.nSeat = 0;

    /**
     * Creates a new ProGameSendLocationNotify instance using the specified properties.
     * @function create
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {IProGameSendLocationNotify=} [properties] Properties to set
     * @returns {ProGameSendLocationNotify} ProGameSendLocationNotify instance
     */
    ProGameSendLocationNotify.create = function create(properties) {
        return new ProGameSendLocationNotify(properties);
    };

    /**
     * Encodes the specified ProGameSendLocationNotify message. Does not implicitly {@link ProGameSendLocationNotify.verify|verify} messages.
     * @function encode
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {IProGameSendLocationNotify} message ProGameSendLocationNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGameSendLocationNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.nSeat != null && message.hasOwnProperty("nSeat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nSeat);
        return writer;
    };

    /**
     * Encodes the specified ProGameSendLocationNotify message, length delimited. Does not implicitly {@link ProGameSendLocationNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {IProGameSendLocationNotify} message ProGameSendLocationNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGameSendLocationNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProGameSendLocationNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProGameSendLocationNotify} ProGameSendLocationNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGameSendLocationNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProGameSendLocationNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nSeat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProGameSendLocationNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProGameSendLocationNotify} ProGameSendLocationNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGameSendLocationNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProGameSendLocationNotify message.
     * @function verify
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProGameSendLocationNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.nSeat != null && message.hasOwnProperty("nSeat"))
            if (!$util.isInteger(message.nSeat))
                return "nSeat: integer expected";
        return null;
    };

    /**
     * Creates a ProGameSendLocationNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProGameSendLocationNotify} ProGameSendLocationNotify
     */
    ProGameSendLocationNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProGameSendLocationNotify)
            return object;
        var message = new $root.ProGameSendLocationNotify();
        if (object.nSeat != null)
            message.nSeat = object.nSeat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProGameSendLocationNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProGameSendLocationNotify
     * @static
     * @param {ProGameSendLocationNotify} message ProGameSendLocationNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProGameSendLocationNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nSeat = 0;
        if (message.nSeat != null && message.hasOwnProperty("nSeat"))
            object.nSeat = message.nSeat;
        return object;
    };

    /**
     * Converts this ProGameSendLocationNotify to JSON.
     * @function toJSON
     * @memberof ProGameSendLocationNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProGameSendLocationNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProGameSendLocationNotify.MSGID
     * @enum {string}
     * @property {number} ID=8637 ID value
     */
    ProGameSendLocationNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[8637] = "ID"] = 8637;
        return values;
    })();

    return ProGameSendLocationNotify;
})();

$root.ProUserLocationRequest = (function() {

    /**
     * Properties of a ProUserLocationRequest.
     * @exports IProUserLocationRequest
     * @interface IProUserLocationRequest
     * @property {number|null} [userId] ProUserLocationRequest userId
     * @property {number|null} [dwlongitude] ProUserLocationRequest dwlongitude
     * @property {number|null} [dwlatitude] ProUserLocationRequest dwlatitude
     * @property {Uint8Array|null} [strLocation] ProUserLocationRequest strLocation
     */

    /**
     * Constructs a new ProUserLocationRequest.
     * @exports ProUserLocationRequest
     * @classdesc Represents a ProUserLocationRequest.
     * @implements IProUserLocationRequest
     * @constructor
     * @param {IProUserLocationRequest=} [properties] Properties to set
     */
    function ProUserLocationRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProUserLocationRequest userId.
     * @member {number} userId
     * @memberof ProUserLocationRequest
     * @instance
     */
    ProUserLocationRequest.prototype.userId = 0;

    /**
     * ProUserLocationRequest dwlongitude.
     * @member {number} dwlongitude
     * @memberof ProUserLocationRequest
     * @instance
     */
    ProUserLocationRequest.prototype.dwlongitude = 0;

    /**
     * ProUserLocationRequest dwlatitude.
     * @member {number} dwlatitude
     * @memberof ProUserLocationRequest
     * @instance
     */
    ProUserLocationRequest.prototype.dwlatitude = 0;

    /**
     * ProUserLocationRequest strLocation.
     * @member {Uint8Array} strLocation
     * @memberof ProUserLocationRequest
     * @instance
     */
    ProUserLocationRequest.prototype.strLocation = $util.newBuffer([]);

    /**
     * Creates a new ProUserLocationRequest instance using the specified properties.
     * @function create
     * @memberof ProUserLocationRequest
     * @static
     * @param {IProUserLocationRequest=} [properties] Properties to set
     * @returns {ProUserLocationRequest} ProUserLocationRequest instance
     */
    ProUserLocationRequest.create = function create(properties) {
        return new ProUserLocationRequest(properties);
    };

    /**
     * Encodes the specified ProUserLocationRequest message. Does not implicitly {@link ProUserLocationRequest.verify|verify} messages.
     * @function encode
     * @memberof ProUserLocationRequest
     * @static
     * @param {IProUserLocationRequest} message ProUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProUserLocationRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.dwlongitude);
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            writer.uint32(/* id 3, wireType 1 =*/25).double(message.dwlatitude);
        if (message.strLocation != null && message.hasOwnProperty("strLocation"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.strLocation);
        return writer;
    };

    /**
     * Encodes the specified ProUserLocationRequest message, length delimited. Does not implicitly {@link ProUserLocationRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProUserLocationRequest
     * @static
     * @param {IProUserLocationRequest} message ProUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProUserLocationRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProUserLocationRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProUserLocationRequest} ProUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProUserLocationRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProUserLocationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.userId = reader.int32();
                break;
            case 2:
                message.dwlongitude = reader.double();
                break;
            case 3:
                message.dwlatitude = reader.double();
                break;
            case 4:
                message.strLocation = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProUserLocationRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProUserLocationRequest} ProUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProUserLocationRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProUserLocationRequest message.
     * @function verify
     * @memberof ProUserLocationRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProUserLocationRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            if (typeof message.dwlongitude !== "number")
                return "dwlongitude: number expected";
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            if (typeof message.dwlatitude !== "number")
                return "dwlatitude: number expected";
        if (message.strLocation != null && message.hasOwnProperty("strLocation"))
            if (!(message.strLocation && typeof message.strLocation.length === "number" || $util.isString(message.strLocation)))
                return "strLocation: buffer expected";
        return null;
    };

    /**
     * Creates a ProUserLocationRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProUserLocationRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProUserLocationRequest} ProUserLocationRequest
     */
    ProUserLocationRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProUserLocationRequest)
            return object;
        var message = new $root.ProUserLocationRequest();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.dwlongitude != null)
            message.dwlongitude = Number(object.dwlongitude);
        if (object.dwlatitude != null)
            message.dwlatitude = Number(object.dwlatitude);
        if (object.strLocation != null)
            if (typeof object.strLocation === "string")
                $util.base64.decode(object.strLocation, message.strLocation = $util.newBuffer($util.base64.length(object.strLocation)), 0);
            else if (object.strLocation.length)
                message.strLocation = object.strLocation;
        return message;
    };

    /**
     * Creates a plain object from a ProUserLocationRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProUserLocationRequest
     * @static
     * @param {ProUserLocationRequest} message ProUserLocationRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProUserLocationRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.userId = 0;
            object.dwlongitude = 0;
            object.dwlatitude = 0;
            object.strLocation = options.bytes === String ? "" : [];
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            object.dwlongitude = options.json && !isFinite(message.dwlongitude) ? String(message.dwlongitude) : message.dwlongitude;
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            object.dwlatitude = options.json && !isFinite(message.dwlatitude) ? String(message.dwlatitude) : message.dwlatitude;
        if (message.strLocation != null && message.hasOwnProperty("strLocation"))
            object.strLocation = options.bytes === String ? $util.base64.encode(message.strLocation, 0, message.strLocation.length) : options.bytes === Array ? Array.prototype.slice.call(message.strLocation) : message.strLocation;
        return object;
    };

    /**
     * Converts this ProUserLocationRequest to JSON.
     * @function toJSON
     * @memberof ProUserLocationRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProUserLocationRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProUserLocationRequest.MSGID
     * @enum {string}
     * @property {number} ID=1151 ID value
     */
    ProUserLocationRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1151] = "ID"] = 1151;
        return values;
    })();

    return ProUserLocationRequest;
})();

$root.ProPlayerOffLine = (function() {

    /**
     * Properties of a ProPlayerOffLine.
     * @exports IProPlayerOffLine
     * @interface IProPlayerOffLine
     * @property {number|null} [seatId] ProPlayerOffLine seatId
     */

    /**
     * Constructs a new ProPlayerOffLine.
     * @exports ProPlayerOffLine
     * @classdesc Represents a ProPlayerOffLine.
     * @implements IProPlayerOffLine
     * @constructor
     * @param {IProPlayerOffLine=} [properties] Properties to set
     */
    function ProPlayerOffLine(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPlayerOffLine seatId.
     * @member {number} seatId
     * @memberof ProPlayerOffLine
     * @instance
     */
    ProPlayerOffLine.prototype.seatId = 0;

    /**
     * Creates a new ProPlayerOffLine instance using the specified properties.
     * @function create
     * @memberof ProPlayerOffLine
     * @static
     * @param {IProPlayerOffLine=} [properties] Properties to set
     * @returns {ProPlayerOffLine} ProPlayerOffLine instance
     */
    ProPlayerOffLine.create = function create(properties) {
        return new ProPlayerOffLine(properties);
    };

    /**
     * Encodes the specified ProPlayerOffLine message. Does not implicitly {@link ProPlayerOffLine.verify|verify} messages.
     * @function encode
     * @memberof ProPlayerOffLine
     * @static
     * @param {IProPlayerOffLine} message ProPlayerOffLine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPlayerOffLine.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        return writer;
    };

    /**
     * Encodes the specified ProPlayerOffLine message, length delimited. Does not implicitly {@link ProPlayerOffLine.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPlayerOffLine
     * @static
     * @param {IProPlayerOffLine} message ProPlayerOffLine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPlayerOffLine.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPlayerOffLine message from the specified reader or buffer.
     * @function decode
     * @memberof ProPlayerOffLine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPlayerOffLine} ProPlayerOffLine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPlayerOffLine.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPlayerOffLine();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPlayerOffLine message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPlayerOffLine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPlayerOffLine} ProPlayerOffLine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPlayerOffLine.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPlayerOffLine message.
     * @function verify
     * @memberof ProPlayerOffLine
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPlayerOffLine.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        return null;
    };

    /**
     * Creates a ProPlayerOffLine message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPlayerOffLine
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPlayerOffLine} ProPlayerOffLine
     */
    ProPlayerOffLine.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPlayerOffLine)
            return object;
        var message = new $root.ProPlayerOffLine();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPlayerOffLine message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPlayerOffLine
     * @static
     * @param {ProPlayerOffLine} message ProPlayerOffLine
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPlayerOffLine.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seatId = 0;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        return object;
    };

    /**
     * Converts this ProPlayerOffLine to JSON.
     * @function toJSON
     * @memberof ProPlayerOffLine
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPlayerOffLine.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPlayerOffLine.MSGID
     * @enum {string}
     * @property {number} ID=1152 ID value
     */
    ProPlayerOffLine.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1152] = "ID"] = 1152;
        return values;
    })();

    return ProPlayerOffLine;
})();

$root.ProPlayerOnLine = (function() {

    /**
     * Properties of a ProPlayerOnLine.
     * @exports IProPlayerOnLine
     * @interface IProPlayerOnLine
     * @property {number|null} [seatId] ProPlayerOnLine seatId
     */

    /**
     * Constructs a new ProPlayerOnLine.
     * @exports ProPlayerOnLine
     * @classdesc Represents a ProPlayerOnLine.
     * @implements IProPlayerOnLine
     * @constructor
     * @param {IProPlayerOnLine=} [properties] Properties to set
     */
    function ProPlayerOnLine(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPlayerOnLine seatId.
     * @member {number} seatId
     * @memberof ProPlayerOnLine
     * @instance
     */
    ProPlayerOnLine.prototype.seatId = 0;

    /**
     * Creates a new ProPlayerOnLine instance using the specified properties.
     * @function create
     * @memberof ProPlayerOnLine
     * @static
     * @param {IProPlayerOnLine=} [properties] Properties to set
     * @returns {ProPlayerOnLine} ProPlayerOnLine instance
     */
    ProPlayerOnLine.create = function create(properties) {
        return new ProPlayerOnLine(properties);
    };

    /**
     * Encodes the specified ProPlayerOnLine message. Does not implicitly {@link ProPlayerOnLine.verify|verify} messages.
     * @function encode
     * @memberof ProPlayerOnLine
     * @static
     * @param {IProPlayerOnLine} message ProPlayerOnLine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPlayerOnLine.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        return writer;
    };

    /**
     * Encodes the specified ProPlayerOnLine message, length delimited. Does not implicitly {@link ProPlayerOnLine.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPlayerOnLine
     * @static
     * @param {IProPlayerOnLine} message ProPlayerOnLine message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPlayerOnLine.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPlayerOnLine message from the specified reader or buffer.
     * @function decode
     * @memberof ProPlayerOnLine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPlayerOnLine} ProPlayerOnLine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPlayerOnLine.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPlayerOnLine();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPlayerOnLine message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPlayerOnLine
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPlayerOnLine} ProPlayerOnLine
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPlayerOnLine.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPlayerOnLine message.
     * @function verify
     * @memberof ProPlayerOnLine
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPlayerOnLine.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        return null;
    };

    /**
     * Creates a ProPlayerOnLine message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPlayerOnLine
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPlayerOnLine} ProPlayerOnLine
     */
    ProPlayerOnLine.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPlayerOnLine)
            return object;
        var message = new $root.ProPlayerOnLine();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPlayerOnLine message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPlayerOnLine
     * @static
     * @param {ProPlayerOnLine} message ProPlayerOnLine
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPlayerOnLine.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seatId = 0;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        return object;
    };

    /**
     * Converts this ProPlayerOnLine to JSON.
     * @function toJSON
     * @memberof ProPlayerOnLine
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPlayerOnLine.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPlayerOnLine.MSGID
     * @enum {string}
     * @property {number} ID=1153 ID value
     */
    ProPlayerOnLine.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1153] = "ID"] = 1153;
        return values;
    })();

    return ProPlayerOnLine;
})();

$root.ProGetUserGoldBoxProgressRequest = (function() {

    /**
     * Properties of a ProGetUserGoldBoxProgressRequest.
     * @exports IProGetUserGoldBoxProgressRequest
     * @interface IProGetUserGoldBoxProgressRequest
     * @property {number|null} [userId] ProGetUserGoldBoxProgressRequest userId
     * @property {number|null} [gameId] ProGetUserGoldBoxProgressRequest gameId
     * @property {number|null} [roomId] ProGetUserGoldBoxProgressRequest roomId
     */

    /**
     * Constructs a new ProGetUserGoldBoxProgressRequest.
     * @exports ProGetUserGoldBoxProgressRequest
     * @classdesc Represents a ProGetUserGoldBoxProgressRequest.
     * @implements IProGetUserGoldBoxProgressRequest
     * @constructor
     * @param {IProGetUserGoldBoxProgressRequest=} [properties] Properties to set
     */
    function ProGetUserGoldBoxProgressRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProGetUserGoldBoxProgressRequest userId.
     * @member {number} userId
     * @memberof ProGetUserGoldBoxProgressRequest
     * @instance
     */
    ProGetUserGoldBoxProgressRequest.prototype.userId = 0;

    /**
     * ProGetUserGoldBoxProgressRequest gameId.
     * @member {number} gameId
     * @memberof ProGetUserGoldBoxProgressRequest
     * @instance
     */
    ProGetUserGoldBoxProgressRequest.prototype.gameId = 0;

    /**
     * ProGetUserGoldBoxProgressRequest roomId.
     * @member {number} roomId
     * @memberof ProGetUserGoldBoxProgressRequest
     * @instance
     */
    ProGetUserGoldBoxProgressRequest.prototype.roomId = 0;

    /**
     * Creates a new ProGetUserGoldBoxProgressRequest instance using the specified properties.
     * @function create
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {IProGetUserGoldBoxProgressRequest=} [properties] Properties to set
     * @returns {ProGetUserGoldBoxProgressRequest} ProGetUserGoldBoxProgressRequest instance
     */
    ProGetUserGoldBoxProgressRequest.create = function create(properties) {
        return new ProGetUserGoldBoxProgressRequest(properties);
    };

    /**
     * Encodes the specified ProGetUserGoldBoxProgressRequest message. Does not implicitly {@link ProGetUserGoldBoxProgressRequest.verify|verify} messages.
     * @function encode
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {IProGetUserGoldBoxProgressRequest} message ProGetUserGoldBoxProgressRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetUserGoldBoxProgressRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
        return writer;
    };

    /**
     * Encodes the specified ProGetUserGoldBoxProgressRequest message, length delimited. Does not implicitly {@link ProGetUserGoldBoxProgressRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {IProGetUserGoldBoxProgressRequest} message ProGetUserGoldBoxProgressRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetUserGoldBoxProgressRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProGetUserGoldBoxProgressRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProGetUserGoldBoxProgressRequest} ProGetUserGoldBoxProgressRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetUserGoldBoxProgressRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProGetUserGoldBoxProgressRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.userId = reader.int32();
                break;
            case 3:
                message.gameId = reader.int32();
                break;
            case 4:
                message.roomId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProGetUserGoldBoxProgressRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProGetUserGoldBoxProgressRequest} ProGetUserGoldBoxProgressRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetUserGoldBoxProgressRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProGetUserGoldBoxProgressRequest message.
     * @function verify
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProGetUserGoldBoxProgressRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            if (!$util.isInteger(message.gameId))
                return "gameId: integer expected";
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            if (!$util.isInteger(message.roomId))
                return "roomId: integer expected";
        return null;
    };

    /**
     * Creates a ProGetUserGoldBoxProgressRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProGetUserGoldBoxProgressRequest} ProGetUserGoldBoxProgressRequest
     */
    ProGetUserGoldBoxProgressRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProGetUserGoldBoxProgressRequest)
            return object;
        var message = new $root.ProGetUserGoldBoxProgressRequest();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.roomId != null)
            message.roomId = object.roomId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProGetUserGoldBoxProgressRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProGetUserGoldBoxProgressRequest
     * @static
     * @param {ProGetUserGoldBoxProgressRequest} message ProGetUserGoldBoxProgressRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProGetUserGoldBoxProgressRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.userId = 0;
            object.gameId = 0;
            object.roomId = 0;
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            object.roomId = message.roomId;
        return object;
    };

    /**
     * Converts this ProGetUserGoldBoxProgressRequest to JSON.
     * @function toJSON
     * @memberof ProGetUserGoldBoxProgressRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProGetUserGoldBoxProgressRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProGetUserGoldBoxProgressRequest.MSGID
     * @enum {string}
     * @property {number} ID=351 ID value
     */
    ProGetUserGoldBoxProgressRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[351] = "ID"] = 351;
        return values;
    })();

    return ProGetUserGoldBoxProgressRequest;
})();

$root.ProIncrUserGoldBoxProgressRequest = (function() {

    /**
     * Properties of a ProIncrUserGoldBoxProgressRequest.
     * @exports IProIncrUserGoldBoxProgressRequest
     * @interface IProIncrUserGoldBoxProgressRequest
     * @property {number|null} [userId] ProIncrUserGoldBoxProgressRequest userId
     * @property {number|null} [gameId] ProIncrUserGoldBoxProgressRequest gameId
     * @property {number|null} [conditionType] ProIncrUserGoldBoxProgressRequest conditionType
     * @property {number|null} [conditionNums] ProIncrUserGoldBoxProgressRequest conditionNums
     * @property {number|null} [roomId] ProIncrUserGoldBoxProgressRequest roomId
     */

    /**
     * Constructs a new ProIncrUserGoldBoxProgressRequest.
     * @exports ProIncrUserGoldBoxProgressRequest
     * @classdesc Represents a ProIncrUserGoldBoxProgressRequest.
     * @implements IProIncrUserGoldBoxProgressRequest
     * @constructor
     * @param {IProIncrUserGoldBoxProgressRequest=} [properties] Properties to set
     */
    function ProIncrUserGoldBoxProgressRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProIncrUserGoldBoxProgressRequest userId.
     * @member {number} userId
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     */
    ProIncrUserGoldBoxProgressRequest.prototype.userId = 0;

    /**
     * ProIncrUserGoldBoxProgressRequest gameId.
     * @member {number} gameId
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     */
    ProIncrUserGoldBoxProgressRequest.prototype.gameId = 0;

    /**
     * ProIncrUserGoldBoxProgressRequest conditionType.
     * @member {number} conditionType
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     */
    ProIncrUserGoldBoxProgressRequest.prototype.conditionType = 0;

    /**
     * ProIncrUserGoldBoxProgressRequest conditionNums.
     * @member {number} conditionNums
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     */
    ProIncrUserGoldBoxProgressRequest.prototype.conditionNums = 0;

    /**
     * ProIncrUserGoldBoxProgressRequest roomId.
     * @member {number} roomId
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     */
    ProIncrUserGoldBoxProgressRequest.prototype.roomId = 0;

    /**
     * Creates a new ProIncrUserGoldBoxProgressRequest instance using the specified properties.
     * @function create
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {IProIncrUserGoldBoxProgressRequest=} [properties] Properties to set
     * @returns {ProIncrUserGoldBoxProgressRequest} ProIncrUserGoldBoxProgressRequest instance
     */
    ProIncrUserGoldBoxProgressRequest.create = function create(properties) {
        return new ProIncrUserGoldBoxProgressRequest(properties);
    };

    /**
     * Encodes the specified ProIncrUserGoldBoxProgressRequest message. Does not implicitly {@link ProIncrUserGoldBoxProgressRequest.verify|verify} messages.
     * @function encode
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {IProIncrUserGoldBoxProgressRequest} message ProIncrUserGoldBoxProgressRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProIncrUserGoldBoxProgressRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.conditionType);
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.conditionNums);
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomId);
        return writer;
    };

    /**
     * Encodes the specified ProIncrUserGoldBoxProgressRequest message, length delimited. Does not implicitly {@link ProIncrUserGoldBoxProgressRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {IProIncrUserGoldBoxProgressRequest} message ProIncrUserGoldBoxProgressRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProIncrUserGoldBoxProgressRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProIncrUserGoldBoxProgressRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProIncrUserGoldBoxProgressRequest} ProIncrUserGoldBoxProgressRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProIncrUserGoldBoxProgressRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProIncrUserGoldBoxProgressRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.userId = reader.int32();
                break;
            case 3:
                message.gameId = reader.int32();
                break;
            case 4:
                message.conditionType = reader.int32();
                break;
            case 5:
                message.conditionNums = reader.int32();
                break;
            case 6:
                message.roomId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProIncrUserGoldBoxProgressRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProIncrUserGoldBoxProgressRequest} ProIncrUserGoldBoxProgressRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProIncrUserGoldBoxProgressRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProIncrUserGoldBoxProgressRequest message.
     * @function verify
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProIncrUserGoldBoxProgressRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            if (!$util.isInteger(message.gameId))
                return "gameId: integer expected";
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            if (!$util.isInteger(message.conditionType))
                return "conditionType: integer expected";
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            if (!$util.isInteger(message.conditionNums))
                return "conditionNums: integer expected";
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            if (!$util.isInteger(message.roomId))
                return "roomId: integer expected";
        return null;
    };

    /**
     * Creates a ProIncrUserGoldBoxProgressRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProIncrUserGoldBoxProgressRequest} ProIncrUserGoldBoxProgressRequest
     */
    ProIncrUserGoldBoxProgressRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProIncrUserGoldBoxProgressRequest)
            return object;
        var message = new $root.ProIncrUserGoldBoxProgressRequest();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.conditionType != null)
            message.conditionType = object.conditionType | 0;
        if (object.conditionNums != null)
            message.conditionNums = object.conditionNums | 0;
        if (object.roomId != null)
            message.roomId = object.roomId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProIncrUserGoldBoxProgressRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @static
     * @param {ProIncrUserGoldBoxProgressRequest} message ProIncrUserGoldBoxProgressRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProIncrUserGoldBoxProgressRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.userId = 0;
            object.gameId = 0;
            object.conditionType = 0;
            object.conditionNums = 0;
            object.roomId = 0;
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            object.conditionType = message.conditionType;
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            object.conditionNums = message.conditionNums;
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            object.roomId = message.roomId;
        return object;
    };

    /**
     * Converts this ProIncrUserGoldBoxProgressRequest to JSON.
     * @function toJSON
     * @memberof ProIncrUserGoldBoxProgressRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProIncrUserGoldBoxProgressRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProIncrUserGoldBoxProgressRequest.MSGID
     * @enum {string}
     * @property {number} ID=352 ID value
     */
    ProIncrUserGoldBoxProgressRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[352] = "ID"] = 352;
        return values;
    })();

    return ProIncrUserGoldBoxProgressRequest;
})();

$root.ProUserGoldBoxProgressResponse = (function() {

    /**
     * Properties of a ProUserGoldBoxProgressResponse.
     * @exports IProUserGoldBoxProgressResponse
     * @interface IProUserGoldBoxProgressResponse
     * @property {number|null} [userId] ProUserGoldBoxProgressResponse userId
     * @property {number|null} [gameId] ProUserGoldBoxProgressResponse gameId
     * @property {number|null} [conditionType] ProUserGoldBoxProgressResponse conditionType
     * @property {number|null} [conditionNums] ProUserGoldBoxProgressResponse conditionNums
     * @property {number|null} [conditionProNums] ProUserGoldBoxProgressResponse conditionProNums
     * @property {number|null} [conditionAfterNums] ProUserGoldBoxProgressResponse conditionAfterNums
     */

    /**
     * Constructs a new ProUserGoldBoxProgressResponse.
     * @exports ProUserGoldBoxProgressResponse
     * @classdesc Represents a ProUserGoldBoxProgressResponse.
     * @implements IProUserGoldBoxProgressResponse
     * @constructor
     * @param {IProUserGoldBoxProgressResponse=} [properties] Properties to set
     */
    function ProUserGoldBoxProgressResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProUserGoldBoxProgressResponse userId.
     * @member {number} userId
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.userId = 0;

    /**
     * ProUserGoldBoxProgressResponse gameId.
     * @member {number} gameId
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.gameId = 0;

    /**
     * ProUserGoldBoxProgressResponse conditionType.
     * @member {number} conditionType
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.conditionType = 0;

    /**
     * ProUserGoldBoxProgressResponse conditionNums.
     * @member {number} conditionNums
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.conditionNums = 0;

    /**
     * ProUserGoldBoxProgressResponse conditionProNums.
     * @member {number} conditionProNums
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.conditionProNums = 0;

    /**
     * ProUserGoldBoxProgressResponse conditionAfterNums.
     * @member {number} conditionAfterNums
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     */
    ProUserGoldBoxProgressResponse.prototype.conditionAfterNums = 0;

    /**
     * Creates a new ProUserGoldBoxProgressResponse instance using the specified properties.
     * @function create
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {IProUserGoldBoxProgressResponse=} [properties] Properties to set
     * @returns {ProUserGoldBoxProgressResponse} ProUserGoldBoxProgressResponse instance
     */
    ProUserGoldBoxProgressResponse.create = function create(properties) {
        return new ProUserGoldBoxProgressResponse(properties);
    };

    /**
     * Encodes the specified ProUserGoldBoxProgressResponse message. Does not implicitly {@link ProUserGoldBoxProgressResponse.verify|verify} messages.
     * @function encode
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {IProUserGoldBoxProgressResponse} message ProUserGoldBoxProgressResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProUserGoldBoxProgressResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.conditionType);
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.conditionNums);
        if (message.conditionProNums != null && message.hasOwnProperty("conditionProNums"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.conditionProNums);
        if (message.conditionAfterNums != null && message.hasOwnProperty("conditionAfterNums"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.conditionAfterNums);
        return writer;
    };

    /**
     * Encodes the specified ProUserGoldBoxProgressResponse message, length delimited. Does not implicitly {@link ProUserGoldBoxProgressResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {IProUserGoldBoxProgressResponse} message ProUserGoldBoxProgressResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProUserGoldBoxProgressResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProUserGoldBoxProgressResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProUserGoldBoxProgressResponse} ProUserGoldBoxProgressResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProUserGoldBoxProgressResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProUserGoldBoxProgressResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.userId = reader.int32();
                break;
            case 3:
                message.gameId = reader.int32();
                break;
            case 4:
                message.conditionType = reader.int32();
                break;
            case 5:
                message.conditionNums = reader.int32();
                break;
            case 6:
                message.conditionProNums = reader.int32();
                break;
            case 7:
                message.conditionAfterNums = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProUserGoldBoxProgressResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProUserGoldBoxProgressResponse} ProUserGoldBoxProgressResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProUserGoldBoxProgressResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProUserGoldBoxProgressResponse message.
     * @function verify
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProUserGoldBoxProgressResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            if (!$util.isInteger(message.gameId))
                return "gameId: integer expected";
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            if (!$util.isInteger(message.conditionType))
                return "conditionType: integer expected";
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            if (!$util.isInteger(message.conditionNums))
                return "conditionNums: integer expected";
        if (message.conditionProNums != null && message.hasOwnProperty("conditionProNums"))
            if (!$util.isInteger(message.conditionProNums))
                return "conditionProNums: integer expected";
        if (message.conditionAfterNums != null && message.hasOwnProperty("conditionAfterNums"))
            if (!$util.isInteger(message.conditionAfterNums))
                return "conditionAfterNums: integer expected";
        return null;
    };

    /**
     * Creates a ProUserGoldBoxProgressResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProUserGoldBoxProgressResponse} ProUserGoldBoxProgressResponse
     */
    ProUserGoldBoxProgressResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProUserGoldBoxProgressResponse)
            return object;
        var message = new $root.ProUserGoldBoxProgressResponse();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.conditionType != null)
            message.conditionType = object.conditionType | 0;
        if (object.conditionNums != null)
            message.conditionNums = object.conditionNums | 0;
        if (object.conditionProNums != null)
            message.conditionProNums = object.conditionProNums | 0;
        if (object.conditionAfterNums != null)
            message.conditionAfterNums = object.conditionAfterNums | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProUserGoldBoxProgressResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProUserGoldBoxProgressResponse
     * @static
     * @param {ProUserGoldBoxProgressResponse} message ProUserGoldBoxProgressResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProUserGoldBoxProgressResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.userId = 0;
            object.gameId = 0;
            object.conditionType = 0;
            object.conditionNums = 0;
            object.conditionProNums = 0;
            object.conditionAfterNums = 0;
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.conditionType != null && message.hasOwnProperty("conditionType"))
            object.conditionType = message.conditionType;
        if (message.conditionNums != null && message.hasOwnProperty("conditionNums"))
            object.conditionNums = message.conditionNums;
        if (message.conditionProNums != null && message.hasOwnProperty("conditionProNums"))
            object.conditionProNums = message.conditionProNums;
        if (message.conditionAfterNums != null && message.hasOwnProperty("conditionAfterNums"))
            object.conditionAfterNums = message.conditionAfterNums;
        return object;
    };

    /**
     * Converts this ProUserGoldBoxProgressResponse to JSON.
     * @function toJSON
     * @memberof ProUserGoldBoxProgressResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProUserGoldBoxProgressResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProUserGoldBoxProgressResponse.MSGID
     * @enum {string}
     * @property {number} ID=353 ID value
     */
    ProUserGoldBoxProgressResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[353] = "ID"] = 353;
        return values;
    })();

    return ProUserGoldBoxProgressResponse;
})();

$root.ProGetGoldBoxAwardRequest = (function() {

    /**
     * Properties of a ProGetGoldBoxAwardRequest.
     * @exports IProGetGoldBoxAwardRequest
     * @interface IProGetGoldBoxAwardRequest
     * @property {number|null} [userId] ProGetGoldBoxAwardRequest userId
     * @property {number|null} [gameId] ProGetGoldBoxAwardRequest gameId
     * @property {number|null} [roomId] ProGetGoldBoxAwardRequest roomId
     */

    /**
     * Constructs a new ProGetGoldBoxAwardRequest.
     * @exports ProGetGoldBoxAwardRequest
     * @classdesc Represents a ProGetGoldBoxAwardRequest.
     * @implements IProGetGoldBoxAwardRequest
     * @constructor
     * @param {IProGetGoldBoxAwardRequest=} [properties] Properties to set
     */
    function ProGetGoldBoxAwardRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProGetGoldBoxAwardRequest userId.
     * @member {number} userId
     * @memberof ProGetGoldBoxAwardRequest
     * @instance
     */
    ProGetGoldBoxAwardRequest.prototype.userId = 0;

    /**
     * ProGetGoldBoxAwardRequest gameId.
     * @member {number} gameId
     * @memberof ProGetGoldBoxAwardRequest
     * @instance
     */
    ProGetGoldBoxAwardRequest.prototype.gameId = 0;

    /**
     * ProGetGoldBoxAwardRequest roomId.
     * @member {number} roomId
     * @memberof ProGetGoldBoxAwardRequest
     * @instance
     */
    ProGetGoldBoxAwardRequest.prototype.roomId = 0;

    /**
     * Creates a new ProGetGoldBoxAwardRequest instance using the specified properties.
     * @function create
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {IProGetGoldBoxAwardRequest=} [properties] Properties to set
     * @returns {ProGetGoldBoxAwardRequest} ProGetGoldBoxAwardRequest instance
     */
    ProGetGoldBoxAwardRequest.create = function create(properties) {
        return new ProGetGoldBoxAwardRequest(properties);
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardRequest message. Does not implicitly {@link ProGetGoldBoxAwardRequest.verify|verify} messages.
     * @function encode
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {IProGetGoldBoxAwardRequest} message ProGetGoldBoxAwardRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.roomId);
        return writer;
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardRequest message, length delimited. Does not implicitly {@link ProGetGoldBoxAwardRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {IProGetGoldBoxAwardRequest} message ProGetGoldBoxAwardRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProGetGoldBoxAwardRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProGetGoldBoxAwardRequest} ProGetGoldBoxAwardRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProGetGoldBoxAwardRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.userId = reader.int32();
                break;
            case 3:
                message.gameId = reader.int32();
                break;
            case 4:
                message.roomId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProGetGoldBoxAwardRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProGetGoldBoxAwardRequest} ProGetGoldBoxAwardRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProGetGoldBoxAwardRequest message.
     * @function verify
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProGetGoldBoxAwardRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            if (!$util.isInteger(message.gameId))
                return "gameId: integer expected";
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            if (!$util.isInteger(message.roomId))
                return "roomId: integer expected";
        return null;
    };

    /**
     * Creates a ProGetGoldBoxAwardRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProGetGoldBoxAwardRequest} ProGetGoldBoxAwardRequest
     */
    ProGetGoldBoxAwardRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProGetGoldBoxAwardRequest)
            return object;
        var message = new $root.ProGetGoldBoxAwardRequest();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.roomId != null)
            message.roomId = object.roomId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProGetGoldBoxAwardRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProGetGoldBoxAwardRequest
     * @static
     * @param {ProGetGoldBoxAwardRequest} message ProGetGoldBoxAwardRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProGetGoldBoxAwardRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.userId = 0;
            object.gameId = 0;
            object.roomId = 0;
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            object.roomId = message.roomId;
        return object;
    };

    /**
     * Converts this ProGetGoldBoxAwardRequest to JSON.
     * @function toJSON
     * @memberof ProGetGoldBoxAwardRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProGetGoldBoxAwardRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProGetGoldBoxAwardRequest.MSGID
     * @enum {string}
     * @property {number} ID=354 ID value
     */
    ProGetGoldBoxAwardRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[354] = "ID"] = 354;
        return values;
    })();

    return ProGetGoldBoxAwardRequest;
})();

$root.AwardObject = (function() {

    /**
     * Properties of an AwardObject.
     * @exports IAwardObject
     * @interface IAwardObject
     * @property {AwardObject.AwardType|null} [awardType] AwardObject awardType
     * @property {number|null} [awardNums] AwardObject awardNums
     */

    /**
     * Constructs a new AwardObject.
     * @exports AwardObject
     * @classdesc Represents an AwardObject.
     * @implements IAwardObject
     * @constructor
     * @param {IAwardObject=} [properties] Properties to set
     */
    function AwardObject(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * AwardObject awardType.
     * @member {AwardObject.AwardType} awardType
     * @memberof AwardObject
     * @instance
     */
    AwardObject.prototype.awardType = 1;

    /**
     * AwardObject awardNums.
     * @member {number} awardNums
     * @memberof AwardObject
     * @instance
     */
    AwardObject.prototype.awardNums = 0;

    /**
     * Creates a new AwardObject instance using the specified properties.
     * @function create
     * @memberof AwardObject
     * @static
     * @param {IAwardObject=} [properties] Properties to set
     * @returns {AwardObject} AwardObject instance
     */
    AwardObject.create = function create(properties) {
        return new AwardObject(properties);
    };

    /**
     * Encodes the specified AwardObject message. Does not implicitly {@link AwardObject.verify|verify} messages.
     * @function encode
     * @memberof AwardObject
     * @static
     * @param {IAwardObject} message AwardObject message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AwardObject.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.awardType != null && message.hasOwnProperty("awardType"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.awardType);
        if (message.awardNums != null && message.hasOwnProperty("awardNums"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.awardNums);
        return writer;
    };

    /**
     * Encodes the specified AwardObject message, length delimited. Does not implicitly {@link AwardObject.verify|verify} messages.
     * @function encodeDelimited
     * @memberof AwardObject
     * @static
     * @param {IAwardObject} message AwardObject message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    AwardObject.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes an AwardObject message from the specified reader or buffer.
     * @function decode
     * @memberof AwardObject
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {AwardObject} AwardObject
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AwardObject.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.AwardObject();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.awardType = reader.int32();
                break;
            case 2:
                message.awardNums = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes an AwardObject message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof AwardObject
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {AwardObject} AwardObject
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    AwardObject.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies an AwardObject message.
     * @function verify
     * @memberof AwardObject
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    AwardObject.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.awardType != null && message.hasOwnProperty("awardType"))
            switch (message.awardType) {
            default:
                return "awardType: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            }
        if (message.awardNums != null && message.hasOwnProperty("awardNums"))
            if (!$util.isInteger(message.awardNums))
                return "awardNums: integer expected";
        return null;
    };

    /**
     * Creates an AwardObject message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof AwardObject
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {AwardObject} AwardObject
     */
    AwardObject.fromObject = function fromObject(object) {
        if (object instanceof $root.AwardObject)
            return object;
        var message = new $root.AwardObject();
        switch (object.awardType) {
        case "AWARD_COIN":
        case 1:
            message.awardType = 1;
            break;
        case "AWARD_TMCOIN":
        case 2:
            message.awardType = 2;
            break;
        case "AWARD_LOTTERY":
        case 3:
            message.awardType = 3;
            break;
        case "AWARD_TRUMPET":
        case 4:
            message.awardType = 4;
            break;
        }
        if (object.awardNums != null)
            message.awardNums = object.awardNums | 0;
        return message;
    };

    /**
     * Creates a plain object from an AwardObject message. Also converts values to other types if specified.
     * @function toObject
     * @memberof AwardObject
     * @static
     * @param {AwardObject} message AwardObject
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    AwardObject.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.awardType = options.enums === String ? "AWARD_COIN" : 1;
            object.awardNums = 0;
        }
        if (message.awardType != null && message.hasOwnProperty("awardType"))
            object.awardType = options.enums === String ? $root.AwardObject.AwardType[message.awardType] : message.awardType;
        if (message.awardNums != null && message.hasOwnProperty("awardNums"))
            object.awardNums = message.awardNums;
        return object;
    };

    /**
     * Converts this AwardObject to JSON.
     * @function toJSON
     * @memberof AwardObject
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    AwardObject.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * AwardType enum.
     * @name AwardObject.AwardType
     * @enum {string}
     * @property {number} AWARD_COIN=1 AWARD_COIN value
     * @property {number} AWARD_TMCOIN=2 AWARD_TMCOIN value
     * @property {number} AWARD_LOTTERY=3 AWARD_LOTTERY value
     * @property {number} AWARD_TRUMPET=4 AWARD_TRUMPET value
     */
    AwardObject.AwardType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "AWARD_COIN"] = 1;
        values[valuesById[2] = "AWARD_TMCOIN"] = 2;
        values[valuesById[3] = "AWARD_LOTTERY"] = 3;
        values[valuesById[4] = "AWARD_TRUMPET"] = 4;
        return values;
    })();

    return AwardObject;
})();

$root.ProGetGoldBoxAwardResponse = (function() {

    /**
     * Properties of a ProGetGoldBoxAwardResponse.
     * @exports IProGetGoldBoxAwardResponse
     * @interface IProGetGoldBoxAwardResponse
     * @property {number|null} [userId] ProGetGoldBoxAwardResponse userId
     * @property {number|null} [gameId] ProGetGoldBoxAwardResponse gameId
     * @property {IAwardObject|null} [award] ProGetGoldBoxAwardResponse award
     * @property {Array.<IAwardObject>|null} [missAwards] ProGetGoldBoxAwardResponse missAwards
     * @property {number|null} [roomId] ProGetGoldBoxAwardResponse roomId
     */

    /**
     * Constructs a new ProGetGoldBoxAwardResponse.
     * @exports ProGetGoldBoxAwardResponse
     * @classdesc Represents a ProGetGoldBoxAwardResponse.
     * @implements IProGetGoldBoxAwardResponse
     * @constructor
     * @param {IProGetGoldBoxAwardResponse=} [properties] Properties to set
     */
    function ProGetGoldBoxAwardResponse(properties) {
        this.missAwards = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProGetGoldBoxAwardResponse userId.
     * @member {number} userId
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     */
    ProGetGoldBoxAwardResponse.prototype.userId = 0;

    /**
     * ProGetGoldBoxAwardResponse gameId.
     * @member {number} gameId
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     */
    ProGetGoldBoxAwardResponse.prototype.gameId = 0;

    /**
     * ProGetGoldBoxAwardResponse award.
     * @member {IAwardObject|null|undefined} award
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     */
    ProGetGoldBoxAwardResponse.prototype.award = null;

    /**
     * ProGetGoldBoxAwardResponse missAwards.
     * @member {Array.<IAwardObject>} missAwards
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     */
    ProGetGoldBoxAwardResponse.prototype.missAwards = $util.emptyArray;

    /**
     * ProGetGoldBoxAwardResponse roomId.
     * @member {number} roomId
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     */
    ProGetGoldBoxAwardResponse.prototype.roomId = 0;

    /**
     * Creates a new ProGetGoldBoxAwardResponse instance using the specified properties.
     * @function create
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {IProGetGoldBoxAwardResponse=} [properties] Properties to set
     * @returns {ProGetGoldBoxAwardResponse} ProGetGoldBoxAwardResponse instance
     */
    ProGetGoldBoxAwardResponse.create = function create(properties) {
        return new ProGetGoldBoxAwardResponse(properties);
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardResponse message. Does not implicitly {@link ProGetGoldBoxAwardResponse.verify|verify} messages.
     * @function encode
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {IProGetGoldBoxAwardResponse} message ProGetGoldBoxAwardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.userId != null && message.hasOwnProperty("userId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userId);
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gameId);
        if (message.award != null && message.hasOwnProperty("award"))
            $root.AwardObject.encode(message.award, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
        if (message.missAwards != null && message.missAwards.length)
            for (var i = 0; i < message.missAwards.length; ++i)
                $root.AwardObject.encode(message.missAwards[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.roomId);
        return writer;
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardResponse message, length delimited. Does not implicitly {@link ProGetGoldBoxAwardResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {IProGetGoldBoxAwardResponse} message ProGetGoldBoxAwardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProGetGoldBoxAwardResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProGetGoldBoxAwardResponse} ProGetGoldBoxAwardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProGetGoldBoxAwardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.userId = reader.int32();
                break;
            case 3:
                message.gameId = reader.int32();
                break;
            case 4:
                message.award = $root.AwardObject.decode(reader, reader.uint32());
                break;
            case 5:
                if (!(message.missAwards && message.missAwards.length))
                    message.missAwards = [];
                message.missAwards.push($root.AwardObject.decode(reader, reader.uint32()));
                break;
            case 6:
                message.roomId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProGetGoldBoxAwardResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProGetGoldBoxAwardResponse} ProGetGoldBoxAwardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProGetGoldBoxAwardResponse message.
     * @function verify
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProGetGoldBoxAwardResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.userId != null && message.hasOwnProperty("userId"))
            if (!$util.isInteger(message.userId))
                return "userId: integer expected";
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            if (!$util.isInteger(message.gameId))
                return "gameId: integer expected";
        if (message.award != null && message.hasOwnProperty("award")) {
            var error = $root.AwardObject.verify(message.award);
            if (error)
                return "award." + error;
        }
        if (message.missAwards != null && message.hasOwnProperty("missAwards")) {
            if (!Array.isArray(message.missAwards))
                return "missAwards: array expected";
            for (var i = 0; i < message.missAwards.length; ++i) {
                var error = $root.AwardObject.verify(message.missAwards[i]);
                if (error)
                    return "missAwards." + error;
            }
        }
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            if (!$util.isInteger(message.roomId))
                return "roomId: integer expected";
        return null;
    };

    /**
     * Creates a ProGetGoldBoxAwardResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProGetGoldBoxAwardResponse} ProGetGoldBoxAwardResponse
     */
    ProGetGoldBoxAwardResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProGetGoldBoxAwardResponse)
            return object;
        var message = new $root.ProGetGoldBoxAwardResponse();
        if (object.userId != null)
            message.userId = object.userId | 0;
        if (object.gameId != null)
            message.gameId = object.gameId | 0;
        if (object.award != null) {
            if (typeof object.award !== "object")
                throw TypeError(".ProGetGoldBoxAwardResponse.award: object expected");
            message.award = $root.AwardObject.fromObject(object.award);
        }
        if (object.missAwards) {
            if (!Array.isArray(object.missAwards))
                throw TypeError(".ProGetGoldBoxAwardResponse.missAwards: array expected");
            message.missAwards = [];
            for (var i = 0; i < object.missAwards.length; ++i) {
                if (typeof object.missAwards[i] !== "object")
                    throw TypeError(".ProGetGoldBoxAwardResponse.missAwards: object expected");
                message.missAwards[i] = $root.AwardObject.fromObject(object.missAwards[i]);
            }
        }
        if (object.roomId != null)
            message.roomId = object.roomId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProGetGoldBoxAwardResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProGetGoldBoxAwardResponse
     * @static
     * @param {ProGetGoldBoxAwardResponse} message ProGetGoldBoxAwardResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProGetGoldBoxAwardResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.missAwards = [];
        if (options.defaults) {
            object.userId = 0;
            object.gameId = 0;
            object.award = null;
            object.roomId = 0;
        }
        if (message.userId != null && message.hasOwnProperty("userId"))
            object.userId = message.userId;
        if (message.gameId != null && message.hasOwnProperty("gameId"))
            object.gameId = message.gameId;
        if (message.award != null && message.hasOwnProperty("award"))
            object.award = $root.AwardObject.toObject(message.award, options);
        if (message.missAwards && message.missAwards.length) {
            object.missAwards = [];
            for (var j = 0; j < message.missAwards.length; ++j)
                object.missAwards[j] = $root.AwardObject.toObject(message.missAwards[j], options);
        }
        if (message.roomId != null && message.hasOwnProperty("roomId"))
            object.roomId = message.roomId;
        return object;
    };

    /**
     * Converts this ProGetGoldBoxAwardResponse to JSON.
     * @function toJSON
     * @memberof ProGetGoldBoxAwardResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProGetGoldBoxAwardResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProGetGoldBoxAwardResponse.MSGID
     * @enum {string}
     * @property {number} ID=355 ID value
     */
    ProGetGoldBoxAwardResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[355] = "ID"] = 355;
        return values;
    })();

    return ProGetGoldBoxAwardResponse;
})();

$root.ProGetGoldBoxAwardErrorResponse = (function() {

    /**
     * Properties of a ProGetGoldBoxAwardErrorResponse.
     * @exports IProGetGoldBoxAwardErrorResponse
     * @interface IProGetGoldBoxAwardErrorResponse
     * @property {ProGetGoldBoxAwardErrorResponse.ErrorType|null} [errorNo] ProGetGoldBoxAwardErrorResponse errorNo
     * @property {Uint8Array|null} [errorMsg] ProGetGoldBoxAwardErrorResponse errorMsg
     */

    /**
     * Constructs a new ProGetGoldBoxAwardErrorResponse.
     * @exports ProGetGoldBoxAwardErrorResponse
     * @classdesc Represents a ProGetGoldBoxAwardErrorResponse.
     * @implements IProGetGoldBoxAwardErrorResponse
     * @constructor
     * @param {IProGetGoldBoxAwardErrorResponse=} [properties] Properties to set
     */
    function ProGetGoldBoxAwardErrorResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProGetGoldBoxAwardErrorResponse errorNo.
     * @member {ProGetGoldBoxAwardErrorResponse.ErrorType} errorNo
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @instance
     */
    ProGetGoldBoxAwardErrorResponse.prototype.errorNo = 1;

    /**
     * ProGetGoldBoxAwardErrorResponse errorMsg.
     * @member {Uint8Array} errorMsg
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @instance
     */
    ProGetGoldBoxAwardErrorResponse.prototype.errorMsg = $util.newBuffer([]);

    /**
     * Creates a new ProGetGoldBoxAwardErrorResponse instance using the specified properties.
     * @function create
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {IProGetGoldBoxAwardErrorResponse=} [properties] Properties to set
     * @returns {ProGetGoldBoxAwardErrorResponse} ProGetGoldBoxAwardErrorResponse instance
     */
    ProGetGoldBoxAwardErrorResponse.create = function create(properties) {
        return new ProGetGoldBoxAwardErrorResponse(properties);
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardErrorResponse message. Does not implicitly {@link ProGetGoldBoxAwardErrorResponse.verify|verify} messages.
     * @function encode
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {IProGetGoldBoxAwardErrorResponse} message ProGetGoldBoxAwardErrorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardErrorResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.errorNo != null && message.hasOwnProperty("errorNo"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.errorNo);
        if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
            writer.uint32(/* id 3, wireType 2 =*/26).bytes(message.errorMsg);
        return writer;
    };

    /**
     * Encodes the specified ProGetGoldBoxAwardErrorResponse message, length delimited. Does not implicitly {@link ProGetGoldBoxAwardErrorResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {IProGetGoldBoxAwardErrorResponse} message ProGetGoldBoxAwardErrorResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProGetGoldBoxAwardErrorResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProGetGoldBoxAwardErrorResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProGetGoldBoxAwardErrorResponse} ProGetGoldBoxAwardErrorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardErrorResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProGetGoldBoxAwardErrorResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.errorNo = reader.int32();
                break;
            case 3:
                message.errorMsg = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProGetGoldBoxAwardErrorResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProGetGoldBoxAwardErrorResponse} ProGetGoldBoxAwardErrorResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProGetGoldBoxAwardErrorResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProGetGoldBoxAwardErrorResponse message.
     * @function verify
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProGetGoldBoxAwardErrorResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.errorNo != null && message.hasOwnProperty("errorNo"))
            switch (message.errorNo) {
            default:
                return "errorNo: enum value expected";
            case 1:
            case 2:
                break;
            }
        if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
            if (!(message.errorMsg && typeof message.errorMsg.length === "number" || $util.isString(message.errorMsg)))
                return "errorMsg: buffer expected";
        return null;
    };

    /**
     * Creates a ProGetGoldBoxAwardErrorResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProGetGoldBoxAwardErrorResponse} ProGetGoldBoxAwardErrorResponse
     */
    ProGetGoldBoxAwardErrorResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProGetGoldBoxAwardErrorResponse)
            return object;
        var message = new $root.ProGetGoldBoxAwardErrorResponse();
        switch (object.errorNo) {
        case "ERR_CONDITION":
        case 1:
            message.errorNo = 1;
            break;
        case "ERR_UNVALID_REQUEST":
        case 2:
            message.errorNo = 2;
            break;
        }
        if (object.errorMsg != null)
            if (typeof object.errorMsg === "string")
                $util.base64.decode(object.errorMsg, message.errorMsg = $util.newBuffer($util.base64.length(object.errorMsg)), 0);
            else if (object.errorMsg.length)
                message.errorMsg = object.errorMsg;
        return message;
    };

    /**
     * Creates a plain object from a ProGetGoldBoxAwardErrorResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @static
     * @param {ProGetGoldBoxAwardErrorResponse} message ProGetGoldBoxAwardErrorResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProGetGoldBoxAwardErrorResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.errorNo = options.enums === String ? "ERR_CONDITION" : 1;
            object.errorMsg = options.bytes === String ? "" : [];
        }
        if (message.errorNo != null && message.hasOwnProperty("errorNo"))
            object.errorNo = options.enums === String ? $root.ProGetGoldBoxAwardErrorResponse.ErrorType[message.errorNo] : message.errorNo;
        if (message.errorMsg != null && message.hasOwnProperty("errorMsg"))
            object.errorMsg = options.bytes === String ? $util.base64.encode(message.errorMsg, 0, message.errorMsg.length) : options.bytes === Array ? Array.prototype.slice.call(message.errorMsg) : message.errorMsg;
        return object;
    };

    /**
     * Converts this ProGetGoldBoxAwardErrorResponse to JSON.
     * @function toJSON
     * @memberof ProGetGoldBoxAwardErrorResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProGetGoldBoxAwardErrorResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProGetGoldBoxAwardErrorResponse.MSGID
     * @enum {string}
     * @property {number} ID=356 ID value
     */
    ProGetGoldBoxAwardErrorResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[356] = "ID"] = 356;
        return values;
    })();

    /**
     * ErrorType enum.
     * @name ProGetGoldBoxAwardErrorResponse.ErrorType
     * @enum {string}
     * @property {number} ERR_CONDITION=1 ERR_CONDITION value
     * @property {number} ERR_UNVALID_REQUEST=2 ERR_UNVALID_REQUEST value
     */
    ProGetGoldBoxAwardErrorResponse.ErrorType = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "ERR_CONDITION"] = 1;
        values[valuesById[2] = "ERR_UNVALID_REQUEST"] = 2;
        return values;
    })();

    return ProGetGoldBoxAwardErrorResponse;
})();

/**
 * PKGameState enum.
 * @exports PKGameState
 * @enum {string}
 * @property {number} PK_GAME_IDLE=1 PK_GAME_IDLE value
 * @property {number} PK_GAME_DICE_BANK=2 PK_GAME_DICE_BANK value
 * @property {number} PK_GAME_SEND=3 PK_GAME_SEND value
 * @property {number} PK_GAME_DICE_KING=4 PK_GAME_DICE_KING value
 * @property {number} PK_GAME_PLAY=5 PK_GAME_PLAY value
 * @property {number} PK_GAME_END=6 PK_GAME_END value
 */
$root.PKGameState = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "PK_GAME_IDLE"] = 1;
    values[valuesById[2] = "PK_GAME_DICE_BANK"] = 2;
    values[valuesById[3] = "PK_GAME_SEND"] = 3;
    values[valuesById[4] = "PK_GAME_DICE_KING"] = 4;
    values[valuesById[5] = "PK_GAME_PLAY"] = 5;
    values[valuesById[6] = "PK_GAME_END"] = 6;
    return values;
})();

/**
 * PKSEND_TYPE enum.
 * @exports PKSEND_TYPE
 * @enum {string}
 * @property {number} PK_NORMAL_SEND=1 PK_NORMAL_SEND value
 * @property {number} PK_RECOME_SEND=2 PK_RECOME_SEND value
 */
$root.PKSEND_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "PK_NORMAL_SEND"] = 1;
    values[valuesById[2] = "PK_RECOME_SEND"] = 2;
    return values;
})();

$root.ProPKGameStatusResponse = (function() {

    /**
     * Properties of a ProPKGameStatusResponse.
     * @exports IProPKGameStatusResponse
     * @interface IProPKGameStatusResponse
     * @property {PKGameState|null} [status] ProPKGameStatusResponse status
     */

    /**
     * Constructs a new ProPKGameStatusResponse.
     * @exports ProPKGameStatusResponse
     * @classdesc Represents a ProPKGameStatusResponse.
     * @implements IProPKGameStatusResponse
     * @constructor
     * @param {IProPKGameStatusResponse=} [properties] Properties to set
     */
    function ProPKGameStatusResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameStatusResponse status.
     * @member {PKGameState} status
     * @memberof ProPKGameStatusResponse
     * @instance
     */
    ProPKGameStatusResponse.prototype.status = 1;

    /**
     * Creates a new ProPKGameStatusResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {IProPKGameStatusResponse=} [properties] Properties to set
     * @returns {ProPKGameStatusResponse} ProPKGameStatusResponse instance
     */
    ProPKGameStatusResponse.create = function create(properties) {
        return new ProPKGameStatusResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameStatusResponse message. Does not implicitly {@link ProPKGameStatusResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {IProPKGameStatusResponse} message ProPKGameStatusResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameStatusResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.status != null && message.hasOwnProperty("status"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.status);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameStatusResponse message, length delimited. Does not implicitly {@link ProPKGameStatusResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {IProPKGameStatusResponse} message ProPKGameStatusResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameStatusResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameStatusResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameStatusResponse} ProPKGameStatusResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameStatusResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameStatusResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.status = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameStatusResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameStatusResponse} ProPKGameStatusResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameStatusResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameStatusResponse message.
     * @function verify
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameStatusResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.status != null && message.hasOwnProperty("status"))
            switch (message.status) {
            default:
                return "status: enum value expected";
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
                break;
            }
        return null;
    };

    /**
     * Creates a ProPKGameStatusResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameStatusResponse} ProPKGameStatusResponse
     */
    ProPKGameStatusResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameStatusResponse)
            return object;
        var message = new $root.ProPKGameStatusResponse();
        switch (object.status) {
        case "PK_GAME_IDLE":
        case 1:
            message.status = 1;
            break;
        case "PK_GAME_DICE_BANK":
        case 2:
            message.status = 2;
            break;
        case "PK_GAME_SEND":
        case 3:
            message.status = 3;
            break;
        case "PK_GAME_DICE_KING":
        case 4:
            message.status = 4;
            break;
        case "PK_GAME_PLAY":
        case 5:
            message.status = 5;
            break;
        case "PK_GAME_END":
        case 6:
            message.status = 6;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameStatusResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameStatusResponse
     * @static
     * @param {ProPKGameStatusResponse} message ProPKGameStatusResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameStatusResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.status = options.enums === String ? "PK_GAME_IDLE" : 1;
        if (message.status != null && message.hasOwnProperty("status"))
            object.status = options.enums === String ? $root.PKGameState[message.status] : message.status;
        return object;
    };

    /**
     * Converts this ProPKGameStatusResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameStatusResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameStatusResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameStatusResponse.MSGID
     * @enum {string}
     * @property {number} ID=2200 ID value
     */
    ProPKGameStatusResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2200] = "ID"] = 2200;
        return values;
    })();

    return ProPKGameStatusResponse;
})();

$root.ProPKGameDeskInfoResponse = (function() {

    /**
     * Properties of a ProPKGameDeskInfoResponse.
     * @exports IProPKGameDeskInfoResponse
     * @interface IProPKGameDeskInfoResponse
     * @property {number|null} [CellScore] ProPKGameDeskInfoResponse CellScore
     */

    /**
     * Constructs a new ProPKGameDeskInfoResponse.
     * @exports ProPKGameDeskInfoResponse
     * @classdesc Represents a ProPKGameDeskInfoResponse.
     * @implements IProPKGameDeskInfoResponse
     * @constructor
     * @param {IProPKGameDeskInfoResponse=} [properties] Properties to set
     */
    function ProPKGameDeskInfoResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameDeskInfoResponse CellScore.
     * @member {number} CellScore
     * @memberof ProPKGameDeskInfoResponse
     * @instance
     */
    ProPKGameDeskInfoResponse.prototype.CellScore = 0;

    /**
     * Creates a new ProPKGameDeskInfoResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {IProPKGameDeskInfoResponse=} [properties] Properties to set
     * @returns {ProPKGameDeskInfoResponse} ProPKGameDeskInfoResponse instance
     */
    ProPKGameDeskInfoResponse.create = function create(properties) {
        return new ProPKGameDeskInfoResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameDeskInfoResponse message. Does not implicitly {@link ProPKGameDeskInfoResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {IProPKGameDeskInfoResponse} message ProPKGameDeskInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDeskInfoResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CellScore);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameDeskInfoResponse message, length delimited. Does not implicitly {@link ProPKGameDeskInfoResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {IProPKGameDeskInfoResponse} message ProPKGameDeskInfoResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDeskInfoResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameDeskInfoResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameDeskInfoResponse} ProPKGameDeskInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDeskInfoResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameDeskInfoResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.CellScore = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameDeskInfoResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameDeskInfoResponse} ProPKGameDeskInfoResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDeskInfoResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameDeskInfoResponse message.
     * @function verify
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameDeskInfoResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            if (!$util.isInteger(message.CellScore))
                return "CellScore: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameDeskInfoResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameDeskInfoResponse} ProPKGameDeskInfoResponse
     */
    ProPKGameDeskInfoResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameDeskInfoResponse)
            return object;
        var message = new $root.ProPKGameDeskInfoResponse();
        if (object.CellScore != null)
            message.CellScore = object.CellScore | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameDeskInfoResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameDeskInfoResponse
     * @static
     * @param {ProPKGameDeskInfoResponse} message ProPKGameDeskInfoResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameDeskInfoResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.CellScore = 0;
        if (message.CellScore != null && message.hasOwnProperty("CellScore"))
            object.CellScore = message.CellScore;
        return object;
    };

    /**
     * Converts this ProPKGameDeskInfoResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameDeskInfoResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameDeskInfoResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameDeskInfoResponse.MSGID
     * @enum {string}
     * @property {number} ID=2201 ID value
     */
    ProPKGameDeskInfoResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2201] = "ID"] = 2201;
        return values;
    })();

    return ProPKGameDeskInfoResponse;
})();

$root.ProPKGameReadyNotify = (function() {

    /**
     * Properties of a ProPKGameReadyNotify.
     * @exports IProPKGameReadyNotify
     * @interface IProPKGameReadyNotify
     * @property {number|null} [seat] ProPKGameReadyNotify seat
     * @property {number|null} [time] ProPKGameReadyNotify time
     */

    /**
     * Constructs a new ProPKGameReadyNotify.
     * @exports ProPKGameReadyNotify
     * @classdesc Represents a ProPKGameReadyNotify.
     * @implements IProPKGameReadyNotify
     * @constructor
     * @param {IProPKGameReadyNotify=} [properties] Properties to set
     */
    function ProPKGameReadyNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameReadyNotify seat.
     * @member {number} seat
     * @memberof ProPKGameReadyNotify
     * @instance
     */
    ProPKGameReadyNotify.prototype.seat = 0;

    /**
     * ProPKGameReadyNotify time.
     * @member {number} time
     * @memberof ProPKGameReadyNotify
     * @instance
     */
    ProPKGameReadyNotify.prototype.time = 0;

    /**
     * Creates a new ProPKGameReadyNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {IProPKGameReadyNotify=} [properties] Properties to set
     * @returns {ProPKGameReadyNotify} ProPKGameReadyNotify instance
     */
    ProPKGameReadyNotify.create = function create(properties) {
        return new ProPKGameReadyNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameReadyNotify message. Does not implicitly {@link ProPKGameReadyNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {IProPKGameReadyNotify} message ProPKGameReadyNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameReadyNotify message, length delimited. Does not implicitly {@link ProPKGameReadyNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {IProPKGameReadyNotify} message ProPKGameReadyNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameReadyNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameReadyNotify} ProPKGameReadyNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameReadyNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameReadyNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameReadyNotify} ProPKGameReadyNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameReadyNotify message.
     * @function verify
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameReadyNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameReadyNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameReadyNotify} ProPKGameReadyNotify
     */
    ProPKGameReadyNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameReadyNotify)
            return object;
        var message = new $root.ProPKGameReadyNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameReadyNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameReadyNotify
     * @static
     * @param {ProPKGameReadyNotify} message ProPKGameReadyNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameReadyNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this ProPKGameReadyNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameReadyNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameReadyNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameReadyNotify.MSGID
     * @enum {string}
     * @property {number} ID=2202 ID value
     */
    ProPKGameReadyNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2202] = "ID"] = 2202;
        return values;
    })();

    return ProPKGameReadyNotify;
})();

$root.ProPKGameReadyRequest = (function() {

    /**
     * Properties of a ProPKGameReadyRequest.
     * @exports IProPKGameReadyRequest
     * @interface IProPKGameReadyRequest
     * @property {number|null} [seat] ProPKGameReadyRequest seat
     */

    /**
     * Constructs a new ProPKGameReadyRequest.
     * @exports ProPKGameReadyRequest
     * @classdesc Represents a ProPKGameReadyRequest.
     * @implements IProPKGameReadyRequest
     * @constructor
     * @param {IProPKGameReadyRequest=} [properties] Properties to set
     */
    function ProPKGameReadyRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameReadyRequest seat.
     * @member {number} seat
     * @memberof ProPKGameReadyRequest
     * @instance
     */
    ProPKGameReadyRequest.prototype.seat = 0;

    /**
     * Creates a new ProPKGameReadyRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {IProPKGameReadyRequest=} [properties] Properties to set
     * @returns {ProPKGameReadyRequest} ProPKGameReadyRequest instance
     */
    ProPKGameReadyRequest.create = function create(properties) {
        return new ProPKGameReadyRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameReadyRequest message. Does not implicitly {@link ProPKGameReadyRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {IProPKGameReadyRequest} message ProPKGameReadyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameReadyRequest message, length delimited. Does not implicitly {@link ProPKGameReadyRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {IProPKGameReadyRequest} message ProPKGameReadyRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameReadyRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameReadyRequest} ProPKGameReadyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameReadyRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameReadyRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameReadyRequest} ProPKGameReadyRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameReadyRequest message.
     * @function verify
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameReadyRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameReadyRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameReadyRequest} ProPKGameReadyRequest
     */
    ProPKGameReadyRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameReadyRequest)
            return object;
        var message = new $root.ProPKGameReadyRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameReadyRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameReadyRequest
     * @static
     * @param {ProPKGameReadyRequest} message ProPKGameReadyRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameReadyRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProPKGameReadyRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameReadyRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameReadyRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameReadyRequest.MSGID
     * @enum {string}
     * @property {number} ID=2203 ID value
     */
    ProPKGameReadyRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2203] = "ID"] = 2203;
        return values;
    })();

    return ProPKGameReadyRequest;
})();

$root.ProPKGameReadyResponse = (function() {

    /**
     * Properties of a ProPKGameReadyResponse.
     * @exports IProPKGameReadyResponse
     * @interface IProPKGameReadyResponse
     * @property {number|null} [seat] ProPKGameReadyResponse seat
     */

    /**
     * Constructs a new ProPKGameReadyResponse.
     * @exports ProPKGameReadyResponse
     * @classdesc Represents a ProPKGameReadyResponse.
     * @implements IProPKGameReadyResponse
     * @constructor
     * @param {IProPKGameReadyResponse=} [properties] Properties to set
     */
    function ProPKGameReadyResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameReadyResponse seat.
     * @member {number} seat
     * @memberof ProPKGameReadyResponse
     * @instance
     */
    ProPKGameReadyResponse.prototype.seat = 0;

    /**
     * Creates a new ProPKGameReadyResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {IProPKGameReadyResponse=} [properties] Properties to set
     * @returns {ProPKGameReadyResponse} ProPKGameReadyResponse instance
     */
    ProPKGameReadyResponse.create = function create(properties) {
        return new ProPKGameReadyResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameReadyResponse message. Does not implicitly {@link ProPKGameReadyResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {IProPKGameReadyResponse} message ProPKGameReadyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameReadyResponse message, length delimited. Does not implicitly {@link ProPKGameReadyResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {IProPKGameReadyResponse} message ProPKGameReadyResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameReadyResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameReadyResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameReadyResponse} ProPKGameReadyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameReadyResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameReadyResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameReadyResponse} ProPKGameReadyResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameReadyResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameReadyResponse message.
     * @function verify
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameReadyResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameReadyResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameReadyResponse} ProPKGameReadyResponse
     */
    ProPKGameReadyResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameReadyResponse)
            return object;
        var message = new $root.ProPKGameReadyResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameReadyResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameReadyResponse
     * @static
     * @param {ProPKGameReadyResponse} message ProPKGameReadyResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameReadyResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProPKGameReadyResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameReadyResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameReadyResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameReadyResponse.MSGID
     * @enum {string}
     * @property {number} ID=2204 ID value
     */
    ProPKGameReadyResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2204] = "ID"] = 2204;
        return values;
    })();

    return ProPKGameReadyResponse;
})();

$root.ProPKGameStart = (function() {

    /**
     * Properties of a ProPKGameStart.
     * @exports IProPKGameStart
     * @interface IProPKGameStart
     * @property {number|null} [bankerseat] ProPKGameStart bankerseat
     * @property {number|null} [gamecount] ProPKGameStart gamecount
     * @property {number|null} [outCardtimes] ProPKGameStart outCardtimes
     */

    /**
     * Constructs a new ProPKGameStart.
     * @exports ProPKGameStart
     * @classdesc Represents a ProPKGameStart.
     * @implements IProPKGameStart
     * @constructor
     * @param {IProPKGameStart=} [properties] Properties to set
     */
    function ProPKGameStart(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameStart bankerseat.
     * @member {number} bankerseat
     * @memberof ProPKGameStart
     * @instance
     */
    ProPKGameStart.prototype.bankerseat = 0;

    /**
     * ProPKGameStart gamecount.
     * @member {number} gamecount
     * @memberof ProPKGameStart
     * @instance
     */
    ProPKGameStart.prototype.gamecount = 0;

    /**
     * ProPKGameStart outCardtimes.
     * @member {number} outCardtimes
     * @memberof ProPKGameStart
     * @instance
     */
    ProPKGameStart.prototype.outCardtimes = 0;

    /**
     * Creates a new ProPKGameStart instance using the specified properties.
     * @function create
     * @memberof ProPKGameStart
     * @static
     * @param {IProPKGameStart=} [properties] Properties to set
     * @returns {ProPKGameStart} ProPKGameStart instance
     */
    ProPKGameStart.create = function create(properties) {
        return new ProPKGameStart(properties);
    };

    /**
     * Encodes the specified ProPKGameStart message. Does not implicitly {@link ProPKGameStart.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameStart
     * @static
     * @param {IProPKGameStart} message ProPKGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameStart.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.bankerseat);
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.gamecount);
        if (message.outCardtimes != null && message.hasOwnProperty("outCardtimes"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.outCardtimes);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameStart message, length delimited. Does not implicitly {@link ProPKGameStart.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameStart
     * @static
     * @param {IProPKGameStart} message ProPKGameStart message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameStart.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameStart message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameStart} ProPKGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameStart.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameStart();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.bankerseat = reader.int32();
                break;
            case 3:
                message.gamecount = reader.int32();
                break;
            case 4:
                message.outCardtimes = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameStart message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameStart
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameStart} ProPKGameStart
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameStart.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameStart message.
     * @function verify
     * @memberof ProPKGameStart
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameStart.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            if (!$util.isInteger(message.bankerseat))
                return "bankerseat: integer expected";
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            if (!$util.isInteger(message.gamecount))
                return "gamecount: integer expected";
        if (message.outCardtimes != null && message.hasOwnProperty("outCardtimes"))
            if (!$util.isInteger(message.outCardtimes))
                return "outCardtimes: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameStart message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameStart
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameStart} ProPKGameStart
     */
    ProPKGameStart.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameStart)
            return object;
        var message = new $root.ProPKGameStart();
        if (object.bankerseat != null)
            message.bankerseat = object.bankerseat | 0;
        if (object.gamecount != null)
            message.gamecount = object.gamecount | 0;
        if (object.outCardtimes != null)
            message.outCardtimes = object.outCardtimes | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameStart message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameStart
     * @static
     * @param {ProPKGameStart} message ProPKGameStart
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameStart.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.bankerseat = 0;
            object.gamecount = 0;
            object.outCardtimes = 0;
        }
        if (message.bankerseat != null && message.hasOwnProperty("bankerseat"))
            object.bankerseat = message.bankerseat;
        if (message.gamecount != null && message.hasOwnProperty("gamecount"))
            object.gamecount = message.gamecount;
        if (message.outCardtimes != null && message.hasOwnProperty("outCardtimes"))
            object.outCardtimes = message.outCardtimes;
        return object;
    };

    /**
     * Converts this ProPKGameStart to JSON.
     * @function toJSON
     * @memberof ProPKGameStart
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameStart.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameStart.MSGID
     * @enum {string}
     * @property {number} ID=2205 ID value
     */
    ProPKGameStart.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2205] = "ID"] = 2205;
        return values;
    })();

    return ProPKGameStart;
})();

$root.ProPKGameDiceNotify = (function() {

    /**
     * Properties of a ProPKGameDiceNotify.
     * @exports IProPKGameDiceNotify
     * @interface IProPKGameDiceNotify
     * @property {number|null} [seat] ProPKGameDiceNotify seat
     * @property {number|null} [time] ProPKGameDiceNotify time
     * @property {number|null} [dicecount] ProPKGameDiceNotify dicecount
     */

    /**
     * Constructs a new ProPKGameDiceNotify.
     * @exports ProPKGameDiceNotify
     * @classdesc Represents a ProPKGameDiceNotify.
     * @implements IProPKGameDiceNotify
     * @constructor
     * @param {IProPKGameDiceNotify=} [properties] Properties to set
     */
    function ProPKGameDiceNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameDiceNotify seat.
     * @member {number} seat
     * @memberof ProPKGameDiceNotify
     * @instance
     */
    ProPKGameDiceNotify.prototype.seat = 0;

    /**
     * ProPKGameDiceNotify time.
     * @member {number} time
     * @memberof ProPKGameDiceNotify
     * @instance
     */
    ProPKGameDiceNotify.prototype.time = 0;

    /**
     * ProPKGameDiceNotify dicecount.
     * @member {number} dicecount
     * @memberof ProPKGameDiceNotify
     * @instance
     */
    ProPKGameDiceNotify.prototype.dicecount = 0;

    /**
     * Creates a new ProPKGameDiceNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {IProPKGameDiceNotify=} [properties] Properties to set
     * @returns {ProPKGameDiceNotify} ProPKGameDiceNotify instance
     */
    ProPKGameDiceNotify.create = function create(properties) {
        return new ProPKGameDiceNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameDiceNotify message. Does not implicitly {@link ProPKGameDiceNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {IProPKGameDiceNotify} message ProPKGameDiceNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameDiceNotify message, length delimited. Does not implicitly {@link ProPKGameDiceNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {IProPKGameDiceNotify} message ProPKGameDiceNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameDiceNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameDiceNotify} ProPKGameDiceNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameDiceNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            case 4:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameDiceNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameDiceNotify} ProPKGameDiceNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameDiceNotify message.
     * @function verify
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameDiceNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameDiceNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameDiceNotify} ProPKGameDiceNotify
     */
    ProPKGameDiceNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameDiceNotify)
            return object;
        var message = new $root.ProPKGameDiceNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameDiceNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameDiceNotify
     * @static
     * @param {ProPKGameDiceNotify} message ProPKGameDiceNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameDiceNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProPKGameDiceNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameDiceNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameDiceNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameDiceNotify.MSGID
     * @enum {string}
     * @property {number} ID=2206 ID value
     */
    ProPKGameDiceNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2206] = "ID"] = 2206;
        return values;
    })();

    return ProPKGameDiceNotify;
})();

$root.ProPKGameDiceRequest = (function() {

    /**
     * Properties of a ProPKGameDiceRequest.
     * @exports IProPKGameDiceRequest
     * @interface IProPKGameDiceRequest
     * @property {number|null} [seat] ProPKGameDiceRequest seat
     * @property {number|null} [dicecount] ProPKGameDiceRequest dicecount
     */

    /**
     * Constructs a new ProPKGameDiceRequest.
     * @exports ProPKGameDiceRequest
     * @classdesc Represents a ProPKGameDiceRequest.
     * @implements IProPKGameDiceRequest
     * @constructor
     * @param {IProPKGameDiceRequest=} [properties] Properties to set
     */
    function ProPKGameDiceRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameDiceRequest seat.
     * @member {number} seat
     * @memberof ProPKGameDiceRequest
     * @instance
     */
    ProPKGameDiceRequest.prototype.seat = 0;

    /**
     * ProPKGameDiceRequest dicecount.
     * @member {number} dicecount
     * @memberof ProPKGameDiceRequest
     * @instance
     */
    ProPKGameDiceRequest.prototype.dicecount = 0;

    /**
     * Creates a new ProPKGameDiceRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {IProPKGameDiceRequest=} [properties] Properties to set
     * @returns {ProPKGameDiceRequest} ProPKGameDiceRequest instance
     */
    ProPKGameDiceRequest.create = function create(properties) {
        return new ProPKGameDiceRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameDiceRequest message. Does not implicitly {@link ProPKGameDiceRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {IProPKGameDiceRequest} message ProPKGameDiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameDiceRequest message, length delimited. Does not implicitly {@link ProPKGameDiceRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {IProPKGameDiceRequest} message ProPKGameDiceRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameDiceRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameDiceRequest} ProPKGameDiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameDiceRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameDiceRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameDiceRequest} ProPKGameDiceRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameDiceRequest message.
     * @function verify
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameDiceRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameDiceRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameDiceRequest} ProPKGameDiceRequest
     */
    ProPKGameDiceRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameDiceRequest)
            return object;
        var message = new $root.ProPKGameDiceRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameDiceRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameDiceRequest
     * @static
     * @param {ProPKGameDiceRequest} message ProPKGameDiceRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameDiceRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProPKGameDiceRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameDiceRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameDiceRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameDiceRequest.MSGID
     * @enum {string}
     * @property {number} ID=2207 ID value
     */
    ProPKGameDiceRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2207] = "ID"] = 2207;
        return values;
    })();

    return ProPKGameDiceRequest;
})();

$root.ProPKGameDiceResult = (function() {

    /**
     * Properties of a ProPKGameDiceResult.
     * @exports IProPKGameDiceResult
     * @interface IProPKGameDiceResult
     * @property {number|null} [seat] ProPKGameDiceResult seat
     * @property {Array.<number>|null} [result] ProPKGameDiceResult result
     * @property {number|null} [dicecount] ProPKGameDiceResult dicecount
     */

    /**
     * Constructs a new ProPKGameDiceResult.
     * @exports ProPKGameDiceResult
     * @classdesc Represents a ProPKGameDiceResult.
     * @implements IProPKGameDiceResult
     * @constructor
     * @param {IProPKGameDiceResult=} [properties] Properties to set
     */
    function ProPKGameDiceResult(properties) {
        this.result = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameDiceResult seat.
     * @member {number} seat
     * @memberof ProPKGameDiceResult
     * @instance
     */
    ProPKGameDiceResult.prototype.seat = 0;

    /**
     * ProPKGameDiceResult result.
     * @member {Array.<number>} result
     * @memberof ProPKGameDiceResult
     * @instance
     */
    ProPKGameDiceResult.prototype.result = $util.emptyArray;

    /**
     * ProPKGameDiceResult dicecount.
     * @member {number} dicecount
     * @memberof ProPKGameDiceResult
     * @instance
     */
    ProPKGameDiceResult.prototype.dicecount = 0;

    /**
     * Creates a new ProPKGameDiceResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameDiceResult
     * @static
     * @param {IProPKGameDiceResult=} [properties] Properties to set
     * @returns {ProPKGameDiceResult} ProPKGameDiceResult instance
     */
    ProPKGameDiceResult.create = function create(properties) {
        return new ProPKGameDiceResult(properties);
    };

    /**
     * Encodes the specified ProPKGameDiceResult message. Does not implicitly {@link ProPKGameDiceResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameDiceResult
     * @static
     * @param {IProPKGameDiceResult} message ProPKGameDiceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.result != null && message.result.length)
            for (var i = 0; i < message.result.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result[i]);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameDiceResult message, length delimited. Does not implicitly {@link ProPKGameDiceResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameDiceResult
     * @static
     * @param {IProPKGameDiceResult} message ProPKGameDiceResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDiceResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameDiceResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameDiceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameDiceResult} ProPKGameDiceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameDiceResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.result && message.result.length))
                    message.result = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.result.push(reader.int32());
                } else
                    message.result.push(reader.int32());
                break;
            case 4:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameDiceResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameDiceResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameDiceResult} ProPKGameDiceResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDiceResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameDiceResult message.
     * @function verify
     * @memberof ProPKGameDiceResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameDiceResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.result != null && message.hasOwnProperty("result")) {
            if (!Array.isArray(message.result))
                return "result: array expected";
            for (var i = 0; i < message.result.length; ++i)
                if (!$util.isInteger(message.result[i]))
                    return "result: integer[] expected";
        }
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameDiceResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameDiceResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameDiceResult} ProPKGameDiceResult
     */
    ProPKGameDiceResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameDiceResult)
            return object;
        var message = new $root.ProPKGameDiceResult();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.result) {
            if (!Array.isArray(object.result))
                throw TypeError(".ProPKGameDiceResult.result: array expected");
            message.result = [];
            for (var i = 0; i < object.result.length; ++i)
                message.result[i] = object.result[i] | 0;
        }
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameDiceResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameDiceResult
     * @static
     * @param {ProPKGameDiceResult} message ProPKGameDiceResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameDiceResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.result = [];
        if (options.defaults) {
            object.seat = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.result && message.result.length) {
            object.result = [];
            for (var j = 0; j < message.result.length; ++j)
                object.result[j] = message.result[j];
        }
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProPKGameDiceResult to JSON.
     * @function toJSON
     * @memberof ProPKGameDiceResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameDiceResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameDiceResult.MSGID
     * @enum {string}
     * @property {number} ID=2208 ID value
     */
    ProPKGameDiceResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2208] = "ID"] = 2208;
        return values;
    })();

    return ProPKGameDiceResult;
})();

$root.ProPKGameSendMahs = (function() {

    /**
     * Properties of a ProPKGameSendMahs.
     * @exports IProPKGameSendMahs
     * @interface IProPKGameSendMahs
     * @property {number|null} [seat] ProPKGameSendMahs seat
     * @property {Array.<number>|null} [mahs] ProPKGameSendMahs mahs
     * @property {Array.<number>|null} [mahscount] ProPKGameSendMahs mahscount
     * @property {number|null} [cbLeftCount] ProPKGameSendMahs cbLeftCount
     * @property {boolean|null} [bIsRecome] ProPKGameSendMahs bIsRecome
     */

    /**
     * Constructs a new ProPKGameSendMahs.
     * @exports ProPKGameSendMahs
     * @classdesc Represents a ProPKGameSendMahs.
     * @implements IProPKGameSendMahs
     * @constructor
     * @param {IProPKGameSendMahs=} [properties] Properties to set
     */
    function ProPKGameSendMahs(properties) {
        this.mahs = [];
        this.mahscount = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameSendMahs seat.
     * @member {number} seat
     * @memberof ProPKGameSendMahs
     * @instance
     */
    ProPKGameSendMahs.prototype.seat = 0;

    /**
     * ProPKGameSendMahs mahs.
     * @member {Array.<number>} mahs
     * @memberof ProPKGameSendMahs
     * @instance
     */
    ProPKGameSendMahs.prototype.mahs = $util.emptyArray;

    /**
     * ProPKGameSendMahs mahscount.
     * @member {Array.<number>} mahscount
     * @memberof ProPKGameSendMahs
     * @instance
     */
    ProPKGameSendMahs.prototype.mahscount = $util.emptyArray;

    /**
     * ProPKGameSendMahs cbLeftCount.
     * @member {number} cbLeftCount
     * @memberof ProPKGameSendMahs
     * @instance
     */
    ProPKGameSendMahs.prototype.cbLeftCount = 0;

    /**
     * ProPKGameSendMahs bIsRecome.
     * @member {boolean} bIsRecome
     * @memberof ProPKGameSendMahs
     * @instance
     */
    ProPKGameSendMahs.prototype.bIsRecome = false;

    /**
     * Creates a new ProPKGameSendMahs instance using the specified properties.
     * @function create
     * @memberof ProPKGameSendMahs
     * @static
     * @param {IProPKGameSendMahs=} [properties] Properties to set
     * @returns {ProPKGameSendMahs} ProPKGameSendMahs instance
     */
    ProPKGameSendMahs.create = function create(properties) {
        return new ProPKGameSendMahs(properties);
    };

    /**
     * Encodes the specified ProPKGameSendMahs message. Does not implicitly {@link ProPKGameSendMahs.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameSendMahs
     * @static
     * @param {IProPKGameSendMahs} message ProPKGameSendMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.mahs != null && message.mahs.length)
            for (var i = 0; i < message.mahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mahs[i]);
        if (message.mahscount != null && message.mahscount.length)
            for (var i = 0; i < message.mahscount.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.mahscount[i]);
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cbLeftCount);
        if (message.bIsRecome != null && message.hasOwnProperty("bIsRecome"))
            writer.uint32(/* id 6, wireType 0 =*/48).bool(message.bIsRecome);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameSendMahs message, length delimited. Does not implicitly {@link ProPKGameSendMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameSendMahs
     * @static
     * @param {IProPKGameSendMahs} message ProPKGameSendMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameSendMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameSendMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameSendMahs} ProPKGameSendMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameSendMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.mahs && message.mahs.length))
                    message.mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahs.push(reader.int32());
                } else
                    message.mahs.push(reader.int32());
                break;
            case 4:
                if (!(message.mahscount && message.mahscount.length))
                    message.mahscount = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahscount.push(reader.int32());
                } else
                    message.mahscount.push(reader.int32());
                break;
            case 5:
                message.cbLeftCount = reader.int32();
                break;
            case 6:
                message.bIsRecome = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameSendMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameSendMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameSendMahs} ProPKGameSendMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameSendMahs message.
     * @function verify
     * @memberof ProPKGameSendMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameSendMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.mahs != null && message.hasOwnProperty("mahs")) {
            if (!Array.isArray(message.mahs))
                return "mahs: array expected";
            for (var i = 0; i < message.mahs.length; ++i)
                if (!$util.isInteger(message.mahs[i]))
                    return "mahs: integer[] expected";
        }
        if (message.mahscount != null && message.hasOwnProperty("mahscount")) {
            if (!Array.isArray(message.mahscount))
                return "mahscount: array expected";
            for (var i = 0; i < message.mahscount.length; ++i)
                if (!$util.isInteger(message.mahscount[i]))
                    return "mahscount: integer[] expected";
        }
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            if (!$util.isInteger(message.cbLeftCount))
                return "cbLeftCount: integer expected";
        if (message.bIsRecome != null && message.hasOwnProperty("bIsRecome"))
            if (typeof message.bIsRecome !== "boolean")
                return "bIsRecome: boolean expected";
        return null;
    };

    /**
     * Creates a ProPKGameSendMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameSendMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameSendMahs} ProPKGameSendMahs
     */
    ProPKGameSendMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameSendMahs)
            return object;
        var message = new $root.ProPKGameSendMahs();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.mahs) {
            if (!Array.isArray(object.mahs))
                throw TypeError(".ProPKGameSendMahs.mahs: array expected");
            message.mahs = [];
            for (var i = 0; i < object.mahs.length; ++i)
                message.mahs[i] = object.mahs[i] | 0;
        }
        if (object.mahscount) {
            if (!Array.isArray(object.mahscount))
                throw TypeError(".ProPKGameSendMahs.mahscount: array expected");
            message.mahscount = [];
            for (var i = 0; i < object.mahscount.length; ++i)
                message.mahscount[i] = object.mahscount[i] | 0;
        }
        if (object.cbLeftCount != null)
            message.cbLeftCount = object.cbLeftCount | 0;
        if (object.bIsRecome != null)
            message.bIsRecome = Boolean(object.bIsRecome);
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameSendMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameSendMahs
     * @static
     * @param {ProPKGameSendMahs} message ProPKGameSendMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameSendMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.mahs = [];
            object.mahscount = [];
        }
        if (options.defaults) {
            object.seat = 0;
            object.cbLeftCount = 0;
            object.bIsRecome = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.mahs && message.mahs.length) {
            object.mahs = [];
            for (var j = 0; j < message.mahs.length; ++j)
                object.mahs[j] = message.mahs[j];
        }
        if (message.mahscount && message.mahscount.length) {
            object.mahscount = [];
            for (var j = 0; j < message.mahscount.length; ++j)
                object.mahscount[j] = message.mahscount[j];
        }
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            object.cbLeftCount = message.cbLeftCount;
        if (message.bIsRecome != null && message.hasOwnProperty("bIsRecome"))
            object.bIsRecome = message.bIsRecome;
        return object;
    };

    /**
     * Converts this ProPKGameSendMahs to JSON.
     * @function toJSON
     * @memberof ProPKGameSendMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameSendMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameSendMahs.MSGID
     * @enum {string}
     * @property {number} ID=2209 ID value
     */
    ProPKGameSendMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2209] = "ID"] = 2209;
        return values;
    })();

    return ProPKGameSendMahs;
})();

/**
 * PKKIGN_TYPE enum.
 * @exports PKKIGN_TYPE
 * @enum {string}
 * @property {number} PK_KING_UP=1 PK_KING_UP value
 * @property {number} PK_KING_HUITOU=2 PK_KING_HUITOU value
 * @property {number} PK_KING_MAILEI=3 PK_KING_MAILEI value
 */
$root.PKKIGN_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[1] = "PK_KING_UP"] = 1;
    values[valuesById[2] = "PK_KING_HUITOU"] = 2;
    values[valuesById[3] = "PK_KING_MAILEI"] = 3;
    return values;
})();

$root.ProPKGameKingData = (function() {

    /**
     * Properties of a ProPKGameKingData.
     * @exports IProPKGameKingData
     * @interface IProPKGameKingData
     * @property {number|null} [seat] ProPKGameKingData seat
     * @property {Array.<number>|null} [mahs] ProPKGameKingData mahs
     * @property {Array.<number>|null} [downKingScore] ProPKGameKingData downKingScore
     * @property {Array.<number>|null} [kingcount] ProPKGameKingData kingcount
     * @property {Array.<number>|null} [viceking] ProPKGameKingData viceking
     * @property {PKSEND_TYPE|null} [notifyType] ProPKGameKingData notifyType
     * @property {PKKIGN_TYPE|null} [kingType] ProPKGameKingData kingType
     * @property {Array.<number>|null} [cbChongGuang] ProPKGameKingData cbChongGuang
     * @property {Array.<number>|null} [cbBaWangKing] ProPKGameKingData cbBaWangKing
     */

    /**
     * Constructs a new ProPKGameKingData.
     * @exports ProPKGameKingData
     * @classdesc Represents a ProPKGameKingData.
     * @implements IProPKGameKingData
     * @constructor
     * @param {IProPKGameKingData=} [properties] Properties to set
     */
    function ProPKGameKingData(properties) {
        this.mahs = [];
        this.downKingScore = [];
        this.kingcount = [];
        this.viceking = [];
        this.cbChongGuang = [];
        this.cbBaWangKing = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameKingData seat.
     * @member {number} seat
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.seat = 0;

    /**
     * ProPKGameKingData mahs.
     * @member {Array.<number>} mahs
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.mahs = $util.emptyArray;

    /**
     * ProPKGameKingData downKingScore.
     * @member {Array.<number>} downKingScore
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.downKingScore = $util.emptyArray;

    /**
     * ProPKGameKingData kingcount.
     * @member {Array.<number>} kingcount
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.kingcount = $util.emptyArray;

    /**
     * ProPKGameKingData viceking.
     * @member {Array.<number>} viceking
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.viceking = $util.emptyArray;

    /**
     * ProPKGameKingData notifyType.
     * @member {PKSEND_TYPE} notifyType
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.notifyType = 1;

    /**
     * ProPKGameKingData kingType.
     * @member {PKKIGN_TYPE} kingType
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.kingType = 1;

    /**
     * ProPKGameKingData cbChongGuang.
     * @member {Array.<number>} cbChongGuang
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.cbChongGuang = $util.emptyArray;

    /**
     * ProPKGameKingData cbBaWangKing.
     * @member {Array.<number>} cbBaWangKing
     * @memberof ProPKGameKingData
     * @instance
     */
    ProPKGameKingData.prototype.cbBaWangKing = $util.emptyArray;

    /**
     * Creates a new ProPKGameKingData instance using the specified properties.
     * @function create
     * @memberof ProPKGameKingData
     * @static
     * @param {IProPKGameKingData=} [properties] Properties to set
     * @returns {ProPKGameKingData} ProPKGameKingData instance
     */
    ProPKGameKingData.create = function create(properties) {
        return new ProPKGameKingData(properties);
    };

    /**
     * Encodes the specified ProPKGameKingData message. Does not implicitly {@link ProPKGameKingData.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameKingData
     * @static
     * @param {IProPKGameKingData} message ProPKGameKingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameKingData.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.mahs != null && message.mahs.length)
            for (var i = 0; i < message.mahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.mahs[i]);
        if (message.downKingScore != null && message.downKingScore.length)
            for (var i = 0; i < message.downKingScore.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.downKingScore[i]);
        if (message.kingcount != null && message.kingcount.length)
            for (var i = 0; i < message.kingcount.length; ++i)
                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.kingcount[i]);
        if (message.viceking != null && message.viceking.length)
            for (var i = 0; i < message.viceking.length; ++i)
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.viceking[i]);
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.notifyType);
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            writer.uint32(/* id 8, wireType 0 =*/64).int32(message.kingType);
        if (message.cbChongGuang != null && message.cbChongGuang.length)
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.cbChongGuang[i]);
        if (message.cbBaWangKing != null && message.cbBaWangKing.length)
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.cbBaWangKing[i]);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameKingData message, length delimited. Does not implicitly {@link ProPKGameKingData.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameKingData
     * @static
     * @param {IProPKGameKingData} message ProPKGameKingData message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameKingData.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameKingData message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameKingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameKingData} ProPKGameKingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameKingData.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameKingData();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.mahs && message.mahs.length))
                    message.mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.mahs.push(reader.int32());
                } else
                    message.mahs.push(reader.int32());
                break;
            case 4:
                if (!(message.downKingScore && message.downKingScore.length))
                    message.downKingScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.downKingScore.push(reader.int32());
                } else
                    message.downKingScore.push(reader.int32());
                break;
            case 5:
                if (!(message.kingcount && message.kingcount.length))
                    message.kingcount = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.kingcount.push(reader.int32());
                } else
                    message.kingcount.push(reader.int32());
                break;
            case 6:
                if (!(message.viceking && message.viceking.length))
                    message.viceking = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.viceking.push(reader.int32());
                } else
                    message.viceking.push(reader.int32());
                break;
            case 7:
                message.notifyType = reader.int32();
                break;
            case 8:
                message.kingType = reader.int32();
                break;
            case 9:
                if (!(message.cbChongGuang && message.cbChongGuang.length))
                    message.cbChongGuang = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbChongGuang.push(reader.int32());
                } else
                    message.cbChongGuang.push(reader.int32());
                break;
            case 10:
                if (!(message.cbBaWangKing && message.cbBaWangKing.length))
                    message.cbBaWangKing = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbBaWangKing.push(reader.int32());
                } else
                    message.cbBaWangKing.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameKingData message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameKingData
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameKingData} ProPKGameKingData
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameKingData.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameKingData message.
     * @function verify
     * @memberof ProPKGameKingData
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameKingData.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.mahs != null && message.hasOwnProperty("mahs")) {
            if (!Array.isArray(message.mahs))
                return "mahs: array expected";
            for (var i = 0; i < message.mahs.length; ++i)
                if (!$util.isInteger(message.mahs[i]))
                    return "mahs: integer[] expected";
        }
        if (message.downKingScore != null && message.hasOwnProperty("downKingScore")) {
            if (!Array.isArray(message.downKingScore))
                return "downKingScore: array expected";
            for (var i = 0; i < message.downKingScore.length; ++i)
                if (!$util.isInteger(message.downKingScore[i]))
                    return "downKingScore: integer[] expected";
        }
        if (message.kingcount != null && message.hasOwnProperty("kingcount")) {
            if (!Array.isArray(message.kingcount))
                return "kingcount: array expected";
            for (var i = 0; i < message.kingcount.length; ++i)
                if (!$util.isInteger(message.kingcount[i]))
                    return "kingcount: integer[] expected";
        }
        if (message.viceking != null && message.hasOwnProperty("viceking")) {
            if (!Array.isArray(message.viceking))
                return "viceking: array expected";
            for (var i = 0; i < message.viceking.length; ++i)
                if (!$util.isInteger(message.viceking[i]))
                    return "viceking: integer[] expected";
        }
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            switch (message.notifyType) {
            default:
                return "notifyType: enum value expected";
            case 1:
            case 2:
                break;
            }
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            switch (message.kingType) {
            default:
                return "kingType: enum value expected";
            case 1:
            case 2:
            case 3:
                break;
            }
        if (message.cbChongGuang != null && message.hasOwnProperty("cbChongGuang")) {
            if (!Array.isArray(message.cbChongGuang))
                return "cbChongGuang: array expected";
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                if (!$util.isInteger(message.cbChongGuang[i]))
                    return "cbChongGuang: integer[] expected";
        }
        if (message.cbBaWangKing != null && message.hasOwnProperty("cbBaWangKing")) {
            if (!Array.isArray(message.cbBaWangKing))
                return "cbBaWangKing: array expected";
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                if (!$util.isInteger(message.cbBaWangKing[i]))
                    return "cbBaWangKing: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProPKGameKingData message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameKingData
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameKingData} ProPKGameKingData
     */
    ProPKGameKingData.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameKingData)
            return object;
        var message = new $root.ProPKGameKingData();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.mahs) {
            if (!Array.isArray(object.mahs))
                throw TypeError(".ProPKGameKingData.mahs: array expected");
            message.mahs = [];
            for (var i = 0; i < object.mahs.length; ++i)
                message.mahs[i] = object.mahs[i] | 0;
        }
        if (object.downKingScore) {
            if (!Array.isArray(object.downKingScore))
                throw TypeError(".ProPKGameKingData.downKingScore: array expected");
            message.downKingScore = [];
            for (var i = 0; i < object.downKingScore.length; ++i)
                message.downKingScore[i] = object.downKingScore[i] | 0;
        }
        if (object.kingcount) {
            if (!Array.isArray(object.kingcount))
                throw TypeError(".ProPKGameKingData.kingcount: array expected");
            message.kingcount = [];
            for (var i = 0; i < object.kingcount.length; ++i)
                message.kingcount[i] = object.kingcount[i] | 0;
        }
        if (object.viceking) {
            if (!Array.isArray(object.viceking))
                throw TypeError(".ProPKGameKingData.viceking: array expected");
            message.viceking = [];
            for (var i = 0; i < object.viceking.length; ++i)
                message.viceking[i] = object.viceking[i] | 0;
        }
        switch (object.notifyType) {
        case "PK_NORMAL_SEND":
        case 1:
            message.notifyType = 1;
            break;
        case "PK_RECOME_SEND":
        case 2:
            message.notifyType = 2;
            break;
        }
        switch (object.kingType) {
        case "PK_KING_UP":
        case 1:
            message.kingType = 1;
            break;
        case "PK_KING_HUITOU":
        case 2:
            message.kingType = 2;
            break;
        case "PK_KING_MAILEI":
        case 3:
            message.kingType = 3;
            break;
        }
        if (object.cbChongGuang) {
            if (!Array.isArray(object.cbChongGuang))
                throw TypeError(".ProPKGameKingData.cbChongGuang: array expected");
            message.cbChongGuang = [];
            for (var i = 0; i < object.cbChongGuang.length; ++i)
                message.cbChongGuang[i] = object.cbChongGuang[i] | 0;
        }
        if (object.cbBaWangKing) {
            if (!Array.isArray(object.cbBaWangKing))
                throw TypeError(".ProPKGameKingData.cbBaWangKing: array expected");
            message.cbBaWangKing = [];
            for (var i = 0; i < object.cbBaWangKing.length; ++i)
                message.cbBaWangKing[i] = object.cbBaWangKing[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameKingData message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameKingData
     * @static
     * @param {ProPKGameKingData} message ProPKGameKingData
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameKingData.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.mahs = [];
            object.downKingScore = [];
            object.kingcount = [];
            object.viceking = [];
            object.cbChongGuang = [];
            object.cbBaWangKing = [];
        }
        if (options.defaults) {
            object.seat = 0;
            object.notifyType = options.enums === String ? "PK_NORMAL_SEND" : 1;
            object.kingType = options.enums === String ? "PK_KING_UP" : 1;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.mahs && message.mahs.length) {
            object.mahs = [];
            for (var j = 0; j < message.mahs.length; ++j)
                object.mahs[j] = message.mahs[j];
        }
        if (message.downKingScore && message.downKingScore.length) {
            object.downKingScore = [];
            for (var j = 0; j < message.downKingScore.length; ++j)
                object.downKingScore[j] = message.downKingScore[j];
        }
        if (message.kingcount && message.kingcount.length) {
            object.kingcount = [];
            for (var j = 0; j < message.kingcount.length; ++j)
                object.kingcount[j] = message.kingcount[j];
        }
        if (message.viceking && message.viceking.length) {
            object.viceking = [];
            for (var j = 0; j < message.viceking.length; ++j)
                object.viceking[j] = message.viceking[j];
        }
        if (message.notifyType != null && message.hasOwnProperty("notifyType"))
            object.notifyType = options.enums === String ? $root.PKSEND_TYPE[message.notifyType] : message.notifyType;
        if (message.kingType != null && message.hasOwnProperty("kingType"))
            object.kingType = options.enums === String ? $root.PKKIGN_TYPE[message.kingType] : message.kingType;
        if (message.cbChongGuang && message.cbChongGuang.length) {
            object.cbChongGuang = [];
            for (var j = 0; j < message.cbChongGuang.length; ++j)
                object.cbChongGuang[j] = message.cbChongGuang[j];
        }
        if (message.cbBaWangKing && message.cbBaWangKing.length) {
            object.cbBaWangKing = [];
            for (var j = 0; j < message.cbBaWangKing.length; ++j)
                object.cbBaWangKing[j] = message.cbBaWangKing[j];
        }
        return object;
    };

    /**
     * Converts this ProPKGameKingData to JSON.
     * @function toJSON
     * @memberof ProPKGameKingData
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameKingData.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameKingData.MSGID
     * @enum {string}
     * @property {number} ID=2210 ID value
     */
    ProPKGameKingData.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2210] = "ID"] = 2210;
        return values;
    })();

    return ProPKGameKingData;
})();

$root.ProPKGameOutMahsResponse = (function() {

    /**
     * Properties of a ProPKGameOutMahsResponse.
     * @exports IProPKGameOutMahsResponse
     * @interface IProPKGameOutMahsResponse
     * @property {number|null} [seat] ProPKGameOutMahsResponse seat
     * @property {Array.<number>|null} [outMahs] ProPKGameOutMahsResponse outMahs
     * @property {Array.<number>|null} [handmahs] ProPKGameOutMahsResponse handmahs
     * @property {number|null} [cardCount] ProPKGameOutMahsResponse cardCount
     * @property {number|null} [cardType] ProPKGameOutMahsResponse cardType
     * @property {number|null} [cardtypeflg] ProPKGameOutMahsResponse cardtypeflg
     */

    /**
     * Constructs a new ProPKGameOutMahsResponse.
     * @exports ProPKGameOutMahsResponse
     * @classdesc Represents a ProPKGameOutMahsResponse.
     * @implements IProPKGameOutMahsResponse
     * @constructor
     * @param {IProPKGameOutMahsResponse=} [properties] Properties to set
     */
    function ProPKGameOutMahsResponse(properties) {
        this.outMahs = [];
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameOutMahsResponse seat.
     * @member {number} seat
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.seat = 0;

    /**
     * ProPKGameOutMahsResponse outMahs.
     * @member {Array.<number>} outMahs
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.outMahs = $util.emptyArray;

    /**
     * ProPKGameOutMahsResponse handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.handmahs = $util.emptyArray;

    /**
     * ProPKGameOutMahsResponse cardCount.
     * @member {number} cardCount
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.cardCount = 0;

    /**
     * ProPKGameOutMahsResponse cardType.
     * @member {number} cardType
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.cardType = 0;

    /**
     * ProPKGameOutMahsResponse cardtypeflg.
     * @member {number} cardtypeflg
     * @memberof ProPKGameOutMahsResponse
     * @instance
     */
    ProPKGameOutMahsResponse.prototype.cardtypeflg = 0;

    /**
     * Creates a new ProPKGameOutMahsResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {IProPKGameOutMahsResponse=} [properties] Properties to set
     * @returns {ProPKGameOutMahsResponse} ProPKGameOutMahsResponse instance
     */
    ProPKGameOutMahsResponse.create = function create(properties) {
        return new ProPKGameOutMahsResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameOutMahsResponse message. Does not implicitly {@link ProPKGameOutMahsResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {IProPKGameOutMahsResponse} message ProPKGameOutMahsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOutMahsResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.outMahs != null && message.outMahs.length)
            for (var i = 0; i < message.outMahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outMahs[i]);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.handmahs[i]);
        if (message.cardCount != null && message.hasOwnProperty("cardCount"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cardCount);
        if (message.cardType != null && message.hasOwnProperty("cardType"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cardType);
        if (message.cardtypeflg != null && message.hasOwnProperty("cardtypeflg"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.cardtypeflg);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameOutMahsResponse message, length delimited. Does not implicitly {@link ProPKGameOutMahsResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {IProPKGameOutMahsResponse} message ProPKGameOutMahsResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOutMahsResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameOutMahsResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameOutMahsResponse} ProPKGameOutMahsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOutMahsResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameOutMahsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.outMahs && message.outMahs.length))
                    message.outMahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.outMahs.push(reader.int32());
                } else
                    message.outMahs.push(reader.int32());
                break;
            case 4:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            case 5:
                message.cardCount = reader.int32();
                break;
            case 6:
                message.cardType = reader.int32();
                break;
            case 7:
                message.cardtypeflg = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameOutMahsResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameOutMahsResponse} ProPKGameOutMahsResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOutMahsResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameOutMahsResponse message.
     * @function verify
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameOutMahsResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.outMahs != null && message.hasOwnProperty("outMahs")) {
            if (!Array.isArray(message.outMahs))
                return "outMahs: array expected";
            for (var i = 0; i < message.outMahs.length; ++i)
                if (!$util.isInteger(message.outMahs[i]))
                    return "outMahs: integer[] expected";
        }
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        if (message.cardCount != null && message.hasOwnProperty("cardCount"))
            if (!$util.isInteger(message.cardCount))
                return "cardCount: integer expected";
        if (message.cardType != null && message.hasOwnProperty("cardType"))
            if (!$util.isInteger(message.cardType))
                return "cardType: integer expected";
        if (message.cardtypeflg != null && message.hasOwnProperty("cardtypeflg"))
            if (!$util.isInteger(message.cardtypeflg))
                return "cardtypeflg: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameOutMahsResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameOutMahsResponse} ProPKGameOutMahsResponse
     */
    ProPKGameOutMahsResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameOutMahsResponse)
            return object;
        var message = new $root.ProPKGameOutMahsResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.outMahs) {
            if (!Array.isArray(object.outMahs))
                throw TypeError(".ProPKGameOutMahsResponse.outMahs: array expected");
            message.outMahs = [];
            for (var i = 0; i < object.outMahs.length; ++i)
                message.outMahs[i] = object.outMahs[i] | 0;
        }
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProPKGameOutMahsResponse.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        if (object.cardCount != null)
            message.cardCount = object.cardCount | 0;
        if (object.cardType != null)
            message.cardType = object.cardType | 0;
        if (object.cardtypeflg != null)
            message.cardtypeflg = object.cardtypeflg | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameOutMahsResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameOutMahsResponse
     * @static
     * @param {ProPKGameOutMahsResponse} message ProPKGameOutMahsResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameOutMahsResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.outMahs = [];
            object.handmahs = [];
        }
        if (options.defaults) {
            object.seat = 0;
            object.cardCount = 0;
            object.cardType = 0;
            object.cardtypeflg = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.outMahs && message.outMahs.length) {
            object.outMahs = [];
            for (var j = 0; j < message.outMahs.length; ++j)
                object.outMahs[j] = message.outMahs[j];
        }
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        if (message.cardCount != null && message.hasOwnProperty("cardCount"))
            object.cardCount = message.cardCount;
        if (message.cardType != null && message.hasOwnProperty("cardType"))
            object.cardType = message.cardType;
        if (message.cardtypeflg != null && message.hasOwnProperty("cardtypeflg"))
            object.cardtypeflg = message.cardtypeflg;
        return object;
    };

    /**
     * Converts this ProPKGameOutMahsResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameOutMahsResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameOutMahsResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameOutMahsResponse.MSGID
     * @enum {string}
     * @property {number} ID=2211 ID value
     */
    ProPKGameOutMahsResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2211] = "ID"] = 2211;
        return values;
    })();

    return ProPKGameOutMahsResponse;
})();

$root.ProPKGameTimerPower = (function() {

    /**
     * Properties of a ProPKGameTimerPower.
     * @exports IProPKGameTimerPower
     * @interface IProPKGameTimerPower
     * @property {number|null} [seat] ProPKGameTimerPower seat
     * @property {number|null} [time] ProPKGameTimerPower time
     * @property {number|null} [outcardTime] ProPKGameTimerPower outcardTime
     */

    /**
     * Constructs a new ProPKGameTimerPower.
     * @exports ProPKGameTimerPower
     * @classdesc Represents a ProPKGameTimerPower.
     * @implements IProPKGameTimerPower
     * @constructor
     * @param {IProPKGameTimerPower=} [properties] Properties to set
     */
    function ProPKGameTimerPower(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameTimerPower seat.
     * @member {number} seat
     * @memberof ProPKGameTimerPower
     * @instance
     */
    ProPKGameTimerPower.prototype.seat = 0;

    /**
     * ProPKGameTimerPower time.
     * @member {number} time
     * @memberof ProPKGameTimerPower
     * @instance
     */
    ProPKGameTimerPower.prototype.time = 0;

    /**
     * ProPKGameTimerPower outcardTime.
     * @member {number} outcardTime
     * @memberof ProPKGameTimerPower
     * @instance
     */
    ProPKGameTimerPower.prototype.outcardTime = 0;

    /**
     * Creates a new ProPKGameTimerPower instance using the specified properties.
     * @function create
     * @memberof ProPKGameTimerPower
     * @static
     * @param {IProPKGameTimerPower=} [properties] Properties to set
     * @returns {ProPKGameTimerPower} ProPKGameTimerPower instance
     */
    ProPKGameTimerPower.create = function create(properties) {
        return new ProPKGameTimerPower(properties);
    };

    /**
     * Encodes the specified ProPKGameTimerPower message. Does not implicitly {@link ProPKGameTimerPower.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameTimerPower
     * @static
     * @param {IProPKGameTimerPower} message ProPKGameTimerPower message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameTimerPower.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.time);
        if (message.outcardTime != null && message.hasOwnProperty("outcardTime"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.outcardTime);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameTimerPower message, length delimited. Does not implicitly {@link ProPKGameTimerPower.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameTimerPower
     * @static
     * @param {IProPKGameTimerPower} message ProPKGameTimerPower message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameTimerPower.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameTimerPower message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameTimerPower
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameTimerPower} ProPKGameTimerPower
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameTimerPower.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameTimerPower();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.time = reader.int32();
                break;
            case 4:
                message.outcardTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameTimerPower message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameTimerPower
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameTimerPower} ProPKGameTimerPower
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameTimerPower.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameTimerPower message.
     * @function verify
     * @memberof ProPKGameTimerPower
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameTimerPower.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.outcardTime != null && message.hasOwnProperty("outcardTime"))
            if (!$util.isInteger(message.outcardTime))
                return "outcardTime: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameTimerPower message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameTimerPower
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameTimerPower} ProPKGameTimerPower
     */
    ProPKGameTimerPower.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameTimerPower)
            return object;
        var message = new $root.ProPKGameTimerPower();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.outcardTime != null)
            message.outcardTime = object.outcardTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameTimerPower message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameTimerPower
     * @static
     * @param {ProPKGameTimerPower} message ProPKGameTimerPower
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameTimerPower.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
            object.outcardTime = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.outcardTime != null && message.hasOwnProperty("outcardTime"))
            object.outcardTime = message.outcardTime;
        return object;
    };

    /**
     * Converts this ProPKGameTimerPower to JSON.
     * @function toJSON
     * @memberof ProPKGameTimerPower
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameTimerPower.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameTimerPower.MSGID
     * @enum {string}
     * @property {number} ID=2212 ID value
     */
    ProPKGameTimerPower.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2212] = "ID"] = 2212;
        return values;
    })();

    return ProPKGameTimerPower;
})();

$root.ProPKGameOperateNotify = (function() {

    /**
     * Properties of a ProPKGameOperateNotify.
     * @exports IProPKGameOperateNotify
     * @interface IProPKGameOperateNotify
     * @property {number|null} [resumeSeat] ProPKGameOperateNotify resumeSeat
     * @property {number|null} [ActionMask] ProPKGameOperateNotify ActionMask
     * @property {number|null} [ActionCard] ProPKGameOperateNotify ActionCard
     * @property {number|null} [time] ProPKGameOperateNotify time
     * @property {number|null} [operateseat] ProPKGameOperateNotify operateseat
     */

    /**
     * Constructs a new ProPKGameOperateNotify.
     * @exports ProPKGameOperateNotify
     * @classdesc Represents a ProPKGameOperateNotify.
     * @implements IProPKGameOperateNotify
     * @constructor
     * @param {IProPKGameOperateNotify=} [properties] Properties to set
     */
    function ProPKGameOperateNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameOperateNotify resumeSeat.
     * @member {number} resumeSeat
     * @memberof ProPKGameOperateNotify
     * @instance
     */
    ProPKGameOperateNotify.prototype.resumeSeat = 0;

    /**
     * ProPKGameOperateNotify ActionMask.
     * @member {number} ActionMask
     * @memberof ProPKGameOperateNotify
     * @instance
     */
    ProPKGameOperateNotify.prototype.ActionMask = 0;

    /**
     * ProPKGameOperateNotify ActionCard.
     * @member {number} ActionCard
     * @memberof ProPKGameOperateNotify
     * @instance
     */
    ProPKGameOperateNotify.prototype.ActionCard = 0;

    /**
     * ProPKGameOperateNotify time.
     * @member {number} time
     * @memberof ProPKGameOperateNotify
     * @instance
     */
    ProPKGameOperateNotify.prototype.time = 0;

    /**
     * ProPKGameOperateNotify operateseat.
     * @member {number} operateseat
     * @memberof ProPKGameOperateNotify
     * @instance
     */
    ProPKGameOperateNotify.prototype.operateseat = 0;

    /**
     * Creates a new ProPKGameOperateNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {IProPKGameOperateNotify=} [properties] Properties to set
     * @returns {ProPKGameOperateNotify} ProPKGameOperateNotify instance
     */
    ProPKGameOperateNotify.create = function create(properties) {
        return new ProPKGameOperateNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameOperateNotify message. Does not implicitly {@link ProPKGameOperateNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {IProPKGameOperateNotify} message ProPKGameOperateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.resumeSeat);
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.ActionMask);
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.ActionCard);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.time);
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.operateseat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameOperateNotify message, length delimited. Does not implicitly {@link ProPKGameOperateNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {IProPKGameOperateNotify} message ProPKGameOperateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameOperateNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameOperateNotify} ProPKGameOperateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameOperateNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.resumeSeat = reader.int32();
                break;
            case 3:
                message.ActionMask = reader.int32();
                break;
            case 4:
                message.ActionCard = reader.int32();
                break;
            case 5:
                message.time = reader.int32();
                break;
            case 6:
                message.operateseat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameOperateNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameOperateNotify} ProPKGameOperateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameOperateNotify message.
     * @function verify
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameOperateNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            if (!$util.isInteger(message.resumeSeat))
                return "resumeSeat: integer expected";
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            if (!$util.isInteger(message.ActionMask))
                return "ActionMask: integer expected";
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            if (!$util.isInteger(message.ActionCard))
                return "ActionCard: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            if (!$util.isInteger(message.operateseat))
                return "operateseat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameOperateNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameOperateNotify} ProPKGameOperateNotify
     */
    ProPKGameOperateNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameOperateNotify)
            return object;
        var message = new $root.ProPKGameOperateNotify();
        if (object.resumeSeat != null)
            message.resumeSeat = object.resumeSeat | 0;
        if (object.ActionMask != null)
            message.ActionMask = object.ActionMask | 0;
        if (object.ActionCard != null)
            message.ActionCard = object.ActionCard | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.operateseat != null)
            message.operateseat = object.operateseat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameOperateNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameOperateNotify
     * @static
     * @param {ProPKGameOperateNotify} message ProPKGameOperateNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameOperateNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.resumeSeat = 0;
            object.ActionMask = 0;
            object.ActionCard = 0;
            object.time = 0;
            object.operateseat = 0;
        }
        if (message.resumeSeat != null && message.hasOwnProperty("resumeSeat"))
            object.resumeSeat = message.resumeSeat;
        if (message.ActionMask != null && message.hasOwnProperty("ActionMask"))
            object.ActionMask = message.ActionMask;
        if (message.ActionCard != null && message.hasOwnProperty("ActionCard"))
            object.ActionCard = message.ActionCard;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.operateseat != null && message.hasOwnProperty("operateseat"))
            object.operateseat = message.operateseat;
        return object;
    };

    /**
     * Converts this ProPKGameOperateNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameOperateNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameOperateNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameOperateNotify.MSGID
     * @enum {string}
     * @property {number} ID=2213 ID value
     */
    ProPKGameOperateNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2213] = "ID"] = 2213;
        return values;
    })();

    return ProPKGameOperateNotify;
})();

$root.ProPKGameOperateResult = (function() {

    /**
     * Properties of a ProPKGameOperateResult.
     * @exports IProPKGameOperateResult
     * @interface IProPKGameOperateResult
     * @property {number|null} [wOperateUser] ProPKGameOperateResult wOperateUser
     * @property {number|null} [wProvideUser] ProPKGameOperateResult wProvideUser
     * @property {number|null} [wOperateCode] ProPKGameOperateResult wOperateCode
     * @property {number|null} [cbOperateCard] ProPKGameOperateResult cbOperateCard
     * @property {Array.<number>|null} [handmahs] ProPKGameOperateResult handmahs
     * @property {number|null} [handcount] ProPKGameOperateResult handcount
     */

    /**
     * Constructs a new ProPKGameOperateResult.
     * @exports ProPKGameOperateResult
     * @classdesc Represents a ProPKGameOperateResult.
     * @implements IProPKGameOperateResult
     * @constructor
     * @param {IProPKGameOperateResult=} [properties] Properties to set
     */
    function ProPKGameOperateResult(properties) {
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameOperateResult wOperateUser.
     * @member {number} wOperateUser
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.wOperateUser = 0;

    /**
     * ProPKGameOperateResult wProvideUser.
     * @member {number} wProvideUser
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.wProvideUser = 0;

    /**
     * ProPKGameOperateResult wOperateCode.
     * @member {number} wOperateCode
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.wOperateCode = 0;

    /**
     * ProPKGameOperateResult cbOperateCard.
     * @member {number} cbOperateCard
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.cbOperateCard = 0;

    /**
     * ProPKGameOperateResult handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.handmahs = $util.emptyArray;

    /**
     * ProPKGameOperateResult handcount.
     * @member {number} handcount
     * @memberof ProPKGameOperateResult
     * @instance
     */
    ProPKGameOperateResult.prototype.handcount = 0;

    /**
     * Creates a new ProPKGameOperateResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameOperateResult
     * @static
     * @param {IProPKGameOperateResult=} [properties] Properties to set
     * @returns {ProPKGameOperateResult} ProPKGameOperateResult instance
     */
    ProPKGameOperateResult.create = function create(properties) {
        return new ProPKGameOperateResult(properties);
    };

    /**
     * Encodes the specified ProPKGameOperateResult message. Does not implicitly {@link ProPKGameOperateResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameOperateResult
     * @static
     * @param {IProPKGameOperateResult} message ProPKGameOperateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.wOperateUser);
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.wProvideUser);
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.wOperateCode);
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.cbOperateCard);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.handmahs[i]);
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.handcount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameOperateResult message, length delimited. Does not implicitly {@link ProPKGameOperateResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameOperateResult
     * @static
     * @param {IProPKGameOperateResult} message ProPKGameOperateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameOperateResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameOperateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameOperateResult} ProPKGameOperateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameOperateResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.wOperateUser = reader.int32();
                break;
            case 3:
                message.wProvideUser = reader.int32();
                break;
            case 4:
                message.wOperateCode = reader.int32();
                break;
            case 5:
                message.cbOperateCard = reader.int32();
                break;
            case 6:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            case 7:
                message.handcount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameOperateResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameOperateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameOperateResult} ProPKGameOperateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameOperateResult message.
     * @function verify
     * @memberof ProPKGameOperateResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameOperateResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            if (!$util.isInteger(message.wOperateUser))
                return "wOperateUser: integer expected";
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            if (!$util.isInteger(message.wProvideUser))
                return "wProvideUser: integer expected";
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            if (!$util.isInteger(message.wOperateCode))
                return "wOperateCode: integer expected";
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            if (!$util.isInteger(message.cbOperateCard))
                return "cbOperateCard: integer expected";
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            if (!$util.isInteger(message.handcount))
                return "handcount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameOperateResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameOperateResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameOperateResult} ProPKGameOperateResult
     */
    ProPKGameOperateResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameOperateResult)
            return object;
        var message = new $root.ProPKGameOperateResult();
        if (object.wOperateUser != null)
            message.wOperateUser = object.wOperateUser | 0;
        if (object.wProvideUser != null)
            message.wProvideUser = object.wProvideUser | 0;
        if (object.wOperateCode != null)
            message.wOperateCode = object.wOperateCode | 0;
        if (object.cbOperateCard != null)
            message.cbOperateCard = object.cbOperateCard | 0;
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProPKGameOperateResult.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        if (object.handcount != null)
            message.handcount = object.handcount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameOperateResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameOperateResult
     * @static
     * @param {ProPKGameOperateResult} message ProPKGameOperateResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameOperateResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.handmahs = [];
        if (options.defaults) {
            object.wOperateUser = 0;
            object.wProvideUser = 0;
            object.wOperateCode = 0;
            object.cbOperateCard = 0;
            object.handcount = 0;
        }
        if (message.wOperateUser != null && message.hasOwnProperty("wOperateUser"))
            object.wOperateUser = message.wOperateUser;
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            object.wProvideUser = message.wProvideUser;
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            object.wOperateCode = message.wOperateCode;
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            object.cbOperateCard = message.cbOperateCard;
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        if (message.handcount != null && message.hasOwnProperty("handcount"))
            object.handcount = message.handcount;
        return object;
    };

    /**
     * Converts this ProPKGameOperateResult to JSON.
     * @function toJSON
     * @memberof ProPKGameOperateResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameOperateResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameOperateResult.MSGID
     * @enum {string}
     * @property {number} ID=2214 ID value
     */
    ProPKGameOperateResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2214] = "ID"] = 2214;
        return values;
    })();

    return ProPKGameOperateResult;
})();

$root.ProPKGameOperateRequest = (function() {

    /**
     * Properties of a ProPKGameOperateRequest.
     * @exports IProPKGameOperateRequest
     * @interface IProPKGameOperateRequest
     * @property {number|null} [seat] ProPKGameOperateRequest seat
     * @property {number|null} [wOperateCode] ProPKGameOperateRequest wOperateCode
     * @property {number|null} [cbOperateCard] ProPKGameOperateRequest cbOperateCard
     */

    /**
     * Constructs a new ProPKGameOperateRequest.
     * @exports ProPKGameOperateRequest
     * @classdesc Represents a ProPKGameOperateRequest.
     * @implements IProPKGameOperateRequest
     * @constructor
     * @param {IProPKGameOperateRequest=} [properties] Properties to set
     */
    function ProPKGameOperateRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameOperateRequest seat.
     * @member {number} seat
     * @memberof ProPKGameOperateRequest
     * @instance
     */
    ProPKGameOperateRequest.prototype.seat = 0;

    /**
     * ProPKGameOperateRequest wOperateCode.
     * @member {number} wOperateCode
     * @memberof ProPKGameOperateRequest
     * @instance
     */
    ProPKGameOperateRequest.prototype.wOperateCode = 0;

    /**
     * ProPKGameOperateRequest cbOperateCard.
     * @member {number} cbOperateCard
     * @memberof ProPKGameOperateRequest
     * @instance
     */
    ProPKGameOperateRequest.prototype.cbOperateCard = 0;

    /**
     * Creates a new ProPKGameOperateRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {IProPKGameOperateRequest=} [properties] Properties to set
     * @returns {ProPKGameOperateRequest} ProPKGameOperateRequest instance
     */
    ProPKGameOperateRequest.create = function create(properties) {
        return new ProPKGameOperateRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameOperateRequest message. Does not implicitly {@link ProPKGameOperateRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {IProPKGameOperateRequest} message ProPKGameOperateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.wOperateCode);
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cbOperateCard);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameOperateRequest message, length delimited. Does not implicitly {@link ProPKGameOperateRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {IProPKGameOperateRequest} message ProPKGameOperateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOperateRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameOperateRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameOperateRequest} ProPKGameOperateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameOperateRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.wOperateCode = reader.int32();
                break;
            case 4:
                message.cbOperateCard = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameOperateRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameOperateRequest} ProPKGameOperateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOperateRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameOperateRequest message.
     * @function verify
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameOperateRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            if (!$util.isInteger(message.wOperateCode))
                return "wOperateCode: integer expected";
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            if (!$util.isInteger(message.cbOperateCard))
                return "cbOperateCard: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameOperateRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameOperateRequest} ProPKGameOperateRequest
     */
    ProPKGameOperateRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameOperateRequest)
            return object;
        var message = new $root.ProPKGameOperateRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.wOperateCode != null)
            message.wOperateCode = object.wOperateCode | 0;
        if (object.cbOperateCard != null)
            message.cbOperateCard = object.cbOperateCard | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameOperateRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameOperateRequest
     * @static
     * @param {ProPKGameOperateRequest} message ProPKGameOperateRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameOperateRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.wOperateCode = 0;
            object.cbOperateCard = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.wOperateCode != null && message.hasOwnProperty("wOperateCode"))
            object.wOperateCode = message.wOperateCode;
        if (message.cbOperateCard != null && message.hasOwnProperty("cbOperateCard"))
            object.cbOperateCard = message.cbOperateCard;
        return object;
    };

    /**
     * Converts this ProPKGameOperateRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameOperateRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameOperateRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameOperateRequest.MSGID
     * @enum {string}
     * @property {number} ID=2215 ID value
     */
    ProPKGameOperateRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2215] = "ID"] = 2215;
        return values;
    })();

    return ProPKGameOperateRequest;
})();

$root.ProPKGameTrust = (function() {

    /**
     * Properties of a ProPKGameTrust.
     * @exports IProPKGameTrust
     * @interface IProPKGameTrust
     * @property {number|null} [seat] ProPKGameTrust seat
     * @property {boolean|null} [isTrust] ProPKGameTrust isTrust
     */

    /**
     * Constructs a new ProPKGameTrust.
     * @exports ProPKGameTrust
     * @classdesc Represents a ProPKGameTrust.
     * @implements IProPKGameTrust
     * @constructor
     * @param {IProPKGameTrust=} [properties] Properties to set
     */
    function ProPKGameTrust(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameTrust seat.
     * @member {number} seat
     * @memberof ProPKGameTrust
     * @instance
     */
    ProPKGameTrust.prototype.seat = 0;

    /**
     * ProPKGameTrust isTrust.
     * @member {boolean} isTrust
     * @memberof ProPKGameTrust
     * @instance
     */
    ProPKGameTrust.prototype.isTrust = false;

    /**
     * Creates a new ProPKGameTrust instance using the specified properties.
     * @function create
     * @memberof ProPKGameTrust
     * @static
     * @param {IProPKGameTrust=} [properties] Properties to set
     * @returns {ProPKGameTrust} ProPKGameTrust instance
     */
    ProPKGameTrust.create = function create(properties) {
        return new ProPKGameTrust(properties);
    };

    /**
     * Encodes the specified ProPKGameTrust message. Does not implicitly {@link ProPKGameTrust.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameTrust
     * @static
     * @param {IProPKGameTrust} message ProPKGameTrust message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameTrust.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.isTrust);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameTrust message, length delimited. Does not implicitly {@link ProPKGameTrust.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameTrust
     * @static
     * @param {IProPKGameTrust} message ProPKGameTrust message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameTrust.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameTrust message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameTrust
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameTrust} ProPKGameTrust
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameTrust.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameTrust();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.isTrust = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameTrust message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameTrust
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameTrust} ProPKGameTrust
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameTrust.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameTrust message.
     * @function verify
     * @memberof ProPKGameTrust
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameTrust.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            if (typeof message.isTrust !== "boolean")
                return "isTrust: boolean expected";
        return null;
    };

    /**
     * Creates a ProPKGameTrust message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameTrust
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameTrust} ProPKGameTrust
     */
    ProPKGameTrust.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameTrust)
            return object;
        var message = new $root.ProPKGameTrust();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.isTrust != null)
            message.isTrust = Boolean(object.isTrust);
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameTrust message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameTrust
     * @static
     * @param {ProPKGameTrust} message ProPKGameTrust
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameTrust.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.isTrust = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.isTrust != null && message.hasOwnProperty("isTrust"))
            object.isTrust = message.isTrust;
        return object;
    };

    /**
     * Converts this ProPKGameTrust to JSON.
     * @function toJSON
     * @memberof ProPKGameTrust
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameTrust.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameTrust.MSGID
     * @enum {string}
     * @property {number} ID=2216 ID value
     */
    ProPKGameTrust.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2216] = "ID"] = 2216;
        return values;
    })();

    return ProPKGameTrust;
})();

$root.ProPKGameOutMahRequest = (function() {

    /**
     * Properties of a ProPKGameOutMahRequest.
     * @exports IProPKGameOutMahRequest
     * @interface IProPKGameOutMahRequest
     * @property {number|null} [seat] ProPKGameOutMahRequest seat
     * @property {Array.<number>|null} [outMahs] ProPKGameOutMahRequest outMahs
     */

    /**
     * Constructs a new ProPKGameOutMahRequest.
     * @exports ProPKGameOutMahRequest
     * @classdesc Represents a ProPKGameOutMahRequest.
     * @implements IProPKGameOutMahRequest
     * @constructor
     * @param {IProPKGameOutMahRequest=} [properties] Properties to set
     */
    function ProPKGameOutMahRequest(properties) {
        this.outMahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameOutMahRequest seat.
     * @member {number} seat
     * @memberof ProPKGameOutMahRequest
     * @instance
     */
    ProPKGameOutMahRequest.prototype.seat = 0;

    /**
     * ProPKGameOutMahRequest outMahs.
     * @member {Array.<number>} outMahs
     * @memberof ProPKGameOutMahRequest
     * @instance
     */
    ProPKGameOutMahRequest.prototype.outMahs = $util.emptyArray;

    /**
     * Creates a new ProPKGameOutMahRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {IProPKGameOutMahRequest=} [properties] Properties to set
     * @returns {ProPKGameOutMahRequest} ProPKGameOutMahRequest instance
     */
    ProPKGameOutMahRequest.create = function create(properties) {
        return new ProPKGameOutMahRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameOutMahRequest message. Does not implicitly {@link ProPKGameOutMahRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {IProPKGameOutMahRequest} message ProPKGameOutMahRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOutMahRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.outMahs != null && message.outMahs.length)
            for (var i = 0; i < message.outMahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.outMahs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameOutMahRequest message, length delimited. Does not implicitly {@link ProPKGameOutMahRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {IProPKGameOutMahRequest} message ProPKGameOutMahRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameOutMahRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameOutMahRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameOutMahRequest} ProPKGameOutMahRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOutMahRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameOutMahRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.outMahs && message.outMahs.length))
                    message.outMahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.outMahs.push(reader.int32());
                } else
                    message.outMahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameOutMahRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameOutMahRequest} ProPKGameOutMahRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameOutMahRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameOutMahRequest message.
     * @function verify
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameOutMahRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.outMahs != null && message.hasOwnProperty("outMahs")) {
            if (!Array.isArray(message.outMahs))
                return "outMahs: array expected";
            for (var i = 0; i < message.outMahs.length; ++i)
                if (!$util.isInteger(message.outMahs[i]))
                    return "outMahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProPKGameOutMahRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameOutMahRequest} ProPKGameOutMahRequest
     */
    ProPKGameOutMahRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameOutMahRequest)
            return object;
        var message = new $root.ProPKGameOutMahRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.outMahs) {
            if (!Array.isArray(object.outMahs))
                throw TypeError(".ProPKGameOutMahRequest.outMahs: array expected");
            message.outMahs = [];
            for (var i = 0; i < object.outMahs.length; ++i)
                message.outMahs[i] = object.outMahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameOutMahRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameOutMahRequest
     * @static
     * @param {ProPKGameOutMahRequest} message ProPKGameOutMahRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameOutMahRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.outMahs = [];
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.outMahs && message.outMahs.length) {
            object.outMahs = [];
            for (var j = 0; j < message.outMahs.length; ++j)
                object.outMahs[j] = message.outMahs[j];
        }
        return object;
    };

    /**
     * Converts this ProPKGameOutMahRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameOutMahRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameOutMahRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameOutMahRequest.MSGID
     * @enum {string}
     * @property {number} ID=2217 ID value
     */
    ProPKGameOutMahRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2217] = "ID"] = 2217;
        return values;
    })();

    return ProPKGameOutMahRequest;
})();

$root.ProPKGameCatchCard = (function() {

    /**
     * Properties of a ProPKGameCatchCard.
     * @exports IProPKGameCatchCard
     * @interface IProPKGameCatchCard
     * @property {number|null} [seat] ProPKGameCatchCard seat
     * @property {number|null} [cbCardData] ProPKGameCatchCard cbCardData
     * @property {number|null} [wActionMask] ProPKGameCatchCard wActionMask
     * @property {boolean|null} [cbIsNotGang] ProPKGameCatchCard cbIsNotGang
     * @property {number|null} [cbLeftCount] ProPKGameCatchCard cbLeftCount
     */

    /**
     * Constructs a new ProPKGameCatchCard.
     * @exports ProPKGameCatchCard
     * @classdesc Represents a ProPKGameCatchCard.
     * @implements IProPKGameCatchCard
     * @constructor
     * @param {IProPKGameCatchCard=} [properties] Properties to set
     */
    function ProPKGameCatchCard(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameCatchCard seat.
     * @member {number} seat
     * @memberof ProPKGameCatchCard
     * @instance
     */
    ProPKGameCatchCard.prototype.seat = 0;

    /**
     * ProPKGameCatchCard cbCardData.
     * @member {number} cbCardData
     * @memberof ProPKGameCatchCard
     * @instance
     */
    ProPKGameCatchCard.prototype.cbCardData = 0;

    /**
     * ProPKGameCatchCard wActionMask.
     * @member {number} wActionMask
     * @memberof ProPKGameCatchCard
     * @instance
     */
    ProPKGameCatchCard.prototype.wActionMask = 0;

    /**
     * ProPKGameCatchCard cbIsNotGang.
     * @member {boolean} cbIsNotGang
     * @memberof ProPKGameCatchCard
     * @instance
     */
    ProPKGameCatchCard.prototype.cbIsNotGang = false;

    /**
     * ProPKGameCatchCard cbLeftCount.
     * @member {number} cbLeftCount
     * @memberof ProPKGameCatchCard
     * @instance
     */
    ProPKGameCatchCard.prototype.cbLeftCount = 0;

    /**
     * Creates a new ProPKGameCatchCard instance using the specified properties.
     * @function create
     * @memberof ProPKGameCatchCard
     * @static
     * @param {IProPKGameCatchCard=} [properties] Properties to set
     * @returns {ProPKGameCatchCard} ProPKGameCatchCard instance
     */
    ProPKGameCatchCard.create = function create(properties) {
        return new ProPKGameCatchCard(properties);
    };

    /**
     * Encodes the specified ProPKGameCatchCard message. Does not implicitly {@link ProPKGameCatchCard.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameCatchCard
     * @static
     * @param {IProPKGameCatchCard} message ProPKGameCatchCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameCatchCard.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cbCardData);
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.wActionMask);
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.cbIsNotGang);
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cbLeftCount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameCatchCard message, length delimited. Does not implicitly {@link ProPKGameCatchCard.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameCatchCard
     * @static
     * @param {IProPKGameCatchCard} message ProPKGameCatchCard message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameCatchCard.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameCatchCard message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameCatchCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameCatchCard} ProPKGameCatchCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameCatchCard.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameCatchCard();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                message.cbCardData = reader.int32();
                break;
            case 4:
                message.wActionMask = reader.int32();
                break;
            case 5:
                message.cbIsNotGang = reader.bool();
                break;
            case 6:
                message.cbLeftCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameCatchCard message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameCatchCard
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameCatchCard} ProPKGameCatchCard
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameCatchCard.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameCatchCard message.
     * @function verify
     * @memberof ProPKGameCatchCard
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameCatchCard.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            if (!$util.isInteger(message.cbCardData))
                return "cbCardData: integer expected";
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            if (!$util.isInteger(message.wActionMask))
                return "wActionMask: integer expected";
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            if (typeof message.cbIsNotGang !== "boolean")
                return "cbIsNotGang: boolean expected";
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            if (!$util.isInteger(message.cbLeftCount))
                return "cbLeftCount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameCatchCard message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameCatchCard
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameCatchCard} ProPKGameCatchCard
     */
    ProPKGameCatchCard.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameCatchCard)
            return object;
        var message = new $root.ProPKGameCatchCard();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.cbCardData != null)
            message.cbCardData = object.cbCardData | 0;
        if (object.wActionMask != null)
            message.wActionMask = object.wActionMask | 0;
        if (object.cbIsNotGang != null)
            message.cbIsNotGang = Boolean(object.cbIsNotGang);
        if (object.cbLeftCount != null)
            message.cbLeftCount = object.cbLeftCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameCatchCard message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameCatchCard
     * @static
     * @param {ProPKGameCatchCard} message ProPKGameCatchCard
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameCatchCard.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.cbCardData = 0;
            object.wActionMask = 0;
            object.cbIsNotGang = false;
            object.cbLeftCount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData"))
            object.cbCardData = message.cbCardData;
        if (message.wActionMask != null && message.hasOwnProperty("wActionMask"))
            object.wActionMask = message.wActionMask;
        if (message.cbIsNotGang != null && message.hasOwnProperty("cbIsNotGang"))
            object.cbIsNotGang = message.cbIsNotGang;
        if (message.cbLeftCount != null && message.hasOwnProperty("cbLeftCount"))
            object.cbLeftCount = message.cbLeftCount;
        return object;
    };

    /**
     * Converts this ProPKGameCatchCard to JSON.
     * @function toJSON
     * @memberof ProPKGameCatchCard
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameCatchCard.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameCatchCard.MSGID
     * @enum {string}
     * @property {number} ID=2218 ID value
     */
    ProPKGameCatchCard.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2218] = "ID"] = 2218;
        return values;
    })();

    return ProPKGameCatchCard;
})();

$root.PKMahList = (function() {

    /**
     * Properties of a PKMahList.
     * @exports IPKMahList
     * @interface IPKMahList
     * @property {Array.<number>|null} [Mahs] PKMahList Mahs
     */

    /**
     * Constructs a new PKMahList.
     * @exports PKMahList
     * @classdesc Represents a PKMahList.
     * @implements IPKMahList
     * @constructor
     * @param {IPKMahList=} [properties] Properties to set
     */
    function PKMahList(properties) {
        this.Mahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PKMahList Mahs.
     * @member {Array.<number>} Mahs
     * @memberof PKMahList
     * @instance
     */
    PKMahList.prototype.Mahs = $util.emptyArray;

    /**
     * Creates a new PKMahList instance using the specified properties.
     * @function create
     * @memberof PKMahList
     * @static
     * @param {IPKMahList=} [properties] Properties to set
     * @returns {PKMahList} PKMahList instance
     */
    PKMahList.create = function create(properties) {
        return new PKMahList(properties);
    };

    /**
     * Encodes the specified PKMahList message. Does not implicitly {@link PKMahList.verify|verify} messages.
     * @function encode
     * @memberof PKMahList
     * @static
     * @param {IPKMahList} message PKMahList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKMahList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.Mahs != null && message.Mahs.length)
            for (var i = 0; i < message.Mahs.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.Mahs[i]);
        return writer;
    };

    /**
     * Encodes the specified PKMahList message, length delimited. Does not implicitly {@link PKMahList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PKMahList
     * @static
     * @param {IPKMahList} message PKMahList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKMahList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PKMahList message from the specified reader or buffer.
     * @function decode
     * @memberof PKMahList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PKMahList} PKMahList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKMahList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PKMahList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.Mahs && message.Mahs.length))
                    message.Mahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.Mahs.push(reader.int32());
                } else
                    message.Mahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PKMahList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PKMahList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PKMahList} PKMahList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKMahList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PKMahList message.
     * @function verify
     * @memberof PKMahList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PKMahList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.Mahs != null && message.hasOwnProperty("Mahs")) {
            if (!Array.isArray(message.Mahs))
                return "Mahs: array expected";
            for (var i = 0; i < message.Mahs.length; ++i)
                if (!$util.isInteger(message.Mahs[i]))
                    return "Mahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a PKMahList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PKMahList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PKMahList} PKMahList
     */
    PKMahList.fromObject = function fromObject(object) {
        if (object instanceof $root.PKMahList)
            return object;
        var message = new $root.PKMahList();
        if (object.Mahs) {
            if (!Array.isArray(object.Mahs))
                throw TypeError(".PKMahList.Mahs: array expected");
            message.Mahs = [];
            for (var i = 0; i < object.Mahs.length; ++i)
                message.Mahs[i] = object.Mahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a PKMahList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PKMahList
     * @static
     * @param {PKMahList} message PKMahList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PKMahList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.Mahs = [];
        if (message.Mahs && message.Mahs.length) {
            object.Mahs = [];
            for (var j = 0; j < message.Mahs.length; ++j)
                object.Mahs[j] = message.Mahs[j];
        }
        return object;
    };

    /**
     * Converts this PKMahList to JSON.
     * @function toJSON
     * @memberof PKMahList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PKMahList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PKMahList;
})();

$root.PKScoreList = (function() {

    /**
     * Properties of a PKScoreList.
     * @exports IPKScoreList
     * @interface IPKScoreList
     * @property {Array.<number>|null} [roundScore] PKScoreList roundScore
     */

    /**
     * Constructs a new PKScoreList.
     * @exports PKScoreList
     * @classdesc Represents a PKScoreList.
     * @implements IPKScoreList
     * @constructor
     * @param {IPKScoreList=} [properties] Properties to set
     */
    function PKScoreList(properties) {
        this.roundScore = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PKScoreList roundScore.
     * @member {Array.<number>} roundScore
     * @memberof PKScoreList
     * @instance
     */
    PKScoreList.prototype.roundScore = $util.emptyArray;

    /**
     * Creates a new PKScoreList instance using the specified properties.
     * @function create
     * @memberof PKScoreList
     * @static
     * @param {IPKScoreList=} [properties] Properties to set
     * @returns {PKScoreList} PKScoreList instance
     */
    PKScoreList.create = function create(properties) {
        return new PKScoreList(properties);
    };

    /**
     * Encodes the specified PKScoreList message. Does not implicitly {@link PKScoreList.verify|verify} messages.
     * @function encode
     * @memberof PKScoreList
     * @static
     * @param {IPKScoreList} message PKScoreList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKScoreList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.roundScore != null && message.roundScore.length)
            for (var i = 0; i < message.roundScore.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.roundScore[i]);
        return writer;
    };

    /**
     * Encodes the specified PKScoreList message, length delimited. Does not implicitly {@link PKScoreList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PKScoreList
     * @static
     * @param {IPKScoreList} message PKScoreList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKScoreList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PKScoreList message from the specified reader or buffer.
     * @function decode
     * @memberof PKScoreList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PKScoreList} PKScoreList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKScoreList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PKScoreList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.roundScore && message.roundScore.length))
                    message.roundScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.roundScore.push(reader.int32());
                } else
                    message.roundScore.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PKScoreList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PKScoreList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PKScoreList} PKScoreList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKScoreList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PKScoreList message.
     * @function verify
     * @memberof PKScoreList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PKScoreList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.roundScore != null && message.hasOwnProperty("roundScore")) {
            if (!Array.isArray(message.roundScore))
                return "roundScore: array expected";
            for (var i = 0; i < message.roundScore.length; ++i)
                if (!$util.isInteger(message.roundScore[i]))
                    return "roundScore: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a PKScoreList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PKScoreList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PKScoreList} PKScoreList
     */
    PKScoreList.fromObject = function fromObject(object) {
        if (object instanceof $root.PKScoreList)
            return object;
        var message = new $root.PKScoreList();
        if (object.roundScore) {
            if (!Array.isArray(object.roundScore))
                throw TypeError(".PKScoreList.roundScore: array expected");
            message.roundScore = [];
            for (var i = 0; i < object.roundScore.length; ++i)
                message.roundScore[i] = object.roundScore[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a PKScoreList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PKScoreList
     * @static
     * @param {PKScoreList} message PKScoreList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PKScoreList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.roundScore = [];
        if (message.roundScore && message.roundScore.length) {
            object.roundScore = [];
            for (var j = 0; j < message.roundScore.length; ++j)
                object.roundScore[j] = message.roundScore[j];
        }
        return object;
    };

    /**
     * Converts this PKScoreList to JSON.
     * @function toJSON
     * @memberof PKScoreList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PKScoreList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PKScoreList;
})();

$root.PKAwardList = (function() {

    /**
     * Properties of a PKAwardList.
     * @exports IPKAwardList
     * @interface IPKAwardList
     * @property {number|null} [seat] PKAwardList seat
     * @property {Array.<number>|null} [CardsData] PKAwardList CardsData
     * @property {number|null} [awardScore] PKAwardList awardScore
     */

    /**
     * Constructs a new PKAwardList.
     * @exports PKAwardList
     * @classdesc Represents a PKAwardList.
     * @implements IPKAwardList
     * @constructor
     * @param {IPKAwardList=} [properties] Properties to set
     */
    function PKAwardList(properties) {
        this.CardsData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PKAwardList seat.
     * @member {number} seat
     * @memberof PKAwardList
     * @instance
     */
    PKAwardList.prototype.seat = 0;

    /**
     * PKAwardList CardsData.
     * @member {Array.<number>} CardsData
     * @memberof PKAwardList
     * @instance
     */
    PKAwardList.prototype.CardsData = $util.emptyArray;

    /**
     * PKAwardList awardScore.
     * @member {number} awardScore
     * @memberof PKAwardList
     * @instance
     */
    PKAwardList.prototype.awardScore = 0;

    /**
     * Creates a new PKAwardList instance using the specified properties.
     * @function create
     * @memberof PKAwardList
     * @static
     * @param {IPKAwardList=} [properties] Properties to set
     * @returns {PKAwardList} PKAwardList instance
     */
    PKAwardList.create = function create(properties) {
        return new PKAwardList(properties);
    };

    /**
     * Encodes the specified PKAwardList message. Does not implicitly {@link PKAwardList.verify|verify} messages.
     * @function encode
     * @memberof PKAwardList
     * @static
     * @param {IPKAwardList} message PKAwardList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKAwardList.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.CardsData != null && message.CardsData.length)
            for (var i = 0; i < message.CardsData.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.CardsData[i]);
        if (message.awardScore != null && message.hasOwnProperty("awardScore"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.awardScore);
        return writer;
    };

    /**
     * Encodes the specified PKAwardList message, length delimited. Does not implicitly {@link PKAwardList.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PKAwardList
     * @static
     * @param {IPKAwardList} message PKAwardList message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKAwardList.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PKAwardList message from the specified reader or buffer.
     * @function decode
     * @memberof PKAwardList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PKAwardList} PKAwardList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKAwardList.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PKAwardList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                if (!(message.CardsData && message.CardsData.length))
                    message.CardsData = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.CardsData.push(reader.int32());
                } else
                    message.CardsData.push(reader.int32());
                break;
            case 3:
                message.awardScore = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PKAwardList message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PKAwardList
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PKAwardList} PKAwardList
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKAwardList.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PKAwardList message.
     * @function verify
     * @memberof PKAwardList
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PKAwardList.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.CardsData != null && message.hasOwnProperty("CardsData")) {
            if (!Array.isArray(message.CardsData))
                return "CardsData: array expected";
            for (var i = 0; i < message.CardsData.length; ++i)
                if (!$util.isInteger(message.CardsData[i]))
                    return "CardsData: integer[] expected";
        }
        if (message.awardScore != null && message.hasOwnProperty("awardScore"))
            if (!$util.isInteger(message.awardScore))
                return "awardScore: integer expected";
        return null;
    };

    /**
     * Creates a PKAwardList message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PKAwardList
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PKAwardList} PKAwardList
     */
    PKAwardList.fromObject = function fromObject(object) {
        if (object instanceof $root.PKAwardList)
            return object;
        var message = new $root.PKAwardList();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.CardsData) {
            if (!Array.isArray(object.CardsData))
                throw TypeError(".PKAwardList.CardsData: array expected");
            message.CardsData = [];
            for (var i = 0; i < object.CardsData.length; ++i)
                message.CardsData[i] = object.CardsData[i] | 0;
        }
        if (object.awardScore != null)
            message.awardScore = object.awardScore | 0;
        return message;
    };

    /**
     * Creates a plain object from a PKAwardList message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PKAwardList
     * @static
     * @param {PKAwardList} message PKAwardList
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PKAwardList.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.CardsData = [];
        if (options.defaults) {
            object.seat = 0;
            object.awardScore = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.CardsData && message.CardsData.length) {
            object.CardsData = [];
            for (var j = 0; j < message.CardsData.length; ++j)
                object.CardsData[j] = message.CardsData[j];
        }
        if (message.awardScore != null && message.hasOwnProperty("awardScore"))
            object.awardScore = message.awardScore;
        return object;
    };

    /**
     * Converts this PKAwardList to JSON.
     * @function toJSON
     * @memberof PKAwardList
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PKAwardList.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PKAwardList;
})();

$root.ProPKGameEnd = (function() {

    /**
     * Properties of a ProPKGameEnd.
     * @exports IProPKGameEnd
     * @interface IProPKGameEnd
     * @property {number|null} [lGameTax] ProPKGameEnd lGameTax
     * @property {Array.<number>|null} [cbChongGuang] ProPKGameEnd cbChongGuang
     * @property {Array.<number>|null} [cbBaWangKing] ProPKGameEnd cbBaWangKing
     * @property {number|null} [wProvideUser] ProPKGameEnd wProvideUser
     * @property {number|null} [cbChiHuCard] ProPKGameEnd cbChiHuCard
     * @property {Array.<number>|null} [dwChiHuKind] ProPKGameEnd dwChiHuKind
     * @property {Array.<number>|null} [dwChiHuRight] ProPKGameEnd dwChiHuRight
     * @property {Array.<number>|null} [lTotaslGameScore] ProPKGameEnd lTotaslGameScore
     * @property {Array.<number>|null} [lCurrentGameScore] ProPKGameEnd lCurrentGameScore
     * @property {Array.<number>|null} [lCurrentPointScore] ProPKGameEnd lCurrentPointScore
     * @property {Array.<number>|null} [lAttachScore] ProPKGameEnd lAttachScore
     * @property {Array.<IPKMahList>|null} [cbHandCardData] ProPKGameEnd cbHandCardData
     * @property {Array.<IPKAwardList>|null} [cbAwardCardData] ProPKGameEnd cbAwardCardData
     * @property {Array.<number>|null} [lOnlyWinScore] ProPKGameEnd lOnlyWinScore
     * @property {boolean|null} [bRoundEnd] ProPKGameEnd bRoundEnd
     * @property {boolean|null} [bZhuangWin] ProPKGameEnd bZhuangWin
     * @property {Array.<number>|null} [cbJiangMaCardData] ProPKGameEnd cbJiangMaCardData
     * @property {Array.<IPKScoreList>|null} [detailedScores] ProPKGameEnd detailedScores
     * @property {boolean|null} [bIsDaTu] ProPKGameEnd bIsDaTu
     * @property {boolean|null} [bIsKuTong] ProPKGameEnd bIsKuTong
     * @property {number|null} [nNo1Seat] ProPKGameEnd nNo1Seat
     * @property {number|null} [nWinerSeat] ProPKGameEnd nWinerSeat
     * @property {number|null} [nWinersMate] ProPKGameEnd nWinersMate
     * @property {number|null} [nNo2Seat] ProPKGameEnd nNo2Seat
     * @property {number|null} [nNo3Seat] ProPKGameEnd nNo3Seat
     * @property {number|null} [nNo4Seat] ProPKGameEnd nNo4Seat
     */

    /**
     * Constructs a new ProPKGameEnd.
     * @exports ProPKGameEnd
     * @classdesc Represents a ProPKGameEnd.
     * @implements IProPKGameEnd
     * @constructor
     * @param {IProPKGameEnd=} [properties] Properties to set
     */
    function ProPKGameEnd(properties) {
        this.cbChongGuang = [];
        this.cbBaWangKing = [];
        this.dwChiHuKind = [];
        this.dwChiHuRight = [];
        this.lTotaslGameScore = [];
        this.lCurrentGameScore = [];
        this.lCurrentPointScore = [];
        this.lAttachScore = [];
        this.cbHandCardData = [];
        this.cbAwardCardData = [];
        this.lOnlyWinScore = [];
        this.cbJiangMaCardData = [];
        this.detailedScores = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameEnd lGameTax.
     * @member {number} lGameTax
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lGameTax = 0;

    /**
     * ProPKGameEnd cbChongGuang.
     * @member {Array.<number>} cbChongGuang
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbChongGuang = $util.emptyArray;

    /**
     * ProPKGameEnd cbBaWangKing.
     * @member {Array.<number>} cbBaWangKing
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbBaWangKing = $util.emptyArray;

    /**
     * ProPKGameEnd wProvideUser.
     * @member {number} wProvideUser
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.wProvideUser = 0;

    /**
     * ProPKGameEnd cbChiHuCard.
     * @member {number} cbChiHuCard
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbChiHuCard = 0;

    /**
     * ProPKGameEnd dwChiHuKind.
     * @member {Array.<number>} dwChiHuKind
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.dwChiHuKind = $util.emptyArray;

    /**
     * ProPKGameEnd dwChiHuRight.
     * @member {Array.<number>} dwChiHuRight
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.dwChiHuRight = $util.emptyArray;

    /**
     * ProPKGameEnd lTotaslGameScore.
     * @member {Array.<number>} lTotaslGameScore
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lTotaslGameScore = $util.emptyArray;

    /**
     * ProPKGameEnd lCurrentGameScore.
     * @member {Array.<number>} lCurrentGameScore
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lCurrentGameScore = $util.emptyArray;

    /**
     * ProPKGameEnd lCurrentPointScore.
     * @member {Array.<number>} lCurrentPointScore
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lCurrentPointScore = $util.emptyArray;

    /**
     * ProPKGameEnd lAttachScore.
     * @member {Array.<number>} lAttachScore
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lAttachScore = $util.emptyArray;

    /**
     * ProPKGameEnd cbHandCardData.
     * @member {Array.<IPKMahList>} cbHandCardData
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbHandCardData = $util.emptyArray;

    /**
     * ProPKGameEnd cbAwardCardData.
     * @member {Array.<IPKAwardList>} cbAwardCardData
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbAwardCardData = $util.emptyArray;

    /**
     * ProPKGameEnd lOnlyWinScore.
     * @member {Array.<number>} lOnlyWinScore
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.lOnlyWinScore = $util.emptyArray;

    /**
     * ProPKGameEnd bRoundEnd.
     * @member {boolean} bRoundEnd
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.bRoundEnd = false;

    /**
     * ProPKGameEnd bZhuangWin.
     * @member {boolean} bZhuangWin
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.bZhuangWin = false;

    /**
     * ProPKGameEnd cbJiangMaCardData.
     * @member {Array.<number>} cbJiangMaCardData
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.cbJiangMaCardData = $util.emptyArray;

    /**
     * ProPKGameEnd detailedScores.
     * @member {Array.<IPKScoreList>} detailedScores
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.detailedScores = $util.emptyArray;

    /**
     * ProPKGameEnd bIsDaTu.
     * @member {boolean} bIsDaTu
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.bIsDaTu = false;

    /**
     * ProPKGameEnd bIsKuTong.
     * @member {boolean} bIsKuTong
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.bIsKuTong = false;

    /**
     * ProPKGameEnd nNo1Seat.
     * @member {number} nNo1Seat
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nNo1Seat = 0;

    /**
     * ProPKGameEnd nWinerSeat.
     * @member {number} nWinerSeat
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nWinerSeat = 0;

    /**
     * ProPKGameEnd nWinersMate.
     * @member {number} nWinersMate
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nWinersMate = 0;

    /**
     * ProPKGameEnd nNo2Seat.
     * @member {number} nNo2Seat
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nNo2Seat = 0;

    /**
     * ProPKGameEnd nNo3Seat.
     * @member {number} nNo3Seat
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nNo3Seat = 0;

    /**
     * ProPKGameEnd nNo4Seat.
     * @member {number} nNo4Seat
     * @memberof ProPKGameEnd
     * @instance
     */
    ProPKGameEnd.prototype.nNo4Seat = 0;

    /**
     * Creates a new ProPKGameEnd instance using the specified properties.
     * @function create
     * @memberof ProPKGameEnd
     * @static
     * @param {IProPKGameEnd=} [properties] Properties to set
     * @returns {ProPKGameEnd} ProPKGameEnd instance
     */
    ProPKGameEnd.create = function create(properties) {
        return new ProPKGameEnd(properties);
    };

    /**
     * Encodes the specified ProPKGameEnd message. Does not implicitly {@link ProPKGameEnd.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameEnd
     * @static
     * @param {IProPKGameEnd} message ProPKGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameEnd.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.lGameTax);
        if (message.cbChongGuang != null && message.cbChongGuang.length)
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.cbChongGuang[i]);
        if (message.cbBaWangKing != null && message.cbBaWangKing.length)
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cbBaWangKing[i]);
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.wProvideUser);
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.cbChiHuCard);
        if (message.dwChiHuKind != null && message.dwChiHuKind.length)
            for (var i = 0; i < message.dwChiHuKind.length; ++i)
                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.dwChiHuKind[i]);
        if (message.dwChiHuRight != null && message.dwChiHuRight.length)
            for (var i = 0; i < message.dwChiHuRight.length; ++i)
                writer.uint32(/* id 8, wireType 0 =*/64).int32(message.dwChiHuRight[i]);
        if (message.lTotaslGameScore != null && message.lTotaslGameScore.length)
            for (var i = 0; i < message.lTotaslGameScore.length; ++i)
                writer.uint32(/* id 9, wireType 0 =*/72).int32(message.lTotaslGameScore[i]);
        if (message.lCurrentGameScore != null && message.lCurrentGameScore.length)
            for (var i = 0; i < message.lCurrentGameScore.length; ++i)
                writer.uint32(/* id 10, wireType 0 =*/80).int32(message.lCurrentGameScore[i]);
        if (message.lCurrentPointScore != null && message.lCurrentPointScore.length)
            for (var i = 0; i < message.lCurrentPointScore.length; ++i)
                writer.uint32(/* id 11, wireType 0 =*/88).int32(message.lCurrentPointScore[i]);
        if (message.lAttachScore != null && message.lAttachScore.length)
            for (var i = 0; i < message.lAttachScore.length; ++i)
                writer.uint32(/* id 12, wireType 0 =*/96).int32(message.lAttachScore[i]);
        if (message.cbHandCardData != null && message.cbHandCardData.length)
            for (var i = 0; i < message.cbHandCardData.length; ++i)
                $root.PKMahList.encode(message.cbHandCardData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();
        if (message.cbAwardCardData != null && message.cbAwardCardData.length)
            for (var i = 0; i < message.cbAwardCardData.length; ++i)
                $root.PKAwardList.encode(message.cbAwardCardData[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();
        if (message.lOnlyWinScore != null && message.lOnlyWinScore.length)
            for (var i = 0; i < message.lOnlyWinScore.length; ++i)
                writer.uint32(/* id 15, wireType 0 =*/120).int32(message.lOnlyWinScore[i]);
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            writer.uint32(/* id 16, wireType 0 =*/128).bool(message.bRoundEnd);
        if (message.bZhuangWin != null && message.hasOwnProperty("bZhuangWin"))
            writer.uint32(/* id 18, wireType 0 =*/144).bool(message.bZhuangWin);
        if (message.cbJiangMaCardData != null && message.cbJiangMaCardData.length)
            for (var i = 0; i < message.cbJiangMaCardData.length; ++i)
                writer.uint32(/* id 19, wireType 0 =*/152).int32(message.cbJiangMaCardData[i]);
        if (message.detailedScores != null && message.detailedScores.length)
            for (var i = 0; i < message.detailedScores.length; ++i)
                $root.PKScoreList.encode(message.detailedScores[i], writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.bIsDaTu);
        if (message.bIsKuTong != null && message.hasOwnProperty("bIsKuTong"))
            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.bIsKuTong);
        if (message.nNo1Seat != null && message.hasOwnProperty("nNo1Seat"))
            writer.uint32(/* id 23, wireType 0 =*/184).int32(message.nNo1Seat);
        if (message.nWinerSeat != null && message.hasOwnProperty("nWinerSeat"))
            writer.uint32(/* id 24, wireType 0 =*/192).int32(message.nWinerSeat);
        if (message.nWinersMate != null && message.hasOwnProperty("nWinersMate"))
            writer.uint32(/* id 25, wireType 0 =*/200).int32(message.nWinersMate);
        if (message.nNo2Seat != null && message.hasOwnProperty("nNo2Seat"))
            writer.uint32(/* id 26, wireType 0 =*/208).int32(message.nNo2Seat);
        if (message.nNo3Seat != null && message.hasOwnProperty("nNo3Seat"))
            writer.uint32(/* id 27, wireType 0 =*/216).int32(message.nNo3Seat);
        if (message.nNo4Seat != null && message.hasOwnProperty("nNo4Seat"))
            writer.uint32(/* id 28, wireType 0 =*/224).int32(message.nNo4Seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameEnd message, length delimited. Does not implicitly {@link ProPKGameEnd.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameEnd
     * @static
     * @param {IProPKGameEnd} message ProPKGameEnd message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameEnd.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameEnd message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameEnd} ProPKGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameEnd.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameEnd();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.lGameTax = reader.int32();
                break;
            case 3:
                if (!(message.cbChongGuang && message.cbChongGuang.length))
                    message.cbChongGuang = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbChongGuang.push(reader.int32());
                } else
                    message.cbChongGuang.push(reader.int32());
                break;
            case 4:
                if (!(message.cbBaWangKing && message.cbBaWangKing.length))
                    message.cbBaWangKing = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbBaWangKing.push(reader.int32());
                } else
                    message.cbBaWangKing.push(reader.int32());
                break;
            case 5:
                message.wProvideUser = reader.int32();
                break;
            case 6:
                message.cbChiHuCard = reader.int32();
                break;
            case 7:
                if (!(message.dwChiHuKind && message.dwChiHuKind.length))
                    message.dwChiHuKind = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.dwChiHuKind.push(reader.int32());
                } else
                    message.dwChiHuKind.push(reader.int32());
                break;
            case 8:
                if (!(message.dwChiHuRight && message.dwChiHuRight.length))
                    message.dwChiHuRight = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.dwChiHuRight.push(reader.int32());
                } else
                    message.dwChiHuRight.push(reader.int32());
                break;
            case 9:
                if (!(message.lTotaslGameScore && message.lTotaslGameScore.length))
                    message.lTotaslGameScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lTotaslGameScore.push(reader.int32());
                } else
                    message.lTotaslGameScore.push(reader.int32());
                break;
            case 10:
                if (!(message.lCurrentGameScore && message.lCurrentGameScore.length))
                    message.lCurrentGameScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lCurrentGameScore.push(reader.int32());
                } else
                    message.lCurrentGameScore.push(reader.int32());
                break;
            case 11:
                if (!(message.lCurrentPointScore && message.lCurrentPointScore.length))
                    message.lCurrentPointScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lCurrentPointScore.push(reader.int32());
                } else
                    message.lCurrentPointScore.push(reader.int32());
                break;
            case 12:
                if (!(message.lAttachScore && message.lAttachScore.length))
                    message.lAttachScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lAttachScore.push(reader.int32());
                } else
                    message.lAttachScore.push(reader.int32());
                break;
            case 13:
                if (!(message.cbHandCardData && message.cbHandCardData.length))
                    message.cbHandCardData = [];
                message.cbHandCardData.push($root.PKMahList.decode(reader, reader.uint32()));
                break;
            case 14:
                if (!(message.cbAwardCardData && message.cbAwardCardData.length))
                    message.cbAwardCardData = [];
                message.cbAwardCardData.push($root.PKAwardList.decode(reader, reader.uint32()));
                break;
            case 15:
                if (!(message.lOnlyWinScore && message.lOnlyWinScore.length))
                    message.lOnlyWinScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.lOnlyWinScore.push(reader.int32());
                } else
                    message.lOnlyWinScore.push(reader.int32());
                break;
            case 16:
                message.bRoundEnd = reader.bool();
                break;
            case 18:
                message.bZhuangWin = reader.bool();
                break;
            case 19:
                if (!(message.cbJiangMaCardData && message.cbJiangMaCardData.length))
                    message.cbJiangMaCardData = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.cbJiangMaCardData.push(reader.int32());
                } else
                    message.cbJiangMaCardData.push(reader.int32());
                break;
            case 20:
                if (!(message.detailedScores && message.detailedScores.length))
                    message.detailedScores = [];
                message.detailedScores.push($root.PKScoreList.decode(reader, reader.uint32()));
                break;
            case 21:
                message.bIsDaTu = reader.bool();
                break;
            case 22:
                message.bIsKuTong = reader.bool();
                break;
            case 23:
                message.nNo1Seat = reader.int32();
                break;
            case 24:
                message.nWinerSeat = reader.int32();
                break;
            case 25:
                message.nWinersMate = reader.int32();
                break;
            case 26:
                message.nNo2Seat = reader.int32();
                break;
            case 27:
                message.nNo3Seat = reader.int32();
                break;
            case 28:
                message.nNo4Seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameEnd message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameEnd
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameEnd} ProPKGameEnd
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameEnd.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameEnd message.
     * @function verify
     * @memberof ProPKGameEnd
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameEnd.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            if (!$util.isInteger(message.lGameTax))
                return "lGameTax: integer expected";
        if (message.cbChongGuang != null && message.hasOwnProperty("cbChongGuang")) {
            if (!Array.isArray(message.cbChongGuang))
                return "cbChongGuang: array expected";
            for (var i = 0; i < message.cbChongGuang.length; ++i)
                if (!$util.isInteger(message.cbChongGuang[i]))
                    return "cbChongGuang: integer[] expected";
        }
        if (message.cbBaWangKing != null && message.hasOwnProperty("cbBaWangKing")) {
            if (!Array.isArray(message.cbBaWangKing))
                return "cbBaWangKing: array expected";
            for (var i = 0; i < message.cbBaWangKing.length; ++i)
                if (!$util.isInteger(message.cbBaWangKing[i]))
                    return "cbBaWangKing: integer[] expected";
        }
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            if (!$util.isInteger(message.wProvideUser))
                return "wProvideUser: integer expected";
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            if (!$util.isInteger(message.cbChiHuCard))
                return "cbChiHuCard: integer expected";
        if (message.dwChiHuKind != null && message.hasOwnProperty("dwChiHuKind")) {
            if (!Array.isArray(message.dwChiHuKind))
                return "dwChiHuKind: array expected";
            for (var i = 0; i < message.dwChiHuKind.length; ++i)
                if (!$util.isInteger(message.dwChiHuKind[i]))
                    return "dwChiHuKind: integer[] expected";
        }
        if (message.dwChiHuRight != null && message.hasOwnProperty("dwChiHuRight")) {
            if (!Array.isArray(message.dwChiHuRight))
                return "dwChiHuRight: array expected";
            for (var i = 0; i < message.dwChiHuRight.length; ++i)
                if (!$util.isInteger(message.dwChiHuRight[i]))
                    return "dwChiHuRight: integer[] expected";
        }
        if (message.lTotaslGameScore != null && message.hasOwnProperty("lTotaslGameScore")) {
            if (!Array.isArray(message.lTotaslGameScore))
                return "lTotaslGameScore: array expected";
            for (var i = 0; i < message.lTotaslGameScore.length; ++i)
                if (!$util.isInteger(message.lTotaslGameScore[i]))
                    return "lTotaslGameScore: integer[] expected";
        }
        if (message.lCurrentGameScore != null && message.hasOwnProperty("lCurrentGameScore")) {
            if (!Array.isArray(message.lCurrentGameScore))
                return "lCurrentGameScore: array expected";
            for (var i = 0; i < message.lCurrentGameScore.length; ++i)
                if (!$util.isInteger(message.lCurrentGameScore[i]))
                    return "lCurrentGameScore: integer[] expected";
        }
        if (message.lCurrentPointScore != null && message.hasOwnProperty("lCurrentPointScore")) {
            if (!Array.isArray(message.lCurrentPointScore))
                return "lCurrentPointScore: array expected";
            for (var i = 0; i < message.lCurrentPointScore.length; ++i)
                if (!$util.isInteger(message.lCurrentPointScore[i]))
                    return "lCurrentPointScore: integer[] expected";
        }
        if (message.lAttachScore != null && message.hasOwnProperty("lAttachScore")) {
            if (!Array.isArray(message.lAttachScore))
                return "lAttachScore: array expected";
            for (var i = 0; i < message.lAttachScore.length; ++i)
                if (!$util.isInteger(message.lAttachScore[i]))
                    return "lAttachScore: integer[] expected";
        }
        if (message.cbHandCardData != null && message.hasOwnProperty("cbHandCardData")) {
            if (!Array.isArray(message.cbHandCardData))
                return "cbHandCardData: array expected";
            for (var i = 0; i < message.cbHandCardData.length; ++i) {
                var error = $root.PKMahList.verify(message.cbHandCardData[i]);
                if (error)
                    return "cbHandCardData." + error;
            }
        }
        if (message.cbAwardCardData != null && message.hasOwnProperty("cbAwardCardData")) {
            if (!Array.isArray(message.cbAwardCardData))
                return "cbAwardCardData: array expected";
            for (var i = 0; i < message.cbAwardCardData.length; ++i) {
                var error = $root.PKAwardList.verify(message.cbAwardCardData[i]);
                if (error)
                    return "cbAwardCardData." + error;
            }
        }
        if (message.lOnlyWinScore != null && message.hasOwnProperty("lOnlyWinScore")) {
            if (!Array.isArray(message.lOnlyWinScore))
                return "lOnlyWinScore: array expected";
            for (var i = 0; i < message.lOnlyWinScore.length; ++i)
                if (!$util.isInteger(message.lOnlyWinScore[i]))
                    return "lOnlyWinScore: integer[] expected";
        }
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            if (typeof message.bRoundEnd !== "boolean")
                return "bRoundEnd: boolean expected";
        if (message.bZhuangWin != null && message.hasOwnProperty("bZhuangWin"))
            if (typeof message.bZhuangWin !== "boolean")
                return "bZhuangWin: boolean expected";
        if (message.cbJiangMaCardData != null && message.hasOwnProperty("cbJiangMaCardData")) {
            if (!Array.isArray(message.cbJiangMaCardData))
                return "cbJiangMaCardData: array expected";
            for (var i = 0; i < message.cbJiangMaCardData.length; ++i)
                if (!$util.isInteger(message.cbJiangMaCardData[i]))
                    return "cbJiangMaCardData: integer[] expected";
        }
        if (message.detailedScores != null && message.hasOwnProperty("detailedScores")) {
            if (!Array.isArray(message.detailedScores))
                return "detailedScores: array expected";
            for (var i = 0; i < message.detailedScores.length; ++i) {
                var error = $root.PKScoreList.verify(message.detailedScores[i]);
                if (error)
                    return "detailedScores." + error;
            }
        }
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            if (typeof message.bIsDaTu !== "boolean")
                return "bIsDaTu: boolean expected";
        if (message.bIsKuTong != null && message.hasOwnProperty("bIsKuTong"))
            if (typeof message.bIsKuTong !== "boolean")
                return "bIsKuTong: boolean expected";
        if (message.nNo1Seat != null && message.hasOwnProperty("nNo1Seat"))
            if (!$util.isInteger(message.nNo1Seat))
                return "nNo1Seat: integer expected";
        if (message.nWinerSeat != null && message.hasOwnProperty("nWinerSeat"))
            if (!$util.isInteger(message.nWinerSeat))
                return "nWinerSeat: integer expected";
        if (message.nWinersMate != null && message.hasOwnProperty("nWinersMate"))
            if (!$util.isInteger(message.nWinersMate))
                return "nWinersMate: integer expected";
        if (message.nNo2Seat != null && message.hasOwnProperty("nNo2Seat"))
            if (!$util.isInteger(message.nNo2Seat))
                return "nNo2Seat: integer expected";
        if (message.nNo3Seat != null && message.hasOwnProperty("nNo3Seat"))
            if (!$util.isInteger(message.nNo3Seat))
                return "nNo3Seat: integer expected";
        if (message.nNo4Seat != null && message.hasOwnProperty("nNo4Seat"))
            if (!$util.isInteger(message.nNo4Seat))
                return "nNo4Seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameEnd message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameEnd
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameEnd} ProPKGameEnd
     */
    ProPKGameEnd.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameEnd)
            return object;
        var message = new $root.ProPKGameEnd();
        if (object.lGameTax != null)
            message.lGameTax = object.lGameTax | 0;
        if (object.cbChongGuang) {
            if (!Array.isArray(object.cbChongGuang))
                throw TypeError(".ProPKGameEnd.cbChongGuang: array expected");
            message.cbChongGuang = [];
            for (var i = 0; i < object.cbChongGuang.length; ++i)
                message.cbChongGuang[i] = object.cbChongGuang[i] | 0;
        }
        if (object.cbBaWangKing) {
            if (!Array.isArray(object.cbBaWangKing))
                throw TypeError(".ProPKGameEnd.cbBaWangKing: array expected");
            message.cbBaWangKing = [];
            for (var i = 0; i < object.cbBaWangKing.length; ++i)
                message.cbBaWangKing[i] = object.cbBaWangKing[i] | 0;
        }
        if (object.wProvideUser != null)
            message.wProvideUser = object.wProvideUser | 0;
        if (object.cbChiHuCard != null)
            message.cbChiHuCard = object.cbChiHuCard | 0;
        if (object.dwChiHuKind) {
            if (!Array.isArray(object.dwChiHuKind))
                throw TypeError(".ProPKGameEnd.dwChiHuKind: array expected");
            message.dwChiHuKind = [];
            for (var i = 0; i < object.dwChiHuKind.length; ++i)
                message.dwChiHuKind[i] = object.dwChiHuKind[i] | 0;
        }
        if (object.dwChiHuRight) {
            if (!Array.isArray(object.dwChiHuRight))
                throw TypeError(".ProPKGameEnd.dwChiHuRight: array expected");
            message.dwChiHuRight = [];
            for (var i = 0; i < object.dwChiHuRight.length; ++i)
                message.dwChiHuRight[i] = object.dwChiHuRight[i] | 0;
        }
        if (object.lTotaslGameScore) {
            if (!Array.isArray(object.lTotaslGameScore))
                throw TypeError(".ProPKGameEnd.lTotaslGameScore: array expected");
            message.lTotaslGameScore = [];
            for (var i = 0; i < object.lTotaslGameScore.length; ++i)
                message.lTotaslGameScore[i] = object.lTotaslGameScore[i] | 0;
        }
        if (object.lCurrentGameScore) {
            if (!Array.isArray(object.lCurrentGameScore))
                throw TypeError(".ProPKGameEnd.lCurrentGameScore: array expected");
            message.lCurrentGameScore = [];
            for (var i = 0; i < object.lCurrentGameScore.length; ++i)
                message.lCurrentGameScore[i] = object.lCurrentGameScore[i] | 0;
        }
        if (object.lCurrentPointScore) {
            if (!Array.isArray(object.lCurrentPointScore))
                throw TypeError(".ProPKGameEnd.lCurrentPointScore: array expected");
            message.lCurrentPointScore = [];
            for (var i = 0; i < object.lCurrentPointScore.length; ++i)
                message.lCurrentPointScore[i] = object.lCurrentPointScore[i] | 0;
        }
        if (object.lAttachScore) {
            if (!Array.isArray(object.lAttachScore))
                throw TypeError(".ProPKGameEnd.lAttachScore: array expected");
            message.lAttachScore = [];
            for (var i = 0; i < object.lAttachScore.length; ++i)
                message.lAttachScore[i] = object.lAttachScore[i] | 0;
        }
        if (object.cbHandCardData) {
            if (!Array.isArray(object.cbHandCardData))
                throw TypeError(".ProPKGameEnd.cbHandCardData: array expected");
            message.cbHandCardData = [];
            for (var i = 0; i < object.cbHandCardData.length; ++i) {
                if (typeof object.cbHandCardData[i] !== "object")
                    throw TypeError(".ProPKGameEnd.cbHandCardData: object expected");
                message.cbHandCardData[i] = $root.PKMahList.fromObject(object.cbHandCardData[i]);
            }
        }
        if (object.cbAwardCardData) {
            if (!Array.isArray(object.cbAwardCardData))
                throw TypeError(".ProPKGameEnd.cbAwardCardData: array expected");
            message.cbAwardCardData = [];
            for (var i = 0; i < object.cbAwardCardData.length; ++i) {
                if (typeof object.cbAwardCardData[i] !== "object")
                    throw TypeError(".ProPKGameEnd.cbAwardCardData: object expected");
                message.cbAwardCardData[i] = $root.PKAwardList.fromObject(object.cbAwardCardData[i]);
            }
        }
        if (object.lOnlyWinScore) {
            if (!Array.isArray(object.lOnlyWinScore))
                throw TypeError(".ProPKGameEnd.lOnlyWinScore: array expected");
            message.lOnlyWinScore = [];
            for (var i = 0; i < object.lOnlyWinScore.length; ++i)
                message.lOnlyWinScore[i] = object.lOnlyWinScore[i] | 0;
        }
        if (object.bRoundEnd != null)
            message.bRoundEnd = Boolean(object.bRoundEnd);
        if (object.bZhuangWin != null)
            message.bZhuangWin = Boolean(object.bZhuangWin);
        if (object.cbJiangMaCardData) {
            if (!Array.isArray(object.cbJiangMaCardData))
                throw TypeError(".ProPKGameEnd.cbJiangMaCardData: array expected");
            message.cbJiangMaCardData = [];
            for (var i = 0; i < object.cbJiangMaCardData.length; ++i)
                message.cbJiangMaCardData[i] = object.cbJiangMaCardData[i] | 0;
        }
        if (object.detailedScores) {
            if (!Array.isArray(object.detailedScores))
                throw TypeError(".ProPKGameEnd.detailedScores: array expected");
            message.detailedScores = [];
            for (var i = 0; i < object.detailedScores.length; ++i) {
                if (typeof object.detailedScores[i] !== "object")
                    throw TypeError(".ProPKGameEnd.detailedScores: object expected");
                message.detailedScores[i] = $root.PKScoreList.fromObject(object.detailedScores[i]);
            }
        }
        if (object.bIsDaTu != null)
            message.bIsDaTu = Boolean(object.bIsDaTu);
        if (object.bIsKuTong != null)
            message.bIsKuTong = Boolean(object.bIsKuTong);
        if (object.nNo1Seat != null)
            message.nNo1Seat = object.nNo1Seat | 0;
        if (object.nWinerSeat != null)
            message.nWinerSeat = object.nWinerSeat | 0;
        if (object.nWinersMate != null)
            message.nWinersMate = object.nWinersMate | 0;
        if (object.nNo2Seat != null)
            message.nNo2Seat = object.nNo2Seat | 0;
        if (object.nNo3Seat != null)
            message.nNo3Seat = object.nNo3Seat | 0;
        if (object.nNo4Seat != null)
            message.nNo4Seat = object.nNo4Seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameEnd message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameEnd
     * @static
     * @param {ProPKGameEnd} message ProPKGameEnd
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameEnd.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults) {
            object.cbChongGuang = [];
            object.cbBaWangKing = [];
            object.dwChiHuKind = [];
            object.dwChiHuRight = [];
            object.lTotaslGameScore = [];
            object.lCurrentGameScore = [];
            object.lCurrentPointScore = [];
            object.lAttachScore = [];
            object.cbHandCardData = [];
            object.cbAwardCardData = [];
            object.lOnlyWinScore = [];
            object.cbJiangMaCardData = [];
            object.detailedScores = [];
        }
        if (options.defaults) {
            object.lGameTax = 0;
            object.wProvideUser = 0;
            object.cbChiHuCard = 0;
            object.bRoundEnd = false;
            object.bZhuangWin = false;
            object.bIsDaTu = false;
            object.bIsKuTong = false;
            object.nNo1Seat = 0;
            object.nWinerSeat = 0;
            object.nWinersMate = 0;
            object.nNo2Seat = 0;
            object.nNo3Seat = 0;
            object.nNo4Seat = 0;
        }
        if (message.lGameTax != null && message.hasOwnProperty("lGameTax"))
            object.lGameTax = message.lGameTax;
        if (message.cbChongGuang && message.cbChongGuang.length) {
            object.cbChongGuang = [];
            for (var j = 0; j < message.cbChongGuang.length; ++j)
                object.cbChongGuang[j] = message.cbChongGuang[j];
        }
        if (message.cbBaWangKing && message.cbBaWangKing.length) {
            object.cbBaWangKing = [];
            for (var j = 0; j < message.cbBaWangKing.length; ++j)
                object.cbBaWangKing[j] = message.cbBaWangKing[j];
        }
        if (message.wProvideUser != null && message.hasOwnProperty("wProvideUser"))
            object.wProvideUser = message.wProvideUser;
        if (message.cbChiHuCard != null && message.hasOwnProperty("cbChiHuCard"))
            object.cbChiHuCard = message.cbChiHuCard;
        if (message.dwChiHuKind && message.dwChiHuKind.length) {
            object.dwChiHuKind = [];
            for (var j = 0; j < message.dwChiHuKind.length; ++j)
                object.dwChiHuKind[j] = message.dwChiHuKind[j];
        }
        if (message.dwChiHuRight && message.dwChiHuRight.length) {
            object.dwChiHuRight = [];
            for (var j = 0; j < message.dwChiHuRight.length; ++j)
                object.dwChiHuRight[j] = message.dwChiHuRight[j];
        }
        if (message.lTotaslGameScore && message.lTotaslGameScore.length) {
            object.lTotaslGameScore = [];
            for (var j = 0; j < message.lTotaslGameScore.length; ++j)
                object.lTotaslGameScore[j] = message.lTotaslGameScore[j];
        }
        if (message.lCurrentGameScore && message.lCurrentGameScore.length) {
            object.lCurrentGameScore = [];
            for (var j = 0; j < message.lCurrentGameScore.length; ++j)
                object.lCurrentGameScore[j] = message.lCurrentGameScore[j];
        }
        if (message.lCurrentPointScore && message.lCurrentPointScore.length) {
            object.lCurrentPointScore = [];
            for (var j = 0; j < message.lCurrentPointScore.length; ++j)
                object.lCurrentPointScore[j] = message.lCurrentPointScore[j];
        }
        if (message.lAttachScore && message.lAttachScore.length) {
            object.lAttachScore = [];
            for (var j = 0; j < message.lAttachScore.length; ++j)
                object.lAttachScore[j] = message.lAttachScore[j];
        }
        if (message.cbHandCardData && message.cbHandCardData.length) {
            object.cbHandCardData = [];
            for (var j = 0; j < message.cbHandCardData.length; ++j)
                object.cbHandCardData[j] = $root.PKMahList.toObject(message.cbHandCardData[j], options);
        }
        if (message.cbAwardCardData && message.cbAwardCardData.length) {
            object.cbAwardCardData = [];
            for (var j = 0; j < message.cbAwardCardData.length; ++j)
                object.cbAwardCardData[j] = $root.PKAwardList.toObject(message.cbAwardCardData[j], options);
        }
        if (message.lOnlyWinScore && message.lOnlyWinScore.length) {
            object.lOnlyWinScore = [];
            for (var j = 0; j < message.lOnlyWinScore.length; ++j)
                object.lOnlyWinScore[j] = message.lOnlyWinScore[j];
        }
        if (message.bRoundEnd != null && message.hasOwnProperty("bRoundEnd"))
            object.bRoundEnd = message.bRoundEnd;
        if (message.bZhuangWin != null && message.hasOwnProperty("bZhuangWin"))
            object.bZhuangWin = message.bZhuangWin;
        if (message.cbJiangMaCardData && message.cbJiangMaCardData.length) {
            object.cbJiangMaCardData = [];
            for (var j = 0; j < message.cbJiangMaCardData.length; ++j)
                object.cbJiangMaCardData[j] = message.cbJiangMaCardData[j];
        }
        if (message.detailedScores && message.detailedScores.length) {
            object.detailedScores = [];
            for (var j = 0; j < message.detailedScores.length; ++j)
                object.detailedScores[j] = $root.PKScoreList.toObject(message.detailedScores[j], options);
        }
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            object.bIsDaTu = message.bIsDaTu;
        if (message.bIsKuTong != null && message.hasOwnProperty("bIsKuTong"))
            object.bIsKuTong = message.bIsKuTong;
        if (message.nNo1Seat != null && message.hasOwnProperty("nNo1Seat"))
            object.nNo1Seat = message.nNo1Seat;
        if (message.nWinerSeat != null && message.hasOwnProperty("nWinerSeat"))
            object.nWinerSeat = message.nWinerSeat;
        if (message.nWinersMate != null && message.hasOwnProperty("nWinersMate"))
            object.nWinersMate = message.nWinersMate;
        if (message.nNo2Seat != null && message.hasOwnProperty("nNo2Seat"))
            object.nNo2Seat = message.nNo2Seat;
        if (message.nNo3Seat != null && message.hasOwnProperty("nNo3Seat"))
            object.nNo3Seat = message.nNo3Seat;
        if (message.nNo4Seat != null && message.hasOwnProperty("nNo4Seat"))
            object.nNo4Seat = message.nNo4Seat;
        return object;
    };

    /**
     * Converts this ProPKGameEnd to JSON.
     * @function toJSON
     * @memberof ProPKGameEnd
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameEnd.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameEnd.MSGID
     * @enum {string}
     * @property {number} ID=2219 ID value
     */
    ProPKGameEnd.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2219] = "ID"] = 2219;
        return values;
    })();

    return ProPKGameEnd;
})();

$root.ProPKGameQuickSoundRequest = (function() {

    /**
     * Properties of a ProPKGameQuickSoundRequest.
     * @exports IProPKGameQuickSoundRequest
     * @interface IProPKGameQuickSoundRequest
     * @property {number|null} [deskId] ProPKGameQuickSoundRequest deskId
     * @property {number|null} [seatId] ProPKGameQuickSoundRequest seatId
     * @property {number|null} [soundId] ProPKGameQuickSoundRequest soundId
     * @property {Uint8Array|null} [text] ProPKGameQuickSoundRequest text
     */

    /**
     * Constructs a new ProPKGameQuickSoundRequest.
     * @exports ProPKGameQuickSoundRequest
     * @classdesc Represents a ProPKGameQuickSoundRequest.
     * @implements IProPKGameQuickSoundRequest
     * @constructor
     * @param {IProPKGameQuickSoundRequest=} [properties] Properties to set
     */
    function ProPKGameQuickSoundRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameQuickSoundRequest deskId.
     * @member {number} deskId
     * @memberof ProPKGameQuickSoundRequest
     * @instance
     */
    ProPKGameQuickSoundRequest.prototype.deskId = 0;

    /**
     * ProPKGameQuickSoundRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameQuickSoundRequest
     * @instance
     */
    ProPKGameQuickSoundRequest.prototype.seatId = 0;

    /**
     * ProPKGameQuickSoundRequest soundId.
     * @member {number} soundId
     * @memberof ProPKGameQuickSoundRequest
     * @instance
     */
    ProPKGameQuickSoundRequest.prototype.soundId = 0;

    /**
     * ProPKGameQuickSoundRequest text.
     * @member {Uint8Array} text
     * @memberof ProPKGameQuickSoundRequest
     * @instance
     */
    ProPKGameQuickSoundRequest.prototype.text = $util.newBuffer([]);

    /**
     * Creates a new ProPKGameQuickSoundRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {IProPKGameQuickSoundRequest=} [properties] Properties to set
     * @returns {ProPKGameQuickSoundRequest} ProPKGameQuickSoundRequest instance
     */
    ProPKGameQuickSoundRequest.create = function create(properties) {
        return new ProPKGameQuickSoundRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameQuickSoundRequest message. Does not implicitly {@link ProPKGameQuickSoundRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {IProPKGameQuickSoundRequest} message ProPKGameQuickSoundRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameQuickSoundRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
        if (message.text != null && message.hasOwnProperty("text"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameQuickSoundRequest message, length delimited. Does not implicitly {@link ProPKGameQuickSoundRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {IProPKGameQuickSoundRequest} message ProPKGameQuickSoundRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameQuickSoundRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameQuickSoundRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameQuickSoundRequest} ProPKGameQuickSoundRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameQuickSoundRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameQuickSoundRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.deskId = reader.int32();
                break;
            case 3:
                message.seatId = reader.int32();
                break;
            case 4:
                message.soundId = reader.int32();
                break;
            case 5:
                message.text = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameQuickSoundRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameQuickSoundRequest} ProPKGameQuickSoundRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameQuickSoundRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameQuickSoundRequest message.
     * @function verify
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameQuickSoundRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            if (!$util.isInteger(message.deskId))
                return "deskId: integer expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            if (!$util.isInteger(message.soundId))
                return "soundId: integer expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                return "text: buffer expected";
        return null;
    };

    /**
     * Creates a ProPKGameQuickSoundRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameQuickSoundRequest} ProPKGameQuickSoundRequest
     */
    ProPKGameQuickSoundRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameQuickSoundRequest)
            return object;
        var message = new $root.ProPKGameQuickSoundRequest();
        if (object.deskId != null)
            message.deskId = object.deskId | 0;
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.soundId != null)
            message.soundId = object.soundId | 0;
        if (object.text != null)
            if (typeof object.text === "string")
                $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
            else if (object.text.length)
                message.text = object.text;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameQuickSoundRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameQuickSoundRequest
     * @static
     * @param {ProPKGameQuickSoundRequest} message ProPKGameQuickSoundRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameQuickSoundRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deskId = 0;
            object.seatId = 0;
            object.soundId = 0;
            object.text = options.bytes === String ? "" : [];
        }
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            object.deskId = message.deskId;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            object.soundId = message.soundId;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
        return object;
    };

    /**
     * Converts this ProPKGameQuickSoundRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameQuickSoundRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameQuickSoundRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameQuickSoundRequest.MSGID
     * @enum {string}
     * @property {number} ID=2220 ID value
     */
    ProPKGameQuickSoundRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2220] = "ID"] = 2220;
        return values;
    })();

    return ProPKGameQuickSoundRequest;
})();

$root.ProPKGameQuickSoundResponse = (function() {

    /**
     * Properties of a ProPKGameQuickSoundResponse.
     * @exports IProPKGameQuickSoundResponse
     * @interface IProPKGameQuickSoundResponse
     * @property {number|null} [deskId] ProPKGameQuickSoundResponse deskId
     * @property {number|null} [seatId] ProPKGameQuickSoundResponse seatId
     * @property {number|null} [soundId] ProPKGameQuickSoundResponse soundId
     * @property {Uint8Array|null} [text] ProPKGameQuickSoundResponse text
     */

    /**
     * Constructs a new ProPKGameQuickSoundResponse.
     * @exports ProPKGameQuickSoundResponse
     * @classdesc Represents a ProPKGameQuickSoundResponse.
     * @implements IProPKGameQuickSoundResponse
     * @constructor
     * @param {IProPKGameQuickSoundResponse=} [properties] Properties to set
     */
    function ProPKGameQuickSoundResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameQuickSoundResponse deskId.
     * @member {number} deskId
     * @memberof ProPKGameQuickSoundResponse
     * @instance
     */
    ProPKGameQuickSoundResponse.prototype.deskId = 0;

    /**
     * ProPKGameQuickSoundResponse seatId.
     * @member {number} seatId
     * @memberof ProPKGameQuickSoundResponse
     * @instance
     */
    ProPKGameQuickSoundResponse.prototype.seatId = 0;

    /**
     * ProPKGameQuickSoundResponse soundId.
     * @member {number} soundId
     * @memberof ProPKGameQuickSoundResponse
     * @instance
     */
    ProPKGameQuickSoundResponse.prototype.soundId = 0;

    /**
     * ProPKGameQuickSoundResponse text.
     * @member {Uint8Array} text
     * @memberof ProPKGameQuickSoundResponse
     * @instance
     */
    ProPKGameQuickSoundResponse.prototype.text = $util.newBuffer([]);

    /**
     * Creates a new ProPKGameQuickSoundResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {IProPKGameQuickSoundResponse=} [properties] Properties to set
     * @returns {ProPKGameQuickSoundResponse} ProPKGameQuickSoundResponse instance
     */
    ProPKGameQuickSoundResponse.create = function create(properties) {
        return new ProPKGameQuickSoundResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameQuickSoundResponse message. Does not implicitly {@link ProPKGameQuickSoundResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {IProPKGameQuickSoundResponse} message ProPKGameQuickSoundResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameQuickSoundResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.deskId);
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.seatId);
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.soundId);
        if (message.text != null && message.hasOwnProperty("text"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.text);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameQuickSoundResponse message, length delimited. Does not implicitly {@link ProPKGameQuickSoundResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {IProPKGameQuickSoundResponse} message ProPKGameQuickSoundResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameQuickSoundResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameQuickSoundResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameQuickSoundResponse} ProPKGameQuickSoundResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameQuickSoundResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameQuickSoundResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.deskId = reader.int32();
                break;
            case 3:
                message.seatId = reader.int32();
                break;
            case 4:
                message.soundId = reader.int32();
                break;
            case 5:
                message.text = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameQuickSoundResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameQuickSoundResponse} ProPKGameQuickSoundResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameQuickSoundResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameQuickSoundResponse message.
     * @function verify
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameQuickSoundResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            if (!$util.isInteger(message.deskId))
                return "deskId: integer expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            if (!$util.isInteger(message.soundId))
                return "soundId: integer expected";
        if (message.text != null && message.hasOwnProperty("text"))
            if (!(message.text && typeof message.text.length === "number" || $util.isString(message.text)))
                return "text: buffer expected";
        return null;
    };

    /**
     * Creates a ProPKGameQuickSoundResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameQuickSoundResponse} ProPKGameQuickSoundResponse
     */
    ProPKGameQuickSoundResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameQuickSoundResponse)
            return object;
        var message = new $root.ProPKGameQuickSoundResponse();
        if (object.deskId != null)
            message.deskId = object.deskId | 0;
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.soundId != null)
            message.soundId = object.soundId | 0;
        if (object.text != null)
            if (typeof object.text === "string")
                $util.base64.decode(object.text, message.text = $util.newBuffer($util.base64.length(object.text)), 0);
            else if (object.text.length)
                message.text = object.text;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameQuickSoundResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameQuickSoundResponse
     * @static
     * @param {ProPKGameQuickSoundResponse} message ProPKGameQuickSoundResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameQuickSoundResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.deskId = 0;
            object.seatId = 0;
            object.soundId = 0;
            object.text = options.bytes === String ? "" : [];
        }
        if (message.deskId != null && message.hasOwnProperty("deskId"))
            object.deskId = message.deskId;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.soundId != null && message.hasOwnProperty("soundId"))
            object.soundId = message.soundId;
        if (message.text != null && message.hasOwnProperty("text"))
            object.text = options.bytes === String ? $util.base64.encode(message.text, 0, message.text.length) : options.bytes === Array ? Array.prototype.slice.call(message.text) : message.text;
        return object;
    };

    /**
     * Converts this ProPKGameQuickSoundResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameQuickSoundResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameQuickSoundResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameQuickSoundResponse.MSGID
     * @enum {string}
     * @property {number} ID=2221 ID value
     */
    ProPKGameQuickSoundResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2221] = "ID"] = 2221;
        return values;
    })();

    return ProPKGameQuickSoundResponse;
})();

$root.ProPKGameSendDiscardMahs = (function() {

    /**
     * Properties of a ProPKGameSendDiscardMahs.
     * @exports IProPKGameSendDiscardMahs
     * @interface IProPKGameSendDiscardMahs
     * @property {number|null} [seatId] ProPKGameSendDiscardMahs seatId
     * @property {Array.<IPKMahList>|null} [cbCardData] ProPKGameSendDiscardMahs cbCardData
     * @property {number|null} [deskCount] ProPKGameSendDiscardMahs deskCount
     */

    /**
     * Constructs a new ProPKGameSendDiscardMahs.
     * @exports ProPKGameSendDiscardMahs
     * @classdesc Represents a ProPKGameSendDiscardMahs.
     * @implements IProPKGameSendDiscardMahs
     * @constructor
     * @param {IProPKGameSendDiscardMahs=} [properties] Properties to set
     */
    function ProPKGameSendDiscardMahs(properties) {
        this.cbCardData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameSendDiscardMahs seatId.
     * @member {number} seatId
     * @memberof ProPKGameSendDiscardMahs
     * @instance
     */
    ProPKGameSendDiscardMahs.prototype.seatId = 0;

    /**
     * ProPKGameSendDiscardMahs cbCardData.
     * @member {Array.<IPKMahList>} cbCardData
     * @memberof ProPKGameSendDiscardMahs
     * @instance
     */
    ProPKGameSendDiscardMahs.prototype.cbCardData = $util.emptyArray;

    /**
     * ProPKGameSendDiscardMahs deskCount.
     * @member {number} deskCount
     * @memberof ProPKGameSendDiscardMahs
     * @instance
     */
    ProPKGameSendDiscardMahs.prototype.deskCount = 0;

    /**
     * Creates a new ProPKGameSendDiscardMahs instance using the specified properties.
     * @function create
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {IProPKGameSendDiscardMahs=} [properties] Properties to set
     * @returns {ProPKGameSendDiscardMahs} ProPKGameSendDiscardMahs instance
     */
    ProPKGameSendDiscardMahs.create = function create(properties) {
        return new ProPKGameSendDiscardMahs(properties);
    };

    /**
     * Encodes the specified ProPKGameSendDiscardMahs message. Does not implicitly {@link ProPKGameSendDiscardMahs.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {IProPKGameSendDiscardMahs} message ProPKGameSendDiscardMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendDiscardMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.cbCardData != null && message.cbCardData.length)
            for (var i = 0; i < message.cbCardData.length; ++i)
                $root.PKMahList.encode(message.cbCardData[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.deskCount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameSendDiscardMahs message, length delimited. Does not implicitly {@link ProPKGameSendDiscardMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {IProPKGameSendDiscardMahs} message ProPKGameSendDiscardMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendDiscardMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameSendDiscardMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameSendDiscardMahs} ProPKGameSendDiscardMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendDiscardMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameSendDiscardMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                if (!(message.cbCardData && message.cbCardData.length))
                    message.cbCardData = [];
                message.cbCardData.push($root.PKMahList.decode(reader, reader.uint32()));
                break;
            case 4:
                message.deskCount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameSendDiscardMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameSendDiscardMahs} ProPKGameSendDiscardMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendDiscardMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameSendDiscardMahs message.
     * @function verify
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameSendDiscardMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.cbCardData != null && message.hasOwnProperty("cbCardData")) {
            if (!Array.isArray(message.cbCardData))
                return "cbCardData: array expected";
            for (var i = 0; i < message.cbCardData.length; ++i) {
                var error = $root.PKMahList.verify(message.cbCardData[i]);
                if (error)
                    return "cbCardData." + error;
            }
        }
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            if (!$util.isInteger(message.deskCount))
                return "deskCount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameSendDiscardMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameSendDiscardMahs} ProPKGameSendDiscardMahs
     */
    ProPKGameSendDiscardMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameSendDiscardMahs)
            return object;
        var message = new $root.ProPKGameSendDiscardMahs();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.cbCardData) {
            if (!Array.isArray(object.cbCardData))
                throw TypeError(".ProPKGameSendDiscardMahs.cbCardData: array expected");
            message.cbCardData = [];
            for (var i = 0; i < object.cbCardData.length; ++i) {
                if (typeof object.cbCardData[i] !== "object")
                    throw TypeError(".ProPKGameSendDiscardMahs.cbCardData: object expected");
                message.cbCardData[i] = $root.PKMahList.fromObject(object.cbCardData[i]);
            }
        }
        if (object.deskCount != null)
            message.deskCount = object.deskCount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameSendDiscardMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameSendDiscardMahs
     * @static
     * @param {ProPKGameSendDiscardMahs} message ProPKGameSendDiscardMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameSendDiscardMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cbCardData = [];
        if (options.defaults) {
            object.seatId = 0;
            object.deskCount = 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.cbCardData && message.cbCardData.length) {
            object.cbCardData = [];
            for (var j = 0; j < message.cbCardData.length; ++j)
                object.cbCardData[j] = $root.PKMahList.toObject(message.cbCardData[j], options);
        }
        if (message.deskCount != null && message.hasOwnProperty("deskCount"))
            object.deskCount = message.deskCount;
        return object;
    };

    /**
     * Converts this ProPKGameSendDiscardMahs to JSON.
     * @function toJSON
     * @memberof ProPKGameSendDiscardMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameSendDiscardMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameSendDiscardMahs.MSGID
     * @enum {string}
     * @property {number} ID=2222 ID value
     */
    ProPKGameSendDiscardMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2222] = "ID"] = 2222;
        return values;
    })();

    return ProPKGameSendDiscardMahs;
})();

$root.PKWeaveItem = (function() {

    /**
     * Properties of a PKWeaveItem.
     * @exports IPKWeaveItem
     * @interface IPKWeaveItem
     * @property {number|null} [weaveKind] PKWeaveItem weaveKind
     * @property {number|null} [centercard] PKWeaveItem centercard
     * @property {number|null} [provideUser] PKWeaveItem provideUser
     * @property {number|null} [cardsize] PKWeaveItem cardsize
     */

    /**
     * Constructs a new PKWeaveItem.
     * @exports PKWeaveItem
     * @classdesc Represents a PKWeaveItem.
     * @implements IPKWeaveItem
     * @constructor
     * @param {IPKWeaveItem=} [properties] Properties to set
     */
    function PKWeaveItem(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PKWeaveItem weaveKind.
     * @member {number} weaveKind
     * @memberof PKWeaveItem
     * @instance
     */
    PKWeaveItem.prototype.weaveKind = 0;

    /**
     * PKWeaveItem centercard.
     * @member {number} centercard
     * @memberof PKWeaveItem
     * @instance
     */
    PKWeaveItem.prototype.centercard = 0;

    /**
     * PKWeaveItem provideUser.
     * @member {number} provideUser
     * @memberof PKWeaveItem
     * @instance
     */
    PKWeaveItem.prototype.provideUser = 0;

    /**
     * PKWeaveItem cardsize.
     * @member {number} cardsize
     * @memberof PKWeaveItem
     * @instance
     */
    PKWeaveItem.prototype.cardsize = 0;

    /**
     * Creates a new PKWeaveItem instance using the specified properties.
     * @function create
     * @memberof PKWeaveItem
     * @static
     * @param {IPKWeaveItem=} [properties] Properties to set
     * @returns {PKWeaveItem} PKWeaveItem instance
     */
    PKWeaveItem.create = function create(properties) {
        return new PKWeaveItem(properties);
    };

    /**
     * Encodes the specified PKWeaveItem message. Does not implicitly {@link PKWeaveItem.verify|verify} messages.
     * @function encode
     * @memberof PKWeaveItem
     * @static
     * @param {IPKWeaveItem} message PKWeaveItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKWeaveItem.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.weaveKind);
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.centercard);
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.provideUser);
        if (message.cardsize != null && message.hasOwnProperty("cardsize"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.cardsize);
        return writer;
    };

    /**
     * Encodes the specified PKWeaveItem message, length delimited. Does not implicitly {@link PKWeaveItem.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PKWeaveItem
     * @static
     * @param {IPKWeaveItem} message PKWeaveItem message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKWeaveItem.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PKWeaveItem message from the specified reader or buffer.
     * @function decode
     * @memberof PKWeaveItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PKWeaveItem} PKWeaveItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKWeaveItem.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PKWeaveItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.weaveKind = reader.int32();
                break;
            case 2:
                message.centercard = reader.int32();
                break;
            case 3:
                message.provideUser = reader.int32();
                break;
            case 4:
                message.cardsize = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PKWeaveItem message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PKWeaveItem
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PKWeaveItem} PKWeaveItem
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKWeaveItem.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PKWeaveItem message.
     * @function verify
     * @memberof PKWeaveItem
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PKWeaveItem.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            if (!$util.isInteger(message.weaveKind))
                return "weaveKind: integer expected";
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            if (!$util.isInteger(message.centercard))
                return "centercard: integer expected";
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            if (!$util.isInteger(message.provideUser))
                return "provideUser: integer expected";
        if (message.cardsize != null && message.hasOwnProperty("cardsize"))
            if (!$util.isInteger(message.cardsize))
                return "cardsize: integer expected";
        return null;
    };

    /**
     * Creates a PKWeaveItem message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PKWeaveItem
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PKWeaveItem} PKWeaveItem
     */
    PKWeaveItem.fromObject = function fromObject(object) {
        if (object instanceof $root.PKWeaveItem)
            return object;
        var message = new $root.PKWeaveItem();
        if (object.weaveKind != null)
            message.weaveKind = object.weaveKind | 0;
        if (object.centercard != null)
            message.centercard = object.centercard | 0;
        if (object.provideUser != null)
            message.provideUser = object.provideUser | 0;
        if (object.cardsize != null)
            message.cardsize = object.cardsize | 0;
        return message;
    };

    /**
     * Creates a plain object from a PKWeaveItem message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PKWeaveItem
     * @static
     * @param {PKWeaveItem} message PKWeaveItem
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PKWeaveItem.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.weaveKind = 0;
            object.centercard = 0;
            object.provideUser = 0;
            object.cardsize = 0;
        }
        if (message.weaveKind != null && message.hasOwnProperty("weaveKind"))
            object.weaveKind = message.weaveKind;
        if (message.centercard != null && message.hasOwnProperty("centercard"))
            object.centercard = message.centercard;
        if (message.provideUser != null && message.hasOwnProperty("provideUser"))
            object.provideUser = message.provideUser;
        if (message.cardsize != null && message.hasOwnProperty("cardsize"))
            object.cardsize = message.cardsize;
        return object;
    };

    /**
     * Converts this PKWeaveItem to JSON.
     * @function toJSON
     * @memberof PKWeaveItem
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PKWeaveItem.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PKWeaveItem;
})();

$root.PKWeaveItems = (function() {

    /**
     * Properties of a PKWeaveItems.
     * @exports IPKWeaveItems
     * @interface IPKWeaveItems
     * @property {Array.<IPKWeaveItem>|null} [items] PKWeaveItems items
     */

    /**
     * Constructs a new PKWeaveItems.
     * @exports PKWeaveItems
     * @classdesc Represents a PKWeaveItems.
     * @implements IPKWeaveItems
     * @constructor
     * @param {IPKWeaveItems=} [properties] Properties to set
     */
    function PKWeaveItems(properties) {
        this.items = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * PKWeaveItems items.
     * @member {Array.<IPKWeaveItem>} items
     * @memberof PKWeaveItems
     * @instance
     */
    PKWeaveItems.prototype.items = $util.emptyArray;

    /**
     * Creates a new PKWeaveItems instance using the specified properties.
     * @function create
     * @memberof PKWeaveItems
     * @static
     * @param {IPKWeaveItems=} [properties] Properties to set
     * @returns {PKWeaveItems} PKWeaveItems instance
     */
    PKWeaveItems.create = function create(properties) {
        return new PKWeaveItems(properties);
    };

    /**
     * Encodes the specified PKWeaveItems message. Does not implicitly {@link PKWeaveItems.verify|verify} messages.
     * @function encode
     * @memberof PKWeaveItems
     * @static
     * @param {IPKWeaveItems} message PKWeaveItems message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKWeaveItems.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.items != null && message.items.length)
            for (var i = 0; i < message.items.length; ++i)
                $root.PKWeaveItem.encode(message.items[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified PKWeaveItems message, length delimited. Does not implicitly {@link PKWeaveItems.verify|verify} messages.
     * @function encodeDelimited
     * @memberof PKWeaveItems
     * @static
     * @param {IPKWeaveItems} message PKWeaveItems message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    PKWeaveItems.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a PKWeaveItems message from the specified reader or buffer.
     * @function decode
     * @memberof PKWeaveItems
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {PKWeaveItems} PKWeaveItems
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKWeaveItems.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PKWeaveItems();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.items && message.items.length))
                    message.items = [];
                message.items.push($root.PKWeaveItem.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a PKWeaveItems message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof PKWeaveItems
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {PKWeaveItems} PKWeaveItems
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    PKWeaveItems.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a PKWeaveItems message.
     * @function verify
     * @memberof PKWeaveItems
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    PKWeaveItems.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.items != null && message.hasOwnProperty("items")) {
            if (!Array.isArray(message.items))
                return "items: array expected";
            for (var i = 0; i < message.items.length; ++i) {
                var error = $root.PKWeaveItem.verify(message.items[i]);
                if (error)
                    return "items." + error;
            }
        }
        return null;
    };

    /**
     * Creates a PKWeaveItems message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof PKWeaveItems
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {PKWeaveItems} PKWeaveItems
     */
    PKWeaveItems.fromObject = function fromObject(object) {
        if (object instanceof $root.PKWeaveItems)
            return object;
        var message = new $root.PKWeaveItems();
        if (object.items) {
            if (!Array.isArray(object.items))
                throw TypeError(".PKWeaveItems.items: array expected");
            message.items = [];
            for (var i = 0; i < object.items.length; ++i) {
                if (typeof object.items[i] !== "object")
                    throw TypeError(".PKWeaveItems.items: object expected");
                message.items[i] = $root.PKWeaveItem.fromObject(object.items[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a PKWeaveItems message. Also converts values to other types if specified.
     * @function toObject
     * @memberof PKWeaveItems
     * @static
     * @param {PKWeaveItems} message PKWeaveItems
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    PKWeaveItems.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.items = [];
        if (message.items && message.items.length) {
            object.items = [];
            for (var j = 0; j < message.items.length; ++j)
                object.items[j] = $root.PKWeaveItem.toObject(message.items[j], options);
        }
        return object;
    };

    /**
     * Converts this PKWeaveItems to JSON.
     * @function toJSON
     * @memberof PKWeaveItems
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    PKWeaveItems.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    return PKWeaveItems;
})();

$root.ProPKGameSendActionMahs = (function() {

    /**
     * Properties of a ProPKGameSendActionMahs.
     * @exports IProPKGameSendActionMahs
     * @interface IProPKGameSendActionMahs
     * @property {number|null} [seatId] ProPKGameSendActionMahs seatId
     * @property {Array.<IPKWeaveItems>|null} [weaves] ProPKGameSendActionMahs weaves
     */

    /**
     * Constructs a new ProPKGameSendActionMahs.
     * @exports ProPKGameSendActionMahs
     * @classdesc Represents a ProPKGameSendActionMahs.
     * @implements IProPKGameSendActionMahs
     * @constructor
     * @param {IProPKGameSendActionMahs=} [properties] Properties to set
     */
    function ProPKGameSendActionMahs(properties) {
        this.weaves = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameSendActionMahs seatId.
     * @member {number} seatId
     * @memberof ProPKGameSendActionMahs
     * @instance
     */
    ProPKGameSendActionMahs.prototype.seatId = 0;

    /**
     * ProPKGameSendActionMahs weaves.
     * @member {Array.<IPKWeaveItems>} weaves
     * @memberof ProPKGameSendActionMahs
     * @instance
     */
    ProPKGameSendActionMahs.prototype.weaves = $util.emptyArray;

    /**
     * Creates a new ProPKGameSendActionMahs instance using the specified properties.
     * @function create
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {IProPKGameSendActionMahs=} [properties] Properties to set
     * @returns {ProPKGameSendActionMahs} ProPKGameSendActionMahs instance
     */
    ProPKGameSendActionMahs.create = function create(properties) {
        return new ProPKGameSendActionMahs(properties);
    };

    /**
     * Encodes the specified ProPKGameSendActionMahs message. Does not implicitly {@link ProPKGameSendActionMahs.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {IProPKGameSendActionMahs} message ProPKGameSendActionMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendActionMahs.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.weaves != null && message.weaves.length)
            for (var i = 0; i < message.weaves.length; ++i)
                $root.PKWeaveItems.encode(message.weaves[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProPKGameSendActionMahs message, length delimited. Does not implicitly {@link ProPKGameSendActionMahs.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {IProPKGameSendActionMahs} message ProPKGameSendActionMahs message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSendActionMahs.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameSendActionMahs message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameSendActionMahs} ProPKGameSendActionMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendActionMahs.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameSendActionMahs();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                if (!(message.weaves && message.weaves.length))
                    message.weaves = [];
                message.weaves.push($root.PKWeaveItems.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameSendActionMahs message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameSendActionMahs} ProPKGameSendActionMahs
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSendActionMahs.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameSendActionMahs message.
     * @function verify
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameSendActionMahs.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.weaves != null && message.hasOwnProperty("weaves")) {
            if (!Array.isArray(message.weaves))
                return "weaves: array expected";
            for (var i = 0; i < message.weaves.length; ++i) {
                var error = $root.PKWeaveItems.verify(message.weaves[i]);
                if (error)
                    return "weaves." + error;
            }
        }
        return null;
    };

    /**
     * Creates a ProPKGameSendActionMahs message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameSendActionMahs} ProPKGameSendActionMahs
     */
    ProPKGameSendActionMahs.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameSendActionMahs)
            return object;
        var message = new $root.ProPKGameSendActionMahs();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.weaves) {
            if (!Array.isArray(object.weaves))
                throw TypeError(".ProPKGameSendActionMahs.weaves: array expected");
            message.weaves = [];
            for (var i = 0; i < object.weaves.length; ++i) {
                if (typeof object.weaves[i] !== "object")
                    throw TypeError(".ProPKGameSendActionMahs.weaves: object expected");
                message.weaves[i] = $root.PKWeaveItems.fromObject(object.weaves[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameSendActionMahs message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameSendActionMahs
     * @static
     * @param {ProPKGameSendActionMahs} message ProPKGameSendActionMahs
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameSendActionMahs.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.weaves = [];
        if (options.defaults)
            object.seatId = 0;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.weaves && message.weaves.length) {
            object.weaves = [];
            for (var j = 0; j < message.weaves.length; ++j)
                object.weaves[j] = $root.PKWeaveItems.toObject(message.weaves[j], options);
        }
        return object;
    };

    /**
     * Converts this ProPKGameSendActionMahs to JSON.
     * @function toJSON
     * @memberof ProPKGameSendActionMahs
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameSendActionMahs.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameSendActionMahs.MSGID
     * @enum {string}
     * @property {number} ID=2223 ID value
     */
    ProPKGameSendActionMahs.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2223] = "ID"] = 2223;
        return values;
    })();

    return ProPKGameSendActionMahs;
})();

/**
 * PKBROKEN_TYPE enum.
 * @exports PKBROKEN_TYPE
 * @enum {string}
 * @property {number} PK_BT_MASTER_QUIT=0 PK_BT_MASTER_QUIT value
 * @property {number} PK_BT_USER_QUIT=1 PK_BT_USER_QUIT value
 * @property {number} PK_BT_BROKEN=2 PK_BT_BROKEN value
 */
$root.PKBROKEN_TYPE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PK_BT_MASTER_QUIT"] = 0;
    values[valuesById[1] = "PK_BT_USER_QUIT"] = 1;
    values[valuesById[2] = "PK_BT_BROKEN"] = 2;
    return values;
})();

$root.ProPKGameBrokenRequest = (function() {

    /**
     * Properties of a ProPKGameBrokenRequest.
     * @exports IProPKGameBrokenRequest
     * @interface IProPKGameBrokenRequest
     * @property {number|null} [seatId] ProPKGameBrokenRequest seatId
     * @property {PKBROKEN_TYPE|null} [type] ProPKGameBrokenRequest type
     * @property {number|null} [time] ProPKGameBrokenRequest time
     */

    /**
     * Constructs a new ProPKGameBrokenRequest.
     * @exports ProPKGameBrokenRequest
     * @classdesc Represents a ProPKGameBrokenRequest.
     * @implements IProPKGameBrokenRequest
     * @constructor
     * @param {IProPKGameBrokenRequest=} [properties] Properties to set
     */
    function ProPKGameBrokenRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameBrokenRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameBrokenRequest
     * @instance
     */
    ProPKGameBrokenRequest.prototype.seatId = 0;

    /**
     * ProPKGameBrokenRequest type.
     * @member {PKBROKEN_TYPE} type
     * @memberof ProPKGameBrokenRequest
     * @instance
     */
    ProPKGameBrokenRequest.prototype.type = 0;

    /**
     * ProPKGameBrokenRequest time.
     * @member {number} time
     * @memberof ProPKGameBrokenRequest
     * @instance
     */
    ProPKGameBrokenRequest.prototype.time = 0;

    /**
     * Creates a new ProPKGameBrokenRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {IProPKGameBrokenRequest=} [properties] Properties to set
     * @returns {ProPKGameBrokenRequest} ProPKGameBrokenRequest instance
     */
    ProPKGameBrokenRequest.create = function create(properties) {
        return new ProPKGameBrokenRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameBrokenRequest message. Does not implicitly {@link ProPKGameBrokenRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {IProPKGameBrokenRequest} message ProPKGameBrokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.type);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.time);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameBrokenRequest message, length delimited. Does not implicitly {@link ProPKGameBrokenRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {IProPKGameBrokenRequest} message ProPKGameBrokenRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameBrokenRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameBrokenRequest} ProPKGameBrokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameBrokenRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.type = reader.int32();
                break;
            case 4:
                message.time = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameBrokenRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameBrokenRequest} ProPKGameBrokenRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameBrokenRequest message.
     * @function verify
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameBrokenRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
            default:
                return "type: enum value expected";
            case 0:
            case 1:
            case 2:
                break;
            }
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameBrokenRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameBrokenRequest} ProPKGameBrokenRequest
     */
    ProPKGameBrokenRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameBrokenRequest)
            return object;
        var message = new $root.ProPKGameBrokenRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.type) {
        case "PK_BT_MASTER_QUIT":
        case 0:
            message.type = 0;
            break;
        case "PK_BT_USER_QUIT":
        case 1:
            message.type = 1;
            break;
        case "PK_BT_BROKEN":
        case 2:
            message.type = 2;
            break;
        }
        if (object.time != null)
            message.time = object.time | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameBrokenRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameBrokenRequest
     * @static
     * @param {ProPKGameBrokenRequest} message ProPKGameBrokenRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameBrokenRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.type = options.enums === String ? "PK_BT_MASTER_QUIT" : 0;
            object.time = 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.PKBROKEN_TYPE[message.type] : message.type;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        return object;
    };

    /**
     * Converts this ProPKGameBrokenRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameBrokenRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameBrokenRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameBrokenRequest.MSGID
     * @enum {string}
     * @property {number} ID=2224 ID value
     */
    ProPKGameBrokenRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2224] = "ID"] = 2224;
        return values;
    })();

    return ProPKGameBrokenRequest;
})();

/**
 * PKBROKEN_OPERATE enum.
 * @exports PKBROKEN_OPERATE
 * @enum {string}
 * @property {number} PK_BO_DISAGREE=0 PK_BO_DISAGREE value
 * @property {number} PK_BO_AGREE=1 PK_BO_AGREE value
 */
$root.PKBROKEN_OPERATE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PK_BO_DISAGREE"] = 0;
    values[valuesById[1] = "PK_BO_AGREE"] = 1;
    return values;
})();

$root.ProPKGameBrokenOperate = (function() {

    /**
     * Properties of a ProPKGameBrokenOperate.
     * @exports IProPKGameBrokenOperate
     * @interface IProPKGameBrokenOperate
     * @property {number|null} [seatId] ProPKGameBrokenOperate seatId
     * @property {PKBROKEN_OPERATE|null} [result] ProPKGameBrokenOperate result
     */

    /**
     * Constructs a new ProPKGameBrokenOperate.
     * @exports ProPKGameBrokenOperate
     * @classdesc Represents a ProPKGameBrokenOperate.
     * @implements IProPKGameBrokenOperate
     * @constructor
     * @param {IProPKGameBrokenOperate=} [properties] Properties to set
     */
    function ProPKGameBrokenOperate(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameBrokenOperate seatId.
     * @member {number} seatId
     * @memberof ProPKGameBrokenOperate
     * @instance
     */
    ProPKGameBrokenOperate.prototype.seatId = 0;

    /**
     * ProPKGameBrokenOperate result.
     * @member {PKBROKEN_OPERATE} result
     * @memberof ProPKGameBrokenOperate
     * @instance
     */
    ProPKGameBrokenOperate.prototype.result = 0;

    /**
     * Creates a new ProPKGameBrokenOperate instance using the specified properties.
     * @function create
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {IProPKGameBrokenOperate=} [properties] Properties to set
     * @returns {ProPKGameBrokenOperate} ProPKGameBrokenOperate instance
     */
    ProPKGameBrokenOperate.create = function create(properties) {
        return new ProPKGameBrokenOperate(properties);
    };

    /**
     * Encodes the specified ProPKGameBrokenOperate message. Does not implicitly {@link ProPKGameBrokenOperate.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {IProPKGameBrokenOperate} message ProPKGameBrokenOperate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenOperate.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.result != null && message.hasOwnProperty("result"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.result);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameBrokenOperate message, length delimited. Does not implicitly {@link ProPKGameBrokenOperate.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {IProPKGameBrokenOperate} message ProPKGameBrokenOperate message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenOperate.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameBrokenOperate message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameBrokenOperate} ProPKGameBrokenOperate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenOperate.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameBrokenOperate();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.result = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameBrokenOperate message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameBrokenOperate} ProPKGameBrokenOperate
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenOperate.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameBrokenOperate message.
     * @function verify
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameBrokenOperate.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.result != null && message.hasOwnProperty("result"))
            switch (message.result) {
            default:
                return "result: enum value expected";
            case 0:
            case 1:
                break;
            }
        return null;
    };

    /**
     * Creates a ProPKGameBrokenOperate message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameBrokenOperate} ProPKGameBrokenOperate
     */
    ProPKGameBrokenOperate.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameBrokenOperate)
            return object;
        var message = new $root.ProPKGameBrokenOperate();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.result) {
        case "PK_BO_DISAGREE":
        case 0:
            message.result = 0;
            break;
        case "PK_BO_AGREE":
        case 1:
            message.result = 1;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameBrokenOperate message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameBrokenOperate
     * @static
     * @param {ProPKGameBrokenOperate} message ProPKGameBrokenOperate
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameBrokenOperate.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.result = options.enums === String ? "PK_BO_DISAGREE" : 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.result != null && message.hasOwnProperty("result"))
            object.result = options.enums === String ? $root.PKBROKEN_OPERATE[message.result] : message.result;
        return object;
    };

    /**
     * Converts this ProPKGameBrokenOperate to JSON.
     * @function toJSON
     * @memberof ProPKGameBrokenOperate
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameBrokenOperate.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameBrokenOperate.MSGID
     * @enum {string}
     * @property {number} ID=2225 ID value
     */
    ProPKGameBrokenOperate.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2225] = "ID"] = 2225;
        return values;
    })();

    return ProPKGameBrokenOperate;
})();

/**
 * PKBROKEN_CODE enum.
 * @exports PKBROKEN_CODE
 * @enum {string}
 * @property {number} PK_BC_SUCCESS=0 PK_BC_SUCCESS value
 * @property {number} PK_BC_DISAGREE=1 PK_BC_DISAGREE value
 * @property {number} PK_BC_QUIT_SUCCESS=2 PK_BC_QUIT_SUCCESS value
 * @property {number} PK_BC_EXCEPTION=3 PK_BC_EXCEPTION value
 */
$root.PKBROKEN_CODE = (function() {
    var valuesById = {}, values = Object.create(valuesById);
    values[valuesById[0] = "PK_BC_SUCCESS"] = 0;
    values[valuesById[1] = "PK_BC_DISAGREE"] = 1;
    values[valuesById[2] = "PK_BC_QUIT_SUCCESS"] = 2;
    values[valuesById[3] = "PK_BC_EXCEPTION"] = 3;
    return values;
})();

$root.ProPKGameBrokenNotify = (function() {

    /**
     * Properties of a ProPKGameBrokenNotify.
     * @exports IProPKGameBrokenNotify
     * @interface IProPKGameBrokenNotify
     * @property {number|null} [seatId] ProPKGameBrokenNotify seatId
     * @property {PKBROKEN_CODE|null} [operateCode] ProPKGameBrokenNotify operateCode
     */

    /**
     * Constructs a new ProPKGameBrokenNotify.
     * @exports ProPKGameBrokenNotify
     * @classdesc Represents a ProPKGameBrokenNotify.
     * @implements IProPKGameBrokenNotify
     * @constructor
     * @param {IProPKGameBrokenNotify=} [properties] Properties to set
     */
    function ProPKGameBrokenNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameBrokenNotify seatId.
     * @member {number} seatId
     * @memberof ProPKGameBrokenNotify
     * @instance
     */
    ProPKGameBrokenNotify.prototype.seatId = 0;

    /**
     * ProPKGameBrokenNotify operateCode.
     * @member {PKBROKEN_CODE} operateCode
     * @memberof ProPKGameBrokenNotify
     * @instance
     */
    ProPKGameBrokenNotify.prototype.operateCode = 0;

    /**
     * Creates a new ProPKGameBrokenNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {IProPKGameBrokenNotify=} [properties] Properties to set
     * @returns {ProPKGameBrokenNotify} ProPKGameBrokenNotify instance
     */
    ProPKGameBrokenNotify.create = function create(properties) {
        return new ProPKGameBrokenNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameBrokenNotify message. Does not implicitly {@link ProPKGameBrokenNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {IProPKGameBrokenNotify} message ProPKGameBrokenNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seatId);
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.operateCode);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameBrokenNotify message, length delimited. Does not implicitly {@link ProPKGameBrokenNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {IProPKGameBrokenNotify} message ProPKGameBrokenNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameBrokenNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameBrokenNotify} ProPKGameBrokenNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameBrokenNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seatId = reader.int32();
                break;
            case 3:
                message.operateCode = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameBrokenNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameBrokenNotify} ProPKGameBrokenNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameBrokenNotify message.
     * @function verify
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameBrokenNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            switch (message.operateCode) {
            default:
                return "operateCode: enum value expected";
            case 0:
            case 1:
            case 2:
            case 3:
                break;
            }
        return null;
    };

    /**
     * Creates a ProPKGameBrokenNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameBrokenNotify} ProPKGameBrokenNotify
     */
    ProPKGameBrokenNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameBrokenNotify)
            return object;
        var message = new $root.ProPKGameBrokenNotify();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        switch (object.operateCode) {
        case "PK_BC_SUCCESS":
        case 0:
            message.operateCode = 0;
            break;
        case "PK_BC_DISAGREE":
        case 1:
            message.operateCode = 1;
            break;
        case "PK_BC_QUIT_SUCCESS":
        case 2:
            message.operateCode = 2;
            break;
        case "PK_BC_EXCEPTION":
        case 3:
            message.operateCode = 3;
            break;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameBrokenNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameBrokenNotify
     * @static
     * @param {ProPKGameBrokenNotify} message ProPKGameBrokenNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameBrokenNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.operateCode = options.enums === String ? "PK_BC_SUCCESS" : 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.operateCode != null && message.hasOwnProperty("operateCode"))
            object.operateCode = options.enums === String ? $root.PKBROKEN_CODE[message.operateCode] : message.operateCode;
        return object;
    };

    /**
     * Converts this ProPKGameBrokenNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameBrokenNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameBrokenNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameBrokenNotify.MSGID
     * @enum {string}
     * @property {number} ID=2226 ID value
     */
    ProPKGameBrokenNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2226] = "ID"] = 2226;
        return values;
    })();

    return ProPKGameBrokenNotify;
})();

$root.ProPKGameRuleConfig = (function() {

    /**
     * Properties of a ProPKGameRuleConfig.
     * @exports IProPKGameRuleConfig
     * @interface IProPKGameRuleConfig
     * @property {number|null} [gameRound] ProPKGameRuleConfig gameRound
     * @property {number|null} [needCard] ProPKGameRuleConfig needCard
     * @property {boolean|null} [haveBottomKing] ProPKGameRuleConfig haveBottomKing
     * @property {boolean|null} [haveMaiLei] ProPKGameRuleConfig haveMaiLei
     * @property {boolean|null} [havaHuiTou] ProPKGameRuleConfig havaHuiTou
     * @property {number|null} [nMasterSeat] ProPKGameRuleConfig nMasterSeat
     * @property {number|null} [currentGameCount] ProPKGameRuleConfig currentGameCount
     * @property {boolean|null} [haveJianma] ProPKGameRuleConfig haveJianma
     * @property {number|null} [havaJiangmanum] ProPKGameRuleConfig havaJiangmanum
     * @property {boolean|null} [haveJianhuashi] ProPKGameRuleConfig haveJianhuashi
     * @property {number|null} [nPlayerNum] ProPKGameRuleConfig nPlayerNum
     * @property {Uint8Array|null} [sRoomNum] ProPKGameRuleConfig sRoomNum
     * @property {Uint8Array|null} [sPlayTime] ProPKGameRuleConfig sPlayTime
     * @property {boolean|null} [haveAnZhao] ProPKGameRuleConfig haveAnZhao
     */

    /**
     * Constructs a new ProPKGameRuleConfig.
     * @exports ProPKGameRuleConfig
     * @classdesc Represents a ProPKGameRuleConfig.
     * @implements IProPKGameRuleConfig
     * @constructor
     * @param {IProPKGameRuleConfig=} [properties] Properties to set
     */
    function ProPKGameRuleConfig(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameRuleConfig gameRound.
     * @member {number} gameRound
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.gameRound = 0;

    /**
     * ProPKGameRuleConfig needCard.
     * @member {number} needCard
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.needCard = 0;

    /**
     * ProPKGameRuleConfig haveBottomKing.
     * @member {boolean} haveBottomKing
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.haveBottomKing = false;

    /**
     * ProPKGameRuleConfig haveMaiLei.
     * @member {boolean} haveMaiLei
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.haveMaiLei = false;

    /**
     * ProPKGameRuleConfig havaHuiTou.
     * @member {boolean} havaHuiTou
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.havaHuiTou = false;

    /**
     * ProPKGameRuleConfig nMasterSeat.
     * @member {number} nMasterSeat
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.nMasterSeat = 0;

    /**
     * ProPKGameRuleConfig currentGameCount.
     * @member {number} currentGameCount
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.currentGameCount = 0;

    /**
     * ProPKGameRuleConfig haveJianma.
     * @member {boolean} haveJianma
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.haveJianma = false;

    /**
     * ProPKGameRuleConfig havaJiangmanum.
     * @member {number} havaJiangmanum
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.havaJiangmanum = 0;

    /**
     * ProPKGameRuleConfig haveJianhuashi.
     * @member {boolean} haveJianhuashi
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.haveJianhuashi = false;

    /**
     * ProPKGameRuleConfig nPlayerNum.
     * @member {number} nPlayerNum
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.nPlayerNum = 0;

    /**
     * ProPKGameRuleConfig sRoomNum.
     * @member {Uint8Array} sRoomNum
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.sRoomNum = $util.newBuffer([]);

    /**
     * ProPKGameRuleConfig sPlayTime.
     * @member {Uint8Array} sPlayTime
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.sPlayTime = $util.newBuffer([]);

    /**
     * ProPKGameRuleConfig haveAnZhao.
     * @member {boolean} haveAnZhao
     * @memberof ProPKGameRuleConfig
     * @instance
     */
    ProPKGameRuleConfig.prototype.haveAnZhao = false;

    /**
     * Creates a new ProPKGameRuleConfig instance using the specified properties.
     * @function create
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {IProPKGameRuleConfig=} [properties] Properties to set
     * @returns {ProPKGameRuleConfig} ProPKGameRuleConfig instance
     */
    ProPKGameRuleConfig.create = function create(properties) {
        return new ProPKGameRuleConfig(properties);
    };

    /**
     * Encodes the specified ProPKGameRuleConfig message. Does not implicitly {@link ProPKGameRuleConfig.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {IProPKGameRuleConfig} message ProPKGameRuleConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRuleConfig.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.gameRound);
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.needCard);
        if (message.haveBottomKing != null && message.hasOwnProperty("haveBottomKing"))
            writer.uint32(/* id 3, wireType 0 =*/24).bool(message.haveBottomKing);
        if (message.haveMaiLei != null && message.hasOwnProperty("haveMaiLei"))
            writer.uint32(/* id 4, wireType 0 =*/32).bool(message.haveMaiLei);
        if (message.havaHuiTou != null && message.hasOwnProperty("havaHuiTou"))
            writer.uint32(/* id 5, wireType 0 =*/40).bool(message.havaHuiTou);
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.nMasterSeat);
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.currentGameCount);
        if (message.haveJianma != null && message.hasOwnProperty("haveJianma"))
            writer.uint32(/* id 8, wireType 0 =*/64).bool(message.haveJianma);
        if (message.havaJiangmanum != null && message.hasOwnProperty("havaJiangmanum"))
            writer.uint32(/* id 9, wireType 0 =*/72).int32(message.havaJiangmanum);
        if (message.haveJianhuashi != null && message.hasOwnProperty("haveJianhuashi"))
            writer.uint32(/* id 10, wireType 0 =*/80).bool(message.haveJianhuashi);
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.nPlayerNum);
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            writer.uint32(/* id 12, wireType 2 =*/98).bytes(message.sRoomNum);
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            writer.uint32(/* id 13, wireType 2 =*/106).bytes(message.sPlayTime);
        if (message.haveAnZhao != null && message.hasOwnProperty("haveAnZhao"))
            writer.uint32(/* id 14, wireType 0 =*/112).bool(message.haveAnZhao);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameRuleConfig message, length delimited. Does not implicitly {@link ProPKGameRuleConfig.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {IProPKGameRuleConfig} message ProPKGameRuleConfig message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRuleConfig.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameRuleConfig message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameRuleConfig} ProPKGameRuleConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRuleConfig.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameRuleConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.gameRound = reader.int32();
                break;
            case 2:
                message.needCard = reader.int32();
                break;
            case 3:
                message.haveBottomKing = reader.bool();
                break;
            case 4:
                message.haveMaiLei = reader.bool();
                break;
            case 5:
                message.havaHuiTou = reader.bool();
                break;
            case 6:
                message.nMasterSeat = reader.int32();
                break;
            case 7:
                message.currentGameCount = reader.int32();
                break;
            case 8:
                message.haveJianma = reader.bool();
                break;
            case 9:
                message.havaJiangmanum = reader.int32();
                break;
            case 10:
                message.haveJianhuashi = reader.bool();
                break;
            case 11:
                message.nPlayerNum = reader.int32();
                break;
            case 12:
                message.sRoomNum = reader.bytes();
                break;
            case 13:
                message.sPlayTime = reader.bytes();
                break;
            case 14:
                message.haveAnZhao = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameRuleConfig message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameRuleConfig} ProPKGameRuleConfig
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRuleConfig.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameRuleConfig message.
     * @function verify
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameRuleConfig.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            if (!$util.isInteger(message.gameRound))
                return "gameRound: integer expected";
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            if (!$util.isInteger(message.needCard))
                return "needCard: integer expected";
        if (message.haveBottomKing != null && message.hasOwnProperty("haveBottomKing"))
            if (typeof message.haveBottomKing !== "boolean")
                return "haveBottomKing: boolean expected";
        if (message.haveMaiLei != null && message.hasOwnProperty("haveMaiLei"))
            if (typeof message.haveMaiLei !== "boolean")
                return "haveMaiLei: boolean expected";
        if (message.havaHuiTou != null && message.hasOwnProperty("havaHuiTou"))
            if (typeof message.havaHuiTou !== "boolean")
                return "havaHuiTou: boolean expected";
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            if (!$util.isInteger(message.nMasterSeat))
                return "nMasterSeat: integer expected";
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            if (!$util.isInteger(message.currentGameCount))
                return "currentGameCount: integer expected";
        if (message.haveJianma != null && message.hasOwnProperty("haveJianma"))
            if (typeof message.haveJianma !== "boolean")
                return "haveJianma: boolean expected";
        if (message.havaJiangmanum != null && message.hasOwnProperty("havaJiangmanum"))
            if (!$util.isInteger(message.havaJiangmanum))
                return "havaJiangmanum: integer expected";
        if (message.haveJianhuashi != null && message.hasOwnProperty("haveJianhuashi"))
            if (typeof message.haveJianhuashi !== "boolean")
                return "haveJianhuashi: boolean expected";
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            if (!$util.isInteger(message.nPlayerNum))
                return "nPlayerNum: integer expected";
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            if (!(message.sRoomNum && typeof message.sRoomNum.length === "number" || $util.isString(message.sRoomNum)))
                return "sRoomNum: buffer expected";
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            if (!(message.sPlayTime && typeof message.sPlayTime.length === "number" || $util.isString(message.sPlayTime)))
                return "sPlayTime: buffer expected";
        if (message.haveAnZhao != null && message.hasOwnProperty("haveAnZhao"))
            if (typeof message.haveAnZhao !== "boolean")
                return "haveAnZhao: boolean expected";
        return null;
    };

    /**
     * Creates a ProPKGameRuleConfig message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameRuleConfig} ProPKGameRuleConfig
     */
    ProPKGameRuleConfig.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameRuleConfig)
            return object;
        var message = new $root.ProPKGameRuleConfig();
        if (object.gameRound != null)
            message.gameRound = object.gameRound | 0;
        if (object.needCard != null)
            message.needCard = object.needCard | 0;
        if (object.haveBottomKing != null)
            message.haveBottomKing = Boolean(object.haveBottomKing);
        if (object.haveMaiLei != null)
            message.haveMaiLei = Boolean(object.haveMaiLei);
        if (object.havaHuiTou != null)
            message.havaHuiTou = Boolean(object.havaHuiTou);
        if (object.nMasterSeat != null)
            message.nMasterSeat = object.nMasterSeat | 0;
        if (object.currentGameCount != null)
            message.currentGameCount = object.currentGameCount | 0;
        if (object.haveJianma != null)
            message.haveJianma = Boolean(object.haveJianma);
        if (object.havaJiangmanum != null)
            message.havaJiangmanum = object.havaJiangmanum | 0;
        if (object.haveJianhuashi != null)
            message.haveJianhuashi = Boolean(object.haveJianhuashi);
        if (object.nPlayerNum != null)
            message.nPlayerNum = object.nPlayerNum | 0;
        if (object.sRoomNum != null)
            if (typeof object.sRoomNum === "string")
                $util.base64.decode(object.sRoomNum, message.sRoomNum = $util.newBuffer($util.base64.length(object.sRoomNum)), 0);
            else if (object.sRoomNum.length)
                message.sRoomNum = object.sRoomNum;
        if (object.sPlayTime != null)
            if (typeof object.sPlayTime === "string")
                $util.base64.decode(object.sPlayTime, message.sPlayTime = $util.newBuffer($util.base64.length(object.sPlayTime)), 0);
            else if (object.sPlayTime.length)
                message.sPlayTime = object.sPlayTime;
        if (object.haveAnZhao != null)
            message.haveAnZhao = Boolean(object.haveAnZhao);
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameRuleConfig message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameRuleConfig
     * @static
     * @param {ProPKGameRuleConfig} message ProPKGameRuleConfig
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameRuleConfig.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.gameRound = 0;
            object.needCard = 0;
            object.haveBottomKing = false;
            object.haveMaiLei = false;
            object.havaHuiTou = false;
            object.nMasterSeat = 0;
            object.currentGameCount = 0;
            object.haveJianma = false;
            object.havaJiangmanum = 0;
            object.haveJianhuashi = false;
            object.nPlayerNum = 0;
            object.sRoomNum = options.bytes === String ? "" : [];
            object.sPlayTime = options.bytes === String ? "" : [];
            object.haveAnZhao = false;
        }
        if (message.gameRound != null && message.hasOwnProperty("gameRound"))
            object.gameRound = message.gameRound;
        if (message.needCard != null && message.hasOwnProperty("needCard"))
            object.needCard = message.needCard;
        if (message.haveBottomKing != null && message.hasOwnProperty("haveBottomKing"))
            object.haveBottomKing = message.haveBottomKing;
        if (message.haveMaiLei != null && message.hasOwnProperty("haveMaiLei"))
            object.haveMaiLei = message.haveMaiLei;
        if (message.havaHuiTou != null && message.hasOwnProperty("havaHuiTou"))
            object.havaHuiTou = message.havaHuiTou;
        if (message.nMasterSeat != null && message.hasOwnProperty("nMasterSeat"))
            object.nMasterSeat = message.nMasterSeat;
        if (message.currentGameCount != null && message.hasOwnProperty("currentGameCount"))
            object.currentGameCount = message.currentGameCount;
        if (message.haveJianma != null && message.hasOwnProperty("haveJianma"))
            object.haveJianma = message.haveJianma;
        if (message.havaJiangmanum != null && message.hasOwnProperty("havaJiangmanum"))
            object.havaJiangmanum = message.havaJiangmanum;
        if (message.haveJianhuashi != null && message.hasOwnProperty("haveJianhuashi"))
            object.haveJianhuashi = message.haveJianhuashi;
        if (message.nPlayerNum != null && message.hasOwnProperty("nPlayerNum"))
            object.nPlayerNum = message.nPlayerNum;
        if (message.sRoomNum != null && message.hasOwnProperty("sRoomNum"))
            object.sRoomNum = options.bytes === String ? $util.base64.encode(message.sRoomNum, 0, message.sRoomNum.length) : options.bytes === Array ? Array.prototype.slice.call(message.sRoomNum) : message.sRoomNum;
        if (message.sPlayTime != null && message.hasOwnProperty("sPlayTime"))
            object.sPlayTime = options.bytes === String ? $util.base64.encode(message.sPlayTime, 0, message.sPlayTime.length) : options.bytes === Array ? Array.prototype.slice.call(message.sPlayTime) : message.sPlayTime;
        if (message.haveAnZhao != null && message.hasOwnProperty("haveAnZhao"))
            object.haveAnZhao = message.haveAnZhao;
        return object;
    };

    /**
     * Converts this ProPKGameRuleConfig to JSON.
     * @function toJSON
     * @memberof ProPKGameRuleConfig
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameRuleConfig.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameRuleConfig.MSGID
     * @enum {string}
     * @property {number} ID=2227 ID value
     */
    ProPKGameRuleConfig.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2227] = "ID"] = 2227;
        return values;
    })();

    return ProPKGameRuleConfig;
})();

$root.ProPKGameBrokenStatus = (function() {

    /**
     * Properties of a ProPKGameBrokenStatus.
     * @exports IProPKGameBrokenStatus
     * @interface IProPKGameBrokenStatus
     * @property {number|null} [brokenSeat] ProPKGameBrokenStatus brokenSeat
     * @property {Array.<boolean>|null} [brokenStatus] ProPKGameBrokenStatus brokenStatus
     * @property {number|null} [leftTime] ProPKGameBrokenStatus leftTime
     */

    /**
     * Constructs a new ProPKGameBrokenStatus.
     * @exports ProPKGameBrokenStatus
     * @classdesc Represents a ProPKGameBrokenStatus.
     * @implements IProPKGameBrokenStatus
     * @constructor
     * @param {IProPKGameBrokenStatus=} [properties] Properties to set
     */
    function ProPKGameBrokenStatus(properties) {
        this.brokenStatus = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameBrokenStatus brokenSeat.
     * @member {number} brokenSeat
     * @memberof ProPKGameBrokenStatus
     * @instance
     */
    ProPKGameBrokenStatus.prototype.brokenSeat = 0;

    /**
     * ProPKGameBrokenStatus brokenStatus.
     * @member {Array.<boolean>} brokenStatus
     * @memberof ProPKGameBrokenStatus
     * @instance
     */
    ProPKGameBrokenStatus.prototype.brokenStatus = $util.emptyArray;

    /**
     * ProPKGameBrokenStatus leftTime.
     * @member {number} leftTime
     * @memberof ProPKGameBrokenStatus
     * @instance
     */
    ProPKGameBrokenStatus.prototype.leftTime = 0;

    /**
     * Creates a new ProPKGameBrokenStatus instance using the specified properties.
     * @function create
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {IProPKGameBrokenStatus=} [properties] Properties to set
     * @returns {ProPKGameBrokenStatus} ProPKGameBrokenStatus instance
     */
    ProPKGameBrokenStatus.create = function create(properties) {
        return new ProPKGameBrokenStatus(properties);
    };

    /**
     * Encodes the specified ProPKGameBrokenStatus message. Does not implicitly {@link ProPKGameBrokenStatus.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {IProPKGameBrokenStatus} message ProPKGameBrokenStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenStatus.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.brokenSeat);
        if (message.brokenStatus != null && message.brokenStatus.length)
            for (var i = 0; i < message.brokenStatus.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.brokenStatus[i]);
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.leftTime);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameBrokenStatus message, length delimited. Does not implicitly {@link ProPKGameBrokenStatus.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {IProPKGameBrokenStatus} message ProPKGameBrokenStatus message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameBrokenStatus.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameBrokenStatus message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameBrokenStatus} ProPKGameBrokenStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenStatus.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameBrokenStatus();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.brokenSeat = reader.int32();
                break;
            case 2:
                if (!(message.brokenStatus && message.brokenStatus.length))
                    message.brokenStatus = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.brokenStatus.push(reader.bool());
                } else
                    message.brokenStatus.push(reader.bool());
                break;
            case 3:
                message.leftTime = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameBrokenStatus message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameBrokenStatus} ProPKGameBrokenStatus
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameBrokenStatus.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameBrokenStatus message.
     * @function verify
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameBrokenStatus.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            if (!$util.isInteger(message.brokenSeat))
                return "brokenSeat: integer expected";
        if (message.brokenStatus != null && message.hasOwnProperty("brokenStatus")) {
            if (!Array.isArray(message.brokenStatus))
                return "brokenStatus: array expected";
            for (var i = 0; i < message.brokenStatus.length; ++i)
                if (typeof message.brokenStatus[i] !== "boolean")
                    return "brokenStatus: boolean[] expected";
        }
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            if (!$util.isInteger(message.leftTime))
                return "leftTime: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameBrokenStatus message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameBrokenStatus} ProPKGameBrokenStatus
     */
    ProPKGameBrokenStatus.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameBrokenStatus)
            return object;
        var message = new $root.ProPKGameBrokenStatus();
        if (object.brokenSeat != null)
            message.brokenSeat = object.brokenSeat | 0;
        if (object.brokenStatus) {
            if (!Array.isArray(object.brokenStatus))
                throw TypeError(".ProPKGameBrokenStatus.brokenStatus: array expected");
            message.brokenStatus = [];
            for (var i = 0; i < object.brokenStatus.length; ++i)
                message.brokenStatus[i] = Boolean(object.brokenStatus[i]);
        }
        if (object.leftTime != null)
            message.leftTime = object.leftTime | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameBrokenStatus message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameBrokenStatus
     * @static
     * @param {ProPKGameBrokenStatus} message ProPKGameBrokenStatus
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameBrokenStatus.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.brokenStatus = [];
        if (options.defaults) {
            object.brokenSeat = 0;
            object.leftTime = 0;
        }
        if (message.brokenSeat != null && message.hasOwnProperty("brokenSeat"))
            object.brokenSeat = message.brokenSeat;
        if (message.brokenStatus && message.brokenStatus.length) {
            object.brokenStatus = [];
            for (var j = 0; j < message.brokenStatus.length; ++j)
                object.brokenStatus[j] = message.brokenStatus[j];
        }
        if (message.leftTime != null && message.hasOwnProperty("leftTime"))
            object.leftTime = message.leftTime;
        return object;
    };

    /**
     * Converts this ProPKGameBrokenStatus to JSON.
     * @function toJSON
     * @memberof ProPKGameBrokenStatus
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameBrokenStatus.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameBrokenStatus.MSGID
     * @enum {string}
     * @property {number} ID=2228 ID value
     */
    ProPKGameBrokenStatus.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2228] = "ID"] = 2228;
        return values;
    })();

    return ProPKGameBrokenStatus;
})();

$root.ProPKGameDataResp = (function() {

    /**
     * Properties of a ProPKGameDataResp.
     * @exports IProPKGameDataResp
     * @interface IProPKGameDataResp
     * @property {Array.<number>|null} [totalScore] ProPKGameDataResp totalScore
     * @property {number|null} [type] ProPKGameDataResp type
     */

    /**
     * Constructs a new ProPKGameDataResp.
     * @exports ProPKGameDataResp
     * @classdesc Represents a ProPKGameDataResp.
     * @implements IProPKGameDataResp
     * @constructor
     * @param {IProPKGameDataResp=} [properties] Properties to set
     */
    function ProPKGameDataResp(properties) {
        this.totalScore = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameDataResp totalScore.
     * @member {Array.<number>} totalScore
     * @memberof ProPKGameDataResp
     * @instance
     */
    ProPKGameDataResp.prototype.totalScore = $util.emptyArray;

    /**
     * ProPKGameDataResp type.
     * @member {number} type
     * @memberof ProPKGameDataResp
     * @instance
     */
    ProPKGameDataResp.prototype.type = 0;

    /**
     * Creates a new ProPKGameDataResp instance using the specified properties.
     * @function create
     * @memberof ProPKGameDataResp
     * @static
     * @param {IProPKGameDataResp=} [properties] Properties to set
     * @returns {ProPKGameDataResp} ProPKGameDataResp instance
     */
    ProPKGameDataResp.create = function create(properties) {
        return new ProPKGameDataResp(properties);
    };

    /**
     * Encodes the specified ProPKGameDataResp message. Does not implicitly {@link ProPKGameDataResp.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameDataResp
     * @static
     * @param {IProPKGameDataResp} message ProPKGameDataResp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDataResp.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.totalScore != null && message.totalScore.length)
            for (var i = 0; i < message.totalScore.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.totalScore[i]);
        if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.type);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameDataResp message, length delimited. Does not implicitly {@link ProPKGameDataResp.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameDataResp
     * @static
     * @param {IProPKGameDataResp} message ProPKGameDataResp message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameDataResp.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameDataResp message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameDataResp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameDataResp} ProPKGameDataResp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDataResp.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameDataResp();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.totalScore && message.totalScore.length))
                    message.totalScore = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.totalScore.push(reader.int32());
                } else
                    message.totalScore.push(reader.int32());
                break;
            case 2:
                message.type = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameDataResp message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameDataResp
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameDataResp} ProPKGameDataResp
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameDataResp.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameDataResp message.
     * @function verify
     * @memberof ProPKGameDataResp
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameDataResp.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.totalScore != null && message.hasOwnProperty("totalScore")) {
            if (!Array.isArray(message.totalScore))
                return "totalScore: array expected";
            for (var i = 0; i < message.totalScore.length; ++i)
                if (!$util.isInteger(message.totalScore[i]))
                    return "totalScore: integer[] expected";
        }
        if (message.type != null && message.hasOwnProperty("type"))
            if (!$util.isInteger(message.type))
                return "type: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameDataResp message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameDataResp
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameDataResp} ProPKGameDataResp
     */
    ProPKGameDataResp.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameDataResp)
            return object;
        var message = new $root.ProPKGameDataResp();
        if (object.totalScore) {
            if (!Array.isArray(object.totalScore))
                throw TypeError(".ProPKGameDataResp.totalScore: array expected");
            message.totalScore = [];
            for (var i = 0; i < object.totalScore.length; ++i)
                message.totalScore[i] = object.totalScore[i] | 0;
        }
        if (object.type != null)
            message.type = object.type | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameDataResp message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameDataResp
     * @static
     * @param {ProPKGameDataResp} message ProPKGameDataResp
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameDataResp.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.totalScore = [];
        if (options.defaults)
            object.type = 0;
        if (message.totalScore && message.totalScore.length) {
            object.totalScore = [];
            for (var j = 0; j < message.totalScore.length; ++j)
                object.totalScore[j] = message.totalScore[j];
        }
        if (message.type != null && message.hasOwnProperty("type"))
            object.type = message.type;
        return object;
    };

    /**
     * Converts this ProPKGameDataResp to JSON.
     * @function toJSON
     * @memberof ProPKGameDataResp
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameDataResp.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameDataResp.MSGID
     * @enum {string}
     * @property {number} ID=2229 ID value
     */
    ProPKGameDataResp.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2229] = "ID"] = 2229;
        return values;
    })();

    return ProPKGameDataResp;
})();

$root.ProPKGameRecordRequest = (function() {

    /**
     * Properties of a ProPKGameRecordRequest.
     * @exports IProPKGameRecordRequest
     * @interface IProPKGameRecordRequest
     * @property {number|null} [seatId] ProPKGameRecordRequest seatId
     * @property {Uint8Array|null} [url] ProPKGameRecordRequest url
     */

    /**
     * Constructs a new ProPKGameRecordRequest.
     * @exports ProPKGameRecordRequest
     * @classdesc Represents a ProPKGameRecordRequest.
     * @implements IProPKGameRecordRequest
     * @constructor
     * @param {IProPKGameRecordRequest=} [properties] Properties to set
     */
    function ProPKGameRecordRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameRecordRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameRecordRequest
     * @instance
     */
    ProPKGameRecordRequest.prototype.seatId = 0;

    /**
     * ProPKGameRecordRequest url.
     * @member {Uint8Array} url
     * @memberof ProPKGameRecordRequest
     * @instance
     */
    ProPKGameRecordRequest.prototype.url = $util.newBuffer([]);

    /**
     * Creates a new ProPKGameRecordRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {IProPKGameRecordRequest=} [properties] Properties to set
     * @returns {ProPKGameRecordRequest} ProPKGameRecordRequest instance
     */
    ProPKGameRecordRequest.create = function create(properties) {
        return new ProPKGameRecordRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameRecordRequest message. Does not implicitly {@link ProPKGameRecordRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {IProPKGameRecordRequest} message ProPKGameRecordRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRecordRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.url != null && message.hasOwnProperty("url"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.url);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameRecordRequest message, length delimited. Does not implicitly {@link ProPKGameRecordRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {IProPKGameRecordRequest} message ProPKGameRecordRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRecordRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameRecordRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameRecordRequest} ProPKGameRecordRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRecordRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameRecordRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.url = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameRecordRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameRecordRequest} ProPKGameRecordRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRecordRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameRecordRequest message.
     * @function verify
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameRecordRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.url != null && message.hasOwnProperty("url"))
            if (!(message.url && typeof message.url.length === "number" || $util.isString(message.url)))
                return "url: buffer expected";
        return null;
    };

    /**
     * Creates a ProPKGameRecordRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameRecordRequest} ProPKGameRecordRequest
     */
    ProPKGameRecordRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameRecordRequest)
            return object;
        var message = new $root.ProPKGameRecordRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.url != null)
            if (typeof object.url === "string")
                $util.base64.decode(object.url, message.url = $util.newBuffer($util.base64.length(object.url)), 0);
            else if (object.url.length)
                message.url = object.url;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameRecordRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameRecordRequest
     * @static
     * @param {ProPKGameRecordRequest} message ProPKGameRecordRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameRecordRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.url = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = options.bytes === String ? $util.base64.encode(message.url, 0, message.url.length) : options.bytes === Array ? Array.prototype.slice.call(message.url) : message.url;
        return object;
    };

    /**
     * Converts this ProPKGameRecordRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameRecordRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameRecordRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameRecordRequest.MSGID
     * @enum {string}
     * @property {number} ID=2230 ID value
     */
    ProPKGameRecordRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2230] = "ID"] = 2230;
        return values;
    })();

    return ProPKGameRecordRequest;
})();

$root.ProPKGameRecordResponse = (function() {

    /**
     * Properties of a ProPKGameRecordResponse.
     * @exports IProPKGameRecordResponse
     * @interface IProPKGameRecordResponse
     * @property {number|null} [seatId] ProPKGameRecordResponse seatId
     * @property {Uint8Array|null} [url] ProPKGameRecordResponse url
     */

    /**
     * Constructs a new ProPKGameRecordResponse.
     * @exports ProPKGameRecordResponse
     * @classdesc Represents a ProPKGameRecordResponse.
     * @implements IProPKGameRecordResponse
     * @constructor
     * @param {IProPKGameRecordResponse=} [properties] Properties to set
     */
    function ProPKGameRecordResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameRecordResponse seatId.
     * @member {number} seatId
     * @memberof ProPKGameRecordResponse
     * @instance
     */
    ProPKGameRecordResponse.prototype.seatId = 0;

    /**
     * ProPKGameRecordResponse url.
     * @member {Uint8Array} url
     * @memberof ProPKGameRecordResponse
     * @instance
     */
    ProPKGameRecordResponse.prototype.url = $util.newBuffer([]);

    /**
     * Creates a new ProPKGameRecordResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {IProPKGameRecordResponse=} [properties] Properties to set
     * @returns {ProPKGameRecordResponse} ProPKGameRecordResponse instance
     */
    ProPKGameRecordResponse.create = function create(properties) {
        return new ProPKGameRecordResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameRecordResponse message. Does not implicitly {@link ProPKGameRecordResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {IProPKGameRecordResponse} message ProPKGameRecordResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRecordResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.url != null && message.hasOwnProperty("url"))
            writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.url);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameRecordResponse message, length delimited. Does not implicitly {@link ProPKGameRecordResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {IProPKGameRecordResponse} message ProPKGameRecordResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameRecordResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameRecordResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameRecordResponse} ProPKGameRecordResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRecordResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameRecordResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.url = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameRecordResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameRecordResponse} ProPKGameRecordResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameRecordResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameRecordResponse message.
     * @function verify
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameRecordResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.url != null && message.hasOwnProperty("url"))
            if (!(message.url && typeof message.url.length === "number" || $util.isString(message.url)))
                return "url: buffer expected";
        return null;
    };

    /**
     * Creates a ProPKGameRecordResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameRecordResponse} ProPKGameRecordResponse
     */
    ProPKGameRecordResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameRecordResponse)
            return object;
        var message = new $root.ProPKGameRecordResponse();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.url != null)
            if (typeof object.url === "string")
                $util.base64.decode(object.url, message.url = $util.newBuffer($util.base64.length(object.url)), 0);
            else if (object.url.length)
                message.url = object.url;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameRecordResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameRecordResponse
     * @static
     * @param {ProPKGameRecordResponse} message ProPKGameRecordResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameRecordResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.url = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.url != null && message.hasOwnProperty("url"))
            object.url = options.bytes === String ? $util.base64.encode(message.url, 0, message.url.length) : options.bytes === Array ? Array.prototype.slice.call(message.url) : message.url;
        return object;
    };

    /**
     * Converts this ProPKGameRecordResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameRecordResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameRecordResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameRecordResponse.MSGID
     * @enum {string}
     * @property {number} ID=2231 ID value
     */
    ProPKGameRecordResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2231] = "ID"] = 2231;
        return values;
    })();

    return ProPKGameRecordResponse;
})();

$root.ProPKGameUserLocationRequest = (function() {

    /**
     * Properties of a ProPKGameUserLocationRequest.
     * @exports IProPKGameUserLocationRequest
     * @interface IProPKGameUserLocationRequest
     * @property {number|null} [seatId] ProPKGameUserLocationRequest seatId
     * @property {number|null} [dwlongitude] ProPKGameUserLocationRequest dwlongitude
     * @property {number|null} [dwlatitude] ProPKGameUserLocationRequest dwlatitude
     * @property {Uint8Array|null} [strDistrict] ProPKGameUserLocationRequest strDistrict
     * @property {Uint8Array|null} [strStreetName] ProPKGameUserLocationRequest strStreetName
     */

    /**
     * Constructs a new ProPKGameUserLocationRequest.
     * @exports ProPKGameUserLocationRequest
     * @classdesc Represents a ProPKGameUserLocationRequest.
     * @implements IProPKGameUserLocationRequest
     * @constructor
     * @param {IProPKGameUserLocationRequest=} [properties] Properties to set
     */
    function ProPKGameUserLocationRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserLocationRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameUserLocationRequest
     * @instance
     */
    ProPKGameUserLocationRequest.prototype.seatId = 0;

    /**
     * ProPKGameUserLocationRequest dwlongitude.
     * @member {number} dwlongitude
     * @memberof ProPKGameUserLocationRequest
     * @instance
     */
    ProPKGameUserLocationRequest.prototype.dwlongitude = 0;

    /**
     * ProPKGameUserLocationRequest dwlatitude.
     * @member {number} dwlatitude
     * @memberof ProPKGameUserLocationRequest
     * @instance
     */
    ProPKGameUserLocationRequest.prototype.dwlatitude = 0;

    /**
     * ProPKGameUserLocationRequest strDistrict.
     * @member {Uint8Array} strDistrict
     * @memberof ProPKGameUserLocationRequest
     * @instance
     */
    ProPKGameUserLocationRequest.prototype.strDistrict = $util.newBuffer([]);

    /**
     * ProPKGameUserLocationRequest strStreetName.
     * @member {Uint8Array} strStreetName
     * @memberof ProPKGameUserLocationRequest
     * @instance
     */
    ProPKGameUserLocationRequest.prototype.strStreetName = $util.newBuffer([]);

    /**
     * Creates a new ProPKGameUserLocationRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {IProPKGameUserLocationRequest=} [properties] Properties to set
     * @returns {ProPKGameUserLocationRequest} ProPKGameUserLocationRequest instance
     */
    ProPKGameUserLocationRequest.create = function create(properties) {
        return new ProPKGameUserLocationRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserLocationRequest message. Does not implicitly {@link ProPKGameUserLocationRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {IProPKGameUserLocationRequest} message ProPKGameUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserLocationRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            writer.uint32(/* id 2, wireType 1 =*/17).double(message.dwlongitude);
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            writer.uint32(/* id 3, wireType 1 =*/25).double(message.dwlatitude);
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.strDistrict);
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            writer.uint32(/* id 5, wireType 2 =*/42).bytes(message.strStreetName);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserLocationRequest message, length delimited. Does not implicitly {@link ProPKGameUserLocationRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {IProPKGameUserLocationRequest} message ProPKGameUserLocationRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserLocationRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserLocationRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserLocationRequest} ProPKGameUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserLocationRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserLocationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.dwlongitude = reader.double();
                break;
            case 3:
                message.dwlatitude = reader.double();
                break;
            case 4:
                message.strDistrict = reader.bytes();
                break;
            case 5:
                message.strStreetName = reader.bytes();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserLocationRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserLocationRequest} ProPKGameUserLocationRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserLocationRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserLocationRequest message.
     * @function verify
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserLocationRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            if (typeof message.dwlongitude !== "number")
                return "dwlongitude: number expected";
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            if (typeof message.dwlatitude !== "number")
                return "dwlatitude: number expected";
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            if (!(message.strDistrict && typeof message.strDistrict.length === "number" || $util.isString(message.strDistrict)))
                return "strDistrict: buffer expected";
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            if (!(message.strStreetName && typeof message.strStreetName.length === "number" || $util.isString(message.strStreetName)))
                return "strStreetName: buffer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserLocationRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserLocationRequest} ProPKGameUserLocationRequest
     */
    ProPKGameUserLocationRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserLocationRequest)
            return object;
        var message = new $root.ProPKGameUserLocationRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.dwlongitude != null)
            message.dwlongitude = Number(object.dwlongitude);
        if (object.dwlatitude != null)
            message.dwlatitude = Number(object.dwlatitude);
        if (object.strDistrict != null)
            if (typeof object.strDistrict === "string")
                $util.base64.decode(object.strDistrict, message.strDistrict = $util.newBuffer($util.base64.length(object.strDistrict)), 0);
            else if (object.strDistrict.length)
                message.strDistrict = object.strDistrict;
        if (object.strStreetName != null)
            if (typeof object.strStreetName === "string")
                $util.base64.decode(object.strStreetName, message.strStreetName = $util.newBuffer($util.base64.length(object.strStreetName)), 0);
            else if (object.strStreetName.length)
                message.strStreetName = object.strStreetName;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserLocationRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserLocationRequest
     * @static
     * @param {ProPKGameUserLocationRequest} message ProPKGameUserLocationRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserLocationRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.dwlongitude = 0;
            object.dwlatitude = 0;
            object.strDistrict = options.bytes === String ? "" : [];
            object.strStreetName = options.bytes === String ? "" : [];
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.dwlongitude != null && message.hasOwnProperty("dwlongitude"))
            object.dwlongitude = options.json && !isFinite(message.dwlongitude) ? String(message.dwlongitude) : message.dwlongitude;
        if (message.dwlatitude != null && message.hasOwnProperty("dwlatitude"))
            object.dwlatitude = options.json && !isFinite(message.dwlatitude) ? String(message.dwlatitude) : message.dwlatitude;
        if (message.strDistrict != null && message.hasOwnProperty("strDistrict"))
            object.strDistrict = options.bytes === String ? $util.base64.encode(message.strDistrict, 0, message.strDistrict.length) : options.bytes === Array ? Array.prototype.slice.call(message.strDistrict) : message.strDistrict;
        if (message.strStreetName != null && message.hasOwnProperty("strStreetName"))
            object.strStreetName = options.bytes === String ? $util.base64.encode(message.strStreetName, 0, message.strStreetName.length) : options.bytes === Array ? Array.prototype.slice.call(message.strStreetName) : message.strStreetName;
        return object;
    };

    /**
     * Converts this ProPKGameUserLocationRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserLocationRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserLocationRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserLocationRequest.MSGID
     * @enum {string}
     * @property {number} ID=2232 ID value
     */
    ProPKGameUserLocationRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2232] = "ID"] = 2232;
        return values;
    })();

    return ProPKGameUserLocationRequest;
})();

$root.ProPKGameSyncCardResponse = (function() {

    /**
     * Properties of a ProPKGameSyncCardResponse.
     * @exports IProPKGameSyncCardResponse
     * @interface IProPKGameSyncCardResponse
     * @property {number|null} [seat] ProPKGameSyncCardResponse seat
     * @property {Array.<number>|null} [handmahs] ProPKGameSyncCardResponse handmahs
     */

    /**
     * Constructs a new ProPKGameSyncCardResponse.
     * @exports ProPKGameSyncCardResponse
     * @classdesc Represents a ProPKGameSyncCardResponse.
     * @implements IProPKGameSyncCardResponse
     * @constructor
     * @param {IProPKGameSyncCardResponse=} [properties] Properties to set
     */
    function ProPKGameSyncCardResponse(properties) {
        this.handmahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameSyncCardResponse seat.
     * @member {number} seat
     * @memberof ProPKGameSyncCardResponse
     * @instance
     */
    ProPKGameSyncCardResponse.prototype.seat = 0;

    /**
     * ProPKGameSyncCardResponse handmahs.
     * @member {Array.<number>} handmahs
     * @memberof ProPKGameSyncCardResponse
     * @instance
     */
    ProPKGameSyncCardResponse.prototype.handmahs = $util.emptyArray;

    /**
     * Creates a new ProPKGameSyncCardResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {IProPKGameSyncCardResponse=} [properties] Properties to set
     * @returns {ProPKGameSyncCardResponse} ProPKGameSyncCardResponse instance
     */
    ProPKGameSyncCardResponse.create = function create(properties) {
        return new ProPKGameSyncCardResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameSyncCardResponse message. Does not implicitly {@link ProPKGameSyncCardResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {IProPKGameSyncCardResponse} message ProPKGameSyncCardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSyncCardResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.seat);
        if (message.handmahs != null && message.handmahs.length)
            for (var i = 0; i < message.handmahs.length; ++i)
                writer.uint32(/* id 3, wireType 0 =*/24).int32(message.handmahs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameSyncCardResponse message, length delimited. Does not implicitly {@link ProPKGameSyncCardResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {IProPKGameSyncCardResponse} message ProPKGameSyncCardResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameSyncCardResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameSyncCardResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameSyncCardResponse} ProPKGameSyncCardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSyncCardResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameSyncCardResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 2:
                message.seat = reader.int32();
                break;
            case 3:
                if (!(message.handmahs && message.handmahs.length))
                    message.handmahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.handmahs.push(reader.int32());
                } else
                    message.handmahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameSyncCardResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameSyncCardResponse} ProPKGameSyncCardResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameSyncCardResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameSyncCardResponse message.
     * @function verify
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameSyncCardResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.handmahs != null && message.hasOwnProperty("handmahs")) {
            if (!Array.isArray(message.handmahs))
                return "handmahs: array expected";
            for (var i = 0; i < message.handmahs.length; ++i)
                if (!$util.isInteger(message.handmahs[i]))
                    return "handmahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProPKGameSyncCardResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameSyncCardResponse} ProPKGameSyncCardResponse
     */
    ProPKGameSyncCardResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameSyncCardResponse)
            return object;
        var message = new $root.ProPKGameSyncCardResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.handmahs) {
            if (!Array.isArray(object.handmahs))
                throw TypeError(".ProPKGameSyncCardResponse.handmahs: array expected");
            message.handmahs = [];
            for (var i = 0; i < object.handmahs.length; ++i)
                message.handmahs[i] = object.handmahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameSyncCardResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameSyncCardResponse
     * @static
     * @param {ProPKGameSyncCardResponse} message ProPKGameSyncCardResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameSyncCardResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.handmahs = [];
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.handmahs && message.handmahs.length) {
            object.handmahs = [];
            for (var j = 0; j < message.handmahs.length; ++j)
                object.handmahs[j] = message.handmahs[j];
        }
        return object;
    };

    /**
     * Converts this ProPKGameSyncCardResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameSyncCardResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameSyncCardResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameSyncCardResponse.MSGID
     * @enum {string}
     * @property {number} ID=2233 ID value
     */
    ProPKGameSyncCardResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2233] = "ID"] = 2233;
        return values;
    })();

    return ProPKGameSyncCardResponse;
})();

$root.ProPKGameUserPhoneStatusRequest = (function() {

    /**
     * Properties of a ProPKGameUserPhoneStatusRequest.
     * @exports IProPKGameUserPhoneStatusRequest
     * @interface IProPKGameUserPhoneStatusRequest
     * @property {number|null} [seatId] ProPKGameUserPhoneStatusRequest seatId
     * @property {number|null} [userstatus] ProPKGameUserPhoneStatusRequest userstatus
     */

    /**
     * Constructs a new ProPKGameUserPhoneStatusRequest.
     * @exports ProPKGameUserPhoneStatusRequest
     * @classdesc Represents a ProPKGameUserPhoneStatusRequest.
     * @implements IProPKGameUserPhoneStatusRequest
     * @constructor
     * @param {IProPKGameUserPhoneStatusRequest=} [properties] Properties to set
     */
    function ProPKGameUserPhoneStatusRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserPhoneStatusRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameUserPhoneStatusRequest
     * @instance
     */
    ProPKGameUserPhoneStatusRequest.prototype.seatId = 0;

    /**
     * ProPKGameUserPhoneStatusRequest userstatus.
     * @member {number} userstatus
     * @memberof ProPKGameUserPhoneStatusRequest
     * @instance
     */
    ProPKGameUserPhoneStatusRequest.prototype.userstatus = 0;

    /**
     * Creates a new ProPKGameUserPhoneStatusRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {IProPKGameUserPhoneStatusRequest=} [properties] Properties to set
     * @returns {ProPKGameUserPhoneStatusRequest} ProPKGameUserPhoneStatusRequest instance
     */
    ProPKGameUserPhoneStatusRequest.create = function create(properties) {
        return new ProPKGameUserPhoneStatusRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserPhoneStatusRequest message. Does not implicitly {@link ProPKGameUserPhoneStatusRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {IProPKGameUserPhoneStatusRequest} message ProPKGameUserPhoneStatusRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserPhoneStatusRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        if (message.userstatus != null && message.hasOwnProperty("userstatus"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.userstatus);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserPhoneStatusRequest message, length delimited. Does not implicitly {@link ProPKGameUserPhoneStatusRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {IProPKGameUserPhoneStatusRequest} message ProPKGameUserPhoneStatusRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserPhoneStatusRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserPhoneStatusRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserPhoneStatusRequest} ProPKGameUserPhoneStatusRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserPhoneStatusRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserPhoneStatusRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            case 2:
                message.userstatus = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserPhoneStatusRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserPhoneStatusRequest} ProPKGameUserPhoneStatusRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserPhoneStatusRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserPhoneStatusRequest message.
     * @function verify
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserPhoneStatusRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        if (message.userstatus != null && message.hasOwnProperty("userstatus"))
            if (!$util.isInteger(message.userstatus))
                return "userstatus: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserPhoneStatusRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserPhoneStatusRequest} ProPKGameUserPhoneStatusRequest
     */
    ProPKGameUserPhoneStatusRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserPhoneStatusRequest)
            return object;
        var message = new $root.ProPKGameUserPhoneStatusRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        if (object.userstatus != null)
            message.userstatus = object.userstatus | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserPhoneStatusRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserPhoneStatusRequest
     * @static
     * @param {ProPKGameUserPhoneStatusRequest} message ProPKGameUserPhoneStatusRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserPhoneStatusRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seatId = 0;
            object.userstatus = 0;
        }
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        if (message.userstatus != null && message.hasOwnProperty("userstatus"))
            object.userstatus = message.userstatus;
        return object;
    };

    /**
     * Converts this ProPKGameUserPhoneStatusRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserPhoneStatusRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserPhoneStatusRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserPhoneStatusRequest.MSGID
     * @enum {string}
     * @property {number} ID=2234 ID value
     */
    ProPKGameUserPhoneStatusRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2234] = "ID"] = 2234;
        return values;
    })();

    return ProPKGameUserPhoneStatusRequest;
})();

$root.ProPKGameUserGiveUpRequest = (function() {

    /**
     * Properties of a ProPKGameUserGiveUpRequest.
     * @exports IProPKGameUserGiveUpRequest
     * @interface IProPKGameUserGiveUpRequest
     * @property {number|null} [seatId] ProPKGameUserGiveUpRequest seatId
     */

    /**
     * Constructs a new ProPKGameUserGiveUpRequest.
     * @exports ProPKGameUserGiveUpRequest
     * @classdesc Represents a ProPKGameUserGiveUpRequest.
     * @implements IProPKGameUserGiveUpRequest
     * @constructor
     * @param {IProPKGameUserGiveUpRequest=} [properties] Properties to set
     */
    function ProPKGameUserGiveUpRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserGiveUpRequest seatId.
     * @member {number} seatId
     * @memberof ProPKGameUserGiveUpRequest
     * @instance
     */
    ProPKGameUserGiveUpRequest.prototype.seatId = 0;

    /**
     * Creates a new ProPKGameUserGiveUpRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {IProPKGameUserGiveUpRequest=} [properties] Properties to set
     * @returns {ProPKGameUserGiveUpRequest} ProPKGameUserGiveUpRequest instance
     */
    ProPKGameUserGiveUpRequest.create = function create(properties) {
        return new ProPKGameUserGiveUpRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserGiveUpRequest message. Does not implicitly {@link ProPKGameUserGiveUpRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {IProPKGameUserGiveUpRequest} message ProPKGameUserGiveUpRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserGiveUpRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seatId);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserGiveUpRequest message, length delimited. Does not implicitly {@link ProPKGameUserGiveUpRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {IProPKGameUserGiveUpRequest} message ProPKGameUserGiveUpRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserGiveUpRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserGiveUpRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserGiveUpRequest} ProPKGameUserGiveUpRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserGiveUpRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserGiveUpRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seatId = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserGiveUpRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserGiveUpRequest} ProPKGameUserGiveUpRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserGiveUpRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserGiveUpRequest message.
     * @function verify
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserGiveUpRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            if (!$util.isInteger(message.seatId))
                return "seatId: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserGiveUpRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserGiveUpRequest} ProPKGameUserGiveUpRequest
     */
    ProPKGameUserGiveUpRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserGiveUpRequest)
            return object;
        var message = new $root.ProPKGameUserGiveUpRequest();
        if (object.seatId != null)
            message.seatId = object.seatId | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserGiveUpRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserGiveUpRequest
     * @static
     * @param {ProPKGameUserGiveUpRequest} message ProPKGameUserGiveUpRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserGiveUpRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seatId = 0;
        if (message.seatId != null && message.hasOwnProperty("seatId"))
            object.seatId = message.seatId;
        return object;
    };

    /**
     * Converts this ProPKGameUserGiveUpRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserGiveUpRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserGiveUpRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserGiveUpRequest.MSGID
     * @enum {string}
     * @property {number} ID=2235 ID value
     */
    ProPKGameUserGiveUpRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2235] = "ID"] = 2235;
        return values;
    })();

    return ProPKGameUserGiveUpRequest;
})();

$root.ProPKGameUserHintRequest = (function() {

    /**
     * Properties of a ProPKGameUserHintRequest.
     * @exports IProPKGameUserHintRequest
     * @interface IProPKGameUserHintRequest
     */

    /**
     * Constructs a new ProPKGameUserHintRequest.
     * @exports ProPKGameUserHintRequest
     * @classdesc Represents a ProPKGameUserHintRequest.
     * @implements IProPKGameUserHintRequest
     * @constructor
     * @param {IProPKGameUserHintRequest=} [properties] Properties to set
     */
    function ProPKGameUserHintRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * Creates a new ProPKGameUserHintRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {IProPKGameUserHintRequest=} [properties] Properties to set
     * @returns {ProPKGameUserHintRequest} ProPKGameUserHintRequest instance
     */
    ProPKGameUserHintRequest.create = function create(properties) {
        return new ProPKGameUserHintRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserHintRequest message. Does not implicitly {@link ProPKGameUserHintRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {IProPKGameUserHintRequest} message ProPKGameUserHintRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserHintRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserHintRequest message, length delimited. Does not implicitly {@link ProPKGameUserHintRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {IProPKGameUserHintRequest} message ProPKGameUserHintRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserHintRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserHintRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserHintRequest} ProPKGameUserHintRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserHintRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserHintRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserHintRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserHintRequest} ProPKGameUserHintRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserHintRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserHintRequest message.
     * @function verify
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserHintRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserHintRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserHintRequest} ProPKGameUserHintRequest
     */
    ProPKGameUserHintRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserHintRequest)
            return object;
        return new $root.ProPKGameUserHintRequest();
    };

    /**
     * Creates a plain object from a ProPKGameUserHintRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserHintRequest
     * @static
     * @param {ProPKGameUserHintRequest} message ProPKGameUserHintRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserHintRequest.toObject = function toObject() {
        return {};
    };

    /**
     * Converts this ProPKGameUserHintRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserHintRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserHintRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserHintRequest.MSGID
     * @enum {string}
     * @property {number} ID=2236 ID value
     */
    ProPKGameUserHintRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2236] = "ID"] = 2236;
        return values;
    })();

    return ProPKGameUserHintRequest;
})();

$root.ProPKGameUserHintResponse = (function() {

    /**
     * Properties of a ProPKGameUserHintResponse.
     * @exports IProPKGameUserHintResponse
     * @interface IProPKGameUserHintResponse
     * @property {number|null} [lenth] ProPKGameUserHintResponse lenth
     * @property {Array.<number>|null} [outMahs] ProPKGameUserHintResponse outMahs
     */

    /**
     * Constructs a new ProPKGameUserHintResponse.
     * @exports ProPKGameUserHintResponse
     * @classdesc Represents a ProPKGameUserHintResponse.
     * @implements IProPKGameUserHintResponse
     * @constructor
     * @param {IProPKGameUserHintResponse=} [properties] Properties to set
     */
    function ProPKGameUserHintResponse(properties) {
        this.outMahs = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserHintResponse lenth.
     * @member {number} lenth
     * @memberof ProPKGameUserHintResponse
     * @instance
     */
    ProPKGameUserHintResponse.prototype.lenth = 0;

    /**
     * ProPKGameUserHintResponse outMahs.
     * @member {Array.<number>} outMahs
     * @memberof ProPKGameUserHintResponse
     * @instance
     */
    ProPKGameUserHintResponse.prototype.outMahs = $util.emptyArray;

    /**
     * Creates a new ProPKGameUserHintResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {IProPKGameUserHintResponse=} [properties] Properties to set
     * @returns {ProPKGameUserHintResponse} ProPKGameUserHintResponse instance
     */
    ProPKGameUserHintResponse.create = function create(properties) {
        return new ProPKGameUserHintResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameUserHintResponse message. Does not implicitly {@link ProPKGameUserHintResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {IProPKGameUserHintResponse} message ProPKGameUserHintResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserHintResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.lenth != null && message.hasOwnProperty("lenth"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.lenth);
        if (message.outMahs != null && message.outMahs.length)
            for (var i = 0; i < message.outMahs.length; ++i)
                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.outMahs[i]);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserHintResponse message, length delimited. Does not implicitly {@link ProPKGameUserHintResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {IProPKGameUserHintResponse} message ProPKGameUserHintResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserHintResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserHintResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserHintResponse} ProPKGameUserHintResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserHintResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserHintResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.lenth = reader.int32();
                break;
            case 2:
                if (!(message.outMahs && message.outMahs.length))
                    message.outMahs = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.outMahs.push(reader.int32());
                } else
                    message.outMahs.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserHintResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserHintResponse} ProPKGameUserHintResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserHintResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserHintResponse message.
     * @function verify
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserHintResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.lenth != null && message.hasOwnProperty("lenth"))
            if (!$util.isInteger(message.lenth))
                return "lenth: integer expected";
        if (message.outMahs != null && message.hasOwnProperty("outMahs")) {
            if (!Array.isArray(message.outMahs))
                return "outMahs: array expected";
            for (var i = 0; i < message.outMahs.length; ++i)
                if (!$util.isInteger(message.outMahs[i]))
                    return "outMahs: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProPKGameUserHintResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserHintResponse} ProPKGameUserHintResponse
     */
    ProPKGameUserHintResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserHintResponse)
            return object;
        var message = new $root.ProPKGameUserHintResponse();
        if (object.lenth != null)
            message.lenth = object.lenth | 0;
        if (object.outMahs) {
            if (!Array.isArray(object.outMahs))
                throw TypeError(".ProPKGameUserHintResponse.outMahs: array expected");
            message.outMahs = [];
            for (var i = 0; i < object.outMahs.length; ++i)
                message.outMahs[i] = object.outMahs[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserHintResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserHintResponse
     * @static
     * @param {ProPKGameUserHintResponse} message ProPKGameUserHintResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserHintResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.outMahs = [];
        if (options.defaults)
            object.lenth = 0;
        if (message.lenth != null && message.hasOwnProperty("lenth"))
            object.lenth = message.lenth;
        if (message.outMahs && message.outMahs.length) {
            object.outMahs = [];
            for (var j = 0; j < message.outMahs.length; ++j)
                object.outMahs[j] = message.outMahs[j];
        }
        return object;
    };

    /**
     * Converts this ProPKGameUserHintResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameUserHintResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserHintResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserHintResponse.MSGID
     * @enum {string}
     * @property {number} ID=2237 ID value
     */
    ProPKGameUserHintResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2237] = "ID"] = 2237;
        return values;
    })();

    return ProPKGameUserHintResponse;
})();

$root.ProPKGameUserDaTuNotify = (function() {

    /**
     * Properties of a ProPKGameUserDaTuNotify.
     * @exports IProPKGameUserDaTuNotify
     * @interface IProPKGameUserDaTuNotify
     * @property {number|null} [seat] ProPKGameUserDaTuNotify seat
     */

    /**
     * Constructs a new ProPKGameUserDaTuNotify.
     * @exports ProPKGameUserDaTuNotify
     * @classdesc Represents a ProPKGameUserDaTuNotify.
     * @implements IProPKGameUserDaTuNotify
     * @constructor
     * @param {IProPKGameUserDaTuNotify=} [properties] Properties to set
     */
    function ProPKGameUserDaTuNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserDaTuNotify seat.
     * @member {number} seat
     * @memberof ProPKGameUserDaTuNotify
     * @instance
     */
    ProPKGameUserDaTuNotify.prototype.seat = 0;

    /**
     * Creates a new ProPKGameUserDaTuNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {IProPKGameUserDaTuNotify=} [properties] Properties to set
     * @returns {ProPKGameUserDaTuNotify} ProPKGameUserDaTuNotify instance
     */
    ProPKGameUserDaTuNotify.create = function create(properties) {
        return new ProPKGameUserDaTuNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameUserDaTuNotify message. Does not implicitly {@link ProPKGameUserDaTuNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {IProPKGameUserDaTuNotify} message ProPKGameUserDaTuNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserDaTuNotify message, length delimited. Does not implicitly {@link ProPKGameUserDaTuNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {IProPKGameUserDaTuNotify} message ProPKGameUserDaTuNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserDaTuNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserDaTuNotify} ProPKGameUserDaTuNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserDaTuNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserDaTuNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserDaTuNotify} ProPKGameUserDaTuNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserDaTuNotify message.
     * @function verify
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserDaTuNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserDaTuNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserDaTuNotify} ProPKGameUserDaTuNotify
     */
    ProPKGameUserDaTuNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserDaTuNotify)
            return object;
        var message = new $root.ProPKGameUserDaTuNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserDaTuNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserDaTuNotify
     * @static
     * @param {ProPKGameUserDaTuNotify} message ProPKGameUserDaTuNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserDaTuNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProPKGameUserDaTuNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameUserDaTuNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserDaTuNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserDaTuNotify.MSGID
     * @enum {string}
     * @property {number} ID=2238 ID value
     */
    ProPKGameUserDaTuNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2238] = "ID"] = 2238;
        return values;
    })();

    return ProPKGameUserDaTuNotify;
})();

$root.ProPKGameUserTeammateRequest = (function() {

    /**
     * Properties of a ProPKGameUserTeammateRequest.
     * @exports IProPKGameUserTeammateRequest
     * @interface IProPKGameUserTeammateRequest
     * @property {number|null} [mateCard] ProPKGameUserTeammateRequest mateCard
     */

    /**
     * Constructs a new ProPKGameUserTeammateRequest.
     * @exports ProPKGameUserTeammateRequest
     * @classdesc Represents a ProPKGameUserTeammateRequest.
     * @implements IProPKGameUserTeammateRequest
     * @constructor
     * @param {IProPKGameUserTeammateRequest=} [properties] Properties to set
     */
    function ProPKGameUserTeammateRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserTeammateRequest mateCard.
     * @member {number} mateCard
     * @memberof ProPKGameUserTeammateRequest
     * @instance
     */
    ProPKGameUserTeammateRequest.prototype.mateCard = 0;

    /**
     * Creates a new ProPKGameUserTeammateRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {IProPKGameUserTeammateRequest=} [properties] Properties to set
     * @returns {ProPKGameUserTeammateRequest} ProPKGameUserTeammateRequest instance
     */
    ProPKGameUserTeammateRequest.create = function create(properties) {
        return new ProPKGameUserTeammateRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserTeammateRequest message. Does not implicitly {@link ProPKGameUserTeammateRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {IProPKGameUserTeammateRequest} message ProPKGameUserTeammateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mateCard != null && message.hasOwnProperty("mateCard"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mateCard);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserTeammateRequest message, length delimited. Does not implicitly {@link ProPKGameUserTeammateRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {IProPKGameUserTeammateRequest} message ProPKGameUserTeammateRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserTeammateRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserTeammateRequest} ProPKGameUserTeammateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserTeammateRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mateCard = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserTeammateRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserTeammateRequest} ProPKGameUserTeammateRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserTeammateRequest message.
     * @function verify
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserTeammateRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mateCard != null && message.hasOwnProperty("mateCard"))
            if (!$util.isInteger(message.mateCard))
                return "mateCard: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserTeammateRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserTeammateRequest} ProPKGameUserTeammateRequest
     */
    ProPKGameUserTeammateRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserTeammateRequest)
            return object;
        var message = new $root.ProPKGameUserTeammateRequest();
        if (object.mateCard != null)
            message.mateCard = object.mateCard | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserTeammateRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserTeammateRequest
     * @static
     * @param {ProPKGameUserTeammateRequest} message ProPKGameUserTeammateRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserTeammateRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mateCard = 0;
        if (message.mateCard != null && message.hasOwnProperty("mateCard"))
            object.mateCard = message.mateCard;
        return object;
    };

    /**
     * Converts this ProPKGameUserTeammateRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserTeammateRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserTeammateRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserTeammateRequest.MSGID
     * @enum {string}
     * @property {number} ID=2239 ID value
     */
    ProPKGameUserTeammateRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2239] = "ID"] = 2239;
        return values;
    })();

    return ProPKGameUserTeammateRequest;
})();

$root.ProPKGameLightCardsRequest = (function() {

    /**
     * Properties of a ProPKGameLightCardsRequest.
     * @exports IProPKGameLightCardsRequest
     * @interface IProPKGameLightCardsRequest
     * @property {boolean|null} [bIsLightCard] ProPKGameLightCardsRequest bIsLightCard
     * @property {Array.<IPKMahList>|null} [cbHandCardData] ProPKGameLightCardsRequest cbHandCardData
     */

    /**
     * Constructs a new ProPKGameLightCardsRequest.
     * @exports ProPKGameLightCardsRequest
     * @classdesc Represents a ProPKGameLightCardsRequest.
     * @implements IProPKGameLightCardsRequest
     * @constructor
     * @param {IProPKGameLightCardsRequest=} [properties] Properties to set
     */
    function ProPKGameLightCardsRequest(properties) {
        this.cbHandCardData = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameLightCardsRequest bIsLightCard.
     * @member {boolean} bIsLightCard
     * @memberof ProPKGameLightCardsRequest
     * @instance
     */
    ProPKGameLightCardsRequest.prototype.bIsLightCard = false;

    /**
     * ProPKGameLightCardsRequest cbHandCardData.
     * @member {Array.<IPKMahList>} cbHandCardData
     * @memberof ProPKGameLightCardsRequest
     * @instance
     */
    ProPKGameLightCardsRequest.prototype.cbHandCardData = $util.emptyArray;

    /**
     * Creates a new ProPKGameLightCardsRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {IProPKGameLightCardsRequest=} [properties] Properties to set
     * @returns {ProPKGameLightCardsRequest} ProPKGameLightCardsRequest instance
     */
    ProPKGameLightCardsRequest.create = function create(properties) {
        return new ProPKGameLightCardsRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameLightCardsRequest message. Does not implicitly {@link ProPKGameLightCardsRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {IProPKGameLightCardsRequest} message ProPKGameLightCardsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameLightCardsRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.bIsLightCard != null && message.hasOwnProperty("bIsLightCard"))
            writer.uint32(/* id 1, wireType 0 =*/8).bool(message.bIsLightCard);
        if (message.cbHandCardData != null && message.cbHandCardData.length)
            for (var i = 0; i < message.cbHandCardData.length; ++i)
                $root.PKMahList.encode(message.cbHandCardData[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
        return writer;
    };

    /**
     * Encodes the specified ProPKGameLightCardsRequest message, length delimited. Does not implicitly {@link ProPKGameLightCardsRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {IProPKGameLightCardsRequest} message ProPKGameLightCardsRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameLightCardsRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameLightCardsRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameLightCardsRequest} ProPKGameLightCardsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameLightCardsRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameLightCardsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.bIsLightCard = reader.bool();
                break;
            case 2:
                if (!(message.cbHandCardData && message.cbHandCardData.length))
                    message.cbHandCardData = [];
                message.cbHandCardData.push($root.PKMahList.decode(reader, reader.uint32()));
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameLightCardsRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameLightCardsRequest} ProPKGameLightCardsRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameLightCardsRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameLightCardsRequest message.
     * @function verify
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameLightCardsRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.bIsLightCard != null && message.hasOwnProperty("bIsLightCard"))
            if (typeof message.bIsLightCard !== "boolean")
                return "bIsLightCard: boolean expected";
        if (message.cbHandCardData != null && message.hasOwnProperty("cbHandCardData")) {
            if (!Array.isArray(message.cbHandCardData))
                return "cbHandCardData: array expected";
            for (var i = 0; i < message.cbHandCardData.length; ++i) {
                var error = $root.PKMahList.verify(message.cbHandCardData[i]);
                if (error)
                    return "cbHandCardData." + error;
            }
        }
        return null;
    };

    /**
     * Creates a ProPKGameLightCardsRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameLightCardsRequest} ProPKGameLightCardsRequest
     */
    ProPKGameLightCardsRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameLightCardsRequest)
            return object;
        var message = new $root.ProPKGameLightCardsRequest();
        if (object.bIsLightCard != null)
            message.bIsLightCard = Boolean(object.bIsLightCard);
        if (object.cbHandCardData) {
            if (!Array.isArray(object.cbHandCardData))
                throw TypeError(".ProPKGameLightCardsRequest.cbHandCardData: array expected");
            message.cbHandCardData = [];
            for (var i = 0; i < object.cbHandCardData.length; ++i) {
                if (typeof object.cbHandCardData[i] !== "object")
                    throw TypeError(".ProPKGameLightCardsRequest.cbHandCardData: object expected");
                message.cbHandCardData[i] = $root.PKMahList.fromObject(object.cbHandCardData[i]);
            }
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameLightCardsRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameLightCardsRequest
     * @static
     * @param {ProPKGameLightCardsRequest} message ProPKGameLightCardsRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameLightCardsRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.cbHandCardData = [];
        if (options.defaults)
            object.bIsLightCard = false;
        if (message.bIsLightCard != null && message.hasOwnProperty("bIsLightCard"))
            object.bIsLightCard = message.bIsLightCard;
        if (message.cbHandCardData && message.cbHandCardData.length) {
            object.cbHandCardData = [];
            for (var j = 0; j < message.cbHandCardData.length; ++j)
                object.cbHandCardData[j] = $root.PKMahList.toObject(message.cbHandCardData[j], options);
        }
        return object;
    };

    /**
     * Converts this ProPKGameLightCardsRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameLightCardsRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameLightCardsRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameLightCardsRequest.MSGID
     * @enum {string}
     * @property {number} ID=2240 ID value
     */
    ProPKGameLightCardsRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2240] = "ID"] = 2240;
        return values;
    })();

    return ProPKGameLightCardsRequest;
})();

$root.ProPKGameUserDaTuRequest = (function() {

    /**
     * Properties of a ProPKGameUserDaTuRequest.
     * @exports IProPKGameUserDaTuRequest
     * @interface IProPKGameUserDaTuRequest
     * @property {number|null} [seat] ProPKGameUserDaTuRequest seat
     * @property {boolean|null} [bIsDaTu] ProPKGameUserDaTuRequest bIsDaTu
     */

    /**
     * Constructs a new ProPKGameUserDaTuRequest.
     * @exports ProPKGameUserDaTuRequest
     * @classdesc Represents a ProPKGameUserDaTuRequest.
     * @implements IProPKGameUserDaTuRequest
     * @constructor
     * @param {IProPKGameUserDaTuRequest=} [properties] Properties to set
     */
    function ProPKGameUserDaTuRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserDaTuRequest seat.
     * @member {number} seat
     * @memberof ProPKGameUserDaTuRequest
     * @instance
     */
    ProPKGameUserDaTuRequest.prototype.seat = 0;

    /**
     * ProPKGameUserDaTuRequest bIsDaTu.
     * @member {boolean} bIsDaTu
     * @memberof ProPKGameUserDaTuRequest
     * @instance
     */
    ProPKGameUserDaTuRequest.prototype.bIsDaTu = false;

    /**
     * Creates a new ProPKGameUserDaTuRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {IProPKGameUserDaTuRequest=} [properties] Properties to set
     * @returns {ProPKGameUserDaTuRequest} ProPKGameUserDaTuRequest instance
     */
    ProPKGameUserDaTuRequest.create = function create(properties) {
        return new ProPKGameUserDaTuRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameUserDaTuRequest message. Does not implicitly {@link ProPKGameUserDaTuRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {IProPKGameUserDaTuRequest} message ProPKGameUserDaTuRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bIsDaTu);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserDaTuRequest message, length delimited. Does not implicitly {@link ProPKGameUserDaTuRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {IProPKGameUserDaTuRequest} message ProPKGameUserDaTuRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserDaTuRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserDaTuRequest} ProPKGameUserDaTuRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserDaTuRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                message.bIsDaTu = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserDaTuRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserDaTuRequest} ProPKGameUserDaTuRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserDaTuRequest message.
     * @function verify
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserDaTuRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            if (typeof message.bIsDaTu !== "boolean")
                return "bIsDaTu: boolean expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserDaTuRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserDaTuRequest} ProPKGameUserDaTuRequest
     */
    ProPKGameUserDaTuRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserDaTuRequest)
            return object;
        var message = new $root.ProPKGameUserDaTuRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.bIsDaTu != null)
            message.bIsDaTu = Boolean(object.bIsDaTu);
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserDaTuRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserDaTuRequest
     * @static
     * @param {ProPKGameUserDaTuRequest} message ProPKGameUserDaTuRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserDaTuRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.bIsDaTu = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            object.bIsDaTu = message.bIsDaTu;
        return object;
    };

    /**
     * Converts this ProPKGameUserDaTuRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameUserDaTuRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserDaTuRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserDaTuRequest.MSGID
     * @enum {string}
     * @property {number} ID=2241 ID value
     */
    ProPKGameUserDaTuRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2241] = "ID"] = 2241;
        return values;
    })();

    return ProPKGameUserDaTuRequest;
})();

$root.ProPKGameUserDaTuResponse = (function() {

    /**
     * Properties of a ProPKGameUserDaTuResponse.
     * @exports IProPKGameUserDaTuResponse
     * @interface IProPKGameUserDaTuResponse
     * @property {number|null} [seat] ProPKGameUserDaTuResponse seat
     * @property {boolean|null} [bIsDaTu] ProPKGameUserDaTuResponse bIsDaTu
     * @property {number|null} [nextSeat] ProPKGameUserDaTuResponse nextSeat
     */

    /**
     * Constructs a new ProPKGameUserDaTuResponse.
     * @exports ProPKGameUserDaTuResponse
     * @classdesc Represents a ProPKGameUserDaTuResponse.
     * @implements IProPKGameUserDaTuResponse
     * @constructor
     * @param {IProPKGameUserDaTuResponse=} [properties] Properties to set
     */
    function ProPKGameUserDaTuResponse(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserDaTuResponse seat.
     * @member {number} seat
     * @memberof ProPKGameUserDaTuResponse
     * @instance
     */
    ProPKGameUserDaTuResponse.prototype.seat = 0;

    /**
     * ProPKGameUserDaTuResponse bIsDaTu.
     * @member {boolean} bIsDaTu
     * @memberof ProPKGameUserDaTuResponse
     * @instance
     */
    ProPKGameUserDaTuResponse.prototype.bIsDaTu = false;

    /**
     * ProPKGameUserDaTuResponse nextSeat.
     * @member {number} nextSeat
     * @memberof ProPKGameUserDaTuResponse
     * @instance
     */
    ProPKGameUserDaTuResponse.prototype.nextSeat = 0;

    /**
     * Creates a new ProPKGameUserDaTuResponse instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {IProPKGameUserDaTuResponse=} [properties] Properties to set
     * @returns {ProPKGameUserDaTuResponse} ProPKGameUserDaTuResponse instance
     */
    ProPKGameUserDaTuResponse.create = function create(properties) {
        return new ProPKGameUserDaTuResponse(properties);
    };

    /**
     * Encodes the specified ProPKGameUserDaTuResponse message. Does not implicitly {@link ProPKGameUserDaTuResponse.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {IProPKGameUserDaTuResponse} message ProPKGameUserDaTuResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuResponse.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bIsDaTu);
        if (message.nextSeat != null && message.hasOwnProperty("nextSeat"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.nextSeat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserDaTuResponse message, length delimited. Does not implicitly {@link ProPKGameUserDaTuResponse.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {IProPKGameUserDaTuResponse} message ProPKGameUserDaTuResponse message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuResponse.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserDaTuResponse message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserDaTuResponse} ProPKGameUserDaTuResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuResponse.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserDaTuResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                message.bIsDaTu = reader.bool();
                break;
            case 3:
                message.nextSeat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserDaTuResponse message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserDaTuResponse} ProPKGameUserDaTuResponse
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuResponse.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserDaTuResponse message.
     * @function verify
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserDaTuResponse.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            if (typeof message.bIsDaTu !== "boolean")
                return "bIsDaTu: boolean expected";
        if (message.nextSeat != null && message.hasOwnProperty("nextSeat"))
            if (!$util.isInteger(message.nextSeat))
                return "nextSeat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserDaTuResponse message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserDaTuResponse} ProPKGameUserDaTuResponse
     */
    ProPKGameUserDaTuResponse.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserDaTuResponse)
            return object;
        var message = new $root.ProPKGameUserDaTuResponse();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.bIsDaTu != null)
            message.bIsDaTu = Boolean(object.bIsDaTu);
        if (object.nextSeat != null)
            message.nextSeat = object.nextSeat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserDaTuResponse message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserDaTuResponse
     * @static
     * @param {ProPKGameUserDaTuResponse} message ProPKGameUserDaTuResponse
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserDaTuResponse.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.bIsDaTu = false;
            object.nextSeat = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            object.bIsDaTu = message.bIsDaTu;
        if (message.nextSeat != null && message.hasOwnProperty("nextSeat"))
            object.nextSeat = message.nextSeat;
        return object;
    };

    /**
     * Converts this ProPKGameUserDaTuResponse to JSON.
     * @function toJSON
     * @memberof ProPKGameUserDaTuResponse
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserDaTuResponse.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserDaTuResponse.MSGID
     * @enum {string}
     * @property {number} ID=2242 ID value
     */
    ProPKGameUserDaTuResponse.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2242] = "ID"] = 2242;
        return values;
    })();

    return ProPKGameUserDaTuResponse;
})();

$root.ProPKGameUserDaTuResult = (function() {

    /**
     * Properties of a ProPKGameUserDaTuResult.
     * @exports IProPKGameUserDaTuResult
     * @interface IProPKGameUserDaTuResult
     * @property {number|null} [seat] ProPKGameUserDaTuResult seat
     * @property {boolean|null} [bIsDaTu] ProPKGameUserDaTuResult bIsDaTu
     */

    /**
     * Constructs a new ProPKGameUserDaTuResult.
     * @exports ProPKGameUserDaTuResult
     * @classdesc Represents a ProPKGameUserDaTuResult.
     * @implements IProPKGameUserDaTuResult
     * @constructor
     * @param {IProPKGameUserDaTuResult=} [properties] Properties to set
     */
    function ProPKGameUserDaTuResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserDaTuResult seat.
     * @member {number} seat
     * @memberof ProPKGameUserDaTuResult
     * @instance
     */
    ProPKGameUserDaTuResult.prototype.seat = 0;

    /**
     * ProPKGameUserDaTuResult bIsDaTu.
     * @member {boolean} bIsDaTu
     * @memberof ProPKGameUserDaTuResult
     * @instance
     */
    ProPKGameUserDaTuResult.prototype.bIsDaTu = false;

    /**
     * Creates a new ProPKGameUserDaTuResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {IProPKGameUserDaTuResult=} [properties] Properties to set
     * @returns {ProPKGameUserDaTuResult} ProPKGameUserDaTuResult instance
     */
    ProPKGameUserDaTuResult.create = function create(properties) {
        return new ProPKGameUserDaTuResult(properties);
    };

    /**
     * Encodes the specified ProPKGameUserDaTuResult message. Does not implicitly {@link ProPKGameUserDaTuResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {IProPKGameUserDaTuResult} message ProPKGameUserDaTuResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.bIsDaTu);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserDaTuResult message, length delimited. Does not implicitly {@link ProPKGameUserDaTuResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {IProPKGameUserDaTuResult} message ProPKGameUserDaTuResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserDaTuResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserDaTuResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserDaTuResult} ProPKGameUserDaTuResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserDaTuResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                message.bIsDaTu = reader.bool();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserDaTuResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserDaTuResult} ProPKGameUserDaTuResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserDaTuResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserDaTuResult message.
     * @function verify
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserDaTuResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            if (typeof message.bIsDaTu !== "boolean")
                return "bIsDaTu: boolean expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserDaTuResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserDaTuResult} ProPKGameUserDaTuResult
     */
    ProPKGameUserDaTuResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserDaTuResult)
            return object;
        var message = new $root.ProPKGameUserDaTuResult();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.bIsDaTu != null)
            message.bIsDaTu = Boolean(object.bIsDaTu);
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserDaTuResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserDaTuResult
     * @static
     * @param {ProPKGameUserDaTuResult} message ProPKGameUserDaTuResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserDaTuResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.bIsDaTu = false;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.bIsDaTu != null && message.hasOwnProperty("bIsDaTu"))
            object.bIsDaTu = message.bIsDaTu;
        return object;
    };

    /**
     * Converts this ProPKGameUserDaTuResult to JSON.
     * @function toJSON
     * @memberof ProPKGameUserDaTuResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserDaTuResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserDaTuResult.MSGID
     * @enum {string}
     * @property {number} ID=2243 ID value
     */
    ProPKGameUserDaTuResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2243] = "ID"] = 2243;
        return values;
    })();

    return ProPKGameUserDaTuResult;
})();

$root.ProPKGameUserTeammateNotify = (function() {

    /**
     * Properties of a ProPKGameUserTeammateNotify.
     * @exports IProPKGameUserTeammateNotify
     * @interface IProPKGameUserTeammateNotify
     * @property {number|null} [seat] ProPKGameUserTeammateNotify seat
     */

    /**
     * Constructs a new ProPKGameUserTeammateNotify.
     * @exports ProPKGameUserTeammateNotify
     * @classdesc Represents a ProPKGameUserTeammateNotify.
     * @implements IProPKGameUserTeammateNotify
     * @constructor
     * @param {IProPKGameUserTeammateNotify=} [properties] Properties to set
     */
    function ProPKGameUserTeammateNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserTeammateNotify seat.
     * @member {number} seat
     * @memberof ProPKGameUserTeammateNotify
     * @instance
     */
    ProPKGameUserTeammateNotify.prototype.seat = 0;

    /**
     * Creates a new ProPKGameUserTeammateNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {IProPKGameUserTeammateNotify=} [properties] Properties to set
     * @returns {ProPKGameUserTeammateNotify} ProPKGameUserTeammateNotify instance
     */
    ProPKGameUserTeammateNotify.create = function create(properties) {
        return new ProPKGameUserTeammateNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameUserTeammateNotify message. Does not implicitly {@link ProPKGameUserTeammateNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {IProPKGameUserTeammateNotify} message ProPKGameUserTeammateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserTeammateNotify message, length delimited. Does not implicitly {@link ProPKGameUserTeammateNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {IProPKGameUserTeammateNotify} message ProPKGameUserTeammateNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserTeammateNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserTeammateNotify} ProPKGameUserTeammateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserTeammateNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserTeammateNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserTeammateNotify} ProPKGameUserTeammateNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserTeammateNotify message.
     * @function verify
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserTeammateNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserTeammateNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserTeammateNotify} ProPKGameUserTeammateNotify
     */
    ProPKGameUserTeammateNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserTeammateNotify)
            return object;
        var message = new $root.ProPKGameUserTeammateNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserTeammateNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserTeammateNotify
     * @static
     * @param {ProPKGameUserTeammateNotify} message ProPKGameUserTeammateNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserTeammateNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProPKGameUserTeammateNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameUserTeammateNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserTeammateNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserTeammateNotify.MSGID
     * @enum {string}
     * @property {number} ID=2244 ID value
     */
    ProPKGameUserTeammateNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2244] = "ID"] = 2244;
        return values;
    })();

    return ProPKGameUserTeammateNotify;
})();

$root.ProPKGameAnZhaoNotify = (function() {

    /**
     * Properties of a ProPKGameAnZhaoNotify.
     * @exports IProPKGameAnZhaoNotify
     * @interface IProPKGameAnZhaoNotify
     * @property {number|null} [seat] ProPKGameAnZhaoNotify seat
     * @property {number|null} [time] ProPKGameAnZhaoNotify time
     * @property {number|null} [dicecount] ProPKGameAnZhaoNotify dicecount
     */

    /**
     * Constructs a new ProPKGameAnZhaoNotify.
     * @exports ProPKGameAnZhaoNotify
     * @classdesc Represents a ProPKGameAnZhaoNotify.
     * @implements IProPKGameAnZhaoNotify
     * @constructor
     * @param {IProPKGameAnZhaoNotify=} [properties] Properties to set
     */
    function ProPKGameAnZhaoNotify(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameAnZhaoNotify seat.
     * @member {number} seat
     * @memberof ProPKGameAnZhaoNotify
     * @instance
     */
    ProPKGameAnZhaoNotify.prototype.seat = 0;

    /**
     * ProPKGameAnZhaoNotify time.
     * @member {number} time
     * @memberof ProPKGameAnZhaoNotify
     * @instance
     */
    ProPKGameAnZhaoNotify.prototype.time = 0;

    /**
     * ProPKGameAnZhaoNotify dicecount.
     * @member {number} dicecount
     * @memberof ProPKGameAnZhaoNotify
     * @instance
     */
    ProPKGameAnZhaoNotify.prototype.dicecount = 0;

    /**
     * Creates a new ProPKGameAnZhaoNotify instance using the specified properties.
     * @function create
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {IProPKGameAnZhaoNotify=} [properties] Properties to set
     * @returns {ProPKGameAnZhaoNotify} ProPKGameAnZhaoNotify instance
     */
    ProPKGameAnZhaoNotify.create = function create(properties) {
        return new ProPKGameAnZhaoNotify(properties);
    };

    /**
     * Encodes the specified ProPKGameAnZhaoNotify message. Does not implicitly {@link ProPKGameAnZhaoNotify.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {IProPKGameAnZhaoNotify} message ProPKGameAnZhaoNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoNotify.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        if (message.time != null && message.hasOwnProperty("time"))
            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.time);
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.dicecount);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameAnZhaoNotify message, length delimited. Does not implicitly {@link ProPKGameAnZhaoNotify.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {IProPKGameAnZhaoNotify} message ProPKGameAnZhaoNotify message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoNotify.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameAnZhaoNotify message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameAnZhaoNotify} ProPKGameAnZhaoNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoNotify.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameAnZhaoNotify();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            case 2:
                message.time = reader.int32();
                break;
            case 3:
                message.dicecount = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameAnZhaoNotify message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameAnZhaoNotify} ProPKGameAnZhaoNotify
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoNotify.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameAnZhaoNotify message.
     * @function verify
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameAnZhaoNotify.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        if (message.time != null && message.hasOwnProperty("time"))
            if (!$util.isInteger(message.time))
                return "time: integer expected";
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            if (!$util.isInteger(message.dicecount))
                return "dicecount: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameAnZhaoNotify message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameAnZhaoNotify} ProPKGameAnZhaoNotify
     */
    ProPKGameAnZhaoNotify.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameAnZhaoNotify)
            return object;
        var message = new $root.ProPKGameAnZhaoNotify();
        if (object.seat != null)
            message.seat = object.seat | 0;
        if (object.time != null)
            message.time = object.time | 0;
        if (object.dicecount != null)
            message.dicecount = object.dicecount | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameAnZhaoNotify message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameAnZhaoNotify
     * @static
     * @param {ProPKGameAnZhaoNotify} message ProPKGameAnZhaoNotify
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameAnZhaoNotify.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults) {
            object.seat = 0;
            object.time = 0;
            object.dicecount = 0;
        }
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        if (message.time != null && message.hasOwnProperty("time"))
            object.time = message.time;
        if (message.dicecount != null && message.hasOwnProperty("dicecount"))
            object.dicecount = message.dicecount;
        return object;
    };

    /**
     * Converts this ProPKGameAnZhaoNotify to JSON.
     * @function toJSON
     * @memberof ProPKGameAnZhaoNotify
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameAnZhaoNotify.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameAnZhaoNotify.MSGID
     * @enum {string}
     * @property {number} ID=2245 ID value
     */
    ProPKGameAnZhaoNotify.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2245] = "ID"] = 2245;
        return values;
    })();

    return ProPKGameAnZhaoNotify;
})();

$root.ProPKGameAnZhaoRequest = (function() {

    /**
     * Properties of a ProPKGameAnZhaoRequest.
     * @exports IProPKGameAnZhaoRequest
     * @interface IProPKGameAnZhaoRequest
     * @property {number|null} [seat] ProPKGameAnZhaoRequest seat
     */

    /**
     * Constructs a new ProPKGameAnZhaoRequest.
     * @exports ProPKGameAnZhaoRequest
     * @classdesc Represents a ProPKGameAnZhaoRequest.
     * @implements IProPKGameAnZhaoRequest
     * @constructor
     * @param {IProPKGameAnZhaoRequest=} [properties] Properties to set
     */
    function ProPKGameAnZhaoRequest(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameAnZhaoRequest seat.
     * @member {number} seat
     * @memberof ProPKGameAnZhaoRequest
     * @instance
     */
    ProPKGameAnZhaoRequest.prototype.seat = 0;

    /**
     * Creates a new ProPKGameAnZhaoRequest instance using the specified properties.
     * @function create
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {IProPKGameAnZhaoRequest=} [properties] Properties to set
     * @returns {ProPKGameAnZhaoRequest} ProPKGameAnZhaoRequest instance
     */
    ProPKGameAnZhaoRequest.create = function create(properties) {
        return new ProPKGameAnZhaoRequest(properties);
    };

    /**
     * Encodes the specified ProPKGameAnZhaoRequest message. Does not implicitly {@link ProPKGameAnZhaoRequest.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {IProPKGameAnZhaoRequest} message ProPKGameAnZhaoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoRequest.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.seat != null && message.hasOwnProperty("seat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameAnZhaoRequest message, length delimited. Does not implicitly {@link ProPKGameAnZhaoRequest.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {IProPKGameAnZhaoRequest} message ProPKGameAnZhaoRequest message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoRequest.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameAnZhaoRequest message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameAnZhaoRequest} ProPKGameAnZhaoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoRequest.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameAnZhaoRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.seat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameAnZhaoRequest message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameAnZhaoRequest} ProPKGameAnZhaoRequest
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoRequest.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameAnZhaoRequest message.
     * @function verify
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameAnZhaoRequest.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.seat != null && message.hasOwnProperty("seat"))
            if (!$util.isInteger(message.seat))
                return "seat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameAnZhaoRequest message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameAnZhaoRequest} ProPKGameAnZhaoRequest
     */
    ProPKGameAnZhaoRequest.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameAnZhaoRequest)
            return object;
        var message = new $root.ProPKGameAnZhaoRequest();
        if (object.seat != null)
            message.seat = object.seat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameAnZhaoRequest message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameAnZhaoRequest
     * @static
     * @param {ProPKGameAnZhaoRequest} message ProPKGameAnZhaoRequest
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameAnZhaoRequest.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.seat = 0;
        if (message.seat != null && message.hasOwnProperty("seat"))
            object.seat = message.seat;
        return object;
    };

    /**
     * Converts this ProPKGameAnZhaoRequest to JSON.
     * @function toJSON
     * @memberof ProPKGameAnZhaoRequest
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameAnZhaoRequest.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameAnZhaoRequest.MSGID
     * @enum {string}
     * @property {number} ID=2246 ID value
     */
    ProPKGameAnZhaoRequest.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2246] = "ID"] = 2246;
        return values;
    })();

    return ProPKGameAnZhaoRequest;
})();

$root.ProPKGameAnZhaoResult = (function() {

    /**
     * Properties of a ProPKGameAnZhaoResult.
     * @exports IProPKGameAnZhaoResult
     * @interface IProPKGameAnZhaoResult
     * @property {number|null} [mateSeat] ProPKGameAnZhaoResult mateSeat
     */

    /**
     * Constructs a new ProPKGameAnZhaoResult.
     * @exports ProPKGameAnZhaoResult
     * @classdesc Represents a ProPKGameAnZhaoResult.
     * @implements IProPKGameAnZhaoResult
     * @constructor
     * @param {IProPKGameAnZhaoResult=} [properties] Properties to set
     */
    function ProPKGameAnZhaoResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameAnZhaoResult mateSeat.
     * @member {number} mateSeat
     * @memberof ProPKGameAnZhaoResult
     * @instance
     */
    ProPKGameAnZhaoResult.prototype.mateSeat = 0;

    /**
     * Creates a new ProPKGameAnZhaoResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {IProPKGameAnZhaoResult=} [properties] Properties to set
     * @returns {ProPKGameAnZhaoResult} ProPKGameAnZhaoResult instance
     */
    ProPKGameAnZhaoResult.create = function create(properties) {
        return new ProPKGameAnZhaoResult(properties);
    };

    /**
     * Encodes the specified ProPKGameAnZhaoResult message. Does not implicitly {@link ProPKGameAnZhaoResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {IProPKGameAnZhaoResult} message ProPKGameAnZhaoResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.mateSeat != null && message.hasOwnProperty("mateSeat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.mateSeat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameAnZhaoResult message, length delimited. Does not implicitly {@link ProPKGameAnZhaoResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {IProPKGameAnZhaoResult} message ProPKGameAnZhaoResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameAnZhaoResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameAnZhaoResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameAnZhaoResult} ProPKGameAnZhaoResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameAnZhaoResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.mateSeat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameAnZhaoResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameAnZhaoResult} ProPKGameAnZhaoResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameAnZhaoResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameAnZhaoResult message.
     * @function verify
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameAnZhaoResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.mateSeat != null && message.hasOwnProperty("mateSeat"))
            if (!$util.isInteger(message.mateSeat))
                return "mateSeat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameAnZhaoResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameAnZhaoResult} ProPKGameAnZhaoResult
     */
    ProPKGameAnZhaoResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameAnZhaoResult)
            return object;
        var message = new $root.ProPKGameAnZhaoResult();
        if (object.mateSeat != null)
            message.mateSeat = object.mateSeat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameAnZhaoResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameAnZhaoResult
     * @static
     * @param {ProPKGameAnZhaoResult} message ProPKGameAnZhaoResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameAnZhaoResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.mateSeat = 0;
        if (message.mateSeat != null && message.hasOwnProperty("mateSeat"))
            object.mateSeat = message.mateSeat;
        return object;
    };

    /**
     * Converts this ProPKGameAnZhaoResult to JSON.
     * @function toJSON
     * @memberof ProPKGameAnZhaoResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameAnZhaoResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameAnZhaoResult.MSGID
     * @enum {string}
     * @property {number} ID=2247 ID value
     */
    ProPKGameAnZhaoResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2247] = "ID"] = 2247;
        return values;
    })();

    return ProPKGameAnZhaoResult;
})();

$root.ProPKGameShangYouResult = (function() {

    /**
     * Properties of a ProPKGameShangYouResult.
     * @exports IProPKGameShangYouResult
     * @interface IProPKGameShangYouResult
     * @property {Array.<number>|null} [shangyouSeat] ProPKGameShangYouResult shangyouSeat
     */

    /**
     * Constructs a new ProPKGameShangYouResult.
     * @exports ProPKGameShangYouResult
     * @classdesc Represents a ProPKGameShangYouResult.
     * @implements IProPKGameShangYouResult
     * @constructor
     * @param {IProPKGameShangYouResult=} [properties] Properties to set
     */
    function ProPKGameShangYouResult(properties) {
        this.shangyouSeat = [];
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameShangYouResult shangyouSeat.
     * @member {Array.<number>} shangyouSeat
     * @memberof ProPKGameShangYouResult
     * @instance
     */
    ProPKGameShangYouResult.prototype.shangyouSeat = $util.emptyArray;

    /**
     * Creates a new ProPKGameShangYouResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {IProPKGameShangYouResult=} [properties] Properties to set
     * @returns {ProPKGameShangYouResult} ProPKGameShangYouResult instance
     */
    ProPKGameShangYouResult.create = function create(properties) {
        return new ProPKGameShangYouResult(properties);
    };

    /**
     * Encodes the specified ProPKGameShangYouResult message. Does not implicitly {@link ProPKGameShangYouResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {IProPKGameShangYouResult} message ProPKGameShangYouResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameShangYouResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.shangyouSeat != null && message.shangyouSeat.length)
            for (var i = 0; i < message.shangyouSeat.length; ++i)
                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.shangyouSeat[i]);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameShangYouResult message, length delimited. Does not implicitly {@link ProPKGameShangYouResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {IProPKGameShangYouResult} message ProPKGameShangYouResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameShangYouResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameShangYouResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameShangYouResult} ProPKGameShangYouResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameShangYouResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameShangYouResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                if (!(message.shangyouSeat && message.shangyouSeat.length))
                    message.shangyouSeat = [];
                if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                        message.shangyouSeat.push(reader.int32());
                } else
                    message.shangyouSeat.push(reader.int32());
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameShangYouResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameShangYouResult} ProPKGameShangYouResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameShangYouResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameShangYouResult message.
     * @function verify
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameShangYouResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.shangyouSeat != null && message.hasOwnProperty("shangyouSeat")) {
            if (!Array.isArray(message.shangyouSeat))
                return "shangyouSeat: array expected";
            for (var i = 0; i < message.shangyouSeat.length; ++i)
                if (!$util.isInteger(message.shangyouSeat[i]))
                    return "shangyouSeat: integer[] expected";
        }
        return null;
    };

    /**
     * Creates a ProPKGameShangYouResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameShangYouResult} ProPKGameShangYouResult
     */
    ProPKGameShangYouResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameShangYouResult)
            return object;
        var message = new $root.ProPKGameShangYouResult();
        if (object.shangyouSeat) {
            if (!Array.isArray(object.shangyouSeat))
                throw TypeError(".ProPKGameShangYouResult.shangyouSeat: array expected");
            message.shangyouSeat = [];
            for (var i = 0; i < object.shangyouSeat.length; ++i)
                message.shangyouSeat[i] = object.shangyouSeat[i] | 0;
        }
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameShangYouResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameShangYouResult
     * @static
     * @param {ProPKGameShangYouResult} message ProPKGameShangYouResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameShangYouResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.arrays || options.defaults)
            object.shangyouSeat = [];
        if (message.shangyouSeat && message.shangyouSeat.length) {
            object.shangyouSeat = [];
            for (var j = 0; j < message.shangyouSeat.length; ++j)
                object.shangyouSeat[j] = message.shangyouSeat[j];
        }
        return object;
    };

    /**
     * Converts this ProPKGameShangYouResult to JSON.
     * @function toJSON
     * @memberof ProPKGameShangYouResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameShangYouResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameShangYouResult.MSGID
     * @enum {string}
     * @property {number} ID=2248 ID value
     */
    ProPKGameShangYouResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2248] = "ID"] = 2248;
        return values;
    })();

    return ProPKGameShangYouResult;
})();

$root.ProPKGameUserTeammateResult = (function() {

    /**
     * Properties of a ProPKGameUserTeammateResult.
     * @exports IProPKGameUserTeammateResult
     * @interface IProPKGameUserTeammateResult
     * @property {number|null} [nMateSeat] ProPKGameUserTeammateResult nMateSeat
     */

    /**
     * Constructs a new ProPKGameUserTeammateResult.
     * @exports ProPKGameUserTeammateResult
     * @classdesc Represents a ProPKGameUserTeammateResult.
     * @implements IProPKGameUserTeammateResult
     * @constructor
     * @param {IProPKGameUserTeammateResult=} [properties] Properties to set
     */
    function ProPKGameUserTeammateResult(properties) {
        if (properties)
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                    this[keys[i]] = properties[keys[i]];
    }

    /**
     * ProPKGameUserTeammateResult nMateSeat.
     * @member {number} nMateSeat
     * @memberof ProPKGameUserTeammateResult
     * @instance
     */
    ProPKGameUserTeammateResult.prototype.nMateSeat = 0;

    /**
     * Creates a new ProPKGameUserTeammateResult instance using the specified properties.
     * @function create
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {IProPKGameUserTeammateResult=} [properties] Properties to set
     * @returns {ProPKGameUserTeammateResult} ProPKGameUserTeammateResult instance
     */
    ProPKGameUserTeammateResult.create = function create(properties) {
        return new ProPKGameUserTeammateResult(properties);
    };

    /**
     * Encodes the specified ProPKGameUserTeammateResult message. Does not implicitly {@link ProPKGameUserTeammateResult.verify|verify} messages.
     * @function encode
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {IProPKGameUserTeammateResult} message ProPKGameUserTeammateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateResult.encode = function encode(message, writer) {
        if (!writer)
            writer = $Writer.create();
        if (message.nMateSeat != null && message.hasOwnProperty("nMateSeat"))
            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.nMateSeat);
        return writer;
    };

    /**
     * Encodes the specified ProPKGameUserTeammateResult message, length delimited. Does not implicitly {@link ProPKGameUserTeammateResult.verify|verify} messages.
     * @function encodeDelimited
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {IProPKGameUserTeammateResult} message ProPKGameUserTeammateResult message or plain object to encode
     * @param {$protobuf.Writer} [writer] Writer to encode to
     * @returns {$protobuf.Writer} Writer
     */
    ProPKGameUserTeammateResult.encodeDelimited = function encodeDelimited(message, writer) {
        return this.encode(message, writer).ldelim();
    };

    /**
     * Decodes a ProPKGameUserTeammateResult message from the specified reader or buffer.
     * @function decode
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @param {number} [length] Message length if known beforehand
     * @returns {ProPKGameUserTeammateResult} ProPKGameUserTeammateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateResult.decode = function decode(reader, length) {
        if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ProPKGameUserTeammateResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            case 1:
                message.nMateSeat = reader.int32();
                break;
            default:
                reader.skipType(tag & 7);
                break;
            }
        }
        return message;
    };

    /**
     * Decodes a ProPKGameUserTeammateResult message from the specified reader or buffer, length delimited.
     * @function decodeDelimited
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
     * @returns {ProPKGameUserTeammateResult} ProPKGameUserTeammateResult
     * @throws {Error} If the payload is not a reader or valid buffer
     * @throws {$protobuf.util.ProtocolError} If required fields are missing
     */
    ProPKGameUserTeammateResult.decodeDelimited = function decodeDelimited(reader) {
        if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
        return this.decode(reader, reader.uint32());
    };

    /**
     * Verifies a ProPKGameUserTeammateResult message.
     * @function verify
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {Object.<string,*>} message Plain object to verify
     * @returns {string|null} `null` if valid, otherwise the reason why it is not
     */
    ProPKGameUserTeammateResult.verify = function verify(message) {
        if (typeof message !== "object" || message === null)
            return "object expected";
        if (message.nMateSeat != null && message.hasOwnProperty("nMateSeat"))
            if (!$util.isInteger(message.nMateSeat))
                return "nMateSeat: integer expected";
        return null;
    };

    /**
     * Creates a ProPKGameUserTeammateResult message from a plain object. Also converts values to their respective internal types.
     * @function fromObject
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {Object.<string,*>} object Plain object
     * @returns {ProPKGameUserTeammateResult} ProPKGameUserTeammateResult
     */
    ProPKGameUserTeammateResult.fromObject = function fromObject(object) {
        if (object instanceof $root.ProPKGameUserTeammateResult)
            return object;
        var message = new $root.ProPKGameUserTeammateResult();
        if (object.nMateSeat != null)
            message.nMateSeat = object.nMateSeat | 0;
        return message;
    };

    /**
     * Creates a plain object from a ProPKGameUserTeammateResult message. Also converts values to other types if specified.
     * @function toObject
     * @memberof ProPKGameUserTeammateResult
     * @static
     * @param {ProPKGameUserTeammateResult} message ProPKGameUserTeammateResult
     * @param {$protobuf.IConversionOptions} [options] Conversion options
     * @returns {Object.<string,*>} Plain object
     */
    ProPKGameUserTeammateResult.toObject = function toObject(message, options) {
        if (!options)
            options = {};
        var object = {};
        if (options.defaults)
            object.nMateSeat = 0;
        if (message.nMateSeat != null && message.hasOwnProperty("nMateSeat"))
            object.nMateSeat = message.nMateSeat;
        return object;
    };

    /**
     * Converts this ProPKGameUserTeammateResult to JSON.
     * @function toJSON
     * @memberof ProPKGameUserTeammateResult
     * @instance
     * @returns {Object.<string,*>} JSON object
     */
    ProPKGameUserTeammateResult.prototype.toJSON = function toJSON() {
        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
    };

    /**
     * MSGID enum.
     * @name ProPKGameUserTeammateResult.MSGID
     * @enum {string}
     * @property {number} ID=2249 ID value
     */
    ProPKGameUserTeammateResult.MSGID = (function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[2249] = "ID"] = 2249;
        return values;
    })();

    return ProPKGameUserTeammateResult;
})();

module.exports = $root;
